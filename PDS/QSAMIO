         PRINT GEN
         TITLE '***** SUBROUTINE TO DO QSAM I/O BELOW THE LINE ***'
QSAMIO   CSECT
QSAMIO   AMODE 31
QSAMIO   RMODE 24
***********************************************************************
* ISSUES QSAM OPENS, GETS, PUTS, AND CLOSES FOR CALLERS WHO MAY       *
* RESIDE ABOVE OR BELOW THE 16M LINE. THIS ROUTINE MUST RESIDE BELOW  *
* THE LINE (RMODE=24), BUT EXECUTES IN 31-BIT ADDRESS MODE (AMODE=31).*
* ON COMPLETION, THIS ROUTINE RETURNS TO THE CALLER IN THE SAME       *
* ADDRESSING MODE AS IT WAS ENTERED. QSAMIO IS SERIALLY REUSABLE, AND *
* MAY BE CALLED TO HANDLE MULTIPLE FILES SIMULTANEOUSLY IN A SINGLE   *
* RUN SO LONG AS EACH FILE HAS ITS OWN PARAMETER AREA.                *
*                                                                     *
* CALLING: THE CALLER FILLS IN THE PARAMETER AREA DESCRIBED BY THE    *
* PARMFLD DSECT BEFORE CALLING. THE CALLER MUST PLACE BINARY ZEROS    *
* IN THE PRMDCBA FIELD BEFORE THE FIRST CALL, AND MUST LEAVE IT  AS-IS*
* FROM THAT TIME UNTIL AFTER THE FILE IS CLOSED, AS IT WILL HOLD THE  *
* ADDRESS OF THE DCB CREATED FOR THE FILE. THE PARAMETER AREA CANNOT  *
* BE REUSED FOR ANOTHER FILE UNTIL THE PREVIOUS FILE IS CLOSED. IN    *
* ADDITION TO THE PARAMETER AREA, THE CALLER MUST PASS THE ADDRESS OF *
* THE RECORD AREA AS THE SECOND PARAMETER.                            *
*                                                                     *
* NORMALLY, THE ONLY FIELD THAT SHOULD BE CHANGED IN THE PARAMETER    *
* AREA FOR A FILE WOULD BE SETTING THE PRMREQ FIELD TO 'C' TO CLOSE.  *
* FOR UNDEFINED OUTPUT RECORDS (RECFM=U), THE PRMULENG FIELD MUST BE  *
* SET TO THE LENGTH OF THE RECORD BEING WRITTEN FOR EACH WRITE CALL.  *
*                                                                     *
* THE FILE WILL BE OPENED AUTOMATICALLY ON THE FIRST GET OR PUT CALL, *
* SO NO SEPARATE OPEN CALL IS PROVIDED.                               *
*                                                                     *
* FOR OUTPUT FILES HAVING VARIABLE SIZED RECORDS, THE LENGTH FIELD    *
* FIELD IN THE PARAMETER AREA MUST BE THE LENGTH OF THE LONGEST RECORD*
* TO BE WRITTEN.                                                      *
*                                                                     *
* FOR OUTPUT FILES HAVING VARIABLE SIZED RECORDS, THE RECORD AREA     *
* MUST CONTAIN THE RECORD TO BE WRITTEN INCLUDING THE RECORD DESCRIP- *
* TOR WORD (RDW). THE RDW MUST BE A TWO-BYTE BINARY LENGTH FOLLOWED   *
* BY A TWO-BYTE FIELD OF BINARY ZEROS FOLLOWED BY THE DATA RECORD.    *
* THE VALUE CONTAINED IN THE RDW LENGTH MUST BE EQUAL TO THE LENGTH   *
* OF THE DATA RECORD PLUS 4 BYTES FOR THE RDW.                        *
*                                                                     *
* MOVE MODE IS USED FOR BOTH READS AND WRITES USING THE RECORD AREA   *
* ADDRESS PROVIDED BY THE CALLER ON EACH CALL. DATA RECORDS ARE READ  *
* INTO, OR WRITTEN FROM, THE CALLER'S RECORD AREA. IT IS THE CALLER'S *
* RESPONSIBILITY TO PROVIDE AN AREA LARGE ENOUGH TO CONTAIN THE       *
* LONGEST RECORD THAT WILL EVER BE READ.                              *
*                                                                     *
* THE PRMRETCD FLAG WILL CONTAIN X'00' ON RETURN TO THE CALLER FOR A  *
* NORMAL, SUCCESSFUL COMPLETION OF THE REQUESTED ACTION.              *
*                                                                     *
* AT END OF FILE FOR AN INPUT FOR AN INPUT FILE, THE PRMRETCD FLAG    *
* WILL BE X'04'.                                                      *
*                                                                     *
* WHEN ERRORS OCCUR DURING ANY CALL, PRMRETCD WILL BE X'08' AND AN    *
* EXPLANATORY ERROR MESSAGE WILL BE IN THE PRMERMSG FIELD.            *
* AUTHOR R THORNTON JUL 2001                                          *
*                                                                     *
***********************************************************************
         STM   R14,R12,12(R13)         SAVE CALLERS REGS
         LR    R3,R15                  COPY BASE REG
         USING QSAMIO,R3
         LA    R15,SAVE                POINT TO SAVE
         ST    R15,8(R13)              SET LSA
         ST    R13,SAVE+4              SET FSA
         LR    R13,R15                 SET UP SAVE POINTER
         SR    R2,R2                   CLEAR FOR AMODE INSERT
         ICM   R1,15,*+6               SAVE CALLERS AMODE
         BSM   R2,R1                      AND GET INTO
         DC    X'80',AL3(*+3)                 31-BIT ADDRESSING MODE
         L     R1,4(R13)               POINT TO CALLER'S SAVE AREA
         NI    12(R1),X'7F'            TURN OF HI BIT
         LTR   R2,R2                   WAS CALLER IN 24-BIT AMODE?
         BNM   PARMPTR                 YES
         OI    12(R1),X'80'            NO, SET RETURN FOR 31-BIT AMODE
PARMPTR  L     R6,24(R1)               GET CALLER'S REG1
         MVC   RECADR,4(R6)            SAVE CALLER'S RECORD ADDRESS
         L     R6,0(R6)                POINT TO PARAMETER LIST
         ST    R6,SAVER6               SAVE PARM FIELD ADDRESS
         USING PARMFLD,R6
         MVI   PRMRETCD,0              CLEAR RETURN CODE
         MVC   PRMERMSG,BLANKS         CLEAR ERROR MESSAGE AREA
         B     MAINLINE                START PROCESSING
SAVE     DS    18F                     SAVE AREA
***********************************************************************
*        MAINLINE ROUTINE: DIRECT PROCESSING PER CALLER'S REQUEST     *
***********************************************************************
         USING IHADCB,R8
MAINLINE ICM   R8,15,PRMDCBA           POINT TO THE DCB FOR THE FILE
         BNZ   MLCKREQ                 BRANCH IF ALREADY OPEN
         BAS   R14,OPENFIL             GO OPEN THE FILE
MLCKREQ  CLI   PRMREQ,C'R'             THIS A READ REQUEST?
         BE    GETREQ                  YES
         CLI   PRMREQ,C'W'             THIS A WRITE REQUEST?
         BE    PUTREQ                  YES
         CLI   PRMREQ,C'C'             THIS A CLOSE REQUEST?
         BE    CLOSEREQ                YES
         MVI   PRMRETCD,8              SET ERROR FLAG
         MVC   BADREQ(1),PRMREQ        MOVE REQUEST CODE TO MESSAGE
         MVC   PRMERMSG(L'BADREQ),BADREQ MOVE ERROR MESSAGE
         B     RETURN                  GO BACK TO CALLER
***********************************************************************
*        GET NEXT RECORD FROM THE FILE AND RETURN ITS ADDRESS TO THE  *
*        CALLER, IF SUCCESSFUL. FIRST, OPEN THE FILE IF IT IS NOT     *
*        ALREADY OPEN.                                                *
***********************************************************************
GETREQ   GET   ((R8))                  READ NEXT RECORD
         LH    R11,DCBLRECL            GET LENGTH OF RECORD READ
         CLI   PRMRECFM,C'V'           THIS A VARIABLE FILE?
         BNE   GRCOPY1                 NO
         LH    R11,0(R1)               YES, GET LENGTH FROM RECORD RDW
GRCOPY1  LR    R10,R1                  COPY RECORD SEND ADDRESS
         L     R0,RECADR               GET CALLER'S RECORD AREA
         LR    R1,R11                  COPY LENGTH
         MVCL  R0,R10                  MOVE RECORD TO CALLER'S AREA
         CLI   PRMRECFM,C'U'           UNDEFINED RECORDS?
         BNE   RETURN                  NO
         MVC   PRMULENG,DCBLRECL       YES, MOVE LENGTH TO CALLER
         B     RETURN                  GO BACK TO CALLER
***********************************************************************
*        WRITE CALLER'S RECORD TO THE FILE. FIRST OPEN THE FILE IF IT *
*        IS NOT ALREADY OPEN.                                         *
***********************************************************************
PUTREQ   L     R10,RECADR              PICK UP CALLER'S RECORD ADDRESS
         LH    R11,DCBLRECL            GET LRECL FROM DCB
         CLI   PRMRECFM,C'V'           THIS A VARIABLE FILE?
         BNE   PUTPTR                  NO
         LH    R11,0(R10)              YES, GET LENGTH FROM RECORD RDW
PUTPTR   PUT   ((R8))                  GET POINTER TO
         LR    R0,R1                       BUFFER FOR RECORD
         LR    R1,R11                  COPY LENGTH FOR MOVE
         MVCL  R0,R10                  MOVE RECORD TO FILE BUFFER
         B     RETURN                  RETURN TO CALLER
***********************************************************************
*        CLOSE THE FILE. RETURN ERROR IF THE FILE IS NOT OPEN.        *
***********************************************************************
CLOSEREQ LTR   R8,R8                   IS THERE A DCB?
         BNZ   CLOSEIT                 YES
         MVI   PRMRETCD,8              NO, SET ERROR FLAG
         MVC   NOTOPEN+5(8),PRMDDNAM   DDNAME TO MESSAGE
         MVC   PRMERMSG(L'NOTOPEN),NOTOPEN MOVE IN MESSAGE
         B     RETURN                  RETURN TO CALLER
CLOSEIT  CLOSE ((R8))                  CLOSE THE FILE
         FREEPOOL 0(R8)                FREE THE BUFFER POOL
CLFREE   STORAGE RELEASE,ADDR=(R8),LENGTH=DCBEND-QSAMDCB FREE AREA
         B     RETURN                  GO BACK TO CALLER
***********************************************************************
*        OPEN THE FILE. OBTAIN STORAGE FOR A NEW FILE BLOCK AND       *
*        INSERT IT IN THE FILE BLOCK QUEUE. MOVE A NULL DCB INTO THE  *
*        GOTTEN STORAGE AND SPECIALIZE IT USING THE CALLER'S DATA.    *
*        OPEN THE FILE. IF SUCCESSFUL, RETURN TO THE GET OR PUT, ELSE *
*        RETURN TO THE CALLER WITH AN ERROR.                          *
***********************************************************************
OPENFIL  ST    R14,OFR14               SAVE RETURN ADDRESS
         STORAGE OBTAIN,ADDR=(R8),LENGTH=DCBEND-QSAMDCB,LOC=BELOW
         ST    R8,PRMDCBA              SAVE THE DCB POINTER
         MVC   0(DCBEND-QSAMDCB,R8),QSAMDCB MOVE DCB TO GOTTEN
         MVC   DCBDDNAM,PRMDDNAM       MOVE DDNAME TO DCB
         MVC   DCBMACR,=X'4800'        ASSUME GET (LOCATE)
         CLI   PRMREQ,C'R'             IS IT A GET?
         BE    OFLRECL                 YES
         MVC   DCBMACR,=X'0048'        NO, SET TO PUT (LOCATE)
OFLRECL  MVC   DCBLRECL,PRMLRECL       LRECL TO DCB
         MVC   DCBBLKSI,PRMBLKSI       BLKSIZE TO DCB
         MVC   DCBBUFNO,PRMBUFNO       BUFNO TO DCB
         LA    R1,RECFMTBL             POINT TO RECFM TABLE
OFLRCHK  CLC   PRMRECFM,0(R1)          FOUND THE RECFM?
         BE    OFRECFM                 YES
         LA    R1,5(R1)                NO, STEP TO NEXT ENTRY
         CLI   0(R1),X'FF'             END OF TABLE?
         BNE   OFLRCHK                 NO, CONTINUE SEARCH
         MVI   PRMRETCD,8              SET ERROR FLAG
         MVC   BADRECFM(4),PRMRECFM    RECFM TO MESSAGE
         MVC   BADRECFM+35(8),PRMDDNAM DDNAME TO MESSAGE
         MVC   PRMERMSG(L'BADRECFM),BADRECFM MOVE IN ERROR MESSAGE
         B     RETURN                  RETURN WITH ERROR
OFRECFM  MVC   DCBRECFM,4(R1)          MOVE IN TABLE RECFM
         CLI   PRMREQ,C'R'             THIS A GET REQUEST?
         BE    OFINPUT                 YES
         OPEN  ((R8),OUTPUT)           NO, OPEN FOR OUTPUT
         B     OFTEST                  CONTINUE
OFINPUT  OPEN  ((R8),INPUT)            OPEN FILE FOR INPUT
OFTEST   TM    DCBOFLGS,X'10'          WAS OPEN SUCCESSFUL?
         BO    OFFDBK                  YES
         MVI   PRMRETCD,8              NO, SET ERROR FLAG
         MVC   OPENERR+21(8),PRMDDNAM  DDNAME TO MESSAGE
         MVC   PRMERMSG(L'OPENERR),OPENERR MOVE ERROR MESSAGE
         B     RETURN                  RETURN WITH ERROR
OFFDBK   MVC   PRMLRECL,DCBLRECL       PASS BACK LRECL
         MVC   PRMBLKSI,DCBBLKSI       PASS BACK BLKSIZE
         LA    R1,RECFMTBL             POINT TO RECFM TABLE
OFCKRFM  CLC   4(1,R1),DCBRECFM        FOUND THE RECFM?
         BE    OFFDRFM                 YES
         LA    R1,5(R1)                NO, STEP TO NEXT ENTRY
         CLI   0(R1),X'FF'             END OF TABLE?
         BNE   OFCKRFM                 NO, CONTINUE SEARCH
         B     OFXIT                   NOT FOUND, JUST EXIT
OFFDRFM  MVC   PRMRECFM,0(R1)          FOUND THE RECFM?
OFXIT    L     R14,OFR14               GET RETURN ADDRESS
         BR    R14                     EXIT
OFR14    DC    A(0)                    RETURN ADDRESS
***********************************************************************
*    THIS ROUTINE IS EXECUTED WHEN END-OF-FILE HAS BEEN REACHED ON AN *
*    OPEN QSAM FILE.  THE RETURN CODE IS SET TO 4 AND CONTROL IS      *
*    RETURNED TO THE CALLER.                                          *
***********************************************************************
EODADRTN MVI   PRMRETCD,4              INDICATE END-OF-FILE
         B     RETURN                  RETURN TO CALLER
***********************************************************************
*        RETURN TO CALLER                                             *
***********************************************************************
RETURN   L     R13,4(R13)              GET CALLER'S SAVE ADDRESS
         LM    R14,R12,12(R13)         GET CALLER'S REGISTERS
         SR    R15,R15                 ZERO RETURN CODE
         BSM   0,R14                   RETURN TO CALLER
***********************************************************************
*    THIS ROUTINE IS EXECUTED WHEN AN UNRECOVERABLE I/O ERROR HAS     *
*    BEEN ENCOUNTERED DURING AN I/O REQUEST TO A QSAM FILE. THE ERROR *
*    FLAG IS SET, AND DESCRIPTIVE ERROR MESSAGE RETURNED TO THE CALLER*
***********************************************************************
SYNADRTN SYNADAF ACSMETH=QSAM,         SYNAD ERROR ANALYSIS FUNCTION   X
               PARM1=(1),              QSAM STATUS INDICATORS          X
               PARM2=(0)               QSAM DCB
         MVC   PRMERMSG,0(R1)          GET SYNADAF ANALYSIS MESSAGE
         MVI   PRMRETCD,8              INFORM CALLER OF RROR
         SYNADRLS                      RELEASE SYNADAF BUFFERS
         B     RETURN                  RETURN TO CALLER
***********************************************************************
*        WORKING STORAGE FIELDS                                       *
***********************************************************************
SAVER6   DC    A(0)                    ADDRESS OF CALLER PASSED PARMS
SAVER8   DC    A(0)                    ADDRESS OF CURRENT DCB
RECADR   DC    A(0)                    CALLER'S RECORD AREA ADDRESS
ZERO     DC    F'0'                    CONSTANT ZERO
NOTOPEN  DC    C'FILE XXXXXXXX CANNOT BE CLOSED, IT IS NOT IN USE.'
BADREQ   DC    C'X IS AN INVALID REQUEST CODE. USE ONLY R, W, OR C.'
BLANKS   DC    CL128' '                BLANKS
OPENERR  DC    C'OPEN FAILED FOR FILE XXXXXXXX. CHECK DDNAME IN JCL.'
BADRECFM DC    C'XXXX IS NOT A VALID RECFM FOR FILE XXXXXXXX.'
RECFMTBL DS    0CL5                    RECFM TABLE
         DC    CL4'F   ',XL1'80'
         DC    CL4'FA  ',XL1'84'
         DC    CL4'FM  ',XL1'82'
         DC    CL4'FB  ',XL1'90'
         DC    CL4'FBA ',XL1'94'
         DC    CL4'FBM ',XL1'92'
         DC    CL4'FBS ',XL1'98'
         DC    CL4'FBSA',XL1'9C'
         DC    CL4'FBSM',XL1'9A'
         DC    CL4'V   ',XL1'40'
         DC    CL4'VA  ',XL1'44'
         DC    CL4'VM  ',XL1'42'
         DC    CL4'VB  ',XL1'50'
         DC    CL4'VBA ',XL1'54'
         DC    CL4'VBM ',XL1'52'
         DC    CL4'VBS ',XL1'58'
         DC    CL4'VBSA',XL1'5C'
         DC    CL4'VBSM',XL1'5A'
         DC    CL4'U   ',XL1'C0'
         DC    CL4'    ',XL1'00'
         DC    5X'FF'
***********************************************************************
*        QSAM DCB                                                     *
***********************************************************************
QSAMDCB  DCB   DSORG=PS,               PHYSICAL SEQUENTIAL ORG         *
               MACRF=(GL,PL),          GET LOCATE/ PUT LOCATE          *
               DDNAME=DUMMY,           DDNAME SUPPLIED LATER           *
               SYNAD=SYNADRTN,         SYNAD ROUTINE ADDRESS           *
               EODAD=EODADRTN          END OF FILE ADDRESS
DCBEND   EQU   *
***********************************************************************
*             PARAMETER AREA PASSED BY CALLER                         *
*                 MUST BE FULLWORD ALIGNED                            *
***********************************************************************
PARMFLD  DSECT ,                       USER PASSED PARAMETER AREA
PRMREQ   DS    CL1                       REQUEST CODE: R=GET, W=PUT,
*                                                      C=CLOSE
PRMRETCD DS    XL1                       RETURN CODE: 00=SUCCESS,
*                                               04=EOF, 08=ERROR
PRMDDNAM DS    CL8                       DDNAME FOR THE FILE
PRMLRECL DS    H                         LRECL OR ZEROS
PRMDCBA  DS    A                         FILE BLOCK ADDRESS
PRMBLKSI DS    H                         BLKSIZE OR ZERO
PRMULENG DS    H                         LENGTH FOR UNDEFINED RECORDS
PRMRECFM DS    CL4                       RECFM OR BLANKS
PRMBUFNO DS    XL1                       BUFNO OR ZERO
PRMERMSG DS    CL128                     ERROR MESSAGE WHEN RC=8
***********************************************************************
*        DCB DESCRIPTION                                              *
***********************************************************************
         DCBD  DSORG=(PS),DEVD=(DA,TA)
***********************************************************************
*        REGISTER EQUATES                                             *
***********************************************************************
QSAMIO   CSECT
         LTORG
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
