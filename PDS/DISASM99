         TITLE '*** DISASM99: PROCESS DISASSEMBLY SOURCE ***'
***********************************************************************
* READ SOURCE CODE OUTPUT TO THE DISPUNCH FILE BY THE DISASSEMBLER.   *
* THE ORIGINAL SOURCE CODE FILE IS READ AND COPIED TO OUTPUT WITH     *
* THE FOLLOWING MODIFICATIONS:                                        *
*                                                                     *
* . JUST BEFORE THE END STATEMENT, A SET OF 16 REGISTER EQUATES ARE   *
*   INSERTED.                                                         *
* . STATEMENTS WHICH ARE MERELY LABELS (DS    0C) ARE REMOVED AND THE *
*   LABEL MOVED TO THE FOLLOWING STATEMENT.                           *
* . MULTIPLE CONSECUTIVE DC STATEMENTS DEFINING LONG STRINGS OF BLANKS*
*   OR HEX ZEROS ARE COMBINED INTO A SINGLE STATEMENT.                *
* . SINGLE BYTE CHARACTER VALUES SANDWICHED BETWEEN HEX VALUES ARE    *
*   CONVERTED TO HEX.                                                 *
* . SINGLE BYTE HEX VALUES SANDWICHED BETWEEN CHARACTER VALUES ARE    *
*   CONVERTED TO CHARACTER IF THEY ARE PRINTABLE (EXCEPT APOSTROPHE   *
*   WHICH IS LEFT IN HEX).                                            *
* . AN ATTEMPT IS MADE TO MAKE A SINGLE DC STATEMENT OF SEVERAL SMALL *
*   CONSTANTS UNDER THE SAME LABEL.                                   *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
* AUTHOR R THORNTON JAN 1994                                          *
***********************************************************************
*
DISASM99 SVLNK R3,R4
DISASM99 AMODE 24
DISASM99 RMODE 24
***********************************************************************
*        OPEN FILES                                                   *
***********************************************************************
OPENS    OPEN  (OUTPUT1,OUTPUT,        OPEN FILES                      X
               INPUT1) OPEN FILES
         SR    R12,R12                 CLEAR COUNTER
COUNT    GET   INPUT1,WORK             READ A RECORD
         A     R12,F1                  INCREMENT COUNTER
         B     COUNT                   COUNT TOTAL INPUT RECORDS
GETSTRG  CLOSE INPUT1                  CLOSE INPUT FILE
         MH    R12,H80                 COMPUTE STORAGE LENGTH
         STORAGE OBTAIN,LENGTH=(12)    GET BUFFER STORAGE
         LR    R12,R1                  COPY BUFFER ADDRESS
         USING BUFFNTRY,R12
         ST    R12,STRTBUFF            SAVE GOTTEN STORAGE ADDRESS
         ST    R0,SIZEBUFF             SAVE BUFFER SIZE
         AR    R1,R0                   COMPUTE END OF BUFFER ADDRESS
         ST    R1,ENDBUFF              AND STORE IT
         OPEN  INPUT1                  RE-OPEN INPUT FILE
LOADASM  GET   INPUT1,0(R12)           READ SOURCE RECORD INTO BUFFER
         CLC   BUFFMNEM,=CL5'REQU'     FOUND REQU MACRO?
         BNE   LDADV                   NO
         MVI   REQUSW,1                YES, SET SWITCH
LDADV    LA    R12,80(R12)             ADVANCE TO NEXT BUFFER SLOT
         B     LOADASM                 LOOP TO LOAD RECORDS
EOF      CLI   EOFSW,0                 FIRST TIME HERE?
         BNE   MAINLINE                NO
         MVI   EOFSW,1                 RESET FIRST TIME SWITCH
         B     GETSTRG                 GO GET BUFFER STORAGE
***********************************************************************
*             MAINLINE ROUTINE                                        *
***********************************************************************
MAINLINE BAS   R9,RECODE1S             RECODE SINGLE BYTE DC'S
         BAS   R9,JOINDCS              JOIN CONSECUTIVE DC'S
         BAS   R9,GETANSVC             PROCESS SVC INSTRUCTIONS
         BAS   R9,GETADS               PROCESS DS INSTRUCTIONS
         BAS   R9,GETEQU               PROCESS EQU INSTRUCTIONS
         BAS   R9,GETADC               PROCESS DC INSTRUCTIONS
         B     EOJ                     FINISHED PROCESSING
***********************************************************************
* JOIN MULTIPLE CONSECUTIVE DC'S FOR THE SAME TYPE (C, X, OR F) INTO A*
* SINGLE DC OF UP TO 50 BYTES.                                        *
***********************************************************************
JOINDCS  ST    R9,JD9                  SAVE RETURN ADDRESS
         L     R12,STRTBUFF            POINT TO FIRST RECORD IN BUFFER
JDCKND   C     R12,ENDBUFF             END OF BUFFER?
         BNL   JDXIT                   YES, EXIT
         CLC   BUFFMNEM,=CL5'DC   '    THIS A DC STATEMENT?
         BNE   JDSTEP                  NO
         CLI   BUFFLABL,C' '           THIS STATEMENT HAS A LABEL?
         BNE   JDSTEP                  YES
         CLI   BUFFLABL+80,C' '        NEXT STATEMENT HAS A LABEL?
         BNE   JDSTEP                  YES
         CLC   BUFFOPND(2),=CL2'C'''   CHARACTER CONSTANT?
         BE    JDCHAR                  YES
         CLC   BUFFOPND(2),=CL2'X'''   HEX CONSTANT?
         BE    JDHEX                   NO
         CLC   BUFFOPND(4),=CL4'F''0''' FULLWORD CONSTANT ZERO?
         BNE   JDSTEP                  NO
JDFULL   CLC   BUFFOPND+80(4),=CL4'F''0''' NEXT ALSO FULLWORD 0?
         BNE   JDSTEP                  NO
         BAS   R9,JOINFULL             YES, GO JOIN THEM
         B     JDSTEP                  CONTINUE
JDHEX    CLC   BUFFOPND+80(2),=CL2'X''' NEXT RECORD ALSO HEX?
         BNE   JDSTEP                  NO
         BAS   R9,JOINHEX              YES, GO JOIN THEM
         B     JDSTEP                  CONTINUE
JDCHAR   CLC   BUFFOPND+80(2),=CL2'C''' NEXT RECORD ALSO CHARACTER?
         BNE   JDSTEP                  NO
         BAS   R9,JOINCHAR             YES, GO JOIN THEM
JDSTEP   LA    R12,80(R12)             STEP TO NEXT RECORD
         B     JDCKND                  CONTINUE
JDXIT    L     R9,JD9                  GET RETURN ADDRESS
         BR    R9                      RETURN
***********************************************************************
* JOIN MULTIPLE CONSECUTIVE CHARACTER TYPE CONSTANTS UNDER THE SAME   *
* LABEL INTO A SINGLE DC OF UP TO 50 BYTES.                           *
***********************************************************************
JOINCHAR ST    R9,JC9                  SAVE RETURN ADDRESS
         ST    R12,JC12                SAVE REG12
         LA    R15,BUFFOPND+55         POINT TO END OF OPERAND
         LA    R1,BUFFOPND+3           EARLIEST POSSIBLE END
JCFINDQT CLI   0(R1),C''''             FOUND ENDING QUOTE?
         BE    JCCKNEXT                YES
         LA    R1,1(R1)                NO, ADVANCE 1 BYTE
         B     JCFINDQT                CONTINUE
JCCKNEXT CLC   BUFFMNEM+80,=CL5'DC   ' NEXT RECORD IS A DC?
         BNE   JCXIT                   NO
         CLC   BUFFOPND+80(2),=CL2'C''' NEXT RECORD IS CHAR TYPE
         BNE   JCXIT                   NO
         CLI   BUFFLABL+80,C' '        NEXT RECORD HAS A LABEL
         BNE   JCXIT                   YES
JCCKEND  CR    R1,R15                  THIS DC IS FULL?
         BNL   JCXIT                   YES
         CLI   BUFFOPND+82,C''''       NEXT RECORD DC EXHAUSTED?
         BE    JCNULL                  YES
         MVC   0(1,R1),BUFFOPND+82     NO, MOVE CHARACTER BACK
         LA    R1,1(R1)                ADVANCE IN CURRENT RECORD
*        MVI   0(R1),C''''             SET NEW ENDING QUOTE
         MVC   0(2,R1),=C''' '         SET NEW ENDING QUOTE-BLANK
         MVC   BUFFOPND+82(10),BUFFOPND+83 SHIFT NEXT DC VALUE BACK 1
         MVI   BUFFOPND+90,C' '        CLEAR POSSIBLE TRASH
         B     JCCKEND                 CONTINUE
JCNULL   ST    R1,JC1                  SAVE REG1 ACROSS PERFORM
         LA    R1,80(R12)              POINT TO EMPTY RECORD
         BAS   R9,SCRUNCH              SCRUNCH OUT EMPTY RECORD
         L     R1,JC1                  RESTORE REG1
         B     JCCKNEXT                CONTINUE
JCXIT    L     R9,JC9                  GET RETURN ADDRESS
         L     R12,JC12                RESTORE REG12
         BR    R9
***********************************************************************
* JOIN MULTIPLE CONSECUTIVE HEX TYPE CONSTANTS UNDER THE SAME LABEL   *
* INTO A SINGLE DC OF UP TO 25 BYTES.                                 *
***********************************************************************
JOINHEX  ST    R9,JH9                  SAVE RETURN ADDRESS
         ST    R12,JH12                SAVE REG12
         LA    R15,BUFFOPND+53         POINT TO END OF OPERAND
         LA    R1,BUFFOPND+4           EARLIEST POSSIBLE END
JHFINDQT CLI   0(R1),C''''             FOUND ENDING QUOTE?
         BE    JHCKNEXT                YES
         LA    R1,2(R1)                NO, ADVANCE 2 BYTES
         B     JHFINDQT                CONTINUE
JHCKNEXT CLC   BUFFMNEM+80,=CL5'DC   '  NEXT RECORD IS A DC?
         BNE   JHXIT                   NO
         CLC   BUFFOPND+80(2),=CL2'X''' NEXT RECORD IS CHAR TYPE
         BNE   JHXIT                   NO
         CLI   BUFFLABL+80,C' '        NEXT RECORD HAS A LABEL
         BNE   JHXIT                   YES
JHCKEND  CR    R1,R15                  THIS DC IS FULL?
         BNL   JHXIT                   YES
         CLI   BUFFOPND+82,C''''       NEXT RECORD DC EXHAUSTED?
         BE    JHNULL                  YES
         MVC   0(2,R1),BUFFOPND+82     NO, MOVE HEX BYTE BACK
         LA    R1,2(R1)                ADVANCE IN CURRENT RECORD
*        MVI   0(R1),C''''             SET NEW ENDING QUOTE
         MVC   0(2,R1),=C''' '         SET NEW ENDING QUOTE-BLANK
         MVC   BUFFOPND+82(15),BUFFOPND+84 SHIFT NEXT DC VALUE BACK 1
         MVC   BUFFOPND+96(2),BLANKS   CLEAR POSSIBLE TRASH
         B     JHCKEND                 CONTINUE
JHNULL   ST    R1,JH1                  SAVE REG1 ACROSS PERFORM
         LA    R1,80(R12)              POINT TO EMPTY RECORD
         BAS   R9,SCRUNCH              SCRUNCH OUT EMPTY RECORD
         L     R1,JH1                  RESTORE REG1
         B     JHCKNEXT                CONTINUE
JHXIT    L     R9,JH9                  GET RETURN ADDRESS
         L     R12,JH12                RESTORE REG12
         BR    R9
***********************************************************************
* JOIN MULTIPLE CONSECUTIVE FULLWORD CONSTANTS OF 0 INTO A SINGLE     *
* STATEMENT.                                                          *
***********************************************************************
JOINFULL ST    R9,JF9                  SAVE RETURN ADDRESS
         ZAP   FULLCNT,P2              BEGIN WITH TWO FULLWORDS
JFCKNEXT LA    R1,80(R12)              POINT TO EMPTY RECORD
         BAS   R9,SCRUNCH              SCRUNCH OUT EMPTY RECORD
         CLC   BUFFMNEM+80,=CL5'DC   '  NEXT RECORD IS A DC?
         BNE   JFFINI                  NO
         CLC   BUFFOPND+80(4),=CL4'F''0''' NEXT RECORD IS F'0'?
         BNE   JFFINI                  NO
         CLI   BUFFLABL+80,C' '        NEXT RECORD HAS A LABEL
         BNE   JFFINI                  YES
         CP    FULLCNT,P256            COUNTER FULL?
         BNL   JFFINI                  YES
         AP    FULLCNT,P1              NO, INCREMENT FULLWORD COUNTER
         B     JFCKNEXT                CONTINUE
JFFINI   UNPK  FULLNBR,FULLCNT         UNPACK TOTAL FULLWORDS
         OI    FULLNBR+2,C'0'          CLEAR SIGN
         CLI   FULLNBR,C'0'            LEADING ZERO?
         BNE   JFF3                    NO
         CLI   FULLNBR+1,C'0'          TWO LEADING ZEROS?
         BNE   JFF2                    NO
         MVC   BUFFOPND(5),FULLNBR+2   YES, MOVE SINGLE DIGIT
         B     JFXIT                   CONTINUE
JFF2     MVC   BUFFOPND(6),FULLNBR+1   MOVE 2 DIGITS
         B     JFXIT                   CONTINUE
JFF3     MVC   BUFFOPND(7),FULLNBR     MOVE 3 DIGITS
JFXIT    L     R9,JF9                  GET RETURN ADDRESS
         BR    R9
***********************************************************************
* RECODE SINGLE-BYTE DC'S: WHEN A SINGLE-BYTE CHARACTER IS BETWEEN    *
* TWO HEX CONSTANTS, OR A SINGLE-BYTE HEX CONSTANT IS BETWEEN TWO     *
* CHARACTER FIELDS, THE SINGLE BYTE IS RECODED TO MATCH THE OUTER TWO *
***********************************************************************
RECODE1S ST    R9,R19                  SAVE RETURN ADDRESS
         L     R12,STRTBUFF            POINT TO FIRST RECORD IN BUFFER
R1CKND   C     R12,ENDBUFF             END OF BUFFER?
         BNL   R1XIT                   YES
         CLC   BUFFMNEM,=CL5'DC   '    THIS A DC INSTRUCTION?
         BNE   R1STEP                  NO
         CLC   BUFFMNEM+80,=CL5'DC   ' NEXT IS ALSO A DC?
         BNE   R1STEP                  NO
         CLC   BUFFMNEM+160,=CL5'DC   ' AND THE FOLLOWING ALSO A DC?
         BNE   R1STEP                  NO
         CLC   BUFFOPND(1),BUFFOPND+80 1ST AND 2ND SAME TYPE?
         BE    R1STEP                  YES
         CLI   BUFFLABL+80,C' '        2ND HAS A LABEL?
         BNE   R1STEP                  YES
         CLC   BUFFOPND+80(1),BUFFOPND+160 2ND AND 3RD SAME TYPE?
         BE    R1STEP                  YES
         CLI   BUFFLABL+160,C' '       3RD HAS A LABEL?
         BNE   R1STEP                  YES
         CLI   BUFFOPND+80,C'C'        2ND IS CHARACTER?
         BNE   R1CKHEX                 NO
         CLI   BUFFOPND,C'X'           1ST IS HEX?
         BNE   R1STEP                  NO
         CLI   BUFFOPND+160,C'X'       3RD IS HEX?
         BNE   R1STEP                  NO
         CLI   BUFFOPND+83,C''''       2ND DEFINES ONE CHARACTER?
         BNE   R1STEP                  NO
         LA    R12,80(R12)             YES, ADVANCE TO 2ND RECORD
         BAS   R9,RECODECX             RECODE C'C' TO X'XX'
         B     R1STEP                  CONTINUE
R1CKHEX  CLI   BUFFOPND+80,C'X'        2ND IS HEX?
         BNE   R1STEP                  NO
         CLI   BUFFOPND,C'C'           1ST IS CHAR?
         BNE   R1STEP                  NO
         CLI   BUFFOPND+160,C'C'       3RD IS CHAR?
         BNE   R1STEP                  NO
         CLI   BUFFOPND+84,C''''       2ND DEFINES ONE BYTE?
         BNE   R1STEP                  NO
         LA    R12,80(R12)             YES, ADVANCE TO 2ND RECORD
         BAS   R9,RECODEXC             RECODE HEX TO CHAR
R1STEP   LA    R12,80(R12)             STEP TO NEXT RECORD IN BUFFER
         B     R1CKND                  CONTINUE
R1XIT    L     R9,R19                  PICK UP RETURN ADDRESS
         BR    R9                      RETURN
***********************************************************************
* RECODE A SINGLE BYTE HEX TO A SINGLE BYTE CHARACTER                 *
***********************************************************************
RECODEXC MVC   DBLWD+6(2),BUFFOPND+2    COPY THE CHARFORM HEX VALUE
         TR    DBLWD+6(2),HALFHEX       TRANSLATE TO MAKE HEX
         PACK  DBLWD(2),DBLWD+6(3)      PACK TO FINISH MAKING HEX
         TRT   DBLWD(1),VALCHAR         IS IT A PRINTABLE CHARACTER?
         BNZR  R9                       NO
         MVC   BUFFOPND,BLANKS          YES, CLEAR CURRENT DEFINITION
         MVC   BUFFOPND(2),=CL2'C'''    CHARACTER PREFIX
         MVC   BUFFOPND+2(1),DBLWD      MOVE THE CHARACTER
         MVI   BUFFOPND+3,C''''         MOVE ENDING QUOTE
         BR    R9
***********************************************************************
* RECODE A SINGLE BYTE CHARACTER TO A SINGLE BYTE HEX                 *
***********************************************************************
RECODECX UNPK  DBLWD(3),BUFFOPND+2(2)   UNPACK TO MAKE HEX
         TR    DBLWD(2),TRHEX-C'0'      TRANSLATE TO FINISH HEX
         MVC   BUFFOPND,BLANKS          YES, CLEAR CURRENT DEFINITION
         MVC   BUFFOPND(2),=CL2'X'''    CHARACTER PREFIX
         MVC   BUFFOPND+2(2),DBLWD      MOVE THE 2 HEX DIGITS
         MVI   BUFFOPND+4,C''''         MOVE ENDING QUOTE
         BR    R9
***********************************************************************
*            PROCESS EQU INSTRUCTIONS                                 *
***********************************************************************
GETEQU   ST    R9,EQ9                  SAVE RETURN ADDRESS
         L     R12,STRTBUFF            POINT TO BUFFER START
EQCKEND  C     R12,ENDBUFF             END OF BUFFER?
         BNL   EQXIT                   YES
         CLC   BUFFMNEM,=CL5'EQU'      FOUND AN EQU?
         BNE   EQSTEP                  NO
         CLC   BUFFOPND(3),=CL3'*  '   JUST A LABEL?
         BNE   EQSTEP                  NO
         CLC   BUFFLABL+80,BLANKS      LABEL ON NEXT STATEMENT BLANK?
         BNE   EQSTEP                  NO
         MVC   BUFFLABL+80,BUFFLABL    YES, COPY LABEL FORWARD
         LR    R1,R12                  POINT TO EMPTY RECORD
         BAS   R9,SCRUNCH              SCRUNCH OUT EMPTY RECORD
EQSTEP   LA    R12,80(R12)             STEP TO NEXT BUFFER RECORD
         B     EQCKEND                 LOOP THRU BUFFER
EQXIT    L     R9,EQ9                  GET RETURN ADDRESS
         BR    R9                      RETURN
***********************************************************************
*             PROCESS DS INSTRUCTIONS                                 *
***********************************************************************
GETADS   ST    R9,DS9                  SAVE RETURN ADDRESS
         L     R12,STRTBUFF            POINT TO BUFFER START
DSCKEND  C     R12,ENDBUFF             END OF BUFFER?
         BNL   DSXIT                   YES
         CLC   BUFFMNEM,=CL5'DS'       FOUND A DS?
         BNE   DSSTEP                  NO
         CLC   BUFFOPND(3),=CL3'0C '   JUST A LABEL?
         BNE   DSSTEP                  NO
         CLC   BUFFLABL+80,BLANKS      LABEL ON NEXT STATEMENT BLANK?
         BNE   DSSTEP                  NO
         MVC   BUFFLABL+80,BUFFLABL    YES, COPY LABEL FORWARD
         LR    R1,R12                  POINT TO EMPTY RECORD
         BAS   R9,SCRUNCH              SCRUNCH OUT EMPTY RECORD
DSSTEP   LA    R12,80(R12)             STEP TO NEXT BUFFER RECORD
         B     DSCKEND                 LOOP THRU BUFFER
DSXIT    L     R9,DS9                  GET RETURN ADDRESS
         BR    R9                      RETURN
***********************************************************************
*             PROCESS DC INSTRUCTIONS                                 *
***********************************************************************
GETADC   ST    R9,DC9                  SAVE RETURN ADDRESS
         L     R12,STRTBUFF            POINT TO BUFFER START
DCCKEND  C     R12,ENDBUFF             END OF BUFFER?
         BNL   DCXIT                   YES
         CLC   BUFFMNEM,=CL5'DC'       FOUND A DC?
         BNE   DCSTEP                  NO
         CLI   BUFFLABL,C' '           HAS IT A LABEL?
         BE    DCSTEP                  NO
         CLC   BUFFOPND(3),=CL3'C'' '  DEFINES BLANKS?
         BNE   TESTNULL                NO
         BAS   R9,MERGBLKS             YES, GO MERGE BLANKS
         B     DCSTEP                  CONTINUE
TESTNULL CLC   BUFFOPND(4),=CL4'X''00' DEFINES BINARY ZEROES?
         BNE   DCSTEP                  NO
         BAS   R9,MERGNULS             YES, GO MERGE NULLS
DCSTEP   LA    R12,80(R12)             STEP TO NEXT BUFFER RECORD
         B     DCCKEND                 LOOP THRU BUFFER
DCXIT    L     R9,DC9                  GET RETURN ADDRESS
         BR    R9                      RETURN
***********************************************************************
* MERGE CONSECUTIVE DC STATEMENTS DEFINING BINARY ZEROS (NULLS)       *
***********************************************************************
MERGNULS ST    R9,MN9                  SAVE RETURN ADDRESS
         ST    R12,MN12                SAVE R12
         ZAP   TOTLNULS,P0             INITIALIZE TOTAL NUMBER NULLS
MNCOUNT  BAS   R9,CNTNULS              GO COUNT NULLS
         LTR   R2,R2                   DC DEFINES ONLY NULLS?
         BZ    MNXIT                   NO
         BAS   R9,ADDNULS              ADD NUMBER IN R2 TO THE DC
         C     R12,MN12                THIS THE ORIGINAL DC?
         BNE   MNLOOP                  NO
         LA    R12,80(R12)             ADVANCE TO NEXT RECORD
         B     MNNEXT                  BYPASS SCRUNCH
MNLOOP   LR    R1,R12                  POINT TO EMPTY RECORD
         BAS   R9,SCRUNCH              SCRUNCH OUT EMPTY RECORD
MNNEXT   CLI   BUFFLABL,C' '           HAS IT A LABEL?
         BNE   MNXIT                   YES, ALL THRU
         CLC   BUFFOPND(4),=CL4'X''00' DEFINES BINARY ZEROES?
         BE    MNCOUNT                 YES
MNXIT    L     R9,MN9                  GET RETURN ADDRESS
         L     R12,MN12                SAVE R12
         BR    R9                      RETURN
***********************************************************************
* LOCATE THE CURRENT DC STATEMENT AND ADD THE NUMBER OF NULLS GIVEN   *
* IN REG2.                                                            *
***********************************************************************
ADDNULS  ST    R12,AN12                SAVE REG12
         MVC   BUFFOPND,BLANKS         CLEAR FORMER VALUE
         CVD   R2,DBLWD                CONVERT COUNT IN R2 TO PACKED
         AP    TOTLNULS,DBLWD          COMPUTE TOTAL BLANKS
         OI    TOTLNULS+2,X'0F'        CLEAR THE SIGN
         MVC   TNBIN,=CL10'''00''      ' PRESET DELIMITER
         UNPK  TOTLBIN,TOTLNULS        UNPACK FOR OUTPUT
ANSHFT   CLI   TOTLBIN,C'0'            LEADING ZERO?
         BNE   ANFORMAT                NO
         MVC   TOTLBIN(13),TOTLBIN+1   SHIFT LEFT 1 BYTE
         B     ANSHFT                  LOOP
ANFORMAT L     R12,MN12                POINT TO ORIGINAL DC STATEMENT
         MVC   BUFFOPND(2),=C'XL'      PREFIX
         MVC   BUFFOPND+2(9),TOTLBIN   REMAINDER
         L     R12,AN12                RESTORE REG12
         BR    R9                      RETURN
***********************************************************************
*             COUNT CONSECUTIVE NULLS DEFINED BY A DC STATEMENT.      *
*             ON RETURN R2 CONTAINS THE TOTAL NUMBER OF BINARY ZEROS  *
*             DEFINED. IF ANY BYTES DEFINED ARE NOT BINARY ZERO, R2=0 *
***********************************************************************
CNTNULS  LA    R1,BUFFOPND+2           POINT TO FIRST NULL DEFINED
         SR    R2,R2                   ZERO COUNTER
CNCNT1   CLC   0(2,R1),=C'00'          STILL BINARY ZERO?
         BNE   CNEND1                  NO
         LA    R2,1(R2)                YES, ADD 1 TO COUNT
         LA    R1,2(R1)                ADVANCE 2 BYTES
         B     CNCNT1                  CONTINUE
CNEND1   CLI   0(R1),C''''             AT ENDING QUOTE?
         BE    CNXIT                   NO
         SR    R2,R2                   NOT ALL BLANKS, R2=0
CNXIT    BR    R9                      RETURN
***********************************************************************
*             MERGE CONSECUTIVE DC STATEMENTS DEFINING SPACES         *
***********************************************************************
MERGBLKS ST    R9,MB9                  SAVE RETURN ADDRESS
         ST    R12,MB12                SAVE R12
         ZAP   TOTLBLKS,P0             INITIALIZE TOTAL NUMBER BLANKS
MBCOUNT  BAS   R9,CNTBLKS              GO COUNT BLANKS
         LTR   R2,R2                   DC DEFINES ONLY BLANKS?
         BZ    MBXIT                   NO
         BAS   R9,ADDBLKS              ADD NUMBER IN R2 TO THE DC
         C     R12,MB12                THIS THE ORIGINAL DC?
         BE    MBLOOP                  YES
         LR    R1,R12                  POINT TO EMPTY RECORD
         BAS   R9,SCRUNCH              SCRUNCH OUT EMPTY RECORD
MBLOOP   LA    R12,80(R12)             ADVANCE TO NEXT RECORD
         CLI   BUFFLABL,C' '           HAS IT A LABEL?
         BNE   MBXIT                   YES, ALL THRU
         CLC   BUFFOPND(3),=CL3'C'' '  DEFINES BLANKS?
         BE    MBCOUNT                 YES
MBXIT    L     R9,MB9                  GET RETURN ADDRESS
         L     R12,MB12                SAVE R12
         BR    R9                      RETURN
***********************************************************************
* LOCATE THE CURRENT DC STATEMENT AND ADD THE NUMBER OB BLANKS GIVEN  *
* IN REG2.                                                            *
***********************************************************************
ADDBLKS  ST    R12,AB12                SAVE REG12
         MVC   BUFFOPND,BLANKS         CLEAR FORMER VALUE
         CVD   R2,DBLWD                CONVERT COUNT IN R2 TO PACKED
         AP    TOTLBLKS,DBLWD          COMPUTE TOTAL BLANKS
         OI    TOTLBLKS+2,X'0F'        CLEAR THE SIGN
         MVC   TZBLANK,=CL9''' ''      ' PRESET DELIMITER
         UNPK  TOTLZON,TOTLBLKS        UNPACK FOR OUTPUT
ABSHFT   CLI   TOTLZON,C'0'            LEADING ZERO?
         BNE   ABFORMAT                NO
         MVC   TOTLZON(13),TOTLZON+1   SHIFT LEFT 1 BYTE
         B     ABSHFT                  LOOP
ABFORMAT L     R12,MB12                POINT TO ORIGINAL DC STATEMENT
         MVC   BUFFOPND(2),=C'CL'      PREFIX
         MVC   BUFFOPND+2(8),TOTLZON   REMAINDER
         L     R12,AB12                RESTORE REG12
         BR    R9                      RETURN
***********************************************************************
*             COUNT CONSECUTIVE BLANKS DEFINED BY A DC STATEMENT.     *
*             ON RETURN R2 CONTAINS THE TOTAL NUMBER OF BLANKS        *
*             DEFINED. IF ANY BYTES DEFINED ARE NOT BLANK, R2=0       *
***********************************************************************
CNTBLKS  LA    R1,BUFFOPND+2           POINT TO FIRST SPACE DEFINED
         SR    R2,R2                   ZERO COUNTER
CBCNT1   CLI   0(R1),C' '              STILL BLANK?
         BNE   CBEND1                  NO
         LA    R2,1(R2)                YES, ADD 1 TO COUNT
         LA    R1,1(R1)                ADVANCE 1 BYTE
         B     CBCNT1                  CONTINUE
CBEND1   CLI   0(R1),C''''             AT ENDING QUOTE?
         BE    CBXIT                   NO
         SR    R2,R2                   NOT ALL BLANKS, R2=0
CBXIT    BR    R9                      RETURN
***********************************************************************
*             PROCESS SVC INSTRUCTIONS                                *
***********************************************************************
GETANSVC ST    R9,SVC9                 SAVE RETURN ADDRESS
         L     R12,STRTBUFF            POINT TO BUFFER START
SVCKEND  C     R12,ENDBUFF             END OF BUFFER?
         BNL   SVCXIT                  YES
         CLC   BUFFMNEM,=CL5'SVC'      FOUND AN SVC?
         BNE   SVSTEP                  NO
         MVC   BUFFOPND+40(8),=CL8'** SV **'
SVSTEP   LA    R12,80(R12)             STEP TO NEXT BUFFER RECORD
         B     SVCKEND                 LOOP THRU BUFFER
SVCXIT   L     R9,SVC9                 GET RETURN ADDRESS
         BR    R9                      RETURN
***********************************************************************
* SCRUNCH OUT THE RECORD POINTED TO BY R1 ON ENTRY                    *
***********************************************************************
SCRUNCH  LA    R2,80(R1)               POINT TO NEXT RECORD
SCRCKND  C     R2,ENDBUFF              END OF BUFFER?
         BNL   NEWLAST                 YES
         MVC   0(80,R1),0(R2)          SHIFT NEXT RECORD BACK
         LA    R1,80(R1)               ADVANCE TO NEXT RECORD
         LA    R2,80(R2)               ADVANCE TO NEXT RECORD
         B     SCRCKND                 CONTINUE
NEWLAST  ST    R1,ENDBUFF              SET NEW BUFFER END ADDRESS
         BR    R9                      RETURN
***********************************************************************
*             END OF JOB                                              *
***********************************************************************
EOJ      L     R12,STRTBUFF            POINT TO FIRST BUFFER RECORD
EOJCKND  CLC   BUFFMNEM,=CL5'END'      IS IT THE END STATEMENT?
         BE    GOTEND                  YES
         CLI   0(R12),0                VALID RECORD?
         BE    EOJSTEP                 NO
         BAS   R14,WRITE1              YES, WRITE THE RECORD
EOJSTEP  LA    R12,80(R12)             TO NEXT BUFFER RECORD
         B     EOJCKND                 LOOP TO WRITE FILE
GOTEND   LA    R12,LAST17              POINT TO END RECORDS
         LA    R11,17                  NUMBER TO WRITE
         CLI   REQUSW,1                FOUND REQU MACRO?
         BNE   PUT17                   NO
         LA    R12,LAST1               YES, ONLY WRITE LAST LINE
         LA    R11,1                   NUMBER TO WRITE
PUT17    BAS   R14,WRITE1              YES, WRITE THE RECORD
         LA    R12,80(R12)             ADVANCE
         BCT   R11,PUT17               LOOP TO WRITE LAST 17
CLOSES   CLOSE (OUTPUT1,,INPUT1)       CLOSE FILES
         L     R13,4(R13)              POINT TO CALLER'S SAVE AREA
         LM    R14,R12,12(R13)         RESTORE CALLER'S REGS
         SR    R15,R15                 SET RETURN CODE TO ZERO
         BR    R14                     RETURN
***********************************************************************
*        WRITE RECORD TO OUTPUT FILE. ON ENTRY R12 POINTS TO RECORD   *
***********************************************************************
WRITE1   ST    R14,WRT1R14             SAVE RETURN ADDRESS
         CLC   9(2,R12),=C'DC'         THIS A DC INSTRUCTION?
         BE    WDSDC                   YES
         CLC   9(2,R12),=C'DS'         THIS A DS INSTRUCTION?
         BNE   WPUT                    NO
WDSDC    CLC   16(2,R12),=CL2''''''    EMPTY APOSTROPHES?
         BE    WEMPTY                  YES
         CLC   16(2,R12),=CL2'()'      EMPTY PARENTHESES?
         BNE   WPUT                    NO
WEMPTY   CLI   0(R12),C' '             STATEMENT HAS A LABEL?
         BE    WXIT                    NO, DROP IT
         MVC   9(3,R12),=CL3'EQU'      CHANGE DS/DC TO EQU
         MVC   15(4,R12),=CL4'*   '    OPERAND IS *
WPUT     PUT   OUTPUT1,0(R12)          YES, WRITE THE RECORD
WXIT     L     R14,WRT1R14             GET RETURN ADDRESS
         BR    R14                     RETURN TO CALLER
***********************************************************************
*        STORAGE AND FILE AREAS                                       *
***********************************************************************
*
DBLWD    DC    D'0'                    DOUBLEWORD WORK AREA
WRT1R14  DS    A                       RETURN ADRESS FOR WRITE1
F0       DC    F'0'                    CONSTANT 0
F1       DC    F'1'                    CONSTANT 1
EQ9      DC    A(0)                    RETURN ADDRESS FOR GETEQU
DS9      DC    A(0)                    RETURN ADDRESS FOR GETADS
DC9      DC    A(0)                    RETURN ADDRESS FOR GETADC
SVC9     DC    A(0)                    RETURN ADDRESS FOR GETANSVC
R19      DC    A(0)                    RETURN ADDRESS FOR RECODE1S
JD9      DC    A(0)                    RETURN ADDRESS FOR JOINDCS
JC9      DC    A(0)                    RETURN ADDRESS FOR JOINCHAR
JC1      DC    A(0)                    REG1 SAVE FOR JOINCHAR
JC12     DC    F'0'                    REG12 SAVE FOR JOINCHAR
JH9      DC    A(0)                    RETURN ADDRESS FOR JOINHEX
JF9      DC    A(0)                    RETURN ADDRESS FOR JOINFULL
JH1      DC    A(0)                    REG1 SAVE FOR JOINHEX
JH12     DC    F'0'                    REG12 SAVE FOR JOINHEX
STRTBUFF DC    A(BLANKS)               START OF BUFFER POINTER
ENDBUFF  DC    A(0)                    END OF BUFFER POINTER
SIZEBUFF DC    F'0'                    SIZE OF BUFFER
MB9      DC    A(0)                    RETURN ADDRESS FOR MERGBLKS
MB12     DC    F'0'                    MERGBLKS SAVE FOR REG12
AB12     DC    F'0'                    ADDBLKS SAVE FOR REG12
REQUSW   DC    X'00'                   01 = FOUND REQU MACRO
P1       DC    P'1'                    CONSTANT 1
P2       DC    P'2'                    CONSTANT 2
P256     DC    P'256'                  CONSTANT 256
FULLCNT  DC    PL2'0'                  COUNTER FOR NBR FULLWORDS
FULLNBR  DC    CL3' ',CL4'F''0'''      FULLWORD OPERAND
TOTLBLKS DC    PL3'0'                  TOTAL BLANKS IN DC
TOTLZON  DC    CL5'00000'              TOTAL BLANKS IN ZONED DECIMAL
TZBLANK  DC    CL9''' ''       '       QUOTED BLANK
MN9      DC    A(0)                    RETURN ADDRESS FOR MERGNULS
MN12     DC    F'0'                    REG12 SAVE FOR MERGNULS
AN12     DC    F'0'                    REG12 SAVE FOR ADDNULS
TOTLNULS DC    PL3'0'                  TOTAL NULLS FOUND
TOTLBIN  DC    CL5'00000'              TOTAL NULLS IN PRINTABLE DECIMAL
TNBIN    DC    CL10'''00''      '      SUFFIX
P0       DC    P'0'                    CONSTANT ZERO
H80      DC    H'80'                   CONSTANT 80
EOFSW    DC    X'00'                   01 = END OF INPUT FILE
BLANKS   DC    CL80' '                 CONSTANT BLANKS
LAST17   DC    CL80'R0       EQU   0'
         DC    CL80'R1       EQU   1'
         DC    CL80'R2       EQU   2'
         DC    CL80'R3       EQU   3'
         DC    CL80'R4       EQU   4'
         DC    CL80'R5       EQU   5'
         DC    CL80'R6       EQU   6'
         DC    CL80'R7       EQU   7'
         DC    CL80'R8       EQU   8'
         DC    CL80'R9       EQU   9'
         DC    CL80'R10      EQU   10'
         DC    CL80'R11      EQU   11'
         DC    CL80'R12      EQU   12'
         DC    CL80'R13      EQU   13'
         DC    CL80'R14      EQU   14'
         DC    CL80'R15      EQU   15'
LAST1    DC    CL80'         END'
WORK     DC    CL80' '
TRHEX    DC    C'0123456789ABCDEF'      HEX CONVERSION
VALCHAR  DC    256X'FF'                 VALID CHARACTER TABLE
         ORG   VALCHAR+C' '
         DC    X'00'                      BLANK
         ORG   VALCHAR+C'¢'
         DC    X'00000000000000'          ¢.<(+|
         ORG   VALCHAR+C'!'
         DC    X'0000000000000000'        !$*);¬-/
         ORG   VALCHAR+C','
         DC    X'0000000000'              ,%_>?
         ORG   VALCHAR+C':'
         DC    X'000000FF0000'            :#@ =" (NOT APOSTROPHE)
         ORG   VALCHAR+X'81'
         DC    X'000000000000000000'      LOWER CASE A-I
         ORG   VALCHAR+X'91'
         DC    X'000000000000000000'      LOWER CASE J-R
         ORG   VALCHAR+X'A2'
         DC    X'0000000000000000'        LOWER CASE S-Z
         ORG   VALCHAR+C'A'
         DC    X'000000000000000000'      UPPER CASE A-I
         ORG   VALCHAR+C'J'
         DC    X'000000000000000000'      UPPER CASE J-R
         ORG   VALCHAR+C'S'
         DC    X'0000000000000000'        UPPER CASE S-Z
         ORG   VALCHAR+C'0'
         DC    X'00000000000000000000'    DIGITS 0-9
         ORG
HALFHEX  DC    XL256'00'
         ORG   HALFHEX+C'A'
         DC    X'0A0B0C0D0E0F'
         ORG   HALFHEX+C'0'
         DC    X'00010203040506070809'
         ORG
*
***********************************************************************
*             DCB'S                                                   *
***********************************************************************
OUTPUT1  DCB   DSORG=PS,MACRF=PM,DDNAME=OUTPUT1,                       X
               RECFM=FB,LRECL=80
INPUT1   DCB   DSORG=PS,MACRF=GM,DDNAME=INPUT1,EODAD=EOF,              X
               RECFM=FB,LRECL=80
         LTORG
BUFFNTRY DSECT ,                       DESCRIBE BUFFER RECORD ENTRIES
BUFFRECD DS    0CL80                     BUFFER RECORD
BUFFLABL DS    CL8                         LABEL FIELD
         DS    CL1
BUFFMNEM DS    CL5                         MNEMONIC FIELD
         DS    CL1
BUFFOPND DS    CL56                        OPERAND FIELD
BUFFCTNU DS    CL1                         CONTINUATION FIELD
BUFFNMBR DS    CL8                         NUMBER FIELD
DISASM99 CSECT
         END
