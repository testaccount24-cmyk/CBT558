GSMF     TITLE '*** SUBROUTINE TO READ SMF FILE ***'
* DEFINES THE SMF FILE AS RECFM=U, AND SIMULATES THE STANDARD
* MACRF=GM FUNCTION OF QSAM FOR VB FILES. EACH SEGMENT IS
* CHECKED FOR VALIDITY ON INPUT, AND DISCARDED IF NOT VALID.
* THE RECORD DESCRIPTOR WORD ON EACH BLOCK IS CHECKED AGAINST
* THE LENGTH GIVEN IN THE DCB. IF THERE IS A MISMATCH, OR
* SUM OF SEGMENT DESCRIPTOR WORDS DOES NOT EQUAL BDW LENGTH, OR
* LENGTH EXCEEDS 32K, THE RECORD IS REJECTED. SEGMENTS ARE
* PLACED IN A WORK AREA IN CONTIGUOUS LOCATIONS WITH SDW'S
* REMOVED. AN RDW IS CREATED FOR THE ENTIRE RECORD IN THE
* FIRST FOUR BYTES OF THE WORK AREA, SIMULATING A STANDARD
* VARIABLE RECORD. THE RECORD WORK AREA (GETMAIN'ED) IS
* 7,000 BYTES, AND LONGER RECORDS WILL BE DROPPED.
* WHEN A COMPLETE RECORD IS BUILT IN THE WORK AREA, THE TYPE
* IS CHECKED FOR A VALID SMF RECORD TYPE, FOLLOWED BY A
* VALIDATION OF THE DATE AND TIME. RECORDS WITHOUT VALID
* TYPE, DATE, AND TIME FIELDS ARE DROPPED.
* STANDARD O/S CALLING SEQUENCE IS USED WITH A SINGLE ADDRESS
* PARAMETER LIST: THE ADDRESS OF THE CALLER PROVIDED DCB.
* AFTER THE RECORD IS CONSTRUCTED IN THE WORK AREA, IT'S
* ADDRESS IS PLACED IN REG 1 FOR THE CALLER'S USE ON
* RETURN. AT END OF FILE, RETURN IS MADE TO THE EOF ADDRESS
* ORIGINALLY FOUND IN THE DCB.
* THE DCB MAY BE OPENED BY THE CALLER BEFORE FIRST CALL TO THIS
* SUBROUTINE, BUT MUST NOT BE TAMPERED WITH DURING PROCESSING.
* THE DCB RECFM IS CHANGED TO U, LRECL IS SET TO 0, AND EODAD IS
* CHANGED TO THE ADDRESS OF  ENDFILE IN THIS SUBROUTINE.
* THIS SUBROUTINE CONTAINS S/370 INSTRUCTIONS, AND MAY EXECUTE
* UNALIGNED FIXED-POINT INSTRUCTIONS. CHECK AND MODIFY BEFORE USE
* ON A S/360 MACHINE.
*
* AUTHOR R THORNTON
*
* DATE WRITTEN 6/77
*
*
GETSMF   CSECT
         USING GETSMF,R3
         STM   R14,R12,12(R13)         SAVE CALLER'S REGS
         LR    R3,R15                  PRIME BASE REG
         LA    R15,SAVE                @ SAVE AREA
         ST    R15,8(R13)              STORE LSA
         ST    R13,4(R15)              STORE HSA
         LR    R13,R15                 COPY SAVE AREA ADDR
FIRSTSW  NOP   MAINLINE                FIRST TIME SWITCH
         MVI   *-3,C'0'                RESET FIRST TIME SW
         L     R2,0(R1)                GET DCB ADDR
         ST    R2,USERDCB              SAVE IT'S ADDRESS
         TM    48(R2),X'10'            IS DCB OPEN
         BZ    DCBSETUP                NO
         CLOSE ((2))                   CLOSE THE DCB
DCBSETUP MVI   36(R2),X'C0'            SET RECFM=U
         XC    82(2,R2),82(R2)         SET LRECL=0
         MVC   USEREOF,32(R2)          SAVE USER'S EOF ADDR
         LA    R12,ENDFILE             GET MY EOF ADDRESS
         ST    R12,32(R2)              AND STORE IN DCBEODAD
         OPEN  ((2))                   OPEN DCB
         GETMAIN R,LV=7000             GET WORK AREA FOR RECORDS
         ST    R1,WRKADDR              AND SAVE IT'S ADDRESS
*
*
*
         USING SMFRECD,R6
MAINLINE EQU   *                       *** MAINLINE ROUTINE ***
         L     R6,WRKADDR              GET WORK AREA ADDRESS
         XC    SMFRDW(4),SMFRDW        ZERO THE RDW
         BAL   R9,GETRECD              GET NEXT SMF RECORD
         SR    R12,R12                 CLEAR WORK REG
         IC    R12,SMFTYPE             GET RECORD TYPE
         LA    R12,VALTYP(R12)         GET VALIDITY TABLE ENTRY
         CLI   0(R12),X'FF'            VALID RECORD TYPE
         BE    MAINLINE                NO, SKIP RECORD
CKTIME   CLC   SMFTIME,MAXSECS         TIME GREATER THAN 1440 SECS
         BH    MAINLINE                YES, SKIP RECORD
CHKDATE  UNPK  UDATE,SMFDATE+1(3)      UNPACK DATE TO CHECK
         LA    R1,UDATE                @ 1ST BYTE
         LA    R2,5                    NBR TIMES TO LOOP
CKSDN    CLI   0(R1),C'0'              LESS THAN 0
         BL    MAINLINE                YES
         CLI   0(R1),C'9'              GREATER THAN 9
         BH    MAINLINE                YES
         LA    R1,1(R1)                TO NEXT BYTE
         BCT   R2,CKSDN                LOOP TO CHECK NUMERIC
         MVI   SMFDATE,0               INSURE 1ST BYTE = 0
         CLI   SMFDATE+1,X'75'         YEAR LESS THAN 75
         BL    MAINLINE                YES, SKIP REOCRD
         CP    SMFDATE+2(2),P366       DAY GREATER THAN 366
         BH    MAINLINE                YES, REJECT
RETURN   L     R13,4(R13)              GET CALLER'S SAVE ADDR
         MVC   24(4,R13),WRKADDR       SEND WORK AREA ADDR IN REG 1
         LM    R14,R12,12(R13)         RESTORE HIS REGISTERS
         BR    R14                     RETURN TO CALLER
*
*
*
GETRECD  EQU   *                       *** BUILD A LOGICAL RECORD ***
         STM   R0,R15,GRSAVE           SAVE REGS
GETSEGAD BAL   R9,GETSEGMT             GO GET NEXT SEGMENT
PROCSEG  L     R10,CURSEG              GET @ CURRENT INPUT SEGMENT
         CLI   2(R10),X'00'            IS IT A COMPLETE RECORD
         BE    STARTREC                YES
         CLI   2(R10),X'01'            1ST SEGMENT OF MULTIPLE SEGS
         BE    STARTREC                YES
         B     GETSEGAD                NOT FIRST SEGMENT, SKIP
STARTREC LR    R1,R6                   @ WORK AREA RDW
         XC    0(4,R1),0(R1)           CLEAR WORK AREA RDW
         LA    R8,4(R1)                GET ADDR WORK AREA
CHKSEG   CLC   0(2,R10),H4             INPUT SEGMENT LENGTH < 5
         BNH   GETSEGAD                YES
         TM    0(R10),X'80'            INPUT SEGMENT LENGTH EXCEEDS 32K
         BO    GETSEGAD                YES
         LH    R12,0(R10)              PICK UP SEGMENT LENGTH
         LR    R1,R6                   @ WORK AREA RDW
         AH    R12,0(R1)               ADD ACCUMULATED LENGTH
         C     R12,F7004               TOTAL WILL EXCEED 7000 BYTES
         BNH   MOVESET                 NO
         B     GETSEGAD                GO TO NEXT SEGMENT
MOVESET  LH    R9,0(R10)               PICK UP SEGMENT LENGTH
         SH    R9,H4                   DEDUCT RDW LENGTH
         LR    R11,R9                  COPY DATA LENGTH
         LR    R1,R6                   @ WORK AREA RDW
         AH    R9,0(R1)                ADD ACCUMULATED LENGTH
         STH   R9,0(R1)                UPDATE WORK LENGTH RDW
         LR    R9,R11                  COPY LENGTH FOR MOVE
         LA    R10,4(R10)              STEP PAST INPUT RDW
         MVCL  R8,R10                  MOVE INPUT SEGMENT TO WORK AREA
         L     R10,CURSEG              GET @ INPUT RECORD AGAIN
         CLI   2(R10),X'00'            IS IT A COMPLETE RECORD
         BE    GRXIT                   YES, THEN ALL THRU
         CLI   2(R10),X'02'            WAS IT LAST SEGMENT
         BE    GRXIT                   YES, THEN ALL THRU
         BAL   R9,GETSEGMT             GET NEXT SEGMENT OF RECORD
         L     R10,CURSEG              GET SEGMENT ADDRESS
         CLI   BLOKERR,1               WAS A BAD BLOCK DROPPED
         BE    PROCSEG                 YES, ABORT THIS RECORD
         CLI   2(R10),X'03'            INTERMEDIATE SEGMENT OF RECORD
         BE    CHKSEG                  YES
         CLI   2(R10),X'02'            LAST SEGMENT OF RECORD
         BE    CHKSEG                  YES, GO PROCESS
         CLI   2(R10),X'00'            COMPLETE RECORD IN INPUT
         BE    PROCSEG                 YES, DROP CURRENT
         CLI   2(R10),X'01'            1ST SEGMENT OF MULTI IN INPUT
         BE    PROCSEG                 YES, DROP CURRENT
         B     GETSEGAD                UNIDENTIFIABLE, SKIP
GRXIT    LR    R1,R6                   @ WORK AREA RDW
         LH    R12,0(R1)               PICK UP THE RDW
         LA    R12,4(R12)              ADD RDW LENGTH
         STH   R12,0(R1)               UPDATE WORK AREA RDW
         LM    R0,R15,GRSAVE           RESTORE REGS
         BR    R9                      EXIT
*
*
*
GETSEGMT EQU   *                       *** GET NEXT INPUT SEGMENT ***
         STM   R0,R15,GSSAVE           SAVE REGS
         L     R12,NEXSEG              GET NEXT SEGMENT ADDR
         LTR   R12,R12                 TEST ADDRESS
         BNZ   POINTCUR                ZERO IS END OF BLOCK
READBLOK L     R1,USERDCB              GET USER'S DCB ADDR
         GET   (1)                     READ NEXT BLOCK
         L     R2,USERDCB              GET USER'S DCB ADDR
         CLC   0(2,R1),82(R2)          RDW LENGTH = DCBLRECL
         BE    COPYADR                 YES, CONTINUE
BADBLOK  MVI   BLOKERR,1               SHOW BAD BLOCK WAS SKIPPED
         B     READBLOK                GO READ AGAIN
COPYADR  LR    R12,R1                  COPY BLOCK ADDR
         AH    R12,0(R1)               ADD LENGTH FROM BDW
         ST    R12,ENDBLOK             SAVE END OF BLOCK ADDR
         LA    R1,4(R1)                STEP PAST BDW
         LR    R12,R1                  COPY 1ST SEGMENT ADDR
         ST    R1,NEXSEG               SAVE ADDR OF 1ST SEGMENT IN BLOC
ADDRDW   AH    R1,0(R1)                ADD NEXT RECORD'S LENGTH
         C     R1,ENDBLOK              NOW AT END OF BLOCK
         BL    ADDRDW                  LOW, CONTINUE VALIDITY CHECK
         BH    BADBLOK                 HIGH, BAD BLOCK
POINTCUR ST    R12,CURSEG              SAVE AS CURRENT SEGMENT ADDR
         AH    R12,0(R12)              ADD RDW LENGTH
         ST    R12,NEXSEG              SAVE ADDR OF NEXT SEGMENT
         C     R12,ENDBLOK             AT END OF BLOCK
         BNE   GSXIT                   NO
         XC    NEXSEG,NEXSEG           INDICATE END OF BLOCK
GSXIT    LM    R0,R15,GSSAVE           RESTORE REGS
         BR    R9                      EXIT
*
*
*
*
ENDFILE  EQU   *                       *** END OF FILE ***
         L     R1,4(R13)               GET CALLER'S SAVE AREA ADDR
         MVC   12(4,R1),USEREOF        SET USER'S EOF ADDR IN REG 14
         L     R1,WRKADDR              GET WORK AREA ADDR
         FREEMAIN R,LV=7000,A=(1)      FREE THE STORAGE
         MVI   FIRSTSW+1,0             SET FIRST TIME SWITCH
         B     RETURN                  BACK TO CALLER
*
*
*                  *** DATA, WORK, AND FILE AREAS ***
SAVE     DS    18F                     REGISTER SAVE AREA
GSSAVE   DS    16F                     SAVE AREA FOR GETSEGMT
GRSAVE   DS    16F                     SAVE AREA FOR GETRECD
CURSEG   DS    F                       @ CURRENT SEGMENT IN INPUT
NEXSEG   DC    F'0'                    @ NEXT SEGMENT IN INPUT
ENDBLOK  DS    F                       @ END OF INPUT BLOCK
USERDCB  DS    F                       ADDR OF USER'S DCB
USEREOF  DS    F                       ADDR OF USER'S EOF ROUTINE
WRKADDR  DS    F                       ADDR OF RECORD WORK AREA
BLOKERR  DS    XL1                     1=ERROR BLOCK WAS DROPPED
UDATE    DS    CL5                     DATE VALIDITY CHECK AREA
MAXSECS  DC    F'8640000'              SEC/100 IN A DAY
VALTYP   DC    X'000102030405060708090A0B0C0D0E0F'
         DC    X'FF111213141516FFFFFF1AFFFFFFFF1F'
         DC    X'FFFF2223FFFFFFFF28FFFF2B2C2DFF2F'
         DC    X'3031FFFFFFFFFFFFFFFFFFFFFFFF3E3F'
         DC    X'40FFFF434445464748494A4B4CFFFFFF'
         DC    11X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'
*
*
*
P1       DC    P'1'
P366     DC    P'366'
*
*
*
H4       DC    H'4'
F7004    DC    F'7004'
*
*
*
SMFRECD  DSECT ,                       *** S M F D A T A R E C O R D S
SMFRDW   DS    H                       RECORD DESCRIPTOR WORD
         DS    H                       LAST 2 BYTES OF RDW
SMFDATA  DS    0CL14                   *** SMF DATA RECORD HEADER ***
SMFSYS   DS    XL1                     0=MVT, 2=MVS
SMFTYPE  DS    XL1                     RECORD TYPE
SMFTIME  DS    XL4                     TIME 1/100 SEC
SMFDATE  DS    PL4                     DATE 00YYDDD
SMFSYSID DS    CL4                     SYSTEM ID
GETSMF   CSECT
*
         REQU
         END
