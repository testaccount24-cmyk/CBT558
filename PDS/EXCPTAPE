         TITLE '***** READ A TAPE FILE USING EXCP *****'
         PRINT NOGEN
EXCPTAPE SVLNK R3
**********************************************************************
*  READ A SEQUENTIAL DATASET USING EXCP AND WRITE EACH LOGICAL RECORD*
*  TO THE SYSOUT DATASET. BOTH SYSIN AND SYSOUT MUST BE PHYSICALLY   *
*  SEQUENTIAL DATASETS.                                              *
*                                                                    *
*  AUTHOR R. THORNTON DEC 1992                                       *
**********************************************************************
*
***********************************************************************
*        INITIALIZATION                                               *
***********************************************************************
         OPEN  (SYSPRINT,OUTPUT,TADCB) OPEN FILES
*        OI    TADCB+44,X'0C'    NEVER USE IOS ERROR RECOVERY
***********************************************************************
*        MAINLINE PROCESSING: READ BLOCKS FROM THE SYSIN DATASET,     *
*        WRITE THEM TO THE SYSOUT DATASET, AND MAINTAIN COUNTS.       *
***********************************************************************
MAINLINE BAL   R9,READRECD             READ NEXT SYSIN RECORD
         CLI   ENDOFILE,1              END OF FILE?
         BE    EOJ                     YES
*RITRECD PUT   SYSOUT,RECORD           NO, WRITE OUTPUT FROM INPUT FILE
*        AP    RECORDS,P1              INCREMENT RECORD COUNT
         B     MAINLINE                CONTINUE
***********************************************************************
*        READRECD CONTROLS PROCESSING TO OBTAIN THE NEXT INPUT RECORD *
*        FROM THE SYSIN DATASET. IF THE CURRENT BLOCK IS EMPTY, THE   *
*        EXCPREAD ROUTINE IS CALLED FOR THE NEXT BLOCK. WHEN A BLOCK  *
*        CONTAINING RECORDS IS AVAILABLE, THE NEXT RECORD IN THE BLOCK*
*        IS MOVED TO THE FIELD CALLED RECORD, AND THE NEXTRECD FIELD  *
*        IS UPDATED TO ADDRESS THE NEXT RECORD IN THE BLOCK. IF EITHER*
*        THE  OF THE SWITCHES ENDOFILE OR EOFRECD ARE SET, EXIT TO THE*
*        CALLER WITH NO FURTHER ACTION.                               *
***********************************************************************
READRECD ST    R9,RR9                  SAVE RETURN ADDRESS
READBLOK BAL   R9,EXCPREAD             YES, READ ANOTHER BLOCK
         CLI   ENDOFILE,1              END OF FILE?
         BE    RRXIT                   YES, EXIT
RRXIT    L     R9,RR9                  GET RETURN ADDRESS
         BR    R9                      RETURN TO CALLER
***********************************************************************
*        EXCPREAD PHYSICALLY READS THE NEXT BLOCK FROM THE INPUT FILE *
*        AND MAKES IT AVAILABLE FOR PROCESSING. IF AN EOF RECORD IS   *
*        READ, THE EOFRECD SWITCH IS SET.                             *
***********************************************************************
EXCPREAD ST    R9,ER9                  SAVE RETURN ADDRESS
         MVC   TACCWAD,READADR         SET UP TO READ NORMALLY
EXCPRSTR MVI   EOFRECD,0               RESET INDICATOR
         EXCP  TAIOB                   ISSUE EXCP FOR NEXT BLOCK
         WAIT  ECB=TAECB               AWAIT COMPLETION
         AP    EXCPS,P1                INCREMENT EXCP COUNT
         CLI   TAECB,X'7F'             GOOD READ?
         BNE   TESTERR1                NO, TEST FURTHER
GOODREAD LH    R1,READCCW+6            COMPUTE BLOCK LENGTH
         SH    R1,TARESID                  = CCW LENGTH - RESIDUAL CT
         ST    R1,BLKSIZE              SAVE THIS BLOCK'S LENGTH
         B     EXXIT                   AND EXIT
TESTERR1 CLI   TAECB,X'41'             I/O ERROR INDICATED?
         BNE   DOHARD                  NO
         TM    TAUNST,1                IS IT AN EOF RECORD?
         BZ    DOHARD                  NO
         MVI   EOFRECD,1               AND INDICATE EOF RECORD
         B     GOODREAD                GO SET ADDRESSES
DOHARD   BAS   R9,HARDERR              NO
         MVC   TACCWAD,SKIPADR         SET UP TO SKIP A BLOCK
         B     EXCPRSTR                GO READ AGAIN
EXXIT    L     R9,ER9                  GET RETURN ADDRESS
         BR    R9                      EXIT
***********************************************************************
*        HARDERR COUNTS EXCP ERRORS                                   *
***********************************************************************
HARDERR  ST    R9,HE9                  SAVE RETURN ADDRESS
         MVC   IOEREXCP,EDITWRD        EDIT TOTAL
         ED    IOEREXCP,EXCPS              EXCP COUNT
         MVC   IOERERRS,EDITWRD        EDIT TOTAL
         ED    IOERERRS,ERRORS             ERROR COUNT
         MVC   IOERCSW,TACSW           CSW TO PRINT
         L     R1,TACSW                POINT TO
         SH    R1,H8                      LAST CCW
         MVC   IOERCCW,0(R1)           AND MOVE IT TO PRINT
         MVC   IOERSENS,TAUCSNS        SENSE BYTES TO PRINT
         MVC   IOERDATA,BLOKDATA       MOVE DATA TO PRINT
         MVC   PRT,IOERMSG             PRINT I/O
         BAS   R9,PRINT                   ERROR MESSAGE
         AP    ERRORS,P1               INCREMENT ERROR COUNT
         CP    ERRORS,P50              PROCESSED 10 ERRORS HERE?
         BNL   EOJ                     YES, TERMINATE
HEXIT    L     R9,HE9                  GET RETURN ADDRESS
         BR    R9                      RETURN TO CALLER
***********************************************************************
*        PRINT SUBROUTINE                                             *
***********************************************************************
PRINT    PUT   SYSPRINT,PRT            WRITE THE PRINT LINE
         MVC   PRT,BLANX               CLEAR PRINT LINE
         BR    R9                      RETURN
***********************************************************************
*        END OF JOB                                                   *
***********************************************************************
EOJ      ED    EOFXCPT,EXCPS           EDIT TOTAL EXCPS TO MESSAGE
         MVC   PRT,EOFEXCP             MOVE TOTAL EXCP MESSAGE
         BAL   R9,PRINT                PRINT TOTAL EXCP MESSAGE
         ED    ERREXCP,ERRORS          TOTAL RECORDS TO MESSAGE
         MVC   PRT,ERRCNTS             MOVE TOTAL RECORDS MESSAGE
         BAL   R9,PRINT                PRINT TOTAL RECORDS MESSAGE
         CLOSE (SYSPRINT,,TADCB)       CLOSE FILES
         L     R13,4(R13)              POINT TO CALLER'S SAVE AREA
         L     R14,12(R13)             PICK UP RETURN ADDRESS
         L     R15,RETCODE             GET RETURN CODE
         LM    R0,R12,20(R13)          RESTORE CALLER'S REGS
         BR    R14                     RETURN TO CALLER
***********************************************************************
*        DATA DEFINITIONS                                             *
***********************************************************************
RETCODE  DC    F'0'                    RETURN CODE
BLKSIZE  DC    F'0'                    BLOCKSIZE OF LAST BLOCK READ
RR9      DS    F                       RETURN ADDRESS FOR READRECD
ER9      DS    F                       RETURN ADDRESS FOR EXCPREAD
HE9      DS    F                       RETURN ADDRESS FOR  HARDERR
XT9      DS    F                       RETURN ADDRESS FOR ENDXTNT
NEXTRECD DC    A(1)                    ADDRESS OF NEXT RECORD IN BLOCK
ENDOBLK  DC    A(0)                    ADDRESS OF END OF BLOCK
EOFRECD  DC    XL1'00'                 END OF FILE RECORD READ = 01
ENDOFILE DC    XL1'00'                 END OF FILE = 01
PRT      DC    CL133' '                PRINT DATA
IOERMSG  DS    0CL133
IOEREXCP DS    CL12                    EXCP COUNT
         DC    CL7' EXCPS,'
IOERERRS DS    CL12                    ERROR TOTAL
         DC    CL9' ERRORS, '
         DC    CL7'IOBCSW='
IOERCSW  DS    XL8                     IOB CSW
         DC    CL6', CCW='
IOERCCW  DS    XL8                     FAILING CCW
         DC    CL8', SENSE='
IOERSENS DS    XL2
         DC    CL7', DATA='
IOERDATA DC    CL47' '
H8       DC    H'8'                    CONSTANT 8
EOFEXCP  DS    0CL80                   EOF EXCP TOTAL LINE
EOFXCPT  DC    XL12'402020206B2020206B202020' TOTAL SYSIN EXCPS
         DC    CL121' TOTAL SYSIN EXCPS'
ERRCNTS  DS    0CL80                   EOF SYSOUT RECORD TOTAL LINE
ERREXCP  DC    XL12'402020206B2020206B202020' TOTAL EXCP ERRORS
         DC    CL121' TOTAL ERROR EXCPS'
EDITWRD  DS    XL12'402020206B2020206B202020' EXCP COUNT
ERRORS   DC    PL5'0'                  NUMBER EXCP ERRORS
EXCPS    DC    PL5'0'                  NUMBER SYSIN EXCP'S
WORK     DS    PL3                     WORK AREA
XZROS    DC    F'0'                    BINARY ZEROS
DBLWD    DS    D                       DOUBLEWORD WORK AREA
P0       DC    P'0'                    CONSTANT 0
P1       DC    P'1'                    CONSTANT 1
P50      DC    P'10'                   CONSTANT 10
BLANX    DC    CL133' '                CONSTANT BLANKS
***********************************************************************
*        FILE DEFINITIONS                                             *
***********************************************************************
SYSPRINT DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,                      X
               RECFM=FB,LRECL=132
SYSOUT   DCB   DSORG=PS,MACRF=PM,DDNAME=SYSOUT
***********************************************************************
*        EXCP DATA AREAS                                              *
***********************************************************************
SKIPADR  DC    A(SKIPCCW)              @ SKIP CCW
READADR  DC    A(READCCW)              @ READ CCW
SKIPCCW  CCW   X'37',0,X'40',0         FORWARD SPACE 1 BLOCK
READCCW  CCW   X'02',BLOKDATA,X'20',32760 READ NEXT BLOCK
*
         PRINT GEN
TAIOB    EXCPIOB TYPE=TA,CCW=READCCW,DDNAME=SYSIN
***********************************************************************
*        LARGE AREA TO READ BLOCK                                     *
***********************************************************************
         LTORG
*
BLOKDATA DS    CL32760                TAPE BLOCK
         END
