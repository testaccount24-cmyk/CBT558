         TITLE 'RAN/SEQ I/O ROUTINE FOR THE VSAMFILE FILE'
         PRINT NOGEN
VSAMFILE SVLNK R3,,,SUB
***********************************************************************
* THIS ROUTINE PROVIDES SEQUENTIAL AND RANDOM I/O CAPABILITY FOR THE  *
* VSAMFILE       FILE. THE RECORD IS MOVED TO OR FROM THE USERS RECORD*
* WORK AREA.                                                          *
* STANDARD LINKAGE CONVENTIONS ARE USED. THE PARAMETER LIST ADDRESSED *
* BY REG 1 CONTAINS THE FOLLOWING ADDRESSES:                          *
*     1. ADDRESS OF A ONE-BYTE I/O OPERATION REQUEST. CONTENT OF THIS *
*        BYTE MAY BE ONE OF THE FOLLOWING:                            *
*         . O=OPEN FILE.                                              *
*         . R=RANDOM READ BY KEY.                                     *
*         . A=RANDOMLY ADD A NEW RECORD BY KEY.                       *
*         . D=DELETE LAST RECORD READ.                                *
*         . P=POSITION TO KEY AND BEGIN SEQUENTIAL READ.              *
*         . U=UPDATE (RE-WRITE) LAST RECORD READ.                     *
*         . C=CLOSE FILE REQUEST.                                     *
*         . -=READ BACKWARD.                                          *
*         . +=READ FORWARD.                                           *
*     2. ADDRESS OF THE KEY.                                          *
*     3. ADDRESS OF THE RECORD WORK AREA. MUST BE AT LEAST AS LONG AS *
*        THE LONGEST RECORD IN THE FILE.                              *
*     4. ADDRESS OF A ONE-BYTE EXCEPTION INDICATOR:                   *
*         . SET TO BLANK ON ENTRY.                                    *
*         . SET TO N FOR NO RECORD FOUND (RANDOM).                    *
*         . SET TO E FOR END OF FILE (SEQUENTIAL).                    *
*         . SET TO D FOR DUPLICATE RECORD (ADD).                      *
* ERROR CONDITIONS CAUSING ABEND U0888:                               *
*         . INVALID REQUEST CODE RECEIVED.                            *
*         . UNRECOVERABLE VSAM PHYSICAL AND LOGICAL ERRORS            *
*     AUTHOR R. THORNTON, SEPT 1987                                   *
***********************************************************************
***********************************************************************
*                  ***** MAINTENANCE CHANGES *****                    *
***********************************************************************
*                                                                     *
*                                                                     *
*                                                                     *
***********************************************************************
*
***********************************************************************
* GET CALLER'S PARAMETER ADDRESSES AND USE THE REQUEST CODE TO        *
* DETERMINE WHICH ROUTINE TO PERFORM. ABEND IF INVALID REQUEST CODE.  *
***********************************************************************
GETPARM  LM    R4,R7,0(R1)             LOAD CALLING PARAMETERS
*                                        REG4=@REQUEST CODE.
*                                        REG5=@RECORD KEY.
*                                        REG6=@RECORD AREA.
*                                        REG7=@EXCEPTION INDICATOR.
         MVI   0(R7),C' '              CLEAR EXCEPTION INDICATOR
         CLI   0(R4),FWD               READ NEXT SEQUENTAIL RECORD?
         BE    FWDREAD                 YES
         CLI   0(R4),BWD               READ PREV SEQUENTIAL RECORD?
         BE    BWDREAD                 YES
         CLI   0(R4),RANREAD           RANDOM READ REQUEST?
         BE    RANRD                   YES
         CLI   0(R4),RANADD            RANDOM WRITE REQUEST?
         BE    ADDRECD                 YES
         CLI   0(R4),UPDATE            REWRITE REQUEST?
         BE    REWRITE                 YES
         CLI   0(R4),POINT             POSITION TO KEY REQUEST?
         BE    PNTRECD                 YES
         CLI   0(R4),DELETE            DELETE RECORD REQUEST?
         BE    DELRECD                 YES
         CLI   0(R4),OPEN              OPEN REQUEST?
         BE    OPNFILE                 YES
         CLI   0(R4),CLOSE             CLOSE REQUEST?
         BE    CLOSFILE                YES
         WTO   'VSAMFILE: INVALID REQUEST CODE RECEIVED',ROUTCDE=11
         B     ABEND                   AND TERMINATE ABNORMALLY
***********************************************************************
* THIS ROUTINE OPENS THE CLMSHOLD FILE                                *
***********************************************************************
OPNFILE  OPEN  VSAMFILE                OPEN THE FILE
         ST    R15,SAVE15              STORE REG 15
         LTR   R15,R15                 SUCCESSFUL?
         BZ    RETURN                  YES
         CLI   SAVE15+3,X'7F'          OPEN SUCCESSFUL?
         BH    OPNFAIL                 NO
         CLI   SAVE15+3,X'4C'          OPEN SUCCESSFUL?
         BNL   RETURN                  YES
OPNFAIL  WTO   'VSAMFILE: OPEN FAILED',ROUTCDE=11
         B     ABEND                   TERMINATE WITH ERROR
***********************************************************************
* THIS ROUTINE IS FOR REQUEST CODE 'P', TO POSITION TO A GIVEN KEY    *
* TO BEGIN A NEW RANGE FOR SEQUENTIAL PROCESSING. THE KEY SUPPLIED IS *
* GENERIC, AND MUST CONTAIN LOW VALUES (BINARY ZEROS) BEYOND THE LAST *
* POSITION OF INTEREST. AFTER POSITIONING USING POINT, A RECORD IS    *
* READ INTO THE CALLER'S RECORD AREA.                                 *
***********************************************************************
PNTRECD  MODCB RPL=VSMRPL,AREA=(6),ARG=(5),OPTCD=(SEQ,FWD,KGE)
         LTR   R15,R15                 MODIFICATION SUCCESSFUL?
         BZ    START                   YES
         ST    R15,SAVE15              SAVE RETURN CODE
         WTO   'VSAMFILE: POSITIONING MODCB FAILED',ROUTCDE=11
         B     ABEND                   TERMINATE WITH ERROR
START    POINT RPL=VSMRPL              POINT AT OR BEYOND KEY
         LTR   R15,R15                 POINT SUCCESSFUL?
         BZ    FWDREAD                 YES
         WTO   'VSAMFILE: POSITIONING POINT FAILED',ROUTCDE=11
         B     ABEND                   TERMINATE WITH ERROR
***********************************************************************
* THIS ROUTINE READS THE NEXT SEQUENTIAL RECORD INTO THE RECORD AREA  *
***********************************************************************
FWDREAD  MODCB RPL=VSMRPL,AREA=(6),ARG=(5),OPTCD=(SEQ,FWD,UPD)
         LTR   R15,R15                 MODIFICATION SUCCESSFUL?
         BZ    FWDGET                  YES
         ST    R15,SAVE15              SAVE RETURN CODE
         WTO   'VSAMFILE: FORWARD MODCB FAILED',ROUTCDE=11
         B     ABEND                   TERMINATE WITH ERROR
FWDGET   GET   RPL=VSMRPL              READ FORWARD
         LTR   R15,R15                 SUCCESSFUL READ?
         BZ    RETURN                  YES
         B     BADVSM                  GO HANDLE ERROR
***********************************************************************
* THIS ROUTINE READS BACKWARD TO GET THE PREVIOUS RECORD.             *
***********************************************************************
BWDREAD  MODCB RPL=VSMRPL,AREA=(6),ARG=(5),OPTCD=(SEQ,BWD,UPD)
         LTR   R15,R15                 MODIFICATION SUCCESSFUL?
         BZ    BWDGET                  YES
         ST    R15,SAVE15              SAVE RETURN CODE
         WTO   'VSAMFILE: BACKWARD MODCB FAILED',ROUTCDE=11
         B     ABEND                   TERMINATE WITH ERROR
BWDGET   GET   RPL=VSMRPL              READ BACKWARD
         LTR   R15,R15                 SUCCESSFUL READ?
         BZ    RETURN                  YES
         B     BADVSM                  GO HANDLE ERROR
***********************************************************************
* THIS ROUTINE ERASES THE LAST RECORD READ                            *
***********************************************************************
DELRECD  ERASE RPL=VSMRPL              ERASE LAST RECORD READ
         LTR   R15,R15                 SUCCESSFUL ERASE?
         BZ    RETURN                  YES
         B     BADVSM                  NO, GO HANDLE ERROR
***********************************************************************
* THIS ROUTINE REWRITES A RECORD FOR UPDATE. THE FIRST TWO BYTES OF   *
* THE RECORD MUST CONTAIN THE LENGTH OF THE RECORD, AND THE KEY MUST  *
* BE THE SAME AS WHEN THE RECORD WAS READ. THE READ MUST IMMEDIATELY  *
* PRECEDE THE UPDATE REQUEST FOR THE RECORD.                          *
***********************************************************************
REWRITE  LH    R12,0(R6)               GET RECORD LENGTH
         MODCB RPL=VSMRPL,AREA=(6),ARG=(5),RECLEN=(12),OPTCD=(UPD,KEQ)
         LTR   R15,R15                 SUCCESSFUL READ?
         BZ    RWRTREC                 YES
         ST    R15,SAVE15              SAVE RETURN CODE
         WTO   'VSAMFILE: RANDOM ADD MODCB FAILED',ROUTCDE=11
         B     ABEND                   TERMINATE WITH ERROR
RWRTREC  PUT   RPL=VSMRPL              READ RECORD FOR GIVEN KEY
         LTR   R15,R15                 SUCCESSFUL READ?
         BZ    RETURN                  YES
         B     BADVSM                  NO, GO HANDLE ERROR
***********************************************************************
* THIS ROUTINE ADDS A RECORD RANDOMLY, FOR THE FULL KEY SUPPLIED      *
* BY THE CALLER. THE FIRST TWO BYTES OF THE RECORD AREA MUST CONTAIN  *
* THE LENGTH OF THE RECORD. IF THIS IS A DUPLICATE OF A PREVIOUS      *
* RECORD (DUPLICATE KEY), THE LETTER "D" WILL BE RETURNED IN THE      *
* EXCEPTION INDICATOR.                                                *
***********************************************************************
ADDRECD  LH    R12,0(R6)               GET RECORD LENGTH
         MODCB RPL=VSMRPL,AREA=(6),ARG=(5),RECLEN=(12),                X
               OPTCD=(DIR,NUP,KEQ)
         LTR   R15,R15                 SUCCESSFUL READ?
         BZ    RANWRITE                YES
         ST    R15,SAVE15              SAVE RETURN CODE
         WTO   'VSAMFILE: RANDOM ADD MODCB FAILED',ROUTCDE=11
         B     ABEND                   TERMINATE WITH ERROR
RANWRITE PUT   RPL=VSMRPL              READ RECORD FOR GIVEN KEY
         LTR   R15,R15                 SUCCESSFUL READ?
         BZ    RETURN                  YES
         B     BADVSM                  NO, GO HANDLE ERROR
***********************************************************************
* THIS ROUTINE READS A RECORD RANDOMLY, FOR THE FULL KEY SUPPLIED     *
* BY THE CALLER. THE RECORD FOUND IS MOVED TO THE CALLER'S AREA.      *
***********************************************************************
RANRD    MODCB RPL=VSMRPL,AREA=(6),ARG=(5),OPTCD=(DIR,UPD,KEQ)
         LTR   R15,R15                 SUCCESSFUL READ?
         BZ    RANGET                  YES
         ST    R15,SAVE15              SAVE RETURN CODE
         WTO   'VSAMFILE: RANDOM READ MODCB FAILED',ROUTCDE=11
         B     ABEND                   TERMINATE WITH ERROR
RANGET   GET   RPL=VSMRPL              READ RECORD FOR GIVEN KEY
         LTR   R15,R15                 SUCCESSFUL READ?
         BZ    RETURN                  YES
         B     BADVSM                  NO, GO HANDLE ERROR
***********************************************************************
* THIS ROUTINE CLOSES THE FILE AND RESETS INDICATORS TO PERMIT THE    *
* CALLER TO RE-OPEN AND CONTINUE PROCESSING IF DESIRED.               *
***********************************************************************
CLOSFILE CLOSE VSAMFILE                CLOSE THE FILE
         ST    R15,SAVE15              STORE REG 15
         LTR   R15,R15                 SUCCESSFUL CLOSE?
         BZ    RETURN                  YES
         CLI   SAVE15+3,X'81'          OPEN SUCCESSFUL?
         BL    RETURN                  YES
CLOSFAIL WTO  'VSAMFILE: ERROR CLOSING FILE',ROUTCDE=11
         B     ABEND                   TERMINATE WITH ERROR
***********************************************************************
* COMMON ROUTINE TO RETURN CONTROL TO THE CALLER.                     *
***********************************************************************
RETURN   L     R13,4(R13)              GET CALLER'S SAVE ADDR
         LM    R14,R12,12(R13)         RESTORE HIS REGS
         SR    R15,R15                 CLEAR RETURN CODE
         BR    R14                     RETURN TO CALLER
***********************************************************************
* THIS ROUTINE ANALYZES ERROR CONDITIONS REPORTED BY VSAM AND EITHER  *
* SENDS AN EXCEPTION INDICATION TO THE CALLER, OR WRITES A MESSAGE    *
* AND ABENDS WITH U0888.                                              *
***********************************************************************
BADVSM   ST    R15,SAVE15              SAVE REG 15
         CLI   SAVE15+3,8              LOGICAL ERROR?
         BNE   PHYSERR                 NO
         SHOWCB RPL=VSMRPL,AREA=FEEDBACK,LENGTH=4,FIELDS=(FDBK)
CHECK1   CLI   FEEDBACK+3,4            END OF FILE DURING SEQUENTIAL?
         BE    QEOF                    YES
         CLI   FEEDBACK+3,8            DUPLICATE RECORD?
         BE    DUPLREC                 YES
         CLI   FEEDBACK+3,16           RECORD NOT FOUND?
         BE    NORECFD                 YES
DUPLREC  MVI   0(R7),DUP               INDICATE DUPLICATE RECORD
         B     RETURN                  RETURN TO CALLER
NORECFD  MVI   0(R7),NRF               INDICATE NO RECORD FOUND
         B     RETURN                  RETURN TO CALLER
QEOF     MVI   0(R7),EOF               INDICATE END OF FILE
         B     RETURN                  RETURN TO CALLER
LOGCERR  WTO   'VSAMFILE: LOGICAL ERROR ON FILE',ROUTCDE=11
         B     VSAMMESG                GO SEND VSAM ERROR MESSAGE
PHYSERR  WTO   'VSAMFILE: PHYSICAL ERROR ON FILE',ROUTCDE=11
VSAMMESG MVC   VSMERRTX,ERRMSG+12      PRINTABLE TEXT TO MSG
         LA    R1,VSMERRMG             POINT TO MESSAGE
         SVC   35                      ISSUE WTO
ABEND    ABEND 888,DUMP                TERMINATE WITH ERROR
***********************************************************************
*        DATA, WORK, AND STORAGE AREAS
***********************************************************************
*
OPEN     EQU   C'O'                    OPEN REQUEST
CLOSE    EQU   C'C'                    CLOSE REQUEST
RANREAD  EQU   C'R'                    RANDOM READ REQUEST
POINT    EQU   C'P'                    POSITION TO KEY AND READ
RANADD   EQU   C'A'                    ADD RECORD BY KEY
UPDATE   EQU   C'U'                    REWRITE LAST RECORD READ
FWD      EQU   C'+'                    READ NEXT SEQ RECORD
BWD      EQU   C'-'                    READ PREVIOUS SEQ RECORD
DELETE   EQU   C'D'                    DELETE LAST RECORD READ
BLANK    EQU   C' '                    BLANK
LOGREC   EQU   16                      OFFSET TO LRECL IN DECB
EOF      EQU   C'E'                    END OF FILE INDICATOR
NRF      EQU   C'N'                    NO RECORD FOUND INDICATOR
DUP      EQU   C'D'                    DUPLICATE RECORD INDICATOR
SAVE15   DC    F'0'                    SAVE AREA FOR REG 15
FEEDBACK DC    F'0'                    HOLD AREA FOR ABEND CODES
ERRMSG   DC    CL128' '                VSAM ERROR MESSAGE AREA
VSMERRMG DS    0F                      WTO LENGTH ERROR MESSAGE
         DC    AL2(VSMERRND-VSMERRTX)  AREA LENGTH
         DC    X'8000'                 MCS FLAGS
VSMERRTX DC    CL116' '                VSAM ERROR MESSAGE TEXT
         DC    X'0000'                 DESCRIPTOR FLAGS
         DC    X'0020'                 ROUTE FLAGS
VSMERRND EQU   *
VSMFILE  ACB   DDNAME=VSAMFILE,MACRF=(KEY,DIR,SEQ,IN,OUT),AM=VSAM,     X
               STRNO=3
VSMRPL   RPL   ACB=VSMFILE,AM=VSAM,OPTCD=(KEY,MVE),AREALEN=?????,      X
               MSGAREA=ERRMSG,MSGLEN=128
         END
