         PRINT NOGEN
         TITLE '*****SCANVRBL: SCAN RECFM=V TEXT PDS OR PS FOR STRINGS'
SCANVRBL SVLNK R3
*
***********************************************************************
* SCAN FILE OF RECFM=V RECORDS FOR STRINGS  AND WRITE AN OUTPUT FILE  *
* RECORD FOR RECORD CONTAINING A SPECIFIED STRING.       INPUT MAY BE *
* A SIMPLE SEQUENTIAL DATASET, A MEMBER OF A PDS, OR AN ENTIRE PDS. IN*
* ANY CASE, THE INPUT MUST HAVE RECFM=V OR RECFM=VB  LOGICAL RECORDS. *
*                                                                     *
* THE READER1 DATASET IS USED TO ENTER THE STRINGS TO BE LOCATED IN   *
* THE SOURCE STATEMENT PDS. UP TO 500 STRINGS MAY BE ENTERED, ONE PER *
* RECORD. THE STRING IS ASSUMED TO BEGIN IN COLUMN 1 OF THE READER1   *
* RECORDS, AND ENDS EITHER WITH THE LAST NON-BLANK COLUMN IN THE      *
* RECORD, OR ONE COLUMN LEFT OF THIS, IF THE LAST NON-BLANK COLUMN    *
* CONTAINS THE < TERMINATING SIGN. IF THE LAST CHARACTER OF THE STRING*
* TO BE FOUND IS <, THEN 2 CONSECUTIVE <'S MUST END THE STRING. USE OF*
* THE TERMINATING < PERMITS TRAILING BLANKS TO BE INCLUDED IN STRINGS.*
*                                                                     *
* THE READER1 INPUT FILE MUST HAVE RECFM=FB,LRECL=80, WHICH IS HARD-  *
* CODED.                                                              *
*                                                                     *
* THE OUTPUT1 FILE MUST HAVE RECFM=FB,LRECL=80, WHICH IS HARD-CODED.  *
*                                                                     *
* AUTHOR R THORNTON OCT 1986                                          *
***********************************************************************
*
*
***********************************************************************
* INITIALIZATION: OPEN INPUT AND OUTPUT FILES. GET STORAGE FOR 500    *
* STRING RECORDS. READ THE READER1 FILE, STORING THE STRINGS IN THE   *
* TABLE. EACH STRING IS STORED LEFT JUSTIFIED IN THE LAST 71 BYTES OF *
* THE TABLE ENTRY. THE FIRST BYTE OF EACH ENTRY IS USED TO CONTAIN    *
* THE LENGTH CODE (LENGTH-1) OF THE STRING.                           *
***********************************************************************
*
         OPEN  (OUTPUT1,OUTPUT,INPUT1,,READER1) OPEN FILES
READCARD GET   READER1,STRCARD         READ STRING RECORD
         PUT   OUTPUT1,STRCARD         ECHO IT TO OUTPUT
         L     R1,CURRTBL              POINT TO CURRENT ENTRY
         C     R1,STREND               PAST END OF TABLE?
         BH    TOOMANY                 YES, ERROR
         LA    R15,71                  GET MAX POSSIBLE LENGTH CODE
         LA    R14,STRCARD+71          POINT TO LAST POSSIBLE TERM
CRDLNBK  CLI   0(R14),C' '             FOUND LAST NON-BLANK COLUMN?
         BNE   LASNONBK                YES
         BCTR  R15,0                   NO, DECREMENT LENGTH CODE
         BCT   R14,CRDLNBK             DECREMENT POINTER AND LOOP
LASNONBK CLI   0(R14),C'<'             GOT THE TERMINATOR SIGN?
         BNE   SAVELENG                NO
         BCTR  R15,0                   YES, DON'T INCLUDE IN LENGTH
SAVELENG STC   R15,0(R1)               YES, SAVE STRING LENGTH
         MVC   1(71,R1),BLANKS         PRE-CLEAR ENTRY
         EX    R15,TBLMOVE             MOVE STRING TO TABLE
         LA    R1,72(R1)               ADVANCE TO NEXT ENTRY
         ST    R1,CURRTBL              SAVE CURRENT ENTRY POINTER
         B     READCARD                CONTINUE
TBLMOVE  MVC   1(1,R1),STRCARD         EXECUTED MOVE
TOOMANY  WTO   'SCANVRBL: TOO MANY CARDS, 1ST 500 USED',ROUTCDE=11
*
***********************************************************************
* INITIALIZATION: SORT THE STRINGS READ IN FROM READER1 IN ASCENDING  *
* ORDER.                                                              *
***********************************************************************
*
ENDCARDS L     R1,CURRTBL              GET NEXT TABLE ADDRESS
         MVI   0(R1),X'00'             SET END ENTRY LENGTH = 1
         MVI   1(R1),X'FF'             SET END ENTRY DATA = FF
         BCTR  R1,0                    BACK UP TO RHE
         BCTR  R1,0                    BACK UP TO RHE-1
         ST    R1,STREND               SET ACTUAL TABLE END
         L     R1,STRTBL               POINT TO TABLE START
NEXPASS  LR    R2,R1                   POINT TO 1ST PASS ENTRY
NEXNTRY  LA    R2,72(R2)               POINT TO NEXT ENTRY
         C     R2,STREND               PAST END OF TABLE?
         BH    ENDPASS                 YES
         CLC   1(72,R2),1(R1)          2ND ENTRY IS LOW?
         BL    SRTSWCH                 YES, GO SWITCH
         B     NEXNTRY                 NO, CONTINUE PASS
SRTSWCH  MVC   STRCARD,0(R1)           SAVE 1ST ENTRY
         MVC   0(72,R1),0(R2)          MOVE 2ND TO 1ST
         MVC   0(72,R2),STRCARD        MOVE 1ST TO SECOND
         B     NEXNTRY                 CONTINUE PASS
ENDPASS  LA    R1,72(R1)               POINT TO NEXT TABLE ENTRY
         C     R1,STREND               PAST END OF TABLE?
         BL    NEXPASS                 NO
*
***********************************************************************
* INITIALIZATION: FOR EACH STRING FOUND IN THE TABLE, MOVE A HEX FF   *
* TO THAT OFFSET FROM THE BEGINNING OF THE TRTSCH TABLE. NEXT,        *
* MULTIPLY THE FIRST BYTE BY 4 AND ADD IT TO THE STARTING ADDRESS OF  *
* THE 256-WORD PTR TABLE. IF THE WORD AT THIS LOCATION IS NOT ZERO,   *
* PUT THE ADDRESS OF THE STRING ENTRY IN IT.                          *
***********************************************************************
*
         L     R1,STRTBL               POINT TO TABLE START
NEXTRNG  SR    R2,R2                   CLEAR FOR INSERT
         IC    R2,1(R1)                GET 1ST BYTE OF STRING
         LA    R15,TRTSCH(R2)          POINT TO TRT TABLE BYTE
         MVI   0(R15),X'FF'            PICK UP 1ST BYTE OF STRING
         SLL   R2,2                    MULTIPLY LEADING BYTE BY 4
         LA    R15,PTR(R2)             POINT TO POINTER TABLE
         CLC   0(4,R15),F0             FIRST TIME HERE?
         BNE   STEPSTRG                NO
         ST    R1,0(R15)               YES, STEP TO NEXT STRING
STEPSTRG LA    R1,72(R1)               STEP TO NEXT ENTRY
         C     R1,STREND               PAST END OF TABLE?
         BH    CHKINPDS                YES
         B     NEXTRNG                 ELSE CONTINUE SEARCH
*
***********************************************************************
*     INITIALIZATION:  CHECK THE INPUT FILE RECFM TO INSURE THAT IT IS*
* RECFM=V OR RECFM=VB, AND IS EITHER PHYSICALLY SEQUENTAIL OR A PDS.  *
* IF PHYSICALLY SEQUENTIAL, OR IF A SPECIFIC PDS MEMBER IS CODED IN   *
* THE JCL, SET THE SWITCH TO SHOW THAT THE INPUT IS A SIMPLE          *
* SEQUENTIAL FILE. IF AN ENTIRE PDS IS INPUT, CALL THE READDIR AND    *
* READVMEM SUBROUTINES TO OPEN THE FILE.                              *
***********************************************************************
*
CHKINPDS RDJFCB INPUT1                 READ JFCB FOR INPUT FILE
         MVC   OUTREC,BLANKS           BLANK FILL OUTPUT RECORD
         MVI   OUTREC,C'*'             BEGIN HEADER CLEAR
         MVC   OUTREC+1(18),OUTREC     FILL LEFT END WITH STARS
         MVC   OUTREC+20(44),JFCB      DSNAME TO HEADER
         LA    R1,OUTREC+79            POINT TO OUTREC RIGHT END
CKATBLK  CLI   0(R1),C' '              AT A BLANK?
         BNE   ATSOLID                 NO
         MVI   0(R1),C'*'              YES, SET TO STAR
         BCT   R1,CKATBLK              DECREMENT AND LOOP
ATSOLID  MVI   1(R1),C' '              CLEAR NEXT BYTE
         MVI   2(R1),C' '              AND THE NEXT
         PUT   OUTPUT1,OUTREC          WRITE HEADER
         MVC   OUTREC,BLANKS           BLANK FILL OUTPUT RECORD
         PUT   OUTPUT1,OUTREC          WRITE A BLANK LINE
         MVI   OUTDLM,C':'             SET DELIMITER
         TM    JFCRECFM,X'C0'          POSSIBLE VARIABLE RECORDS?
         BNM   BADINPUT                NO, ERROR
         TM    JFCRECFM,X'40'          VARIABLE LENGTH RECORDS?
         BZ    BADINPUT                NO, ERROR
         CLI   JFCDSORG,X'40'          DSORG=PS?
         BE    SIMPLSEQ                YES, SIMPLE SEQUENTIAL
         CLI   JFCDSORG,X'02'          DSORG=PO?
         BNE   BADINPUT                NO, ERROR
         CLI   JFCELNM,C' '            MEMBER NAME SPECIFIED?
         BH    SIMPLSEQ                YES, SIMPLE SEQUENTIAL
         CALL  READDIR,OPEN            OPEN DIRECTORY FILE
         CALL  READVMEM,OPEN           OPEN MEMBER FILE
         B     SETPRNS                 GO SET UP PRINT LINE
SIMPLSEQ MVI   SEQFILE,1               INDICATE SIMPLE SEQUENTIAL
         MVC   MEMNAME,JFCELNM         SET MEMBER NAME, IF ANY
         B     READMEM                 GO PROCESS SEQUENTIAL FILE
BADINPUT WTO   'SCANVRBL: INVALID INPUT FILE. FILE MUST BE',ROUTCDE=11
         WTO   '         DSORG=PS OR DSORG=PO, AND',ROUTCDE=11
         WTO   '         RECFM=V OR RECFM=VB',ROUTCDE=11
         ABEND 777,DUMP                TERMINATE IN ERROR
SETPRNS  MVI   LPN,C'('                RECORD NBR DELIMITER
         MVI   RPN,C')'                RECORD NBR DELIMITER
*
***********************************************************************
* MAINLINE PROCESSING: IF A PDS IS INPUT, LOCATE THE NEXT MEMBER,     *
* POSITION TO IT, AND READ RECORDS TO END OF MEMBER, REPEATING UNTIL  *
* THERE ARE NO MORE MEMBERS. IF A SIMPLE SEQUENTIAL DATASET IS INPUT, *
* READ RECORDS TO END OF FILE. FOR EACH RECORD READ, SCAN FOR STRINGS.*
* IF A STRING IS FOUND IN AN INPUT RECORD, WRITE AN OUTPUT RECORD     *
* CONTAINING THE MEMBER NAME AND PART OF THE INPUT RECORD.            *
***********************************************************************
*
NEWMEM   ZAP   MEMRECCT,P0             CLEAR RECORD COUNTER
         CALL  READDIR,(READ,DIRECTRY) READ NEXT DIRECTORY ENTRY
         CLI   MEMNAME,EOF             END OF FILE
         BE    EOJ                     YES, STOP RUN
         MVC   FINDNAM,MEMNAME         NAME TO FIND LIST
         CALL  READVMEM,FIND           LOCATE MEMBER
         CLI   FINDNAM,0               MEMBER FOUND
         BE    NEWMEM                  NO, TRY NEXT MEMBER
READMEM  CLI   SEQFILE,0               INPUT IS A PDS?
         BE    CALLREAD                YES
         L     R11,MEMRECAD            NO, POINT TO INPUT RECORD AREA
         GET   INPUT1,0(R11)           AND READ NEXT RECORD
         B     CHEKRECD                GO PROCESS IT
CALLREAD CALL  READVMEM,(READ,MEMRECAD) READ NEXT RECORD IN MEMBER
         L     R11,MEMRECAD            GET RECORD ADDRESS
         CLI   MEMRECAD,EOF            IS IT EOF
         BE    NEWMEM                  YES, GO TO NEXT MEMBER
CHEKRECD AP    MEMRECCT,P1             INCREMENT RECORD COUNTER
         LR    R12,R11                 COPY RECORD START ADDRESS
         AH    R12,0(R12)              COMPUTE END OF RECORD ADDRESS
         LA    R11,3(R11)              GET RECORD DATA ADDRESS - 1
TRTSCAN  SR    R2,R2                   CLEAR FOR TRT INSERT
         TRT   1(80,R11),TRTSCH        SCAN FOR POSSIBLE STRING
         BZ    READMEM                 NONE FOUND, GO READ AGAIN
         CR    R1,R12                  FOUND WITHIN RECORD?
         BH    READMEM                 NO, EXIT
         LA    R1,0(R1)                CLEAR HI ORDER BYTE
         LR    R11,R1                  COPY ADDRESS FOUND
         LR    R15,R12                 COPY END ADDRESS
         SR    R15,R11                 LENGTH REMAINING IN RECORD
         SR    R2,R2                   CLEAR FOR INSERT
         IC    R2,0(R11)               GET FIRST BYTE OF STRING
         SLL   R2,2                    MULTIPLY BY PTR TBL ENTRY SIZE
         LA    R2,PTR(R2)              POINT TO PTR TABLE ENTRY
         L     R2,0(R2)                POINT TO 1ST POSSIBLE STRING
         LTR   R2,R2                   NULL POINTER?
         BZ    TRTSCAN                 YES
STRSRCH  C     R2,STREND               PAST END OF TABLE?
         BH    TRTSCAN                 YES, NO STRING FOUND
         SR    R1,R1                   CLEAR FOR INSERT
         IC    R1,0(R2)                GET STRING LENGTH FROM ENTRY
         CR    R1,R15                  RECORD CAN CONTAIN STRING?
         BNH   DOCMPR                  YES, GO COMPARE FOR STRING
SYSRSTEP LA    R2,72(R2)               STEP TO NEXT STRING ENTRY
         CLC   1(1,R2),0(R11)          SAME STARTING BYTE?
         BH    TRTSCAN                 NOT FOUND IF TABLE IS HIGH
         B     STRSRCH                 ELSE GO COMPARE
COMPARE  CLC   0(1,R11),1(R2)          EXECUTED COMPARE
DOCMPR   EX    R1,COMPARE              COMPARE RECORD:STRING ENTRY
         BNE   SYSRSTEP                BRANCH IF NOT EQUAL
PRTMATCH MVC   OUTMEM,MEMNAME          MEMBER NAME TO OUTPUT RECORD
         UNPK  OUTRCNT,MEMRECCT        RECORD COUNT TO OUTPUT
         OI    OUTRCNT+3,C'0'          CLEAR SIGN
         L     R1,MEMRECAD             POINT TO RECORD
         MVC   OUTIMAG,0(R1)           INPUT RECORD TO OUTPUT
         PUT   OUTPUT1,OUTREC          WRITE OUTPUT RECORD
         B     READMEM                 GO GET NEXT RECORD
*
***********************************************************************
*        END OF INPUT FILE AND END OF JOB                             *
***********************************************************************
*
EOJ      CLOSE (OUTPUT1,,INPUT1,,READER1) CLOSE FILES
         L     R13,4(R13)              GET CALLER'S SAVE ADDRESS
         LM    R14,R12,12(R13)         GET CALLER'S REGISTERS
         SR    R15,R15                 ZERO RETURN CODE
         BR    R14                     RETURN TO CALLER
*
***********************************************************************
*        STORAGE AND FILE AREAS                                       *
***********************************************************************
*
MEMRECAD DC    A(BUFAREA)              ADDRESS OF MEMBER RECORD
STRTBL   DC    A(STRINGS)              FIRST STRING TABLE ADDRESS
CURRTBL  DC    A(STRINGS)              CURRENT STRING TABLE ADDRESS
STREND   DC    A(ENDSTRS)              END OF STRING TABLE
P0       DC    PL1'0'                  CONSTANT 0
P1       DC    PL1'1'                  CONSTANT 1
MEMRECCT DC    PL3'0'                  RECORD COUNT WITHIN MEMBER
TESTNAME DC    XL8'FFFFFFFFFFFFFFFF'   TEST COMPARISON VALUE (TESTPT1)
TESTCNT  DC    PL3'99999'              TEST COMPARISON VALUE (TESTPT2)
STRCARD  DS    CL80                    STRING RECORD FROM INPUT1
BLANKS   DC    CL90' '                 CONSTANT BLANKS
HIVAL    DC    XL8'FFFFFFFFFFFFFFFF'   CONSTANT HIGH-VALUES
H80      DC    H'80'                   CONSTANT 80
SEQFILE  DC    X'00'                   SIMPLE SEQUENTIAL FILE INDIC
LDADDRS  DS    0F                      ADDRESS TABLE
F0       DC    F'0'                    CONSTANT ZERO
PTR      DC    256F'0'                 STRING POINTER TABLE
EOF      EQU   X'FF'                   EOF INDICATOR
*
OPEN     DC    CL9'OINPUT1'            OPEN PARAMETER LIST
READ     DC    C'R'                    READ PARAMETER
*
DIRECTRY DS    0CL11                   DIRECTORY DATA
MEMNAME  DS    CL8                     MEMBER NAME
MEMTTR   DS    XL3                     TTR OF FIRST BLOCK
*
FIND     DS    0CL10                   FIND MEMBER PARAMETER LIST
         DC    C'FN'                   FIND BY NAME
FINDNAM  DS    CL8                     NAME TO BE FOUND
*
OUTREC   DS    0CL80                   OUTPUT RECORD
OUTMEM   DC    CL8' '                  MEMBER NAME
LPN      DC    CL1'('
OUTRCNT  DC    CL4' '                  RECORD NUMBER
RPN      DC    CL1')'
OUTDLM   DC    CL2': '                 DELIMITER
OUTIMAG  DC    CL64' '                 INPUT RECORD BYTES 1-64
*
JFCAD    DS    0F
         DC    X'87'                   END OF LIST, JFCB ADDR
         DC    AL3(JFCB)               ADDRESS OF JFCB AREA
JFCB     DS    CL176                   JFCB FOR INPUT1
JFCLRECL EQU   JFCB+104,2              LRECL
JFCRECFM EQU   JFCB+100,1              RECFM
JFCDSORG EQU   JFCB+98,1               DSORG
JFCELNM  EQU   JFCB+44,8               MEMBER NAME
*
INPUT1   DCB   DSORG=PS,MACRF=GM,DDNAME=INPUT1,EXLST=JFCAD,            X
               EODAD=EOJ
READER1  DCB   DSORG=PS,MACRF=GM,DDNAME=READER1,                       X
               RECFM=FB,LRECL=80,EODAD=ENDCARDS
OUTPUT1  DCB   DSORG=PS,MACRF=PM,DDNAME=OUTPUT1,                       X
               RECFM=FB,LRECL=80
         LTORG
*
*        TRT SCANNING TABLE TO FIND POSSIBLE STRING
TRTSCH   DC    256X'00'
*
*        STRING TABLE AREA WITH ROOM FOR 500 STRINGS
STRINGS  DS    CL36000
ENDSTRS  DC    XL73'00'
*
*        SEQUENTIAL FILE INPUT AREA
BUFAREA  DS    CL32768
         END
