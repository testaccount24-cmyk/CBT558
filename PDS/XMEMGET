         PRINT NOGEN
         TITLE 'XMEMGET: GET MEMORY FROM ANOTHER ADDRESS SPACE'
*
**********************************************************************
* THIS SUBROUTINE IS USED TO OBTAIN A 1-256 BYTES OF MEMORY LOCATED  *
* IN ANOTHER ADDRESS SPACE. THE ACTIONS PERFORMED BY THIS SUBROUTINE *
* ARE:                                                               *
*      1. USE THE AXRES AND AXSET MACROS TO ESTABLISH THE AUTHORITY  *
*         FOR CROSS-MEMORY OPERATIONS.                               *
*      2. OBTAIN THE ASID OF THIS ADDRESS SPACE (KNOWN AS THE PRIMARY*
*         ADDRESS SPACE).                                            *
*      3. OBTAIN THE ASID OF THE ADDRESS SPACE TO BE ACCESSED VIA    *
*         CROSS-MEMORY (KNOWN AS THE SECONDARY ADDRESS SPACE).       *
*         (THIS IS PROVIDED INDIRECTLY BY THE CALLER VIA JOBNAME).   *
*      4. ESTABLISH THE IDENTITY OF THE SECONDARY SPACE BY USE OF    *
*         THE SSAR INSTRUCTION.                                      *
*      5. MOVE DATA FROM THE SECONDARY ADDRESS SPACE TO THE AREA     *
*         PROVIDED BY THE CALLER USING THE MVCP INSTRUCTION.         *
*      6. ON COMPLETION OF DATA MOVEMENT, RESET THE SECONDARY ADDRESS*
*         SPACE ID TO THIS PROGRAM'S ASID USING THE SSAR INSTRUCTION.*
*         AND THE AXSET AND AXFRE MACROS TO RESTORE THE ORIGINAL     *
*         CROSS-MEMORY AUTHORITY.                                    *
*                                                                    *
* THE CALLER USES STANDARD LINKAGE CONVENTIONS, AND PASSES A SINGLE  *
* PARAMETER ADDRESS WHICH CONTAINS THE FOLLOWING FIELDS:             *
*  POSITION  LENGTH   DESCRIPTION                                    *
*    0         8      JOBNAME OF THE ADDRESS SPACE TO BE ACCESSED.   *
*    8         4      ADDRESS OF THE DATA IN THE OTHER ADDRESS SPACE *
*    12        1      ERROR INDICATOR. ON RETURN, A BLANK IN THIS    *
*                     FIELD INDICATES THE DATA WAS MOVED SUCCESSFULLY*
*                     WHILE AN "E" INDICATES A PROBLEM OCCURRED.     *
*    13        1      DATA MOVE LENGTH - 1, HEX 00-FF                *
*    14        2      RESERVED                                       *
*    16        256    AREA TO CONTAIN THE DATA MOVED FROM THE OTHER  *
*                     ADDRESS SPACE.                                 *
*                                                                    *
* EXAMPLE OF A CALL TO XMEMGET:                                      *
*              .                                                     *
*              .                                                     *
*              MVC   XMJOBNM,=C'JES2'     OTHER JOB IS JES2          *
*              ST    R9,XMADDR            ADDRESS IN JES2'S MEMORY   *
*              CALL  XMEMGET,(XMPARM)     CALL TO GET JES2'S DATA    *
*              CLI   XMINDIC,C' '         WAS IT SUCCESSFUL?         *
*              BNE   NODATA               NO                         *
*              .                                                     *
*              .                                                     *
*              .                                                     *
*      XMPARM  DS    0F                   PARMS FOR XMEMGET          *
*      XMJOBNM DS    CL8                  OTHER ADDRESS SPACE JOBNAME*
*      XMADDR  DS    A                    OTHER ADDRESS SPACE ADDRESS*
*      XMINDIC DS    CL1                  INDICATOR, ' '=SUCCESSFUL  *
*                                           'S'=MEMORY SWAPPED OUT,  *
*                                           'P'=PROTECTION EXCEPTION *
*              DS    XL1                  RESERVED                   *
*      XMLENG  DS    H                    MOVE LENGTH CODE 0001-0100 *
*      XMAREA  DS    CL256                1-256 BYTES OF DATA FROM   *
*                                         THE OTHER ADDRESS SPACE.   *
* AUTHOR R THORNTON AUG 1985                                         *
**********************************************************************
*
*
**********************************************************************
*         INITIALIZE REGISTERS, CHAIN SAVE AREAS, AND POINT TO THE   *
*         PARAMETER LIST PASSED BY THE CALLER.                       *
**********************************************************************
*
XMEMGET  CSECT
         STM   R14,R12,12(R13)         SAVE CALLER'S REGS
         LR    R3,R15                  COPY THE PROGRAM BASE REG
         USING XMEMGET,R3
         B     INIT1                   GO TO INITIALIZATION
         DC    CL8'XMEMGET '           PROGRAM NAME
SAVE     DS    18F                     REGISTER SAVE AREA
INIT1    LA    R15,SAVE                POINT TO MY SAVE AREA
         ST    R15,8(R13)              CHAIN FORWARD
         ST    R13,SAVE+4              CHAIN BACKWARD
         LR    R13,R15                 POINT R13 TO MY SAVE
         L     R8,0(R1)                GET PARAMETER LIST POINTER
         USING XMPARM,R8
         MVI   XMINDIC,C' '            CLEAR ERROR INDICATOR
         ESTAE ESTEXIT                 ESTABLISH ESTAE ENVIRONMENT
*
**********************************************************************
*         USE THE AXRES AND AXSET MACROS TO ESTABLISH THE AUTHORITY  *
*         FOR CROSS-MEMORY OPERATIONS.                               *
**********************************************************************
*
         SMODE KEY=0,STATE=S           GET SUPVR STATE, KEY=0
         AXRES AXLIST=AXLIST           RESERVE AN AX
         MVC   AXSAVE,MYAX             SAVE ID OF RESERVED AX
         MVC   MYAX,H1                 SET DESIRED AX VALUE
         AXSET AX=MYAX                 AND REQUEST USE OF THAT VALUE
         SMODE KEY=N,STATE=P           RETURN TO PGM STATE AND KEY
*
**********************************************************************
*         OBTAIN THE ASID OF THIS ADDRESS SPACE (KNOWN AS THE PRIMARY*
*         ADDRESS SPACE). THE ASCB FOR THIS ADDRESS SPACE IS FOUND   *
*         VIA THE PSAAOLD POINTER IN PSA. THE ASID IS SAVED IN MYASID*
*         FOR USE WITH SSAR INSTRUCTIONS TO RESET TO THE PRIMARY     *
*         ADDRESS SPACE.                                             *
**********************************************************************
*
         USING PSA,R0
         L     R1,PSAAOLD              GET OUR ASCB ADDR FROM PSA
         DROP  R0
         USING ASCB,R1                 ADDRESS SPACE CTL BLOCK
         MVC   MYASID+2(2),ASCBASID    SAVE MY ASID FOR SSAR'S
         DROP  R1
*
**********************************************************************
*         LOCATE THE ASCB FOR THE SECONDARY ADDRESS SPACE. ITS JOB   *
*         NAME IS IN THE XMJOBNM FIELD OF THE PARAMETER LIST. THE    *
*         ASVT IS USED TO LOCATE THE JOB'S ADDRESS SPACE. WHEN FOUND,*
*         THE ASID IS USED TO ESTABLISH THE IDENTITY OF THE SECONDARY*
*         (TARGET) ADDRESS SPACE BY USE OF A SSAR INSTRUCTION.       *
**********************************************************************
*
         USING PSA,R0
         L     R15,FLCCVT              GET CVT ADDRESS
         DROP  R0
         USING CVT,R15
         L     R15,CVTASVT             GET ASVT ADDRESS
         DROP  R15
         USING ASVT,R15                ADDRESS SPACE VECTOR TABLE
         L     R14,ASVTMAXU            LOAD MAX NBR ASIDS
ASIDLOOP TM    ASVTENTY,ASVTAVAL       IS THIS ASID IN USE?
         BZ    CHKJOBN                 YES, MIGHT BE TARGET
USENEXTV LA    R15,L'ASVTENTY(,R15)    NO, POINT TO NEXT ASVT ENTRY
         BCT   R14,ASIDLOOP            AND RETRY
         MVI   XMINDIC,C'E'            END, SET EXCEPTION INDICATOR
         B     RETURN                  AND TERMINATE
CHKJOBN  L     R1,ASVTENTY             POINT TO THE ASCB
         USING ASCB,R1
         L     R2,ASCBJBNI             LOAD INIT JNAME ADDRESS
         CLC   XMJOBNM,0(R2)           IS THIS THE RIGHT JOBNAME?
         BE    GETASID                 YES, GO GET ASID
         L     R2,ASCBJBNS             NO, USE STC/TSO ID POINTER
CHECKNAM CLC   XMJOBNM,0(R2)           IS THIS THE ASID?
         BNE   USENEXTV                NO, REENTER LOOP
         DROP  R15
GETASID  SR    R2,R2                   CLEAR FOR INSERT
         ICM   R2,3,ASCBASID           GET TARGET ASID
         DROP  R1
         SMODE KEY=0,STATE=S           GET SUPVR STATE, KEY=0
         SSAR  R2                      SET TARGET AS SECONDARY ASID
*
**********************************************************************
*         MOVE DATA FROM THE SECONDARY ADDRESS SPACE TO THIS ONE BY  *
*         USE OF THE MVCP INSTRUCTION.                               *
**********************************************************************
*
         SR    R12,R12                 GET KEY FOR TARGET ADDRESS SPC
         L     R11,XMADDR              @ (IN TGT ADDR SP) OF DATA
         LA    R10,XMAREA              @ CALLER'S DATA AREA
         LH    R9,XMLENG               GET LENGTH OF DATA TO MOVE
         MVCP  0(R9,R10),0(R11),R12    GET DATA FROM TARGET A.S.
*
**********************************************************************
*         MOVE IS COMPLETE, USE THE AXSET AND AXFRE MACROS TO RESTORE*
*         ORIGINAL CROSS-MEMORY AUTHORITY.                           *
**********************************************************************
*
RETURN   L     R2,MYASID               GET THIS ASID
         SSAR  R2                      SET THIS AS SECONDARY ASID
         MVC   MYAX,=H'0'              SET AX VALUE OF ZERO
         AXSET AX=MYAX                 REQUEST USE OF COMMON AX
         MVC   MYAX,AXSAVE             RESTORE RESERVED AX ID
         AXFRE AXLIST=AXLIST           FREE MY RESERVED AX
         SMODE KEY=N,STATE=P           RETURN TO PROGRAM STATE, KEY
         ESTAE 0                       RESTORE PRIOR ESTAE ENVIRONMENT
         L     R13,4(R13)              POINT TO CALLER'S SAVE AREA
         LM    R14,R12,12(R13)         RESTORE CALLER'S REGS
         SR    R15,R15                 CLEAR RETURN CODE
         BR    R14                     RETURN TO CALLER
*
**********************************************************************
* ESTAE RETRY ROUTINE. THIS ROUTINE IS ENTERED FROM THE OPERATING    *
* SYSTEM AFTER PROCESSING BY THE ESTEXIT ESTAE EXIT ROUTINE. ON ENTRY*
* REGISTER CONTENTS ARE AS FOLLOWS:                                  *
*          R0  = 0                                                   *
*          R1  = ADDRESS OF THE SDWA                                 *
*          R2-R13 = UNPREDICTABLE                                    *
*          R14 = ADDRESS OF AN SVC 3 INSTRUCTION                     *
*          R15 = ENTRY POINT ADDRESS                                 *
*                                                                    *
* 1) THE SDWA AREA IS SAVED FOR LATER ANALYSIS IN THE MYSDWA AREA.   *
*                                                                    *
* 2) IF A USER ABEND HAS OCCURRED, AN EXPLANATORY WTO IS WRITTEN, AND*
*    THE PROGRAM ABENDS WITH U111.                                   *
*                                                                    *
* 3) IF A SYSTEM ABEND OTHER THAN S0C4 OR S0D5 HAS OCCURRED, AN      *
*    EXPLANATORY WTO IS WRITTEN, AND THE PROGRAM ABENDS WITH U222.   *
*                                                                    *
* 4) IF A S0D5 ABEND HAS OCCURRED, AN "S" IS MOVED TO THE CALLER'S   *
*    EXCEPTION CODE FIELD, AND THE PROGRAM WILL RETURN TO THE CALLER.*
*                                                                    *
* 4) IF A S0C4 ABEND HAS OCCURRED, AN "P" IS MOVED TO THE CALLER'S   *
*    EXCEPTION CODE FIELD, AND THE PROGRAM WILL RETURN TO THE CALLER.*
**********************************************************************
*
         USING ESTRETRY,R15
ESTRETRY L     R3,BASEREG              GET NORMAL BASE REG
         DROP  R15
         LA    R13,SAVE                INITIALIZE SAVE AREA POINTER
         LR    R10,R1                  COPY SDWA ADDRESS
         LA    R11,SDWAEND-SDWA        GET SDWA LENGTH
         LA    R8,MYSDWA               POINT TO MY SDWA SAVE AREA
         LR    R9,R11                  COPY SDWA LENGTH
         MVCL  R8,R10                  MOVE THE SDWA
         LA    R12,MYSDWA              POINT TO SAVED SDWA
         USING SDWA,R12
         L     R0,SDWASPID             GET SUB-POOL ID AND LENGTH
         FREEMAIN R,LV=(0),A=(1)       FREE SYSTEM SDWA
         L     R8,PARMADDR             POINT TO CALLERS PARM AREA
         L     R2,SDWACMPF             PICK UP ABEND CODE
         N     R2,CLRHI                CLEAR ALL BUT USER ABEND CODE
         BNZ   SYSTCODE                BRANCH IF SYSTEM ABEND
         WTO   'ESTAE RETRY ROUTINE ENTERED WITH USER ABEND CODE',     X
               ROUTCDE=11
         ESTAE 0                       DELETE ESTAE ENVIRONMENT
         ABEND 111,DUMP                TERMINATE ABNORMALLY
SYSTCODE L     R2,SDWACMPF             PICK UP ABEND CODE
         SRL   R2,12                   RIGHT JUSTIFY SYSTEM CODE
         N     R2,CLRHI                CLEAR ALL BUT SYSTEM ABEND CODE
         CH    R2,S0D5                 TGT ADDRESS SPACE SWAPPED OUT?
         BE    SWPOUT                  YES
         CH    R2,S0C4                 PROTECTION EXCEPTION?
         BE    PROTEXCP                YES
         WTO   'ESTAE RETRY ROUTINE ENTERED WITH SYSTEM ABEND CODE',   X
               ROUTCDE=11
         ESTAE 0                       DELETE ESTAE ENVIRONMENT
         ABEND 222,DUMP                TERMINATE ABNORMALLY
SWPOUT   MVI   XMINDIC,C'S'            INDICATE MEMORY SWAPPED OUT
         B     RETURN                  RETURN TO CALLER
PROTEXCP MVI   XMINDIC,C'P'            INDICATE PROTECTION EXCEPTION
         B     RETURN                  RETURN TO CALLER
*
**********************************************************************
* ESTAE EXIT. ENTERED ASYNCHRONOUSLY WITH REGISTER CONTENTS AS       *
* FOLLOWS: R0  = A CODE (12=NO SDWA OBTAINED)                        *
*          R1  = ADDRESS OF THE SDWA IF R0 <> 12                     *
*          R2-R12 = UNPREDICTABLE                                    *
*          R13 = POINTER TO A 72-BYTE REGISTER SAVE AREA             *
*          R14 = RETURN ADDRESS                                      *
*          R15 = ENTRY POINT ADDRESS                                 *
*                                                                    *
* 1) IF NO SDWA WAS OBTAINED, THIS EXIT ROUTINE RETURNS TO THE SYSTEM*
*    TO CONTINUE TERMINATION.                                        *
*                                                                    *
* 2) IF AN SDWA WAS OBTAINED, THIS ROUTINE RETURNS THROUGH THE SYSTEM*
*    TO THE ESTAE RETRY ROUTINE ESTRETRY.                            *
*                                                                    *
**********************************************************************
*
         USING ESTEXIT,R15
ESTEXIT  C     0,=F'12'                WAS AN SDWA GOTTEN?
         BNE   GOTSDWA                 YES
         SR    R15,R15                 NO, CONTINUE TERMINATION CODE
         BR    R14                     RETURN
GOTSDWA  SETRP RC=4,RETADDR=ESTRETRY   ESTRETRY IS THE RETRY ROUTINE
         BR    R14                     GO TO RETRY ROUTINE VIA SYSTEM
         DROP  R15
*
**********************************************************************
*        DATA AND FILE AREAS                                         *
**********************************************************************
*
BASEREG  DC    A(XMEMGET)              PROGRAM BASE REGISTER
CLRHI    DC    X'00000FFF'             CLEAR ALL BUT LOW 12 BITS
PARMADDR DS    F                       SAVE CALLER'S PARM AREA ADDR
MYASID   DC    F'0'                    THIS ADDRESS SPACE ID (LOW HW)
S0D5     DC    X'00D5'                 S0D5 ABEND CODE
S0C4     DC    X'00C4'                 S0C4 ABEND CODE
H1       DC    H'1'                    CONSTANT 1
AXLIST   DC    H'1'                    INDICATE 1 AX IN LIST
MYAX     DC    H'0'                    FILLED IN BY CODE
AXSAVE   DC    H'0'                    ORIGINAL AX VALUE
*
**********************************************************************
*        PARAMETER AREA PASSED BY CALLER                             *
**********************************************************************
*
XMPARM   DSECT ,                       PARMS FOR XMEMGET
XMJOBNM  DS    CL8                     OTHER ADDRESS SPACE JOBNAME
XMADDR   DS    A                       OTHER ADDRESS SPACE ADDRESS
XMINDIC  DS    CL1                     INDICATOR, ' '=SUCCESSFUL
*                                        'S'=MEMORY SWAPPED OUT
*                                        'P'=PROTECTION EXCEPTION
         DS    CL1                     RESERVED
XMLENG   DS    H                       MOVE LENGTH, 0001-0100 HEX
XMAREA   DS    CL256                   1-256 BYTE DATA AREA
*
**********************************************************************
*        PREFIXED STORAGE AREA                                       *
*        IHAPSA                                                      *
**********************************************************************
*
PSA      DSECT ,                       LOW 4K MEMORY AREA
FLCCVT   EQU   PSA+16,4                CVT POINTER
PSAAOLD  EQU   PSA+548,4               ASCB OLD POINTER
*
**********************************************************************
*        COMMUNICATIONS VECTOR TABLE                                 *
*        CVT  DSECT=YES                                              *
**********************************************************************
*
CVT      DSECT ,                       COMMUNICATIONS VECTOR TABLE
CVTBRET  EQU   CVT+82,2                RETURN TO CALLER (BAL INSTR)
CVTASVT  EQU   CVT+556,4               POINTER TO ASVT
*
**********************************************************************
*        ADDRESS SPACE VECTOR TABLE                                  *
*        IHAASVT                                                     *
**********************************************************************
*
ASVT     DSECT ,                       ADDRESS SPACE VECTOR TABLE
ASVTMAXU EQU   ASVT+516,4              MAX NUMBER OF ADDRESS SPACES
ASVTENTY EQU   ASVT+528,4              POINTER TO ASCB
ASVTAVAL EQU   X'80'                   1=ASID AVAILABLE, 0=ASSIGNED
*
**********************************************************************
*        ADDRESS SPACE CONTROL BLOCK                                 *
*        IHAASCB                                                     *
**********************************************************************
*
ASCB     DSECT ,                       ADDRESS SPACE CONTROL BLOCK
ASCBASID EQU   ASCB+36,2               ADDRESS SPACE IDENTIFIER
ASCBDP   EQU   ASCB+43,1               DISPATCHING PRIORITY (0-255)
ASCBASXB EQU   ASCB+108,4              POINTER TO ASXB
ASCBJBNI EQU   ASCB+172,4              POINTER TO JOBNAME (INITIATED)
ASCBJBNS EQU   ASCB+176,4              POINTER TO JOBNAME (STARTED)
XMEMGET  CSECT
*
***********************************************************************
*        REGISTER EQUATES                                             *
***********************************************************************
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         IHASDWA
XMEMGET  CSECT
         LTORG
MYSDWA   DS    CL(SDWAEND-SDWA)        MY SDWA SAVE AREA
         END
