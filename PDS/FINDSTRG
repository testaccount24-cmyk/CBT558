         PRINT NOGEN
         TITLE '*****FINDSTRG: SCAN PDS(S) FOR STRINGS*****'
FINDSTRG SVLNK R3,R4
***********************************************************************
*                          EACH MEMBER IS READ (UNLESS EXCLUDED). FOR *
* EACH RECORD READ,                                                   *
*            THE RECORD IS SEARCHED TO SEE IF IT CONTAINS ANY OF THE  *
* SPECIFIED STRINGS. IF IT DOES, IT IS WRITTEN TO THE OUTPUT FILE.    *
*                                                                     *
* THE STRINGS FILE MUST BE RECFM=FB,LRECL=80. IT CONTAINS THE STRINGS *
* TO BE LOCATED IN THE INPUT FILES. UP TO 500 STRINGS MAY BE ENTERED, *
* ONE PER RECORD. THE STRING IS ASSUMED TO BEGIN IN COLUMN 1 (WHICH   *
* MAY BE BLANK, IF PRECEDING BLANKS ARE DESIRED), AND ENDS EITHER WITH*
* THE LAST NON-BLANK COLUMN IN THE OR ONE COLUMN LEFT OF THIS OF THE  *
* IF THE LAST NON-BLANK COLUMN CONTAINS A "<". IF THE LAST CHARACTER  *
* OF THE STRING TO BE FOUND IS AN "<", IT MUST BE FOLLOWED BY ANOTHER *
* ",". THIS PERMITS TRAILING BLANKS TO BE INCLUDED IN THE STRING.     *
*                                                                     *
* THE OUTPUT FILE MUST HAVE RECFM=FB,LRECL=90, WHICH IS HARD-CODED.   *
*                                                                     *
* AUTHOR R THORNTON JULY 1997                                         *
***********************************************************************
*
***********************************************************************
*        LOCATE THE TIOT FOR DDNAME SEARCHES                          *
***********************************************************************
GETCVT   L     R1,16                   GET CVT ADDRESS
         L     R1,0(R1)                GET CVTTCBP
         L     R1,0(R1)                GET TCB ADDRESS
         L     R1,12(R1)               GET TIOT ADDRESS
         LA    R1,24(R1)               GET ADDRESS OF 1ST DD ENTRY
         ST    R1,TIOTDD               SAVE TIOT DD ENTRY ADDRESS
***********************************************************************
* INITIALIZATION: OPEN INPUT AND OUTPUT FILES. READ THE STRINGS FILE, *
* STORING STRINGS IN THE STRINGTB TABLE. EACH STRING IS STORED LEFT   *
* JUSTIFIED IN THE LAST 71 BYTES OF THE TABLE ENTRY. THE FIRST BYTE OF*
* EACH ENTRY IS USED TO CONTAIN THE LENGTH CODE (LENGTH-1) OF THE     *
* STRING.                                                             *
***********************************************************************
         OPEN  (OUTPUT,OUTPUT,STRINGS) OPEN FILES
         PUT   OUTPUT,STARS            WRITE HEADER DELIMITER
         PUT   OUTPUT,STRINGHD         WRITE STRING HEADER LINE
         PUT   OUTPUT,STARS            WRITE HEADER DELIMITER
READCARD GET   STRINGS,STRCARD         READ STRING RECORD
         PUT   OUTPUT,STRCARD          ECHO IT TO OUTPUT
         CLI   STRCARD,C'*'            COMMENT RECORD?
         BE    READCARD                YES, GO READ AGAIN
         L     R1,STRCURR              POINT TO CURRENT ENTRY
         C     R1,STREND               PAST END OF TABLE?
         BH    EXCEED2                 YES, ERROR
         LA    R15,71                  GET MAX POSSIBLE LENGTH CODE
         LA    R14,STRCARD+71          POINT TO LAST POSSIBLE TERM
CRDLNBK  CLI   0(R14),C' '             FOUND LAST NON-BLANK COLUMN?
         BNE   LASNONBK                YES
         BCTR  R15,0                   NO, DECREMENT STRBOL LENGTH CODE
         BCT   R14,CRDLNBK             DECREMENT POINTER AND LOOP
LASNONBK CLI   0(R14),C'<'             GOT THE TERMINATOR SIGN?
         BNE   SAVELENG                NO
         BCTR  R15,0                   YES, DON'T INCLUDE IN LENGTH
SAVELENG STC   R15,0(R1)               YES, SAVE STRING LENGTH
         MVC   1(71,R1),BLANKS         PRE-CLEAR ENTRY
         EX    R15,TBLMOVE             MOVE STRING TO TABLE
         LA    R1,72(R1)               ADVANCE TO NEXT ENTRY
         ST    R1,STRCURR              SAVE CURRENT ENTRY POINTER
         B     READCARD                CONTINUE
TBLMOVE  MVC   1(1,R1),STRCARD         EXECUTED MOVE
EXCEED2  WTO   'TOO MANY STRING RECORDS, 500 MAX',ROUTCDE=11
         ABEND 114,DUMP                TERMINATE IN ERROR
***********************************************************************
* INITIALIZATION: SORT THE STRINGS READ IN ASCENDING ORDER            *
***********************************************************************
ENDCARDS PUT   OUTPUT,STARS            WRITE HEADER DELIMITER
         PUT   OUTPUT,DATAHD           WRITE DATA HEADER LINE
         PUT   OUTPUT,STARS            WRITE HEADER DELIMITER
         L     R1,STRCURR              GET NEXT TABLE ADDRESS
         MVI   0(R1),X'00'             SET END ENTRY LENGTH = 1
         MVI   1(R1),X'FF'             SET END ENTRY DATE = FF
         ST    R1,STREND               SET ACTUAL TABLE END
         L     R1,STRTBL               POINT TO TABLE START
NEXPASS  LR    R2,R1                   POINT TO 1ST PASS ENTRY
NEXNTRY  LA    R2,72(R2)               POINT TO NEXT ENTRY
         C     R2,STREND               PAST END OF TABLE?
         BH    ENDPASS                 YES
         CLC   1(72,R2),1(R1)          2ND ENTRY IS LOW?
         BL    SRTSWCH                 YES, GO SWITCH
         B     NEXNTRY                 NO, CONTINUE PASS
SRTSWCH  MVC   STRCARD,0(R1)           SAVE 1ST ENTRY
         MVC   0(72,R1),0(R2)          MOVE 2ND TO 1ST
         MVC   0(72,R2),STRCARD        MOVE 1ST TO SECOND
         B     NEXNTRY                 CONTINUE PASS
ENDPASS  LA    R1,72(R1)               POINT TO NEXT TABLE ENTRY
         C     R1,STREND               PAST END OF TABLE?
         BL    NEXPASS                 NO
***********************************************************************
* INITIALIZATION: CHECK THE FIRST BYTE OF THE FIRST STRING IN THE     *
* TABLE. IF IT IS LOWER THAN THE LETTER "A", PUT THE ADDRESS OF THE   *
* FIRST STRING ENTRY IN THE LOWPTR FIELD FOR USE IN LATER SCANNING.   *
* NEXT, MOVE THE VALUE X'01' TO THE LOCATION IN THE TRTSCH TRT TABLE  *
* CORRESPONDING TO THIS BYTE. THIS WILL CAUSE THE SCANNING TRT TO     *
* STOP WHEN THIS BYTE IS FOUND IN AN INPUT SOURCE RECORD. CONTINUE TO *
* SEARCH THROUGH THE STRING TABLE SO LONG AS THE STRINGS BEGIN WITH   *
* VALUES LESS THAN THE LETTER "A", SETTING THE CORRESPONDING TRT TABLE*
* LOCATION TO X'01' FOR EACH ONE FOUND.                               *
***********************************************************************
ENDSORT  L     R1,STRTBL               POINT TO TABLE START
         CLI   1(R1),C'A'              1ST STRING BEGINS < A?
         BNL   FINDALFA                NO
         STCM  R1,7,LOWPTR+1           YES, SET BEGIN SRCH ADDRESS
FINDALFA CLI   1(R1),C'A'              FOUND FIRST ALPHA?
         BNL   ALFACHEK                PERHAPS
         SR    R14,R14                 CLEAR FOR INSERT
         IC    R14,1(R1)               PICK UP 1ST BYTE OF STRING
         LA    R14,TRTSCH(R14)         POINT TO TRT TABLE BYTE
         MVI   0(R14),X'01'            SET STOP FOR THIS BYTE
         LA    R1,72(R1)               STEP TO NEXT ENTRY
         C     R1,STREND               PAST END OF TABLE?
         BH    NEWINFIL                YES
         B     FINDALFA                ELSE CONTINUE SEARCH
***********************************************************************
* INITIALIZATION: ON ENTRY, R1 POINTS TO A STRING TABLE ENTRY. CHECK  *
* THE FIRST BYTE OF THE STRING FOR ALPHABETIC. IF GREATER THAN THE    *
* LETTER "Z", GO TO GOTHIONE. THIS CODE SEARCHES THROUGH THE STRING   *
* TABLE UNTIL THE TABLE IS EXHAUSTED, OR A STRING IS FOUND HAVING A   *
* FIRST BYTE GREATER THAN THE LETTER "Z". FOR EACH NEW ALPHABETIC     *
* CHARACTER FOUND STARTING A STRING, THE ADDRESS OF THE FIRST STRING  *
* WITH THIS STARTING LETTER IS MOVED TO THE ADDRESS TABLE ENTRY (APTR *
* THROUGH ZPTR). IN ADDITION, A VALUE BETWEEN 01 AND 1B CORRESPONDING *
* TO A-Z IS MOVED TO THE SCANNING TABLE, TRTSCH, SO THAT THE BYTE WILL*
* STOP THE SCANNING TRT IF FOUND WITHIN AN INPUT RECORD.              *
***********************************************************************
ALFACHEK CLI   1(R1),C'Z'              IS IT AN ALPHABETIC?
         BH    GOTHIONE                NO
         LA    R15,APTR                POINT TO LOAD ADDR TABLE
NEWALFA  CLC   1(1,R1),0(R15)          FOUND ADDRESS ENTRY?
         BE    SAVALFAD                YES
NEWSTEP  LA    R15,4(R15)              NO, ADVANCE AN ENTRY
         C     R15,LDADEND             PAST END OF TABLE?
         BH    NEWINFIL                YES
         B     NEWALFA                 NO, CONTINUE SEARCH
SAVALFAD STCM  R1,7,1(R15)             SET ADDRESS IN ENTRY
         SR    R2,R2                   CLEAR FOR INSERT
         IC    R2,1(R1)                GET 1ST BYTE OF STRING
         LA    R14,TRTSCH(R2)          POINT TO TRT TABLE BYTE
         CLI   1(R1),C'R'              ALPHA S-Z?
         BNL   GOTSZ                   YES
         CLI   1(R1),C'J'              ALPHA J-R?
         BNL   GOTJR                   YES
         LA    R2,65(R2)               CONVERT A-I TO 02-0A
         B     SETTABL                 GO SET IN TABLE
GOTJR    LA    R2,58(R2)               CONVERT J-R TO 0B-13
         B     SETTABL                 GO SET IN TABLE
GOTSZ    LA    R2,50(R2)               CONVERT S-Z TO 14-1B
SETTABL  STC   R2,0(R14)               SET BYTE IN TRT TABLE
ALFASTEP LA    R1,72(R1)               STEP TO NEXT STRING IN TABLE
         C     R1,STREND               PAST END OF TABLE?
         BH    NEWINFIL                YES
         CLC   1(1,R1),0(R15)          1ST STRING BYTE SAME AS LAST?
         BE    ALFASTEP                YES, CONTINUE
         CLI   1(R1),C'Z'              STILL ALPHABETIC?
         BH    GOTHIONE                NO, GO FINISH
         B     NEWSTEP                 CONTINUE
***********************************************************************
* INITIALIZATION: ON ENTRY, R1 POINTS TO A STRING TABLE ENTRY. THE    *
* FIRST BYTE OF THE STRING IS GREATER THAN THE LETTER "Z". THE ADDRESS*
* OF THIS ENTRY IS MOVED TO THE HIPTR FIELD, AND THE VALUE X'1C' IS   *
* SET IN THE TRTSCH TRT TABLE AT THE LOCATION CORRESPONDING TO THE    *
* VALUE OF THE STRING'S FIRST BYTE. THE REST OF THE STRING TABLE IS   *
* SEARCHED, AND X'1C' IS MOVED TO THE TRTSCH TABLE FOR EACH DIFFERENT *
* STRING STARTING VALUE.                                              *
***********************************************************************
GOTHIONE STCM  R1,7,HIPTR+1            SET LOAD ADDRESS POINTER
HICLEAR  SR    R2,R2                   CLEAR FOR INSERT
         IC    R2,1(R1)                PICK UP STARTING BYTE
         LA    R14,TRTSCH(R2)          POINT TO BYTE
         MVI   0(R14),X'1C'            SET TRT STOP
         LA    R1,72(R1)               STEP TO NEXT STRING
         C     R1,STREND               PAST END OF TABLE?
         BNH   HICLEAR                 NO, CONTINUE
***********************************************************************
* INITIALIZATION:  FIND THE NEXT DDNAME BEGINNING WITH "INPUT". WHEN  *
* NO MORE ARE FOUND, GO TO END OF JOB. FOR EACH INPUTXXX DDNAME, MOVE *
* THE DDNAME TO THE INPUT DCB AND OPEN IT AND READ THE JFCB TO OBTAIN *
* DATASET INFORMATION. CHECK THE JFCB TO INSURE THE DATASET HAS FIXED *
* FIXED LENGTH 80-BYTE RECORDS, AND IS A PDS. CALL THE READDIR AND    *
* READMEM SUBROIUTINES TO OPEN THE FILE FOR PROCESSING.               *
***********************************************************************
NEWINFIL L     R1,TIOTDD               GET TIOT DD ENTRY ADDRESS
         SR    R2,R2                   CLEAR WORK REG
CKLSTDD  CLI   0(R1),0                 LAST TIOT DD ENTRY
         BE    EOJ                     YES
         CLC   4(5,R1),=C'INPUT'       DDNAME BEGINS WITH INPUT?
         BE    USEDD                   YES
DDSTEP   IC    R2,0(R1)                GET DD ENTRY LENGTH
         AR    R1,R2                   STEP TO NEXT DD ENTRY
         B     CKLSTDD                 GO CK NEXT DD
USEDD    MVC   INPUT+40(8),4(R1)       MOVE DDNAME IN TIOT TO DCB
         IC    R2,0(R1)                GET DD ENTRY LENGTH
         AR    R1,R2                   STEP TO NEXT DD ENTRY
         ST    R1,TIOTDD               SAVE IT'S ADDRESS
         MVC   OPEN+6(3),INPUT+45      DDNAME TO OPEN PARM FOR READMEM
         MVC   CLOSE+6(3),INPUT+45     DDNAME TO CLOSE PARM FOR READMEM
         OPEN  INPUT                   OPEN THE FILE FOR INPUT
         RDJFCB INPUT                  READ JFCB FOR INPUT FILE
         MVC   OUTREC,BLANKS           BLANK FILL OUTPUT RECORD
         MVI   OUTREC,C'='             BUILD ARROW
         MVC   OUTREC+1(17),OUTREC        POINTING TO
         MVI   OUTREC+18,C'>'                 DSNAME
         MVC   OUTREC+20(44),JFCB      DSNAME TO HEADER
         LA    R1,OUTREC+89            POINT TO OUTREC RIGHT END
CKATBLK  CLI   0(R1),C' '              AT A BLANK?
         BNE   ATSOLID                 NO
         MVI   0(R1),C'='              YES, SET TO "="
         BCT   R1,CKATBLK              DECREMENT AND LOOP
ATSOLID  MVI   1(R1),C' '              CLEAR NEXT BYTE
         MVI   2(R1),C'<'              AND THE NEXT
         PUT   OUTPUT,OUTREC           WRITE HEADER
         MVC   OUTREC,BLANKS           BLANK FILL OUTPUT RECORD
         PUT   OUTPUT,OUTREC           WRITE A BLANK LINE
         MVI   OUTDLM,C':'             SET DELIMITER
         CLC   JFCLRECL,H80            80-BYTE LOGICAL RECORDS?
         BNE   BADINPUT                NO, ERROR
         TM    JFCRECFM,X'C0'          POSSIBLE FIXED LENGTH RECORDS?
         BNM   BADINPUT                NO, ERROR
         TM    JFCRECFM,X'80'          FIXED LENGTH RECORDS?
         BZ    BADINPUT                NO, ERROR
         CLI   JFCDSORG,X'02'          DSORG=PO?
         BNE   BADINPUT                NO, ERROR
         CLI   JFCELNM,C' '            MEMBER NAME SPECIFIED?
         BH    BADINPUT                YES, ERROR
         CALL  READDIR,OPEN            OPEN DIRECTORY FILE
         CALL  READMEM,OPEN            OPEN MEMBER FILE
         B     ENDINIT                 GO COMPLETE INITIALIZATION
BADINPUT WTO   'FINDSTRG: INVALID INPUT FILE. FILE MUST BE',ROUTCDE=11
         WTO   '         DSORG=PO, LRECL=80, AND RECFM=FB ',ROUTCDE=11
         WTO   '         OR RECFM=F',ROUTCDE=11
         ABEND 777,DUMP                TERMINATE IN ERROR
ENDINIT  LA    R12,MEMREC+71           POINT TO LAST BYTE OF RECORD
***********************************************************************
* MAINLINE PROCESSING: FOR EACH INPUTXXX FILE FOUND, LOCATE THE NEXT  *
* MEMBER, POSITION TO IT, AND READ RECORDS TO END OF MEMBER, REPEATING*
* UNTIL THERE ARE NO MORE MEMBERS. FOR EACH RECORD READ, SCAN FOR     *
* SPECIFIED STRINGS. IF ANY SPECIFIED STRING IS FOUND IN AN INPUT     *
* RECORD, WRITE AN OUTPUT RECORD CONTAINING THE MEMBER NAME AND THE   *
* ENTIRE INPUT RECORD.                                                *
***********************************************************************
NEWMEM   CALL  READDIR,(READ,DIRECTRY) READ NEXT DIRECTORY ENTRY
         CLI   MEMNAME,EOFHI           END OF FILE
         BH    ENDFILE                 YES, END OF PDS
         CLI   MEMNAME,EOFLO           END OF FILE
         BL    ENDFILE                 YES, END OF PDS
DOFIND   MVC   FINDNAM,MEMNAME         NAME TO FIND LIST
         CALL  READMEM,FIND            LOCATE MEMBER
         CLI   FINDNAM,0               MEMBER FOUND
         BE    NEWMEM                  NO, TRY NEXT MEMBER
CALLREAD CALL  READMEM,(READ,MEMREC)   READ NEXT RECORD IN MEMBER
         CLI   MEMREC,EOF              IS IT EOF
         BE    NEWMEM                  YES, GO TO NEXT MEMBER
CHEKRECD MVC   SAVEREC,MEMREC          SAVE ORIGINAL FOR OUTPUT
         LA    R11,MEMREC-1            GET RECORD ADDRESS - 1
TRTSCAN  SR    R2,R2                   CLEAR FOR TRT INSERT
         TRT   1(80,R11),TRTSCH        SCAN FOR POSSIBLE STRING
         BZ    CALLREAD                NONE FOUND, GO READ AGAIN
         C     R1,MRECND               FOUND WITHIN RECORD?
         BH    CALLREAD                NO, GO READ AGAIN
         LA    R1,0(R1)                CLEAR HI ORDER BYTE
         LR    R11,R1                  COPY ADDRESS FOUND
         LR    R15,R12                 COPY END ADDRESS
         SR    R15,R11                 LENGTH REMAINING IN RECORD
         SLL   R2,3                    MULTIPLY TRT CODE FOR BRANCH
         B     BRTBL-8(R2)             GO GET STRING TABLE POINTER
BRTBL    L     R2,LOWPTR               POINT TO 1ST STRING IN TABLE
         B     STRSRCH                 GO SEARCH TABLE
ASRCH    L     R2,APTR                 POINT TO 1ST STRING STARTING "A"
         B     STRSRCH                 GO SEARCH TABLE
BSRCH    L     R2,BPTR                 POINT TO 1ST STRING STARTING "B"
         B     STRSRCH                 GO SEARCH TABLE
CSRCH    L     R2,CPTR                 POINT TO 1ST STRING STARTING "C"
         B     STRSRCH                 GO SEARCH TABLE
DSRCH    L     R2,DPTR                 POINT TO 1ST STRING STARTING "D"
         B     STRSRCH                 GO SEARCH TABLE
ESRCH    L     R2,EPTR                 POINT TO 1ST STRING STARTING "E"
         B     STRSRCH                 GO SEARCH TABLE
FSRCH    L     R2,FPTR                 POINT TO 1ST STRING STARTING "F"
         B     STRSRCH                 GO SEARCH TABLE
GSRCH    L     R2,GPTR                 POINT TO 1ST STRING STARTING "G"
         B     STRSRCH                 GO SEARCH TABLE
HSRCH    L     R2,HPTR                 POINT TO 1ST STRING STARTING "H"
         B     STRSRCH                 GO SEARCH TABLE
ISRCH    L     R2,IPTR                 POINT TO 1ST STRING STARTING "I"
         B     STRSRCH                 GO SEARCH TABLE
JSRCH    L     R2,JPTR                 POINT TO 1ST STRING STARTING "J"
         B     STRSRCH                 GO SEARCH TABLE
KSRCH    L     R2,KPTR                 POINT TO 1ST STRING STARTING "K"
         B     STRSRCH                 GO SEARCH TABLE
LSRCH    L     R2,LPTR                 POINT TO 1ST STRING STARTING "L"
         B     STRSRCH                 GO SEARCH TABLE
MSRCH    L     R2,MPTR                 POINT TO 1ST STRING STARTING "M"
         B     STRSRCH                 GO SEARCH TABLE
NSRCH    L     R2,NPTR                 POINT TO 1ST STRING STARTING "N"
         B     STRSRCH                 GO SEARCH TABLE
OSRCH    L     R2,OPTR                 POINT TO 1ST STRING STARTING "O"
         B     STRSRCH                 GO SEARCH TABLE
PSRCH    L     R2,PPTR                 POINT TO 1ST STRING STARTING "P"
         B     STRSRCH                 GO SEARCH TABLE
QSRCH    L     R2,QPTR                 POINT TO 1ST STRING STARTING "Q"
         B     STRSRCH                 GO SEARCH TABLE
RSRCH    L     R2,RPTR                 POINT TO 1ST STRING STARTING "R"
         B     STRSRCH                 GO SEARCH TABLE
SSRCH    L     R2,SPTR                 POINT TO 1ST STRING STARTING "S"
         B     STRSRCH                 GO SEARCH TABLE
TSRCH    L     R2,TPTR                 POINT TO 1ST STRING STARTING "T"
         B     STRSRCH                 GO SEARCH TABLE
USRCH    L     R2,UPTR                 POINT TO 1ST STRING STARTING "U"
         B     STRSRCH                 GO SEARCH TABLE
VSRCH    L     R2,VPTR                 POINT TO 1ST STRING STARTING "V"
         B     STRSRCH                 GO SEARCH TABLE
WSRCH    L     R2,WPTR                 POINT TO 1ST STRING STARTING "W"
         B     STRSRCH                 GO SEARCH TABLE
XSRCH    L     R2,XPTR                 POINT TO 1ST STRING STARTING "X"
         B     STRSRCH                 GO SEARCH TABLE
YSRCH    L     R2,YPTR                 POINT TO 1ST STRING STARTING "Y"
         B     STRSRCH                 GO SEARCH TABLE
ZSRCH    L     R2,ZPTR                 POINT TO 1ST STRING STARTING "Z"
         B     STRSRCH                 GO SEARCH TABLE
HISRCH   L     R2,HIPTR                POINT TO 1ST STRING > "Z"
STRSRCH  LA    R2,0(R2)                CLEAR HI-ORDER BYTE
         C     R2,STREND               PAST END OF TABLE?
         BH    TRTSCAN                 YES, NO STRING FOUND
         SR    R1,R1                   CLEAR FOR INSERT
         ICM   R1,1,0(R2)              GET STRING LENGTH FROM ENTRY
         BZ    TRTSCAN                 LAST ENTRY, NO STRING FOUND
         CR    R1,R15                  RECORD CAN CONTAIN STRING?
         BNH   DOCMPR                  YES, GO COMPARE FOR STRING
SYSRSTEP LA    R2,72(R2)               STEP TO NEXT STRING ENTRY
         CLC   1(1,R2),0(R11)          SAME STARTING BYTE?
         BH    TRTSCAN                 NOT FOUND IF TABLE IS HIGH
         B     STRSRCH                 ELSE GO COMPARE
COMPARE  CLC   0(1,R11),1(R2)          EXECUTED COMPARE
DOCMPR   EX    R1,COMPARE              COMPARE RECORD:STRING ENTRY
         BNE   SYSRSTEP                BRANCH IF NOT EQUAL
         MVC   OUTMEM,MEMNAME          MEMBER NAME TO OUTPUT RECORD
         MVC   OUTIMAG,SAVEREC         INPUT RECORD TO OUTPUT
         PUT   OUTPUT,OUTREC           WRITE OUTPUT RECORD
         B     CALLREAD                GO GET NEXT RECORD
***********************************************************************
*        END OF INPUT FILE                                            *
***********************************************************************
ENDFILE  CLOSE INPUT                   CLOSE CURRENT FILE
         FREEPOOL INPUT                FREE THE BUFFER
         CALL  READDIR,CLOSE           CLOSE DIRECTORY FILE
         CALL  READMEM,CLOSE           CLOSE MEMBER FILE
         B     NEWINFIL                GO TRY FOR ANOTHER FILE
***********************************************************************
*        END OF JOB                                                   *
***********************************************************************
EOJ      CLOSE (OUTPUT,,INPUT,,STRINGS) CLOSE FILES
         L     R13,4(R13)              GET CALLER'S SAVE ADDRESS
         LM    R14,R12,12(R13)         GET CALLER'S REGISTERS
         SR    R15,R15                 ZERO RETURN CODE
         BR    R14                     RETURN TO CALLER
***********************************************************************
*        STORAGE AND FILE AREAS                                       *
***********************************************************************
TIOTDD   DC    A(0)                    ADDRESS OF CURRENT TIOT DD ENTRY
MRECND   DC    A(MEMREC+79)            ADDRESS OF END OF INPUT RECORD
STRTBL   DC    A(STRINGTB)             FIRST STRING TABLE ADDRESS
STRCURR  DC    A(STRINGTB)             CURRENT STRING TABLE ADDRESS
STREND   DC    A(ENDSTRS)              END OF STRING TABLE
SAVEREC  DS    CL80                    ORIGINAL INPUT RECORD
STRCARD  DS    CL80                    STRING RECORD FROM INPUT
BLANKS   DC    CL90' '                 CONSTANT BLANKS
HIVAL    DC    XL8'FFFFFFFFFFFFFFFF'   CONSTANT HIGH-VALUES
H80      DC    H'80'                   CONSTANT 80
STRINGHD DC    CL90'                  STRING SELECTION RECORDS'
DATAHD   DC    CL90'            DATA RECORDS FOUND CONTAINING STRINGS'
*
STARS    DC    90C'*'                  LINE OF STARS
EOF      EQU   X'FF'                   MEMBER EOF INDICATOR
EOFHI    EQU   C'Z'                    DIRECTORY EOF INDICATOR (HIGH)
EOFLO    EQU   C' '                    DIRECTORY EOF INDICATOR (LOW)
LOWPTR   DC    A(HIVAL)                FOR STRINGS < "A"
APTR     DC    C'A',AL3(HIVAL)         FOR STRINGS STARTING "A"
BPTR     DC    C'B',AL3(HIVAL)         FOR STRINGS STARTING "B"
CPTR     DC    C'C',AL3(HIVAL)         FOR STRINGS STARTING "C"
DPTR     DC    C'D',AL3(HIVAL)         FOR STRINGS STARTING "D"
EPTR     DC    C'E',AL3(HIVAL)         FOR STRINGS STARTING "E"
FPTR     DC    C'F',AL3(HIVAL)         FOR STRINGS STARTING "F"
GPTR     DC    C'G',AL3(HIVAL)         FOR STRINGS STARTING "G"
HPTR     DC    C'H',AL3(HIVAL)         FOR STRINGS STARTING "H"
IPTR     DC    C'I',AL3(HIVAL)         FOR STRINGS STARTING "I"
JPTR     DC    C'J',AL3(HIVAL)         FOR STRINGS STARTING "J"
KPTR     DC    C'K',AL3(HIVAL)         FOR STRINGS STARTING "K"
LPTR     DC    C'L',AL3(HIVAL)         FOR STRINGS STARTING "L"
MPTR     DC    C'M',AL3(HIVAL)         FOR STRINGS STARTING "M"
NPTR     DC    C'N',AL3(HIVAL)         FOR STRINGS STARTING "N"
OPTR     DC    C'O',AL3(HIVAL)         FOR STRINGS STARTING "O"
PPTR     DC    C'P',AL3(HIVAL)         FOR STRINGS STARTING "P"
QPTR     DC    C'Q',AL3(HIVAL)         FOR STRINGS STARTING "Q"
RPTR     DC    C'R',AL3(HIVAL)         FOR STRINGS STARTING "R"
SPTR     DC    C'S',AL3(HIVAL)         FOR STRINGS STARTING "S"
TPTR     DC    C'T',AL3(HIVAL)         FOR STRINGS STARTING "T"
UPTR     DC    C'U',AL3(HIVAL)         FOR STRINGS STARTING "U"
VPTR     DC    C'V',AL3(HIVAL)         FOR STRINGS STARTING "V"
WPTR     DC    C'W',AL3(HIVAL)         FOR STRINGS STARTING "W"
XPTR     DC    C'X',AL3(HIVAL)         FOR STRINGS STARTING "X"
YPTR     DC    C'Y',AL3(HIVAL)         FOR STRINGS STARTING "Y"
ZPTR     DC    C'Z',AL3(HIVAL)         FOR STRINGS STARTING "Z"
HIPTR    DC    C'0',AL3(HIVAL)         FOR STRINGS STARTING > "Z"
LDADEND  DC    A(*)                    END OF TABLE POINTER "A"
*
OPEN     DC    CL9'OINPUT'             OPEN PARAMETER LIST
CLOSE    DC    CL9'CINPUT'             CLOSE PARAMETER LIST
READ     DC    C'R'                    READ PARAMETER
*
DIRECTRY DS    0CL11                   DIRECTORY DATA
MEMNAME  DS    CL8                     MEMBER NAME
MEMTTR   DS    XL3                     TTR OF FIRST BLOCK
*
FIND     DS    0CL10                   FIND MEMBER PARAMETER LIST
         DC    C'FN'                   FIND BY NAME
FINDNAM  DS    CL8                     NAME TO BE FOUND
*
MEMREC   DS    CL80                    MEMBER RECORD
*
OUTREC   DS    0CL90                   OUTPUT RECORD
OUTMEM   DC    CL8' '                  MEMBER NAME
OUTDLM   DC    CL2'  '                 DELIMITER
OUTIMAG  DC    CL80' '                 IMAGE OF INPUT RECORD
*
JFCAD    DS    0F
         DC    X'87'                   END OF LIST, JFCB ADDR
         DC    AL3(JFCB)               ADDRESS OF JFCB AREA
JFCB     DS    CL176                   JFCB FOR INPUT
JFCLRECL EQU   JFCB+104,2              LRECL
JFCRECFM EQU   JFCB+100,1              RECFM
JFCDSORG EQU   JFCB+98,1               DSORG
JFCELNM  EQU   JFCB+44,8               MEMBER NAME
*
INPUT    DCB   DSORG=PS,MACRF=GM,DDNAME=INPUT,EXLST=JFCAD,             X
               EODAD=ENDFILE
STRINGS  DCB   DSORG=PS,MACRF=GM,DDNAME=STRINGS,                       X
               RECFM=FB,LRECL=80,EODAD=ENDCARDS
OUTPUT   DCB   DSORG=PS,MACRF=PM,DDNAME=OUTPUT,                        X
               RECFM=FB,LRECL=90
*
*        TRT SCANNING TABLE TO FIND POSSIBLE STRING
TRTSCH   DC    256X'00'
         LTORG
*        STRING TABLE AREA WITH ROOM FOR 500 STRINGS
STRINGTB DS    CL36000
ENDSTRS  DS    CL72
         END
