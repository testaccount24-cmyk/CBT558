         TITLE '***** PRINT MEMBER, CSECT NAMES W/COBOL VERSION *****'
COBLTYPE SVLNK R3,R4
         PRINT NOGEN
*
***********************************************************************
* READS A LOAD MODULE AND PRINTS ONE LINE PER COBOL CSECT SHOWING THE *
* MEMBER NAME, CSECT NAME, COBOL VERSION USED TO COMPILE, AND COMPILE *
* DATE. FILES USED:                                                   *
*     DDNAME SYSLIB: RECFM=U. INPUT LOAD MODULE LIBRARY.              *
*     DDNAME SYSOUT: RECFM=FB,LRECL=80  OUTPUT FILE OF CSECT DATA     *
*                                                                     *
* AUTHOR R THORNTON - MAY 1994                                        *
*                                                                     *
***********************************************************************
         L     R14,0(R1)               GET PARM AREA ADDRESS
         ICM   R15,3,0(R14)            GET PARM LENGTH
         BZ    OPEN1                   BRANCH IF NO PARM DATA
         CH    R15,=H'44'              OVER 44 BYTES?
         BNH   EXMVC                   NO
         LH    R15,=H'44'              YES, SET LENGTH TO MAX
EXMVC    BCTR  R15,0                   COMPUTE LENGTH CODE FOR MVC
         EX    R15,MVCPARM             MOVE PARM DATA TO SAVE
         B     OPEN1                   CONTINUE
MVCPARM  MVC   OLDLIBRY(1),2(R14)      SAVE PARM DSNAME
****************************************************************
* OPEN FILES, GET STORAGE FOR TABLES.                          *
****************************************************************
OPEN1    L     R1,0(R1)                READ THE CONTROL CARD
         OPEN  (SYSOUT,OUTPUT,SYSLIB) OPEN FILES
         CALL  READDIR,OPEN            OPEN DIRECTORY FILE
         GETMAIN R,LV=65535            GET BUFFER STORAGE
         ST    R1,BUFAD                SAVE BUFFER ADDRESS
         GETMAIN R,LV=65535            GET SYMBOL TABLE STORAGE
         ST    R1,SYMTBAD              SAVE SYMBOL TABLE ADDRESS
         A     R1,ENDSYM               COMPUTE END ADDR
         ST    R1,ENDSYM               STORE TBL END ADDR
         GETMAIN R,LV=32767            GET STORAGE FOR TEXT
         ST    R1,TXTSTRT              SAVE TEXT ADDR
         GETMAIN R,LV=32767            GET STORAGE FOR TEXT
         ST    R1,IDRSTRT              SAVE IDR TEXT START
*
****************************************************************
* MAINLINE PROCESSING FOR THE LOAD MODULE.                     *
****************************************************************
*
MAINLINE L     R1,SYMTBAD              GET SYMBOL TABLE ADDRESS
         MVC   CURRSYM,SYMTBAD         SET CURRENT SYMBOL ADDR
         MVI   0(R1),X'FF'             TABLE END INDIC
         CALL  READDIR,(READ,DIRECTRY) READ NEXT DIRECTORY ENTRY
         CLI   MEMNAME,X'FF'           END OF DIRECTORY
         BE    EOJ                     YES, END OF JOB
         TRT   MEMNAME,VALCHAR         MEMBER NAME VALID CHARS?
         BNZ   MAINLINE                NO, DROP IT
         MVC   MEMBER,MEMNAME          NAME TO BLDL PARMS
         BLDL  SYSLIB,BLDLIST          ISSUE BLDL
         LTR   R15,R15                 ANY ERRORS
         BNZ   MAINLINE                YES
         MVI   CCAT,0                  INSURE TTR0
         POINT SYSLIB,TTRMOD           POINT TO 1ST BLOCK OF MODULE
READBLOK L     R6,BUFAD                GET BUFFER ADDRESS
         READ  DECB,SF,SYSLIB,(6),'S'  READ BLOCK FROM MEMBER
         CHECK DECB                    AWAIT COMPLETION
GOTBLOK  CLI   0(R6),X'20'             CESD RECORD
         BNE   TESTOTHR                NO
         BAS   R9,CESDREC              PROCESS CESD RECORDS
         B     READBLOK                GO READ AGAIN
TESTOTHR CLI   0(R6),1                 IT IS CONTROL
         BE    PERFORM                 YES
         CLI   0(R6),5                 IS IT CONTROL
         BE    PERFORM                 YES
         CLI   0(R6),13                IS IT CONTROL
         BE    PERFORM                 YES
         CLI   0(R6),3                 IS IT CTL AND RLD
         BE    PERFORM                 YES
         CLI   0(R6),7                 IS IT CTL AND RLD
         BE    PERFORM                 YES
         CLI   0(R6),15                IS IT CTL AND RLD
         BE    PERFORM                 YES
         CLI   0(R6),2                 IS IT RLD?
         BE    RLDREC                  YES
         CLI   0(R6),6                 IS IT RLD?
         BE    RLDREC                  YES
         CLI   0(R6),14                IS IT RLD?
         BE    RLDREC                  YES
         CLI   0(R6),X'80'             IS IT CSECT IDR RECORD?
         BNE   READBLOK                NONE OF THESE, SKIP
         MVI   GOTBKSW,0               RESET SWITCH
         BAS   R9,IDRREC               YES
         L     R6,BUFAD                RESTORE BUFFER ADDRESS
         CLI   GOTBKSW,1               NEXT BLOCK ALREADY READ?
         BE    GOTBLOK                 YES
         B     READBLOK                NO, GO READ NEXT
RLDREC   TM    0(R6),X'08'             LAST RECORD IN MEMBER?
         BO    PRTDATA                 YES
         B     READBLOK                ELSE SKIP IT
PERFORM  BAS   R9,CNTLRECS             PROCESS CONTROL RECORD
         TM    PROCESS,X'40'           MODULE PROCESSING DONE
         BZ    READBLOK                NO, GO READ AGAIN
PRTDATA  BAS   R9,FORMPRNT             GO FORMAT AND PRINT
         B     MAINLINE                YES, GO TO NEXT MEMBER
EOFPDS   CLOSE SYSLIB                  END OF PDS WHILE READING
         OPEN  SYSLIB                  CLOSE/OPEN TO CLEAR
         B     PRTDATA                 GO PROCESS LAST
*
****************************************************************
* PROCESS LOAD MODULE CONTROL RECORDS. THESE RECORDS PRECEDE   *
* TEXT RECORDS, WHICH ARE READ AND PLACED IN STORAGE IN CONTIG-*
* UOUS LOCATIONS.                                              *
****************************************************************
*
CNTLRECS ST    R9,CT9                  SAVE RETURN ADDR
         L     R9,TXTSTRT              POINT TO TEXT STORAGE AREA
         MVI   PROCESS,0               CLEAR INDICATOR
READTEXT READ  DECB,SF,,(9),MF=E       READ FOLLOWING TEXT RECORD
         CHECK DECB                    AWAIT COMPLETION
         SR    R8,R8                   CLEAR WORK
         TM    0(R6),X'08'             RECD PRECEDES LAST RECD OF MBR?
         BZ    CNCKTYP                 NO
         OI    PROCESS,X'40'           YES, SHOW END OF FILE
CNCKTYP  TM    0(R6),X'02'             CONTROL AND RLD?
         BO    CNPASRLD                YES
         LA    R12,16(R6)              @ CESD ENTRY NBR
         B     CNCKESD                 CONTINUE
CNPASRLD LH    R12,6(R6)               GET RLD SECTION LENGTH
         LA    R12,16(R6,R12)          @ CESD ENTRY NBR
CNCKESD  LH    R11,4(R6)               LENGTH OF CONTROL INFO SECTION
         SRL   R11,2                   COMPUTE NBR CNTL ENTRIES
         SR    R10,R10                 OFFSET TO 1ST BYTE
         SR    R9,R9                   INITIALIZE TEXT OFFSET
         SR    R1,R1                   CLEAR FOR INSERT
CNCKESD1 L     R1,SYMTBAD              POINT TO SYMBOL TABLE
         USING SYMTBL,R1
SYMNDCK1 CLI   0(R1),X'FF'             END OF TABLE?
         BNE   CPRESDID                NO
         XC    SYMENT,SYMENT           YES, CLEAR ENTRY
         MVC   EXTSYM,=C'????????'     SYMBOL NAME UNKNOWN
         MVI   TYOSYM,X'FF'            UNKNOWN TYPE
         MVC   SYMESDID,0(R12)         SET ESD ID
         MVI   SYMENT+L'SYMENT,X'FF'   SET NEW TABLE END
CPRESDID CLC   SYMESDID,0(R12)         FOUND CORRECT ENTRY?
         BE    NEXTCTL                 YES
         LA    R1,L'SYMENT(R1)         STEP TO NEXT ENTRY
         B     SYMNDCK1                CONTINUE
         DROP  R1
NEXTCTL  AH    R10,2(R12)              UPDATE TEXT OFFSET
         LA    R12,4(R12)              TO NEXT CNTL ENTRY
         BCT   R11,CNCKESD1            LOOP THRU CNTL ENTRIES
CTXIT    L     R9,CT9                  GET RETURN ADDR
         BR    R9                      EXIT
*
****************************************************************
* PROCESS COMPOSITE ESD RECORDS. DATA FROM THESE RECORDS IS    *
* PLACED IN THE SYMBOL TABLE.                                  *
****************************************************************
*
CESDREC  ST    R9,CES9                 SAVE RETURN
         L     R7,CURRSYM              GET SYMBOL TBL ADDR
         USING SYMTBL,R7
         LH    R10,4(R6)               GET ESD ID OF 1ST ITEM
         LH    R8,6(R6)                NBR BYTES OF ESD DATA
         SRL   R8,4                    COMPUTE NBR ENTRIES
         LA    R6,8(R6)                STEP TO 1ST RECORD ESD ITEM
CESDNXT  C     R7,ENDSYM               END OF TABLE
         BNL   CESDEXIT                YES, ERROR
         MVC   SYMMEM,MEMBER           MEMBER NAME
         MVC   EXTSYM,0(R6)            SYMBOL NAME
         MVC   TYOSYM,8(R6)            TYPE
         NI    TYOSYM,X'0F'            CLEAR BITS 0-3
         MVC   SYMIND,8(R6)            INDICATOR BYTE
         NI    SYMIND,X'0F'            CLEAR BITS 4-7
         TM    8(R6),X'14'             POSSIBLE ENTAB/SEGTAB
         BNO   CEMVAD                  NO
         TM    8(R6),X'03'             IS IT ENTAB/SEGTAB
         BNZ   CEMVAD                  NO
         MVC   TYOSYM(2),=X'0F00'      SHOW ENTAB/SEGTAB
CEMVAD   MVC   SYMADDR,9(R6)           ADDRESS OF SYMBOL
         MVC   SYMSEG,12(R6)           SEGMENT WHERE DEFINED
         MVC   SYMLENG,13(R6)          LENGTH OR LR ESD ID
         STCM  R10,3,SYMESDID          ESD ID
         MVC   SYMTNSLT,=CL10' '       CLEAR TRANSLATOR NAME
         XC    SYMVERML,SYMVERML       CLEAR VERSION AND MOD LEVEL
         MVC   SYMCPLDT,=X'00000F'     CLEAR COMPILED DATE
         CLI   TYOSYM,0                IS THIS AN SD?
         BE    ADVNC                   YES
         CLI   TYOSYM,4                IS IT AN UNNAMED CSECT?
         BNE   ADVNC2                  NO
ADVNC    LA    R7,L'SYMENT(R7)         TO NEXT TBL ENTRY LOCATION
ADVNC2   LA    R10,1(R10)              ADD 1 TO ESD COUNTER
         LA    R6,16(R6)               TO NEXT ESD ITEM IN INPUT
         BCT   R8,CESDNXT              LOOP THRU INPUT RECORD
         MVI   0(R7),X'FF'             SET END OF TABLE INDIC
         ST    R7,CURRSYM              SAVE NEXT TABLE ADDR
CESDEXIT L     R9,CES9                 GET RETURN ADDR
         BR    R9                      EXIT
         DROP  R7
*
****************************************************************
* PROCESS CSECT IDR RECORDS. DATA FROM THESE RECORDS IS PLACED *
* IN THE SYMBOL TABLE. EACH IDR ITEM BEGINS WITH ONE OR MORE   *
* ESDID'S TO WHICH THE FOLLOWING TRANSLATOR DATA SEGMENT       *
* APPLIES. THE LAST TWO-BYTE ESDID IN THE LIST HAS ITS HIGH BIT*
* ON. THE TRANSLATOR DATA SEGMENT FOLLOWS THE LAST ESDID. THE  *
* FIRST BYTE OF THE DATA SEGMENT CONTAINS X'00' IF IT IS 16    *
* BYTES LONG AND CONTAINS A SINGLE TRANSLATOR SEGMENT OR X'01' *
* IF IT IS 31 BYTES LONG AND CONTAINS A SECOND TRANSLATOR ITEM *
* FOR PLS. TRANSLATOR NAME, VERSION, MOD LEVEL, AND COMPILED   *
* DATE FOLLOW.                                                 *
****************************************************************
*
IDRREC   ST    R9,IDR9                 SAVE RETURN
         CLI   2(R6),X'04'             IS IT A TRANSLATOR IDR?
         BE    IDRGET                  YES
         CLI   2(R6),X'84'             IS IT A TRANSLATOR IDR?
         BNE   IDREXIT                 NO, IGNORE IT
IDRGET   BAS   R9,GETIDR               GO GET IDR DATA
         L     R6,IDRSTRT              POINT TO IDRDATA START
NXIDRITM LR    R8,R6                   R8 POINTS TO 1ST ESDID
         C     R6,IDRECND              PAST END OF RECORD?
         BNL   IDREXIT                 YES, EXIT
TSTLSTID TM    0(R6),X'80'             THIS THE LAST ESDID?
         BO    PTIDRDES                YES
         LA    R6,2(R6)                NO, STEP TO NEXT ESDID
         C     R6,IDRECND              PAST END OF RECORD?
         BNL   IDREXIT                 YES, EXIT
         B     TSTLSTID                GO CHECK IF LAST
PTIDRDES LA    R6,2(R6)                STEP TO IDR DESCRIPTION
         C     R6,IDRECND              PAST END OF RECORD?
         BNL   IDREXIT                 YES, EXIT
IDRNXTID MVC   IDRESD,0(R8)            SAVE THE ESDID
         NI    IDRESD,X'7F'            TURN OFF HIGH BIT IF ON
IDRLD7   L     R7,SYMTBAD              GET SYMBOL TBL ADDR
         USING SYMTBL,R7
IDRSRCH  CLI   0(R7),X'FF'             END OF TABLE?
         BE    IDRSTEP                 YES, ERROR
         CLC   SYMESDID,IDRESD         FOUND THE SYMBOL TBL ESD ENTRY?
         BE    IDRFND                  YES
         LA    R7,L'SYMENT(R7)         TO NEXT TBL ENTRY LOCATION
         B     IDRSRCH                 CONTINUE SEARCH
IDRFND   MVC   SYMTNSLT,=CL10'VS COBOL  ' ASSUME VS COBOL
         CLC   1(10,R6),=CL10'5740CB103 ' IS IT VS COBOL?
         BE    IDRMVVER                YES
         CLC   1(10,R6),=CL10'40CB1     ' IS IT VS COBOL?
         BE    IDRMVVER                YES
         MVC   SYMTNSLT,=CL10'COBOL II  ' ASSUME COBOL II
         CLC   1(10,R6),=CL10'566895801 ' IS IT COBOL II?
         BE    IDRMVVER                YES
         MVC   SYMTNSLT,=CL10'ASMH V2   ' ASSUME ASSEMBLER H V2
         CLC   1(10,R6),=CL10'566896201 ' IS IT ASSEMBLER H V2?
         BE    IDRMVVER                YES
         MVC   SYMTNSLT,=CL10'ASMH V1   ' ASSUME ASSEMBLER H V1
         CLC   1(10,R6),=CL10'5734AS100 ' IS IT ASSEMBLER H V1?
         BE    IDRMVVER                YES
         MVC   SYMTNSLT,=CL10'ASMF      ' ASSUME ASSEMBLER F
         CLC   1(10,R6),=CL10'5741SC103 ' IS IT ASSEMBLER F?
         BE    IDRMVVER                YES
         MVC   SYMTNSLT,1(R6)          ELSE MOVE TRANSLATOR NAME
IDRMVVER MVC   SYMVERML,11(R6)         MOVE VERSION AND MOD LEVEL
         MVC   SYMCPLDT,13(R6)         MOVE COMPILE DATE
IDRSTEP  TM    0(R8),X'80'             THIS THE LAST ESDID FOR XLATOR?
         BO    IDRNXLTR                YES
         LA    R8,2(R8)                NO, STEP TO NEXT ESDID
         B     IDRNXTID                GO PROCESS IT
IDRNXLTR CLI   0(R6),0                 ONLY ONE TRANSLATOR?
         BE    ONEIDR                  YES
         LA    R6,31(R6)               STEP PAST BOTH TRANSLATORS
         C     R6,IDRECND              PAST END OF RECORD?
         BNL   IDREXIT                 YES, EXIT
         B     NXIDRITM                GO HANDLE THIS IDR ITEM
ONEIDR   LA    R6,16(R6)               STEP PAST TRANSLATOR DATA
         C     R6,IDRECND              PAST END OF RECORD?
         BNL   IDREXIT                 YES, EXIT
         B     NXIDRITM                GO HANDLE THIS IDR ITEM
IDREXIT  L     R9,IDR9                 GET RETURN ADDR
         BR    R9                      EXIT
         DROP  R7
*
****************************************************************
* GET ENTIRE IDR DATA INTO BUFFER. THIS ROUTINE IS REQUIRED    *
* SINCE THE IDR RECORDS MAY SPAN RECORDS, AND DATA MAY BREAK   *
* AT ANY POINT. EACH IDR RECORD BEGINS WITH THE TYPE BYTE      *
* (X'80') FOLLOWED BY A LENGTH BYTE, THEN A SUB-TYPE BYTE WHICH*
* CONTAINS X'04' FOR TRANSLATOR RECORDS. THE ACTUAL IDR DATA   *
* FOLLOWS THE SUB-TYPE BYTE. THIS ROUTINE CONCATENATES ALL THE *
* IDRDATA FOR A STRING OF IDR RECORDS INTO A SINGLE STRING FOR *
* PROCESSING BY THE IDRREC ROUTINE.                            *
****************************************************************
GETIDR   ST    R9,GI9                  SAVE RETURN ADDRESS
         L     R8,IDRSTRT              POINT TO START OF IDRDATA
IDRBFMV  SR    R1,R1                   CLEAR FOR INSERT
         IC    R1,1(R6)                GET THIS RECORD DATA LENGTH
         SH    R1,=H'3'                DEDUCT 3 FOR DATA LENGTH
         EX    R1,IDREXMV              MOVE THIS DATA TO BUFFER
         LA    R8,1(R1,R8)             POINT TO NEXT BUFFER LOC
         ST    R8,IDRCURR              SAVE CURRENT IDR ADDR
IDRREAD  L     R6,BUFAD                GET BUFFER ADDRESS
         READ  DECB,SF,,(6),MF=E       READ FOLLOWING TEXT RECORD
         CHECK DECB                    AWAIT COMPLETION
         MVI   GOTBKSW,1               SHOW NEXT BLOCK READ
         CLI   0(R6),X'80'             GOT ANOTHER IDR RECORD?
         BNE   IDRCALC                 NO, GO CALCULATE END ADDR
         CLI   2(R6),X'04'             IS IT A TRANSLATOR IDR?
         BE    IDRGOT                  YES
         CLI   2(R6),X'84'             IS IT A TRANSLATOR IDR?
         BNE   IDRCALC                 NO END OF IDR DATA
IDRGOT   L     R8,IDRCURR              GET CURRENT IDR ADDR
         B     IDRBFMV                 GO CONCATENATE TO BUFFER
IDRCALC  L     R1,IDRCURR              PICK UP CURRENT ADDRESS
         BCTR  R1,0                    BACK UP TO LAST BYTE
         ST    R1,IDRECND              SAVE END ADDRESS
GIEXIT   L     R9,GI9                  GET RETURN ADDRESS
         BR    R9                      EXIT
IDREXMV  MVC   0(1,R8),3(R6)           EXECUTED MOVE
*
****************************************************************
* PRINT USING SYSOUT.                                          *
****************************************************************
*
PRINT    PUT   SYSOUT,OUTREC           WRITE PRINT LINE
         BR    R9                      EXIT
*
****************************************************************
* FORMAT PRINT LINES                                           *
****************************************************************
FORMPRNT ST    R9,FP9                  SAVE RETURN ADDRESS
         L     R12,SYMTBAD             POINT TO SYMBOL TABLE
         USING SYMTBL,R12
SYMENDCK CLI   0(R12),X'FF'            END OF TABLE?
         BE    FPEXIT                  YES
*        CLC   SYMTNSLT,=CL10' '       ANY TRANSLATOR IDR FOUND?
*        BE    STEPSYM                 NO, IGNORE IT
*        CLC   SYMCPLDT,=X'00000F'     ANY COMPILED DATE?
*        BE    STEPSYM                 YES, IGNORE IT
         CLC   EXTSYM(3),=CL3'ILB'     IS IT AN ILB MODULE?
         BE    STEPSYM                 YES, IGNORE IT
         CLC   EXTSYM(3),=CL3'IGZ'     IS IT AN IGZ MODULE?
         BE    STEPSYM                 YES, IGNORE IT
*        CLC   EXTSYM(8),=CL8'????????' IS IT AN UNKNOWN CSECT?
*        BE    STEPSYM                 YES, IGNORE IT
*        CLC   SYMMEM(8),=CL8'        ' BLANK MEMBER NAME?
*        BE    STEPSYM                 YES, IGNORE IT
*        TRT   SYMMEM,VALCHAR          VALID MEMBER NAME?
*        BNZ   STEPSYM                 YES, IGNORE IT
         MVC   OMEM,SYMMEM             MOVE MEMBER NAME
         MVC   OSYM,EXTSYM             MOVE CSECT NAME
CHPRVT   CLI   TYOSYM,4                UNNAMED CSECT?
         BNE   SETLANG                 NO
         MVC   OSYM,=CL8'$PRIVATE'     YES
SETLANG  MVC   OTRAN,SYMTNSLT          MOVE TRANSLATOR NAME
         UNPK  OVERML(5),SYMVERML(3)   MOVE TRANSLATOR VERSION AND MOD
         MVI   OVERML+4,C' '           CLEAR GARBAGE
         TR    OVERML,TRTBL-C'0'       MAKE IT PRINTABLE
         MVI   OENTPT,C' '             ASSUME THIS IS NOT ENTRY
         SR    R14,R14                 GET CSECT RELATIVE
         ICM   R14,7,SYMADDR             ADDRESS WITHIN RUN UNIT
         SR    R15,R15                 GET LINKEDIT ASSIGNED
         ICM   R15,7,LKEPA               ENTRY POINT ADDRESS
         CR    R15,R14                 IS ENTRY IN THIS CSECT?
         BL    PRTSYM                  NO
         SR    R1,R1                   GET RELATIVE END OF
         ICM   R1,7,SYMLENG               CSECT ADDRESS
         AR    R14,R1                         WITHIN RUN UNIT
         CR    R15,R14                 IS ENTRY POINT IN THIS CSECT?
         BNL   PRTSYM                  NO
         MVI   OENTPT,C'*'             YES, INDICATE ENTRY CSECT
PRTSYM   BAS   R9,PRINT                PRINT A LINE
STEPSYM  LA    R12,L'SYMENT(R12)       STEP TO NEXT ENTRY
         B     SYMENDCK                CONTINUE
FPEXIT   L     R9,FP9                  GET RETURN ADDRESS
         BR    R9                      RETURN
         DROP  R12
*
****************************************************************
* END OF JOB.                                                  *
****************************************************************
EOJ      CLOSE (SYSLIB,,SYSOUT) CLOSE FILES
         L     R13,4(R13)              GET POINTER TO CALLER'S SAVE ARE
         LM    R14,R12,12(R13)         RESTORE CALLER'S REGS
         SR    R15,R15                 CLEAR RETURN CODE
         BR    R14                     RETURN TO CALLER
*
*
*
****************************************************************
*                     DATA AND WORK AREAS
****************************************************************
*
         DS    0D
DBLWD    DS    D                       DOUBLEWORD WORK AREA
TESTNUM  DS    CL5                     NUMERIC TEST AREA
CSECT    DC    CL8' '                  SPECIFIED CSECT NAME
ESDID    DC    X'0001'                 ESD ID OF SPECIFIED CSECT
ENDLBLNM DC    CL8' '                  SYMBOL FOR END STMT BEGIN POINTE
START    DC    F'0'                    LKED ASSIGNED START ADDR OF CSEC
END      DC    F'0'                    CSECT END ADDRESS
LENGTH   DC    F'0'                    LENGTH OF SPECIFIED CSECT
TXTSTRT  DS    F                       @ TEXT STORAGE AREA
TXTEND   DS    F                       @ END OF TEXT AREA
TXTCURR  DS    F                       @ CURRENT TEXT LOC
OPEN     DC    CL9'OSYSLIB'            OPEN PARAMETER LIST
READ     DC    C'R'                    READ PARAMETER
DIRECTRY DS    0CL11                   DIRECTORY DATA
MEMNAME  DS    CL8                     MEMBER NAME
MEMTTR   DS    XL3                     TTR OF FIRST BLOCK
*
*
*
OUTREC   DS    0CL80                   OUTPUT RECORD
OLDLIBRY DC    CL44' '                   LOAD LIBRARY DSNAME
OMEM     DC    CL8' '                    LOAD LIBRARY MEMBER NAME
OSYM     DC    CL8' '                    CSECT NAME WITHIN MEMBER
OTRAN    DC    CL10' '                   LANGUAGE TRANSLATOR NAME
OVERML   DC    CL4' '                    VERSION AND MOD LEVEL
OENTPT   DS    CL1' '                    ENTRY POINT INDIC (* = E.P.)
         DC    CL5' '
*
*
*
         DS    0F
BLDLIST  DS    0CL62                   BLDL LIST
         DC    H'1'                    ONE ENTRY
         DC    H'58'                   LENGTH OF ENTRY
MEMBER   DC    CL8' '                  MEMBER NAME
TTRMOD   DC    XL3'000000'             TTR OF MODULE
CCAT     DC    XL1'00'                 CONCATENATION NUMBER
         DC    XL1'00'
ALIASIND DC    XL1'00'                 ALIAS AND MISC INDICATOR
*                           80=ALIAS
TTR1TXT  DC    XL3'000000'             TTR OF 1ST TXT RECORD
         DC    XL1'00'
TTRNS    DC    XL3'000000'             TTR OF NOTE OR SCATTER LIST
NNOTE    DC    XL1'00'                 NBR ENTRIES IN NOTE LIST
ATTR1A   DC    XL1'00'                 MODULE ATTRIBUTES 1, BYTE 1
*                           80=RENT
*                           40=REUS
*                           20=OVERLAY
*                           10=UNDER TEST
*                           08=ONLY LOADABLE
*                           04=SCATTER FORMAT
*                           02=EXECUTABLE
*                           01=ONE TXT, NO RLD RECORDS
ATTR1B   DC    XL1'00'                 ATTRIBUTES 1, BYTE 2
*                           80=CANNOT BE REPROCESSED BY LKED E
*                           40=ORIGIN OF 1ST TXT RECORD IS ZERO
*                           20=ASSIGNED ENTRY POINT ADDR IS ZERO
*                           10=CONTAINS NO RLD RECORD
*                           08=CANNOT BE REPROCESSED BY LKED
*                           04=CONTAINS TESTRAN SYMBOLS
*                           02=CREATED BY LKED
*                           01=REFR
TOTVIRT  DC    XL3'000000'             TOTAL VIRTUAL STRG REQRD FOR MOD
LENG1    DC    XL2'0000'               LENGTH OF 1ST TEXT RECORD
LKEPA    DC    XL3'000000'             ASSIGNED ENTRY POINT ADDR
ATTR2    DC    XL1'00'                 ATTRIBUTES 2
*                           80=PROCESSED BY OS/VS LKED
*                           20=PAGE ALIGNMENT REQUIRED FOR MODULE
*                           10=SSI PRESENT
         DC    XL2'0000'
SCTRLEN  DC    XL2'0000'               SCATTER LIST LENGTH
TTLEN    DC    XL2'0000'               TRANSLATION TABLE LENGTH
SCESDID  DC    XL2'0000'               CESD NBR FOR 1ST TXT RECD
SCEPESD  DC    XL2'0000'               CESD NBR FOR ENTRY POINT
ALEPA    DC    XL3'000000'             ENTRY POINT OF THE MEMBER NAME
ALMEM    DC    CL8' '                  REAL MEMBER NAME FOR ALIAS
SSI      DS    XL4'00000000'           SSI BYTES
AUTHLEN  DC    XL1'00'                 AUTH CODE LENGTH
AUTHCOD  DC    XL1'00'                 AUTH CODE
*
*
*
SYMTBL   DSECT ,                       EXTERNAL SYMBOL TABLE ENTRY
SYMENT   DS    0CL43                   20 BYTE ENTRIES
SYMMEM   DS    CL8                     MEMBER NAME
EXTSYM   DS    CL8                     EXTERNAL SYMBOL NAME
TYOSYM   DS    XL1                     SYMBOL TYPE
*                        00=SD (NAMED CSECT)
*                        02=ER (EXTRN)
*                        03=LR (ENTRY)
*                        04=PC (UNNAMED CSECT)
*                        05=CM (COM)
*                        06=PR (PSEUDO REGISTER)
*                        07=NULL
*                        0A=WX (WXTRN)
*                        0F=ENTAB OR SEGTAB
SYMIND   DS    XL1                     INDICATOR
*                        BIT 0 = MAP
*                        BIT 1 = CHAIN
*                        BIT 2 = INSERT
*                        BIT 3 = DELETE/REPLACE
SYMADDR  DS    XL3                     SYMBOL ADDRESS (0 FOR ER, WX, NU
SYMSEG   DS    XL1                     SEGMENT ID (0 FOR ER, WX, NULL)
SYMLRID  DS    0XL2                    ESD ID OF DEF FOR LR
SYMLENG  DS    XL3                     LENGTH FOR SD, PC, CM, PR
*                        0 FOR ER, WX, NULL
SYMESDID DS    XL2                     ESD ID OF THIS ITEM
         DS    CL1                     RESERVED
SYMTNSLT DS    CL10                    TRANSLATOR NAME
SYMVERML DS    XL2                     VERSION AND MOD LEVEL
SYMCPLDT DS    PL3                     COMPILED DATE
COBLTYPE CSECT
*
*
*
BUFAD    DS    A                       SYSLIB BUFFER ADDR
SYMTBAD  DS    A                       SYMBOL TABLE ADDRESS
IDRSTRT  DS    A                       IDRDATA START ADDR
IDRCURR  DS    A                       IDRDATA CURRENT ADDR
IDRECND  DS    A                       IDRDATA END ADDR
CURRSYM  DS    A                       CURRENT SYM TBL ADDR
ENDSYM   DC    F'65535'                SYM TBL END ADDR
PROCESS  DC    XL1'00'                 PROCESS INDIC 40=LAST RECD
CES9     DS    A                       CESDREC RETURN ADDR
IDR9     DS    A                       IDRREC RETURN ADDR
GI9      DS    A                       GETIDR RETURN ADDR
FP9      DS    A                       FORMPRNT RETURN ADDRESS
BL9      DS    A                       BLDL RTN RETURN ADDR
CR9      DS    A                       CTRLRECS RETURN ADDR
CT9      DS    A                       CNTLRECS RETURN ADDR
RL9      DS    A                       RLDRECS RETURN ADDR
TX9      DS    A                       TXTFMT RETURN ADDR
HIVAL    DC    4X'FF'                  CONSTANT F'S
H1000    DC    H'1000'                 CONSTANT 1000
H100     DC    H'100'                  CONSTANT 100
H10      DC    H'10'                   CONSTANT 10
SYMLEN   DC    AL2(L'SYMENT)           LENGTH OF SYMTBL ENTRY
IDRESD   DS    XL2                     IDR ESDID
P0       DC    P'0'                    CONSTANT 0
P1       DC    P'1'                    CONSTANT 1
P58      DC    P'58'                   CONSTANT 58
GOTBKSW  DC    X'00'                   NEXT BLOCK READ SWITCH
*
*
*
H1       DC    H'1'                    CONSTANT 1
H5       DC    H'5'                    CONSTANT 5
H11      DC    H'11'                   CONSTANT 11
H16      DC    H'16'                   CONSTANT 16
H256     DC    H'256'                  CONSTANT 256
BLANX    DC    CL121' '                CONSTANT BLANKS
TRTBL    DC    C'0123456789ABCDEF'     TRANSLATE TBL
POFSET   DC    F'0'                    OFFSET FOR TEXT PRINT
VALCHAR  DC    256C'.'                 CHARACTER TRANSLATE TABLE
         ORG   VALCHAR+C' '
         DC    X'00'
         ORG   VALCHAR+C'$'
         DC    X'00'
         ORG   VALCHAR+C'#'
         DC    X'00'
         ORG   VALCHAR+C'A'
         DC    XL9'00'
         ORG   VALCHAR+C'J'
         DC    XL9'00'
         ORG   VALCHAR+C'S'
         DC    XL8'00'
         ORG   VALCHAR+C'0'
         DC    XL10'00'
         ORG
VALNUMB  DC    256C'.'
         ORG   VALNUMB+C'0'
         DC    XL10'00'
         ORG
*
*
*
SYSLIB   DCB   DSORG=PO,MACRF=R,DDNAME=SYSLIB,EODAD=EOFPDS,            X
               RECFM=U,NCP=1
SYSOUT DCB     DSORG=PS,MACRF=PM,DDNAME=SYSOUT,                        X
               RECFM=FB,LRECL=80
         END
