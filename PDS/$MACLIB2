./ ADD NAME=ABBRE    0100-02135-02135-1224-00009-00009-00000-VBCMACS
         PRINT  NOGEN
         DBD    NAME=ABBREDBD,ACCESS=(INDEX,VSAM,PROT)
         DATASET DD1=TYPES2,DEVICE=3380
         SEGM   NAME=XABBRE,PARENT=0,BYTES=3,FREQ=30
         FIELD  NAME=(QABBRE,SEQ,U),BYTES=3,START=1,TYPE=C
         LCHILD NAME=(TYPES,TYPESDBD),INDEX=ABBRE
         DBDGEN
         FINISH
         END
./ ADD NAME=ADDR     0100-82157-82157-2120-00025-00025-00000-VBCMACS
         MACRO
&L       ADDR  &ROW,&COL
         LCLA  &A,&B,&C
         LCLC  &HEX
&A       SETA  (&ROW*80+&COL-81)
&B       SETA  (X'C0'+&A/X'40')
&C       SETA  (X'C0'+&A-&A/X'40'*X'40')
         AIF   (&B GE C'A' AND &B LE C'I').BOK
         AIF   (&B GE C'J' AND &B LE C'R').BOK
         AIF   (&B GE C'S' AND &B LE C'Z').BOK
         AIF   (&B GE C'0' AND &B LE C'9').BOK
&B       SETA  (&B-X'80')
.BOK     ANOP
         AIF   (&C GE C'A' AND &C LE C'I').COK
         AIF   (&C GE C'J' AND &C LE C'R').COK
         AIF   (&C GE C'S' AND &C LE C'Z').COK
         AIF   (&C GE C'0' AND &C LE C'9').COK
&C       SETA  (&C-X'80')
.COK     ANOP
&HEX     SETC  '0123456789ABCDEF'(&B/16+1,1)
&HEX     SETC  '&HEX'.'0123456789ABCDEF'(&B+1-&B/16*16,1)
&HEX     SETC  '&HEX'.'0123456789ABCDEF'(&C/16+1,1)
&HEX     SETC  '&HEX'.'0123456789ABCDEF'(&C+1-&C/16*16,1)
&L       DC    X'&HEX'
         MEND
./ ADD NAME=ALIAS    0100-02135-02135-1224-00009-00009-00000-VBCMACS
         PRINT  NOGEN
         DBD    NAME=ALIASDBD,ACCESS=(INDEX,VSAM,PROT)
         DATASET DD1=FOLDER2,DEVICE=3380
         SEGM   NAME=XALIAS,PARENT=0,BYTES=4,FREQ=70
         FIELD  NAME=(QNAME,SEQ,U),BYTES=4,START=1,TYPE=X
         LCHILD NAME=(FOLDER,FOLDDBD),INDEX=ALIAS
         DBDGEN
         FINISH
         END
./ ADD NAME=AMODE    0100-02135-02135-1224-00018-00018-00000-VBCMACS
         MACRO
&LBL     AMODE &P
         AIF   ('&P' EQ '24').A24
         AIF   ('&P' EQ '370').A24
         AIF   ('&P' EQ '31').A31
         AIF   ('&P' EQ 'XA').A31
         MNOTE *,'INVALID OPERAND &P - NO CHANGE TO AMODE'
&LBL     CNOP  0,4
         MEXIT
.A24     ANOP
&LBL     LA    15,*+6
         BSM   0,15
         MEXIT
.A31     ANOP
&LBL     LA    15,*+10
         0     15,=X'80000000'
         BSM   0,15
         MEND
./ ADD NAME=APF      0100-85287-85287-0940-00063-00063-00000-VBCMACS
         MACRO
&LABEL   APF   &PARM
         MNOTE *,'WARNING: SPECIAL APF MACRO FOR BCBS DATA CENTER!!!'
         AIF   (0 EQ K'&LABEL).NOLBL
&LABEL   DS    0H
.NOLBL   ANOP
         AIF   ('&PARM' EQ 'SET').APFSET
         AIF   ('&PARM' EQ 'RESET').APFRSET
         MNOTE 8,'INVALID PARM - &PARM NOT SUPPORTED'
         MEXIT
.APFSET  ANOP
         PUSH  PRINT
         PRINT GEN
         LA    R0,0                PROTECT KEY ZERO.
         LA    R1,0                SUPERVISOR STATE.
         SVC   243                 LOCAL MODESET SVC.
         PUSH  USING
         USING PSA,R0
         L     R14,FLCCVT          ADDRESS OF CVT.
         USING CVT,R14
         L     R14,CVTTCBP         ADDRESS OF TCB WORDS.
         L     R14,4(,R14)         ADDRESS OF CURRENT TCB.
         DROP  R14
         USING TCBFIX,R14
         L     R14,180(,R14)       ADDRESS OF JSCB.
*        L     R14,TCBJSCB         ADDRESS OF JSCB.
         DROP  R14
         USING IEZJSCB,R14
         OI    JSCBOPTS,JSCBAUTH   TURN ON "JSCBAUTH" BIT.
         DROP  R0,R14
         POP   USING
         LA    R0,257              PROTECT KEY FROM TCBPKF FIELD.
         LA    R1,1                PROBLEM STATE.
         SVC   243                 LOCAL MODESET SVC.
         POP   PRINT
         MEXIT
.APFRSET ANOP
         PUSH  PRINT
         PRINT GEN
         LA    R0,0                PROTECT KEY ZERO.
         LA    R1,0                SUPERVISOR STATE.
         SVC   243                 LOCAL MODESET SVC.
         PUSH  USING
         USING PSA,R0
         L     R14,FLCCVT          ADDRESS OF CVT.
         USING CVT,R14
         L     R14,CVTTCBP         ADDRESS OF TCB WORDS.
         L     R14,4(,R14)         ADDRESS OF CURRENT TCB.
         DROP  R14
         USING TCBFIX,R14
         L     R14,180(,R14)       ADDRESS OF JSCB.
*        L     R14,TCBJSCB         ADDRESS OF JSCB.
         DROP  R14
         USING IEZJSCB,R14
         NI    JSCBOPTS,255-JSCBAUTH   TURN OFF "JSCBAUTH" BIT.
         DROP  R0,R14
         POP   USING
         LA    R0,257              PROTECT KEY FROM TCBPKF FIELD.
         LA    R1,1                PROBLEM STATE.
         SVC   243                 LOCAL MODESET SVC.
         POP   PRINT
         MEXIT
         MEND
./ ADD NAME=ASPTIME  0100-02135-02135-1224-00020-00020-00000-VBCMACS
         MACRO
&NAME    ASPTIME   &WORK,&TIME
         PACK   &WORK,&TIME+0(2)   . GET HOURS
         CVB   WORK2,&WORK    . CONVERT TO BINARY
         M   WORK,=F'60'  . CONVERT HOURS TO MINS
         LR   WORK3,WORK2   . SAVE
         PACK   &WORK,&TIME+2(2)  . GET MINS
         CVB   WORK2,&WORK   . CONVERT TO BINARY
         AR   WORK2,WORK3  . ADD FOR TOTAL MINS
         M   WORK,=F'60'    . CONVERT MINS TO SECS
         LR   WORK3,WORK2  . SAVE SECS
         PACK   &WORK,&TIME+4(2)  . GET SECONDS
         CVB   WORK2,&WORK   . CONVERT TO BINARY
         AR   WORK2,WORK3
         M   WORK,=F'100'   . CONVERT SECS/100
         SR   WORK,WORK  . CLEAR WORK REG
         LA   WORK3,6   . LOAD DIVISOR
         DR   WORK,WORK3   . DIVIDE TO GIVE MINS / 1000
         CVD   WORK2,&WORK   . SAVE CONVERTED TIME
         MEND
./ ADD NAME=ASSDATE  0100-85168-85168-1631-00008-00008-00000-VBCMACS
         MACRO
         ASSDATE
         DC    C'ASSEMBLED'
         DC    CL2' '
         DC    C'&SYSDATE'
         DC    CL2' '
         DC    C'&SYSTIME'
         MEND
./ ADD NAME=BLKENT   0100-02135-02135-1224-00005-00005-00000-VBCMACS
         MACRO
&NAME    BLKENT   &DEVICE
         CNOP   0,4
&NAME    DC   CL8'&DEVICE',6F'0'
         MEND
./ ADD NAME=CALLSUB  0100-02135-02135-1224-00008-00008-00000-VBCMACS
         MACRO
&NAME    CALLSUB &ADDR
         AIF   ('&ADDR'(1,1) EQ '(').REG
&NAME    BAL   14,&ADDR
         MEXIT
.REG     ANOP
&NAME    BALR  14,&ADDR(1)
         MEND
./ ADD NAME=CHNGP    0100-02135-02135-1227-00044-00044-00000-VBCMACS
         MACRO
&NAME    CHNGP   &DCB,&RLN,&PAR3
         GBLB  &IEDQE7
         LCLA  &IX
.* 070000-075000,724000-736000                                    20002
&NAME    DS    0H
         AIF   (&IEDQE7 EQ 1).TCAM                                20002
         AIF   ('&DCB' NE '' AND '&RLN' NE '' AND '&PAR3' NE '').OK
         MNOTE 12,'***  IHB004  REQUIRED OPERAND(S) NOT SPECIFIED'
         MEXIT
.OK      AIF   ('&DCB'(1,1) EQ '(' OR K'&DCB LT 9).OK2
         MNOTE 12,'***  IHB002  INVALID TERMNAME OPERAND SPECIFIED'
         MEXIT
.OK2     ANOP
         AIF   ('&RLN' EQ '(0)').SHIFT
         AIF   ('&RLN'(1,1) NE '(').LA
         LR    0,&RLN(1)               REL. LINE NUMBER TO REGISTER 0
         AGO   .SHIFT
.LA      LA    0,&RLN                  REL. LINE NUMBER TO REGISTER 0
.SHIFT   SLL   0,24                    POSITION RELATIVE LINE NUMBER
         AIF   ('&DCB'(1,1) EQ '(').NOLOC
&IX      SETA  12
         AIF   ('&PAR3'(1,1) EQ '(').X
&IX      SETA  &IX+2
.X       BAL   1,*+12                  SET TERMNAME ADDRESS
         DC    CL8'&DCB'               TERMINAL NAME
         L     15,=V(IECKDCBL)         ADDRESS OF DCB LOCATE ROUTINE
         BALR  14,15                   LINK TO DCB LOCATE ROUTINE
         LTR   15,15                   TEST THE RETURN CODE
         BC    7,*+&IX                 BRANCH ON ERROR-INVALID TERMNAME
         AGO   .AFT
.NOLOC   LA    1,0(&DCB(1))            DCB ADDRESS TO REGISTER ONE
         ALR   0,1                     COMBINE DCB ADDRESS AND REL LINE
.AFT     AIF   ('&PAR3'(1,1) EQ '(').LR
         LA    1,&PAR3                 WORKAREA ADDRESS TO REGISTER 1
         AGO   .LOAD
.LR      LR    1,&PAR3(1)              WORKAREA ADDRESS TO REGISTER 1
.LOAD    L     15,=V(IECKCHPL)         ADDRESS OF CHANGE POLL LIST RT.
         BALR  14,15                   LINK TO CHANGE POLL LIST ROUTINE
         MEXIT
.TCAM    ANOP
         MNOTE 0,'*** IHB301 QSTART SPECIFIED - NO EXPANSION'
         CNOP  2,4 .                                              20002
         MEND
./ ADD NAME=CHNGT    0100-02135-02135-1227-00027-00027-00000-VBCMACS
         MACRO
&NAME    CHNGT &TERM,&WKA
         GBLB  &IEDQE7
.* 090000,140000,248000-272000                                    20002
&NAME    DS    0H
         AIF   (&IEDQE7 EQ 1).TCAM                                20002
         AIF   ('&TERM' NE '' AND '&WKA' NE '').GO
         MNOTE 12,'***  IHB004  REQUIRED OPERAND(S) NOT SPECIFIED'
         MEXIT
.TCAM    ANOP
         MNOTE 0,'*** IHB301 QSTART SPECIFIED - NO EXPANSION'
         CNOP  2,4 .                                              20002
         MEXIT
.GO      AIF   ('&WKA'(1,1) EQ '(').REG2
         LA    0,&WKA              LOAD WORKAREA ADDRESS
         AGO   .GO2
.REG2    AIF   ('&WKA'(1,3) EQ '(0)').GO2
         LR    0,&WKA(1)           LOAD ADDRESS OF WORKAREA
.GO2     AIF   ('&TERM'(1,1) EQ '(').REG1
         BAL   1,*+12
         DC    CL8'&TERM'
         AGO   .OK
.REG1    AIF   ('&TERM' EQ '(1)').OK
         LR    1,&TERM(1)          LOAD ADDRESS OF TERMNAME
.OK      L     15,=V(IECKCHGT)     LOAD SUBROUTINE ADDRESS
         BALR  14,15               LINK
.END     MEND
./ ADD NAME=CLOSEMC  0100-02135-02135-1227-00030-00030-00000-VBCMACS
         MACRO
&NAME    CLOSEMC
         GBLB  &IEDQE7
.* 220000,260000,404000-488000                                    20002
         AIF   (&IEDQE7 EQ 1).TCAM                                20002
&NAME    L     15,=V(IECKCLOS)         CLOSEOUT ROUTINE ADDRESS
         BALR  14,15                   BRANCH TO THE CLOSEOUT ROUTINE
         MEXIT
.TCAM    ANOP
&NAME    DS    0H .                                               20002
         SR    0,0 .                    INDICATE NO PASSWORD      20002
         MVI   IEDQ&SYSNDX+11,X'FF' .   FLAG AS CQTAM MACRO       20002
         CNOP  0,4 .                                              20002
         BAL   1,*+44 .                 SET CIB ADDR IN PARM REG  20002
IEDQ&SYSNDX DS 0F .                     COMMAND INPUT BUFFER      20002
         DC    F'0' .                   OPERATOR CONTROL QCB ADDR 20002
         DC    XL1'E0' .                CIB QUEUING PRIORITY      20002
         DC    XL3'00' .                LINK FIELD                20002
         DC    XL1'11' .                VERB CODE FOR FLUSH CLOSE 20002
         DC    XL1'1C' .                CIB LENGTH                20002
         DC    XL1'00' .                RELATIVE LINE NUMBER      20002
         DC    XL1'FF' .                COMPLETION CODE(CQTAM)    20002
         DC    A(IEDQ&SYSNDX+32) .      ECB ADDRESS               20002
         DC    XL8'00' .                TERMINAL NAME             20002
         DC    XL4'00' .                WORKAREA ADDRESS          20002
         DC    A(IEDQ&SYSNDX) .         ADDRESS OF CIB            20002
         DC    F'0' .                   PCB WORKAREA/ECB          20002
         DC    F'0' .                   ADDRESS OF CIB LENGTH     20002
         LINK  EP=IEDQET .                                        20002
         MEND
./ ADD NAME=DAIRINT  0100-02135-02135-1227-00103-00103-00000-VBCMACS
         MACRO
         DAIRINT
         DS    0F
*
*   DAPB08, ALLOCATE BY DSNAME, INITIALIZED
*
DA08X    DS    0XL84
         DC    XL2'0008'               ENTRY CODE
         DC    XL2'00'                 DAIR FLAGS
         DC    XL2'00'                 DA FLAGS
         DC    XL2'00'                 CATALOG FLAGS
         DC    A(0)                    DSN BUFFER ADDRESS
         DC    CL8' '                  DDNAME NAME
         DC    CL8' '                  UNIT NAME
         DC    CL8' '                  VOL SER
         DC    XL4'00'                 BLKSIZE
         DC    XL4'00'                 PRIMARY SPACE
         DC    XL4'00'                 SECONDARY SPACE
         DC    XL4'00'                 DIRECTORY SPACE
         DC    CL8' '                  MEMBER NAME
         DC    CL8' '                  PASSWORD
         DC    XL1'00'                 PDISP
         DC    XL1'00'                 NDISP
         DC    XL1'00'                 ADISP
         DC    XL1'00'                 FLAGS
         DC    XL3'00'                 RESERVED
         DC    XL1'00'                 DATA SET FLAGS
         DC    CL8' '                  ATTRIBUTE LIST NAME
*
*
*
*
*   DAPB0C CONCATONATE DDNAME INITIALIZED
*
DA0CX    DS    0XL20
         DC    XL2'000C'               ENTRY CODE
         DC    XL2'00'                 RESERVED
         DC    XL2'00'                 DA FLAGS
         DC    XL2'00'                 RESERVED
         DC    XL2'00'                 NUMBER OF DATA SETS
         DC    XL2'00'                 RESERVED
         DC    CL8' '                  FIRST DDNAME
         EJECT
*
*    DAPB1C ALLOCATE FILE TO TERMINAL, INITIALIZED
*
DA1CX    DS    0XL18
         DC    XL2'001C'               ENTRY CODE
         DC    XL2'00'                 RESERVED
         DC    XL2'00'                 DAIR FLAGS
         DC    XL1'00'                 RESERVED
         DC    XL1'08'                 PERMANTLY ALLOCATED
         DC    CL8' '                  DDNAME
*
*
*
*
*   DAPB28, MULTIPLE OPERATION DAPB, INITIALIZED
*
DA28X    DS    0XL12
         DC    XL2'0028'               ENTRY CODE
         DC    XL2'00'                 NUMBER OF OPERATIONS
         DC    A(0)                    @ FIRST FAILING PB
         DC    A(0)                    @ FIRST PB
*
*
*
*
*   DAPB34, ALLOCATE ATTRIBUTE LIST, INITIALIZED
*
DA34X    DS    0XL20
         DC    XL2'0034'               ENTRY CODE
         DC    XL2'00'                 DAIR FLAG
         DC    XL2'00'                 DA FLAG
         DC    XL1'40'                 BUILD ATTRIBUTE LIST
         DC    XL1'00'                 RESERVE
         DC    CL8' '                  ATTRIBUTE LIST NAME
         DC    A(0)                    @ DAIRACB
*
*
*
*
*    DAIRACB, ATTRIBUTE LIST BLOCK, INITIALIZED
*
DACBX    DS    0XL47
         DC    XL8'00'                 RESERVED
         DC    XL8'00'                 MASK
         DC    XL3'00'                 RESERVED
         DC    XL3'00'                 EXPERATION DATE
         DC    XL2'00'                 RESERVED
         DC    XL1'00'                 BUFNO
         DC    XL1'00'                 BUF OPTIONS
         DC    XL2'00'                 BUFLEN
         DC    XL1'00'                 EROPT
         DC    XL1'00'                 KEYLEN
         DC    XL6'00'                 RESERVED
         DC    XL1'00'                 RECFM
         DC    XL1'00'                 OPTIONS
         DC    XL2'00'                 BLKSIZE
         DC    XL2'00'                 LRECL
         DC    XL1'00'
         DC    XL4'00'                 RESERVED
         MEND
./ ADD NAME=DATE     0100-02135-02135-1227-00049-00049-00000-VBCMACS
         MACRO
         DATE  &D
.*  THE DATE MACRO IS USED TO CONVERT A DATE FRON MM/DD/YY TO Y.DDD
.*  IF D IS NOT SPECIFIED,THEN SYSDATE IS CONVERTED
         LCLA  &X,&Y
         LCLC  &JDATE,&C
         LCLA  &DAT(13)
         GBLA  &GDATE
&JDATE   SETC  '&SYSDATE'
         AIF   (T'&D EQ 'O').DAT00
&JDATE   SETC  '&D'
.DAT00   ANOP
&GDATE   SETA  0
&DAT(1)  SETA  31
&DAT(2)  SETA  28
&DAT(3)  SETA  31
&DAT(4)  SETA  30
&DAT(5)  SETA  31
&DAT(6)  SETA  30
&DAT(7)  SETA  31
&DAT(8)  SETA  31
&DAT(9)  SETA  30
&DAT(10) SETA  31
&DAT(11) SETA  30
&DAT(12) SETA  31
&C       SETC  '&JDATE'(7,2)
&DAT(13) SETA  &C
&DAT(13) SETA  &DAT(13)+1900
&X       SETA  &DAT(13)-(&DAT(13)/4)*4
         AIF   (&X NE 0).DAT01
&DAT(2)  SETA  29     MUST BE LEAP YEAR
.DAT01   ANOP
&C       SETC  '&JDATE'(1,2)
&X       SETA  &C
&X       SETA  &X-1
&Y       SETA  0
.DATLOOP ANOP
&Y       SETA  &Y+1
         AIF   (&Y GT &X).ADDDAY
&GDATE   SETA  &GDATE+&DAT(&Y)
         AGO   .DATLOOP
.ADDDAY  ANOP
&C       SETC  '&JDATE'(4,2)
&X       SETA  &C
&C       SETC  '&JDATE'(7,2)
&Y       SETA  &C
&Y       SETA  &Y*1000
&GDATE   SETA  &GDATE+&X+&Y
         MEND
./ ADD NAME=DATEPARM 0100-02135-02135-1227-00044-00044-00000-VBCMACS
         MACRO
&NAME    DATEPARM
&NAME    DS    0CL46             ***** PARAMETER AREA DESCRIPTION*****
DATYP    DS    CL1                   DATE TYPE SUPPLIED: J=JULIAN,
*                                       G=GREGORIAN
DATERR   DS    CL1                   ERROR INDIC. BLANK=SUCCESSFUL
*                                       PROCESSING. E=ERROR IN DATE
*                                       SUPPLIED.
DAYWK    DS    CL1                   DAY OF WEEK INDICATOR: 1=MONDAY,
*                                       2=TUESDAY, 3=WEDNESDAY,
*                                       4=THURSDAY, 5=FRIDAY,
*                                       6=SATURDAY, 7=SUNDAY
HOLIDAY  DS    CL1                   HOLIDAY INDICATOR: BLANK=NOT A
*                                       HOLIDAY, 1=NEW YEAR'S DAY,
*                                       2=WASHINGTON'S BIRTHDAY,
*                                       3=GOOD FRIDAY, 4=MEMORIAL DAY,
*                                       5=INDEPENDENCE DAY, 6=LABOR DAY
*                                       7=THANKSGIVING DAY, 8=FRIDAY
*                                       AFTER THANKSGIVING,
*                                       9=CHRISTMAS DAY
YEARTYP  DS    CL1                   0=NOT LEAP YEAR, 1=LEAP YEAR
JULDATE  DS    PL3                   JULIAN DATE. CONTAINS A VALID,
*                                       PACKED DECIMAL DATE OF THE
*                                       FORM YYDDD, IF JULIAN DATE
*                                       IS SUPPLIED. WILL CONTAIN
*                                       THE JULIAN DATE ON RETURN
*                                       IF GREGORIAN SUPPLIED.
GREGDATE DS    CL6                   GREGORIAN DATE. CONTAINS AN UN-
*                                       SIGNED, DECIMAL DATE OF THE
*                                       FORM MMDDYY, IF GREGORIAN
*                                       DATE IS SUPPLIED. WILL
*                                       CONTAIN THE GREGORIAN DATE
*                                       ON RETURN IF JULIAN DATE
*                                       IS SUPPLIED.
LITDATE  DS    CL18                  A LITERAL DATE, LEFT JUSTIFIED,
*                                       IN AN 18-BYTE FIELD.
*                                       EXAMPLES ARE: JANUARY 16, 1979
*                                       AND MAY 9, 1982
JULSLASH DS    CL6                   JULIAN DATE WITH SLASH: YY/DDD
GRGSLASH DS    CL8                   GREGORIAN DATE WITH SLASHES:
*                                       MM/DD/YY
DAYLIT   DS    CL9                   LITERAL FOR DAY OF WEEK
MONTHLIT DS    CL9                   LITERAL FOR MONTH
         MEND
./ ADD NAME=DATEPRM2 0103-90333-01044-1255-00043-00043-00000-VBCMACS
         MACRO
&NAME    DATEPRM2
&NAME    DS    0CL79        ***** PARAMETER AREA DESCRIPTION*****
DATYP    DS    CL1           .DATE TYPE SUPPLIED: J=JULIAN,
*                             G=GREGORIAN MDY, Y=GREGORIAM YMD
DATERR   DS    CL1           .ERROR INDICATOR:  BLANK=SUCCESSFUL
*                             PROCESSING. E=ERROR IN DATA SUPPLIED
DAYWK    DS    CL1           .DAY OF WEEK INDICATOR: 1=MONDAY,
*                             2=TUESDAY, 3=WEDNESDAY, 4=THURSDAY,
*                             5=FRIDAY, 6=SATURDAY, 7=SUNDAY
HOLIDAY  DS    CL1           .HOLIDAY INDICATOR: BLANK=NOT A
*                             HOLIDAY, 1=NEW YEAR'S DAY,
*                             2=(NOT USED), 3=(NOT USED),
*                             4=MEMORIAL DAY, 5=INDEPENDENCE DAY,
*                             6=LABOR DAY, 7=THANKSGIVING DAY,
*                             8=FRIDAY  AFTER THANKSGIVING,
*                             9=CHRISTMAS DAY
YEARTYP  DS    CL1           .0=NOT LEAP YEAR, 1=LEAP YEAR
JULDATE  DS    PL4           .JULIAN DATE. CONTAINS AN UNSIGNED,
*                             PACKED DECIMAL DATE OF THE FORM
*                             FORM YYYYDDDF, IF DATYP=J. IT WILL
*                             CONTAIN THE CORRECT JULIAN DATE ON
*                             SUCCESSFUL RETURN.
GREGMDY  DS    CL8           .GREGORIAN DATE. CONTAINS AN UNSIGNED,
*                             ZONED DECIMAL DATE OF THE FORM
*                             MMDDYYYY, IF DATYP=G. ON SUCCESSFUL
*                             RETURN THIS FIELD WILL CONTAIN THE
*                             CORRECT GREGORIAN DATE IN THIS FORMAT.
GREGYMD  DS    CL8           .GREGORIAN DATE. CONTAINS AN UNSIGNED,
*                             ZONED DECIMAL DATE OF THE FORM
*                             YYYYMMDD, IF DATYP=Y. ON SUCCESSFUL
*                             RETURN THIS FIELD WILL CONTAIN THE
*                             CORRECT GREGORIAN DATE IN THIS FORMAT.
LITDATE  DS    CL18          .A LITERAL DATE, LEFT JUSTIFIED IN AN
*                             IN AN 18-BYTE FIELD. EXAMPLES ARE:
*                                JANUARY 16, 1979
*                                MAY 9, 2002
JULSLASH DS    CL8           .JULIAN DATE WITH SLASH: YYYY/DDD
GRGSLASH DS    CL10          .GREGORIAN DATE WITH SLASHES:
*                             MM/DD/YYYY
DAYLIT   DS    CL9           .LITERAL DAY OF WEEK
MONTHLIT DS    CL9           .LITERAL MONTH
         MEND
./ ADD NAME=DATEPRNT 0100-02135-02135-1227-00027-00027-00000-VBCMACS
         MACRO
&NAME    DATEPRNT &LOC,&OUTLOC
         GBLB  &DRP1
         GBLC  &DRP2
&NAME    STM   0,4,SAVE&SYSNDX
         SR    0,0
         L     1,&LOC
         D     0,=F'6000'
         LR    4,0
         SR    0,0
         D     0,=F'60'
         LR    3,0
         M     2,=F'10000'
         AR    4,3
         M     0,=F'1000000'
         AR    4,1
         AIF   (&DRP1).NOGEN
&DRP2    SETC  'MASK&SYSNDX'
.NOGEN   EDIX  (4),&OUTLOC,F,&DRP2,9
         LM    0,4,SAVE&SYSNDX
         B     SAVE&SYSNDX+20
         AIF   (&DRP1).NOCON
&DRP2    DC    X'402021206020206020204B2020'
&DRP1    SETB  1
.NOCON   ANOP
SAVE&SYSNDX DS 5F
         MEND
./ ADD NAME=DCAREB   0100-02135-02135-1227-00017-00017-00000-VBCMACS
         PCB    TYPE=DB,DBDNAME=FOLDDBD,PROCOPT=A,KEYLEN=36
         SENSEG NAME=FOLDER,PARENT=0
         PCB    TYPE=DB,DBDNAME=FOLDDBD,PROCOPT=G,PROCSEQ=ALIASDBD
         SENSEG NAME=FOLDER,PARENT=0
         PCB    TYPE=DB,DBDNAME=TYPESDBD,PROCOPT=A,KEYLEN=15
         SENSEG NAME=TYPES,PARENT=0
         PCB    TYPE=DB,DBDNAME=TYPESDBD,PROCOPT=G,PROCSEQ=ABBREDBD
         SENSEG NAME=TYPES,PARENT=0
         PCB    TYPE=DB,DBDNAME=THINGDBD,PROCOPT=A,KEYLEN=24
         SENSEG NAME=THINGS,PARENT=0
         SENSEG NAME=NOTES,PARENT=THINGS
         PCB    TYPE=DB,DBDNAME=OTHERDBD,PROCOPT=A,KEYLEN=50
         SENSEG NAME=OTHER,PARENT=0
         PCB    TYPE=DB,DBDNAME=KEEPDBD,PROCOPT=A,KEYLEN=9
         SENSEG NAME=KEEP,PARENT=0
         PSBGEN LANG=COBOL,PSBNAME=DCAREB
         END
./ ADD NAME=DCAREBL  0100-02135-02135-1227-00013-00013-00000-VBCMACS
         PCB    TYPE=DB,DBDNAME=THINGDBD,PROCOPT=L,KEYLEN=24
         SENSEG NAME=THINGS,PARENT=0
         SENSEG NAME=NOTES,PARENT=THINGS
         PCB    TYPE=DB,DBDNAME=FOLDDBD,PROCOPT=L,KEYLEN=36
         SENSEG NAME=FOLDER,PARENT=0,INDICES=ALIASDBD
         PCB    TYPE=DB,DBDNAME=TYPESDBD,PROCOPT=L,KEYLEN=15
         SENSEG NAME=TYPES,PARENT=0,INDICES=ABREDBD
         PCB    TYPE=DB,DBDNAME=OTHERDBD,PROCOPT=L,KEYLEN=50
         SENSEG NAME=OTHER,PARENT=0
         PCB    TYPE=DB,DBDNAME=KEEPDBD,PROCOPT=L,KEYLEN=9
         SENSEG NAME=KEEP,PARENT=0
         PSBGEN LANG=COBOL,PSBNAME=DCAREBL
         END
./ ADD NAME=DCTMAPS  0100-02135-02135-1227-00210-00210-00000-VBCMACS
         MACRO
         DCTMAPS &DSECT=YES,&SEG=ALL
         LCLC  &TMP
         AIF   ('&DSECT' EQ 'YES').GENERAT
         AIF   ('&DSECT' EQ 'NO').GENERAT
         MNOTE 2,'** INVALID DSECT/BASE PARMS, DSECT=YES ASSUMED'
.GENERAT ANOP
&TMP     SETC  '&SEG'
         AIF   ('&TMP' EQ 'ALL').TP10R
         AIF   ('&TMP' EQ 'TP10R').TP10R
         AIF   ('&TMP' EQ 'TP10D10').TP10D10
         AIF   ('&TMP' EQ 'TP10D20').TP10D20
         AIF   ('&TMP' EQ 'TP20R').TP20R
         AIF   ('&TMP' EQ 'TP20D10').TP20D10
         AIF   ('&TMP' EQ 'TP30R').TP30R
         MNOTE 2,'** SEG PARM INVALID. SEG=ALL ASSUMED'
&TMP     SETC  'ALL'
.TP10R   ANOP
         TITLE 'TP10R: DATA BASE CONTROL SEGMENT'
         AIF   ('&DSECT' EQ 'NO').GENDS
MDRTROOT DSECT ,            TP10R:DATA BASE CONTROL SEGMENT
         AGO  .FORMREC
.GENDS   ANOP
MDRTROOT DS    0F           TP10R:DATA BASE CONTROL SEGMENT
.FORMREC ANOP
*
MDRTKEY  DS    0XL10        NULLRTTK: SEGMENT KEY
MDRTTNAM DS    CL8          ROOTTRLM: TERMINAL NAME
MDRTLOB  DS    CL2          NULLLOBC: LOB CODE
*
MDRTIDNT DS   0CL8          SAME AS BELOW: 7/22/82 JAQ
MRDTIDNT DS    CL8          SECNACMI: 2NDARY ACCESS METHOD TERMINAL ID
*
MDRTACCM DS    XL1          ACCSMHDI: ACCESS METHOD FLAGS
MDRTIRJE EQU   X'80'                  INPUT FROM RJE
MDRTIIMS EQU   X'40'                  INPUT FROM IMS/DC
MDRTITCM EQU   X'20'                  INPUT FROM TCAM/VTAM
MDRTITAP EQU   X'10'                  INPUT FROM TAPE
MDRTORJE EQU   X'08'                  OUTPUT TO RJE
MDRTOIMS EQU   X'04'                  OUTPUT TO IMS/DC
MDRTOTCM EQU   X'02'                  OUTPUT TO TCAM/VTAM
MDRTOTAP EQU   X'01'                  OUTPUT TO TAPE
*
MDRTFLR1 DS    XL1          NULLRSV1: RESERVED
*
MDRTIODI DS    XL1          ROOTIOUI: MESSAGE TRAFFIC FLAGS
MDRTUNPI EQU   X'80'                  UNPROCESSED INPUTS EXIST
MDRTUNPO EQU   X'40'                  UNPROCESSED OUTPUTS EXIST
MDRTUNPR EQU   X'20'                  UNPROCESSED REPLIES EXIST
MDRTRES1 EQU   X'10'                  RESERVED
MDRTIGNI EQU   X'08'                  DO NOT PROCESS INPUTS
MDRTIGNO EQU   X'04'                  DO NOT PROCESS OUTPUTS
MDRTIGNR EQU   X'02'                  NO NOT PROCESS REPLIES
MDRTRES2 EQU   X'01'                  RESERVED
*
MDLBRSVF DS    XL1          NULLRSV2: RESERVED FLAG BYTES
*
MDRTDATE DS    PL4          ROOTTMLD: TRANSMISSION DATE, YYMMDD
*
MDRTTCI  DS    XL2          ROOTTMLQ: TRANSMISSION COUNT INDICATOR
*
MDRTIPKY DS    XL19         ROOTINPK:KEY OF LAST INPUT SEGMENT WRITTEN
*                                    AND PROCESSED BY ADJUDICATION
*
MDRTRPLY DS    0XL17        ROOTWRTK: KEY OF LAST REPLY SEGMENT WRITTEN
*                                     TO THE REPLY DATA BASE.
         DS    CL8          LASTTRLM: TERMINAL NAME
         DS    CL2          LASTLINC: LOB CODE
         DS    PL4          LASTCLMD: LAST CLAIM DATE
         DS    PL3          LASTSEQN: LAST SEQUENCE NUMBER
*
MDRTOKEY DS    0XL12        ROOTOUTK: KEY OF LAST OUTPUT SEGMENT SENT
*                                     BACK BY OUTPUT REPLY PROCESSING
         DS    PL4          ROOTOUTD: ROOT OUT DATE
         DS    XL2          ROOTTMLQ: TRANSMISSION COUNT INDIC
         DS    PL3          ROOTINPN: INPUT SEQUENCE NUMBER
         DS    PL3          ROOTOUTN: OUTPUT SEQUENCE NUMBER
*
MDRTRKEY DS    XL17         ROOTRPYK: KEY OF LAST REPLY SEGMENT SENT
*                                     BACK BY OUTPUT REPLY PROCESSING
ROOTLEN  EQU   *-MDRTROOT   LENGTH OF TP10R SEGMENT
         AIF   ('&TMP' EQ 'ALL').TP10D10
         AGO   .GENEND
.TP10D10 ANOP
         TITLE 'TP10D10: TERMINAL STATISTICS SEGMENT'
         AIF   ('&DSECT' EQ 'NO').GENDS1
MDSTSTAT DSECT ,            TP10D10: DEVICE STATISTICS SEGMENT
         AGO  .FRMREC1
.GENDS1  ANOP
MDSTSTAT DS    0F           TP10D10: DEVICE STATISTICS SEGMENT
.FRMREC1 ANOP
*
*
MDSTKEY  DS    0XL16        TMNLSTLK: STAT KEY
MDSTDATE DS    PL4          NULLAPND: APPENDING DATE
MDSTPGID DS    CL8          APPNPRGD: APPENDING PROGRAM NAME
MDSTTIME DS    PL4          PRGMSRTT: PROGRAM START TIME
*
MDSTIPCT DS    PL5          INPTTRNQ: INPUT TRANSACTIONS ADDED BY DCT10
*
MDSTOPCT DS    PL5          OUTPLINQ: OUTPUT LINES ADDED TO DB BY DCT12
*
MDSTRPCT DS    PL5          RPLYADDQ: REPLIES ADDED TO DB BY XXXX
*
MDSTOCNT DS    PL5          OUTPSNDQ: OUTPUT LINES PROCESSED BY DCT14
*
MDSTRCNT DS    PL5          RPLYSNDQ: REPLIES PROCESSED BY DCT14
*
MDSTEND  DS    PL4          PRGMSTOT: PROGRAM STOP TIME
         AIF   ('&TMP' EQ 'ALL').TP10D20
         AGO   .GENEND
.TP10D20 ANOP
         TITLE 'TP10D20: DEVICE INFORMATION SEGMENT'
         AIF   ('&DSECT' EQ 'NO').GENDS2
MDININFO DSECT ,            TP10D20: DEVICE INFORMATION SEGMENT
         AGO  .FRMREC2
.GENDS2  ANOP
MDININFO DS    0F           TP10D20: DEVICE INFORMATION SEGMENT
.FRMREC2 ANOP
*
MDINTLOC DS    CL25         TMNLLOCM: NAME OF TERMINAL LOCATION
*
MDINADDR DS    CL25         TMNLLO1R: ADDRESS OF TERMINAL LOCATION
*
MDINCITY DS    CL25         TMNLLO2R: CITY, STATE OF TERMINAL LOCATION
*
MDINZIP  DS    PL3          TMNLLO3R: PACKED ZIP CODE
*
MDINATTN DS    CL25         ATTTLNCM: ATTENTION LINE CONTACT NAME
*
MDINPHON DS    PL6          TMNLPHNN: PACKED PHONE NUMBER
*
MDINBLIN DS    CL3          USERLOBC: LINE OF BUSINESS
*
MDINDEVT DS    CL15         NULLDVIS: DEVICE TYPE
*
MDINLINE DS    PL3          TMNLLIN5: LINE SPEED USED
*
MDINMODM DS    CL15         TMNLMDMS: MODEM TYPE
*
MDINENTR DS    CL2          TMNLMODC: ENTRY MODE
*
MDINWHER DS    CL25         TMNLLOCC: TERM LOCATION
*
MDINSERL DS    PL6          TMNLSRLN: DEVICE SERIAL NUMBER
*
MDINVEND DS    CL25         TMNLVENM: VENDOR CONTACT
*
MDINVNUM DS    PL6          TMNLVENN: VENDOR PHONE NUMBER
         AIF   ('&TMP' EQ 'ALL').TP20R
         AGO   .GENEND
.TP20R   ANOP
         TITLE 'TP20R: CLAIM IN SEGMENT'
         AIF   ('&DSECT' EQ 'NO').GENDS3
MDCICLAM DSECT ,            TP20R: CLAIMS INPUT SEGMENT
         AGO  .FRMREC3
.GENDS3  ANOP
MDCICLAM DS    0F           TP20R: CLAIMS INPUT SEGMENT
.FRMREC3 ANOP
*
MDCILGTH DS    XL2          VARILGN0: TOTAL SEGMENT LENGTH
*
MDCIKEY  DS    0XL19        INPTCLMK: CLAIMS INPUT SEGMENT KEY
MDCITRMN DS    CL8          RECDTRLM: INCOMING TERMINAL NAME
MDCILOB  DS    CL2          NULLLOBC: LINE-OF-BUSINESS CODE (02=BS)
MDCIDATE DS    PL4          INPTCLMD: DATE CLAIM WAS ENTERED INTO DB
MDCIDTCI DS    XL2          INPTTMLQ: DAILY TRANSMISSION COUNT INDIC
MDCISEQI DS    PL3          INPTSEQN: INPUT SEQUENCE NUMBER
MDCITEXT DS    0C           INPTMSGX: INPUT XACTION TEXT, VARIABLE LEN
         AIF   ('&TMP' EQ 'ALL').TP20D10
         AGO   .GENEND
.TP20D10 ANOP
         TITLE 'TP20D10: CLAIM OUT SEGMENT'
         AIF   ('&DSECT' EQ 'NO').GENDS4
MDCOCLAM DSECT ,            TP20D10: CLAIMS OUTPUT SEGMENT
         AGO  .FRMREC4
.GENDS4  ANOP
MDCOCLAM DS    0F           TP20D10: CLAIMS OUTPUT SEGMENT
.FRMREC4 ANOP
*
MDCOLGTH DS    XL2          VARILGN0: TOTAL SEGMENT LENGTH
*
MDCOKEY  DS    0XL12        OUTPCLMK: CLAIMS OUTPUT SEGMENT KEY
MDCODATE DS    PL4          OUTPCLMD: DATE OUTPUT SEGMENT WAS GENERATED
MDCODTCI DS    H            OUTPTMLQ: DAILY TRANSMISSION COUNT INDIC
MDCOSEQI DS    PL3          IPOPSEQN: INPUT SEQUENCE NUMBER
MDCOSEQO DS    PL3          OUTPSEQN: OUTPUT SEQUENCE NUMBER
MDCOTEXT DS    0C           OUTPMSGX: OUTPUT XACTION RESPONSE
         AIF   ('&TMP' EQ 'ALL').TP30R
         AGO   .GENEND
.TP30R   ANOP
         TITLE 'TP30R: REPLY SEGMENT'
         AIF   ('&DSECT' EQ 'NO').GENDS5
MDRPRPLY DSECT ,            TP30R: REPLY SEGMENT
         AGO  .FRMREC5
.GENDS5  ANOP
MDRPRPLY DS    0F           TP30R: REPLY SEGMENT
.FRMREC5 ANOP
*
MDRPLGTH DS    H            VARILGN0: REPLY SEGMENT LENGTH
*
MDRPKEY  DS    0XL17        RPLYSGNK: REPLY SEGMENT KEY
MDRPTRMN DS    CL8          DSTNTRLM: DESTINATION TERMINAL NAME
MDRPLOB  DS    CL2          NULLLOBC: LINE-OF-BUSINESS CODE (02=BS)
MDRPDATE DS    PL4          RPLYCLMD: DATE REPLY GENERATED
MDRPSEQO DS    PL3          RPLYSEQN: OUTPUT SEQUENCE NUMBER
MDRPTEXT DS    0C           RPLYMSGX: TEXT OF REPLY
.GENEND  ANOP
&SYSECT  CSECT
         MEND
./ ADD NAME=DCTMAPSR 0100-02135-02135-1227-00208-00208-00000-VBCMACS
         MACRO
         DCTMAPS &DSECT=YES,&SEG=ALL
         AIF   ('&DSECT' EQ 'YES').GENERAT
         AIF   ('&DSECT' EQ 'NO').GENERAT
         MNOTE 2,'** INVALID DSECT/BASE PARMS, DSECT=YES ASSUMED'
.GENERAT ANOP
         AIF   ('&SEG' EQ 'ALL').TP10R
         AIF   ('&SEG' EQ 'TP10R').TP10R
         AIF   ('&SEG' EQ 'TP10D10').TP10D10
         AIF   ('&SEG' EQ 'TP10D20').TP10D20
         AIF   ('&SEG' EQ 'TP20R').TP20R
         AIF   ('&SEG' EQ 'TP20D10').TP20D10
         AIF   ('&SEG' EQ 'TP30R').TP30R
         MNOTE 2,'** SEG PARM INVALID. SEG=ALL ASSUMED'
&SEG     SETC  'ALL'
.TP10R   ANOP
         TITLE 'TP10R: DATA BASE CONTROL SEGMENT'
         AIF   ('&DSECT' EQ 'NO').GENDS
MDRTROOT DSECT ,            TP10R:DATA BASE CONTROL SEGMENT
         AGO  .FORMREC
.GENDS   ANOP
MDRTROOT DS    0F           TP10R:DATA BASE CONTROL SEGMENT
.FORMREC ANOP
*
MDRTKEY  DS    0XL10        NULLRTTK: SEGMENT KEY
MDRTTNAM DS    CL8          ROOTTRLM: TERMINAL NAME
MDRTLOB  DS    CL2          NULLLOBC: LOB CODE
*
MDRTIDNT DS   0CL8          SAME AS BELOW: 7/22/82 JAQ
MRDTIDNT DS    CL8          SECNACMI: 2NDARY ACCESS METHOD TERMINAL ID
*
MDRTACCM DS    XL1          ACCSMHDI: ACCESS METHOD FLAGS
MDRTIRJE EQU   X'80'                  INPUT FROM RJE
MDRTIIMS EQU   X'40'                  INPUT FROM IMS/DC
MDRTITCM EQU   X'20'                  INPUT FROM TCAM/VTAM
MDRTITAP EQU   X'10'                  INPUT FROM TAPE
MDRTORJE EQU   X'08'                  OUTPUT TO RJE
MDRTOIMS EQU   X'04'                  OUTPUT TO IMS/DC
MDRTOTCM EQU   X'02'                  OUTPUT TO TCAM/VTAM
MDRTOTAP EQU   X'01'                  OUTPUT TO TAPE
*
MDRTFLR1 DS    XL1          NULLRSV1: RESERVED
*
MDRTIODI DS    XL1          ROOTIOUI: MESSAGE TRAFFIC FLAGS
MDRTUNPI EQU   X'80'                  UNPROCESSED INPUTS EXIST
MDRTUNPO EQU   X'40'                  UNPROCESSED OUTPUTS EXIST
MDRTUNPR EQU   X'20'                  UNPROCESSED REPLIES EXIST
MDRTRES1 EQU   X'10'                  RESERVED
MDRTIGNI EQU   X'08'                  DO NOT PROCESS INPUTS
MDRTIGNO EQU   X'04'                  DO NOT PROCESS OUTPUTS
MDRTIGNR EQU   X'02'                  NO NOT PROCESS REPLIES
MDRTRES2 EQU   X'01'                  RESERVED
*
MDLBRSVF DS    XL1          NULLRSV2: RESERVED FLAG BYTES
*
MDRTDATE DS    PL4          ROOTTMLD: TRANSMISSION DATE, YYMMDD
*
MDRTTCI  DS    XL2          ROOTTMLQ: TRANSMISSION COUNT INDICATOR
*
MDRTIPKY DS    XL19         ROOTINPK:KEY OF LAST INPUT SEGMENT WRITTEN
*                                    AND PROCESSED BY ADJUDICATION
*
MDRTRPLY DS    0XL17        ROOTWRTK: KEY OF LAST REPLY SEGMENT WRITTEN
*                                     TO THE REPLY DATA BASE.
         DS    CL8          LASTTRLM: TERMINAL NAME
         DS    CL2          LASTLINC: LOB CODE
         DS    PL4          LASTCLMD: LAST CLAIM DATE
         DS    PL3          LASTSEQN: LAST SEQUENCE NUMBER
*
MDRTOKEY DS    0XL12        ROOTOUTK: KEY OF LAST OUTPUT SEGMENT SENT
*                                     BACK BY OUTPUT REPLY PROCESSING
         DS    PL4          ROOTOUTD: ROOT OUT DATE
         DS    XL2          ROOTTMLQ: TRANSMISSION COUNT INDIC
         DS    PL3          ROOTINPN: INPUT SEQUENCE NUMBER
         DS    PL3          ROOTOUTN: OUTPUT SEQUENCE NUMBER
*
MDRTRKEY DS    XL17         ROOTRPYK: KEY OF LAST REPLY SEGMENT SENT
*                                     BACK BY OUTPUT REPLY PROCESSING
ROOTLEN  EQU   *-MDRTROOT   LENGTH OF TP10R SEGMENT
         AIF   ('&SEG' EQ 'ALL').TP10D10
         AGO   .GENEND
.TP10D10 ANOP
         TITLE 'TP10D10: TERMINAL STATISTICS SEGMENT'
         AIF   ('&DSECT' EQ 'NO').GENDS1
MDSTSTAT DSECT ,            TP10D10: DEVICE STATISTICS SEGMENT
         AGO  .FRMREC1
.GENDS1  ANOP
MDSTSTAT DS    0F           TP10D10: DEVICE STATISTICS SEGMENT
.FRMREC1 ANOP
*
*
MDSTKEY  DS    0XL16        TMNLSTLK: STAT KEY
MDSTDATE DS    PL4          NULLAPND: APPENDING DATE
MDSTPGID DS    CL8          APPNPRGD: APPENDING PROGRAM NAME
MDSTTIME DS    PL4          PRGMSRTT: PROGRAM START TIME
*
MDSTIPCT DS    PL5          INPTTRNQ: INPUT TRANSACTIONS ADDED BY DCT10
*
MDSTOPCT DS    PL5          OUTPLINQ: OUTPUT LINES ADDED TO DB BY DCT12
*
MDSTRPCT DS    PL5          RPLYADDQ: REPLIES ADDED TO DB BY XXXX
*
MDSTOCNT DS    PL5          OUTPSNDQ: OUTPUT LINES PROCESSED BY DCT14
*
MDSTRCNT DS    PL5          RPLYSNDQ: REPLIES PROCESSED BY DCT14
*
MDSTEND  DS    PL4          PRGMSTOT: PROGRAM STOP TIME
         AIF   ('&SEG' EQ 'ALL').TP10D20
         AGO   .GENEND
.TP10D20 ANOP
         TITLE 'TP10D20: DEVICE INFORMATION SEGMENT'
         AIF   ('&DSECT' EQ 'NO').GENDS2
MDININFO DSECT ,            TP10D20: DEVICE INFORMATION SEGMENT
         AGO  .FRMREC2
.GENDS2  ANOP
MDININFO DS    0F           TP10D20: DEVICE INFORMATION SEGMENT
.FRMREC2 ANOP
*
MDINTLOC DS    CL25         TMNLLOCM: NAME OF TERMINAL LOCATION
*
MDINADDR DS    CL25         TMNLLO1R: ADDRESS OF TERMINAL LOCATION
*
MDINCITY DS    CL25         TMNLLO2R: CITY, STATE OF TERMINAL LOCATION
*
MDINZIP  DS    PL3          TMNLLO3R: PACKED ZIP CODE
*
MDINATTN DS    CL25         ATTTLNCM: ATTENTION LINE CONTACT NAME
*
MDINPHON DS    PL6          TMNLPHNN: PACKED PHONE NUMBER
*
MDINBLIN DS    CL3          USERLOBC: LINE OF BUSINESS
*
MDINDEVT DS    CL15         NULLDVIS: DEVICE TYPE
*
MDINLINE DS    PL3          TMNLLIN5: LINE SPEED USED
*
MDINMODM DS    CL15         TMNLMDMS: MODEM TYPE
*
MDINENTR DS    CL2          TMNLMODC: ENTRY MODE
*
MDINWHER DS    CL25         TMNLLOCC: TERM LOCATION
*
MDINSERL DS    PL6          TMNLSRLN: DEVICE SERIAL NUMBER
*
MDINVEND DS    CL25         TMNLVENM: VENDOR CONTACT
*
MDINVNUM DS    PL6          TMNLVENN: VENDOR PHONE NUMBER
         AIF   ('&SEG' EQ 'ALL').TP20R
         AGO   .GENEND
.TP20R   ANOP
         TITLE 'TP20R: CLAIM IN SEGMENT'
         AIF   ('&DSECT' EQ 'NO').GENDS3
MDCICLAM DSECT ,            TP20R: CLAIMS INPUT SEGMENT
         AGO  .FRMREC3
.GENDS3  ANOP
MDCICLAM DS    0F           TP20R: CLAIMS INPUT SEGMENT
.FRMREC3 ANOP
*
MDCILGTH DS    XL2          VARILGN0: TOTAL SEGMENT LENGTH
*
MDCIKEY  DS    0XL19        INPTCLMK: CLAIMS INPUT SEGMENT KEY
MDCITRMN DS    CL8          RECDTRLM: INCOMING TERMINAL NAME
MDCILOB  DS    CL2          NULLLOBC: LINE-OF-BUSINESS CODE (02=BS)
MDCIDATE DS    PL4          INPTCLMD: DATE CLAIM WAS ENTERED INTO DB
MDCIDTCI DS    XL2          INPTTMLQ: DAILY TRANSMISSION COUNT INDIC
MDCISEQI DS    PL3          INPTSEQN: INPUT SEQUENCE NUMBER
MDCITEXT DS    0C           INPTMSGX: INPUT XACTION TEXT, VARIABLE LEN
         AIF   ('&SEG' EQ 'ALL').TP20D10
         AGO   .GENEND
.TP20D10 ANOP
         TITLE 'TP20D10: CLAIM OUT SEGMENT'
         AIF   ('&DSECT' EQ 'NO').GENDS4
MDCOCLAM DSECT ,            TP20D10: CLAIMS OUTPUT SEGMENT
         AGO  .FRMREC4
.GENDS4  ANOP
MDCOCLAM DS    0F           TP20D10: CLAIMS OUTPUT SEGMENT
.FRMREC4 ANOP
*
MDCOLGTH DS    XL2          VARILGN0: TOTAL SEGMENT LENGTH
*
MDCOKEY  DS    0XL12        OUTPCLMK: CLAIMS OUTPUT SEGMENT KEY
MDCODATE DS    PL4          OUTPCLMD: DATE OUTPUT SEGMENT WAS GENERATED
MDCODTCI DS    H            OUTPTMLQ: DAILY TRANSMISSION COUNT INDIC
MDCOSEQI DS    PL3          IPOPSEQN: INPUT SEQUENCE NUMBER
MDCOSEQO DS    PL3          OUTPSEQN: OUTPUT SEQUENCE NUMBER
MDCOTEXT DS    0C           OUTPMSGX: OUTPUT XACTION RESPONSE
         AIF   ('&SEG' EQ 'ALL').TP30R
         AGO   .GENEND
.TP30R   ANOP
         TITLE 'TP30R: REPLY SEGMENT'
         AIF   ('&DSECT' EQ 'NO').GENDS5
MDRPRPLY DSECT ,            TP30R: REPLY SEGMENT
         AGO  .FRMREC5
.GENDS5  ANOP
MDRPRPLY DS    0F           TP30R: REPLY SEGMENT
.FRMREC5 ANOP
*
MDRPLGTH DS    H            VARILGN0: REPLY SEGMENT LENGTH
*
MDRPKEY  DS    0XL17        RPLYSGNK: REPLY SEGMENT KEY
MDRPTRMN DS    CL8          DSTNTRLM: DESTINATION TERMINAL NAME
MDRPLOB  DS    CL2          NULLLOBC: LINE-OF-BUSINESS CODE (02=BS)
MDRPDATE DS    PL4          RPLYCLMD: DATE REPLY GENERATED
MDRPSEQO DS    PL3          RPLYSEQN: OUTPUT SEQUENCE NUMBER
MDRPTEXT DS    0C           RPLYMSGX: TEXT OF REPLY
.GENEND  ANOP
&SYSECT  CSECT
         MEND
./ ADD NAME=DISKDATA 0100-02135-02135-1227-00027-00027-00000-VBCMACS
         MACRO
&NAME    DISKDATA &DSECT=NO
         LCLC  &CSECT
         AIF   ('&DSECT' EQ 'NO').DODS
&CSECT   SETC  '&SYSECT'
&NAME    DSECT
         AGO   .DEFINE
.DODS    ANOP
         DS    0D
&NAME    DS    0XL28
.DEFINE  ANOP
DISKEXT  DS    0XL10                   VTOC EXTENTS
$DSCB4   DS    XL5                     DSCB4 CCHHR
         DS    XL5                     HIGH CCHHR
DISKCYLS DS    XL2                     CYL PER DEVICE
DISKTRKS DS    XL2                     TRKS PER CYL
DISKLEN  DS    XL2                     BYTES PER TRK
DISKOVER DS    XL2                     OVERHEAD FOR KEYED RECORDS
DISKDIFF DS    XL1                     DIFFERENTIAL FOR NONKEYED
DISKDSCB DS    XL1                     DSCBS PER TRK
DISKDIR  DS    XL1                     DIR BLOCKS PER TRACK
$DSCB1   DS    XL5                     CCHHR OF LAST FORMAT1
DISKOPEN DS    XL2                     AVAILABLE DSCBS
         AIF   ('&DSECT' EQ 'NO').END
&CSECT   CSECT
.END     ANOP
         MEND
./ ADD NAME=DMCOMMON 0100-02135-02135-1227-00171-00171-00000-VBCMACS
         MACRO
         DMCOMMON &DSECT=YES
         AIF ('&DSECT' EQ 'NO').NODSCT
DMCOMMON DSECT
         AGO .DEFINE
.NODSCT  ANOP
DMCOMMON DS    0D
.DEFINE  ANOP
*
***********************************************************************
*              COMMON STORAGE AREAS
***********************************************************************
*
DBLWD    DS    D                       DOUBLEWORD WORK AREA
HOLDPSW  DS    D                       PSW TRAPPED BY SPIE
NEXLINE  DC    A(LINE5DTA)             NEXT SCREEN LINE ADDRESS
NEXBYTE  DS    A                       NEXT MEMORY ADDRESS FOR DMDSPLY
LASTLINE DC    A(LIN24DTA)             LAST SCREEN LINE ADDRESS
NEXADR   DS    F                       NEXT ADDR FOR STRIPARM
VALADDR  DS    F                       ADDRESS FOR VALCBAD
$ASVT    DC    F'0'                    ASVT ADDRESS
$ASVTOFF DC    F'0'                    CURRENT ASVT OFFSET
$ASCB    DC    F'0'                    SAVE ASCB ADDRESS
$MNQCB   DC    F'0'                    NEXT MINOR QCB ADDRESS
$MJQCB   DC    F'0'                    NEXT MAJOR QCB ADDRESS
$UCB     DC    F'0'                    LAST UCB ADDRESS
$LUCB    DC    F'0'                    ADDR OF LAST UCB LISTED
$LMJQCB  DC    F'0'                    ADDR OF LAST MAJOR QCB LISTED
$LMNQCB  DC    F'0'                    ADDR OF LAST MINOR QCB LISTED
F4       DC    F'4'                    CONSTANT 4
RELOFST  DS    H                       RELATIVE OFFSET FOR DMDSPLY
CMD      DS    CL6                     HOLD AREA FOR REQUEST
PARM     DS    CL80                    HOLD AREA FOR PARAMETER
LENCODE  DS    XL1                     LENGTH CODE FOR PARAMETER
AUTHUSER DC    X'00'                   SET TO 01 IF AUTHORIZED USER
CORADR   DS    F                       CORE ADDRESS AREA FROM DMADDRES
HEXADDR  DS    F                       HEX ADDRESS FOR DMHEXCHR
HEXLENG  DC    X'04'                   CONVERSION LENGTH FOR DMHEXCHR
CHAR     DS    CL32                    CHARACTER OUTPUT FROM DMHEXCHR
CHARADDR DS    F                       CHARACTER ADDRESS FOR DMCHRHEX
CHARLEN  DS    X                       CONVERSION LENGTH FOR DMCHRHEX
HEX      DS    CL40                    HEX OUTPUT FROM DMCHRHEX
XZROS    DC    X'00000000'             HEX ZEROS
BLANX    DC    CL80' '                 BLANKS
EQTBL    DC    100XL12'00'             EQUATE TABLE
         DC    X'FFFFFFFF'             END OF EQUATE TABLE
SPMSG    DS    0CL33
         DC    CL19'SPIE ROUTINE FOUND '
SPCODE   DS    CL3                     INTERRUPT CODE IN SPIE PSW
         DC    CL11', TRY AGAIN'
STORAGE  DS    CL320                   STORAGE FOR DMDSPLY
HIVAL    EQU   X'FF'
BLANK    EQU   C' '
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*   INPUT SCREEN AREA FOR THE ALTER STORAGE TGET
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
ALTAREA  DS    0C                      TGET READ IN AREA
ALTAID   DS    XL1                     READ ATTRIBUTE ID
ALTCRSR  DS    XL1                     CURSOR ROW ADDRESS
ALTCRSC  DS    XL1                     CURSOR COLUMN ADDRESS
ALTLIN1  DS    CL82                    LINE1 SBA+RC+DATA
ALTLIN6  DS    CL82                    LINE6 SBA+RC+DATA
ALTLIN8  DS    CL82                    LINE8 SBA+RC+DATA
ALTLIN10 DS    CL82                    LINE10 SBA+RC+DATA
ALTLIN12 DS    CL82                    LINE12 SBA+RC+DATA
ALTLIN14 DS    CL82                    LINE10 SBA+RC+DATA
ALTLIN16 DS    CL82                    LINE12 SBA+RC+DATA
ALTLIN18 DS    CL82                    LINE10 SBA+RC+DATA
ALTLIN20 DS    CL82                    LINE12 SBA+RC+DATA
ALTLIN22 DS    CL82                    LINE10 SBA+RC+DATA
ALTLIN24 DS    CL82                    LINE12 SBA+RC+DATA
ENDALT   DC    X'FFFF'                 END OF AREA
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*   INPUT SCREEN AREA FOR THE TGET
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
READAREA DS    0C                      TGET READ IN AREA
READAID  DS    XL1                     READ ATTRIBUTE ID
NOACTION EQU   X'60'                   NO OPERATOR ACTION
ENTERKEY EQU   X'7D'                   ENTER KEY PRESSED
PF1      EQU   X'F1'                   PF KEY 1 PRESSED
PF2      EQU   X'F2'                   PF KEY 2 PRESSED
PF3      EQU   X'F3'                   PF KEY 3 PRESSED
PF4      EQU   X'F4'                   PF KEY 4 PRESSED
PF5      EQU   X'F5'                   PF KEY 5 PRESSED
PF6      EQU   X'F6'                   PF KEY 6 PRESSED
PF7      EQU   X'F7'                   PF KEY 7 PRESSED
PF8      EQU   X'F8'                   PF KEY 8 PRESSED
PF9      EQU   X'F9'                   PF KEY 9 PRESSED
LITEPEN  EQU   X'7E'                   IMMEDIATELY DETECTABLE FIELD
TESTREQ  EQU   X'F0'                   TEST REQUEST KEY PRESSED
CLEARKEY EQU   X'6D'                   CLEAR KEY PRESSED (NO DATA)
PA1      EQU   X'6C'                   PA KEY 1 PRESSED (NO DATA)
CANCLKEY EQU   X'6E'                   CANCEL KEY (PA 2) (NO DATA)
PA3      EQU   X'6B'                   PA KEY 3 PRESSED (NO DATA)
CURSORR  DS    XL1                     CURSOR ROW ADDRESS
CURSORC  DS    XL1                     CURSOR COLUMN ADDRESS
READSBA  DS    XL1                     SBA (HEX 11) IF DATA ENTERED
FIELDROW DS    XL1                     FIELD ROW ADDRESS
FIELDCOL DS    XL1                     FIELD COLUMN ADDRESS
REPLY    DS    CL79                    USER'S REPLY
ENDREAD  DC    X'FFFF'                 END OF AREA
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*   SCREEN OUTPUT MESSAGE AREA
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
SCREEN   DS    0C                      FORMATTED SCREEN AREA
         DC    XL1'C3'                 WCC: RESTORE KYBD, RESET MDT'S
         DC    XL3'115D7E'             TELL FSE ABOUT FULLSCRN
         DC    XL3'114040'             SBA, FLD ROW1 COL1
         DC    XL4'3C5D7F00'           RA TO ROW1 COL1 WITH HEX 0'S
         DC    XL3'114040'             SBA, FLD ROW1 COL1
LINE1    DC    CL80' '                 UNPROTECTED REPLY LINE
LINE2    DC    XL2'1DE8'               SF, HIGH INTENS, MDT OFF, PROT
         DC    CL36'    END EQ DM AM CVT ASCB UCB MAJQCB'
         DC    CL43' MINQCB                               '
LINE3    DC    XL2'1DE8'               SF, HIGH INTENS, MDT OFF, PROT
         DC    CL79' '                 SECOND HEADER LINE
LINE4    DC    XL2'1DE8'               SF,HIGH INTENS,MDT OFF,PROT
         DC    79C'-'
LINE5    DC    XL2'1DE8'
LINE5DTA DC    CL79' '                 LINE 5 DATA
LINE6    DC    XL2'1DE8'
LINE6DTA DC    CL79' '                 LINE 6 DATA
LINE7    DC    XL2'1DE8'
LINE7DTA DC    CL79' '                 LINE 7 DATA
LINE8    DC    XL2'1DE8'
LINE8DTA DC    CL79' '                 LINE 8 DATA
LINE9    DC    XL2'1DE8'
LINE9DTA DC    CL79' '                 LINE 9 DATA
LINE10   DC    XL2'1DE8'
LIN10DTA DC    CL79' '                 LINE 10 DATA
LINE11   DC    XL2'1DE8'
LIN11DTA DC    CL79' '                 LINE 11 DATA
LINE12   DC    XL2'1DE8'
LIN12DTA DC    CL79' '                 LINE 12 DATA
LINE13   DC    XL2'1DE8'
LIN13DTA DC    CL79' '                 LINE 13 DATA
LINE14   DC    XL2'1DE8'
LIN14DTA DC    CL79' '                 LINE 14 DATA
LINE15   DC    XL2'1DE8'
LIN15DTA DC    CL79' '                 LINE 15 DATA
LINE16   DC    XL2'1DE8'
LIN16DTA DC    CL79' '                 LINE 16 DATA
LINE17   DC    XL2'1DE8'
LIN17DTA DC    CL79' '                 LINE 17 DATA
LINE18   DC    XL2'1DE8'
LIN18DTA DC    CL79' '                 LINE 18 DATA
LINE19   DC    XL2'1DE8'
LIN19DTA DC    CL79' '                 LINE 19 DATA
LINE20   DC    XL2'1DE8'
LIN20DTA DC    CL79' '                 LINE 20 DATA
LINE21   DC    XL2'1DE8'
LIN21DTA DC    CL79' '                 LINE 21 DATA
LINE22   DC    XL2'1DE8'
LIN22DTA DC    CL79' '                 LINE 22 DATA
LINE23   DC    XL2'1DE8'
LIN23DTA DC    CL79' '                 LINE 23 DATA
LINE24   DC    XL2'1DE8'
LIN24DTA DC    CL79' '                 LINE 24 DATA
         DC    XL5'1140401DC8'         SBA: ROW1, COL1 UNPROT, HIGH
         DC    XL1'13'                 INSERT CURSOR
ENDSCRN  EQU   *
         AIF ('&DSECT' EQ 'NO').END
&SYSECT  CSECT
.END     ANOP
         MEND
./ ADD NAME=DYNAPARM 0100-02135-02135-1227-00049-00049-00000-VBCMACS
         MACRO
         DYNAPARM
DAPARM1  DS    0F                      * 1ST PARAMETER FOR DYNALLOC *
DDNAME   DS    CL8                     DDNAME
DSNAME   DS    CL44                    DATASET NAME
MEMBER   DS    CL8                     MEMBER NAME
DISP     DS    CL3                     DISPOSITION:
*                                    BYTE1: 0=OLD,M=MOD,N=NEW,S=SHR
*                                    BYTE2: U=UNCATLG,C=CATLG,D=DELETE
*                                    K=KEEP; BYTE3: SAME AS BYTE2
UNITNAME DS    CL8                     UNIT NAME
UNITCNT  DS    XL2                     UNIT COUNT
VOLSER   DS    CL6                     VOLUME SERIAL NUMBER
LBLTYPE  DS    CL1                     LABEL TYPE:
*                                      N=NL, S=SL, B=BLP
DSSEQ    DS    XL2                     DATASET SEQUENCE NBR (TAPE)
FRECLOS  DS    CL1                     F: FREE=CLOSE
RETPRD   DS    XL2                     RETENTION PERIOD IN DAYS
RECFM    DS    CL3                     RECORDING FORMAT:
*                                      BYTE1: F=FIXED, V=VARIABLE,
*                                      U=UNDEFINED; BYTE2: B=BLOCKED,
*                                      BYTE3: A=ASA CONTROL CHARACTERS
LRECL    DS    XL2                     LOGICAL RECORD LENGTH
BLKSIZE  DS    XL2                     BLOCK SIZE
DEN      DS    CL1                     TAPE DENSITY: 1=1600,6=6250
BUFNO    DS    XL2                     BUFNO
KEYLEN   DS    XL2                     KEY LENGTH
DSORG    DS    CL1                     DATASET ORGANIZATION:
*                                      V=VSAM, P=PDS, D=DIRECT, S=SEQ
SPACETYP DS    CL1                     SPACE TYPE:
*                                      C=CYL, T=TRK
PSPAC    DS    XL2                     PRIMARY SPACE AMOUNT
SSPAC    DS    XL2                     SECONDARY SPACE AMOUNT
RLSE     DS    CL1                     R=RLSE
DRCTYBLK DS    XL2                     NBR DIRECTORY BLOCKS
*
*
*
DAPARM2  DS    0F                      2ND PARAMETER FOR DYNALLOC
REQCODE  DS    CL1                     REQUEST CODE:
*                                      A=ALLOCATE A DATASET
*                                      V=VOLSER FEEDBACK
RETCODE  DS    CL2                     DYNALLOC RETURN CODE
ERRRET   DS    CL4                     ERROR RETURN CODE
INFORET  DS    CL4                     INFO RETURN CODE
*
*
*
         MEND
./ ADD NAME=EASYCOME 0100-02135-02135-1227-00087-00087-00000-VBCMACS
         MACRO
&NAME    EASYCOME &WORK=6,&SAVE=SAVEAREA,&BASE=12,&TYPE=I
         LCLC  &STRING
         LCLA  &NUM,&I,&J
         LCLA  &K
&NUM     SETA  N'&BASE
         AIF   ('&NAME' EQ '').NONAME
&I       SETA  ((K'&NAME+2)/2)*2+4
         AIF   (N'&TYPE EQ 2).ENTRY
         AIF   ('&TYPE' EQ 'CSECT').CSECT
         AIF   ('&TYPE' EQ 'ENTRY').ENTRY
         AIF   ('&TYPE' EQ 'NONE').NONE
         AIF   ('&TYPE' NE 'I').ERR1
         AIF   ('&SYSECT' EQ '').CSECT
.ENTRY   ENTRY &NAME
&NAME    B     &I.(0,15)     BRANCH AROUND IDENTIFIER
         AGO   .CONTINU
.NONE    ANOP
&NAME    DS    0H
         AGO   .NONAME
.CSECT   ANOP
&NAME    CSECT
         B     &I.(0,15)     BRANCH AROUND IDENTIFIER
.CONTINU ANOP
&I       SETA  &I-5
         DC    AL1(&I) LENGTH OF IDENTIFIER
         DC    CL&I'&NAME' IDENTIFIER
.NONAME  STM   14,12,12(13)  SAVE REGISTERS 0-12, AND 14-15
         AIF   (N'&TYPE EQ 2).SECOND
         BALR  &BASE(1),0    SET BASE REGISTER
.*             DO WE NEED MULTIPLE BASE REGISTERS?
         AIF   (&NUM GT 1).MULT
         USING *,&BASE       NOTE ITS USAGE
.DONE    ANOP
         LA    &WORK,&SAVE   GET ADDRESS OF SAVE AREA
         ST    &WORK,8(0,13) STORE SAVEAREA ADDRESS IN CALLING SAVEAREA
         ST    13,&SAVE+4    SAVE REGISTER 13
         LR    13,&WORK      POINT TO SAVEAREA FROM REGISTER 13
         AIF   (&NUM GT 1).DCS
         MEXIT
.SECOND  AIF   ('&TYPE(1)' NE 'S').ERR
&I       SETA  ((K'&TYPE(2)+2)/2)*2+10
&K       SETA  1
         USING &NAME,15
.LOOP3   L     &BASE(&K),BASE&SYSNDX+&J
&J       SETA  &J+4
&K       SETA  &K+1
         AIF   (&K LE &NUM).LOOP3
         B     BASE&SYSNDX+&J
BASE&SYSNDX DS 0F
&J       SETA  0
&K       SETA  1
.LOOP4   DC    A(&TYPE(2)+&I+&J)
&J       SETA  &J+4096
&K       SETA  &K+1
         AIF   (&K LE &NUM).LOOP4
         DROP  15
&NUM     SETA  1
         AGO   .DONE
.ERR     MNOTE 4,'*** FIRST OPERAND OF ''TYPE'' SUBLIST IS INVALID - &T*
               YPE(1)'
         MNOTE *,'*** TYPE=ENTRY IS ASSUMED'
         AGO   .ENTRY
.MULT    ANOP
BASE&SYSNDX DS 0H
&STRING  SETC  '&BASE'(2,K'&BASE-2)
         USING *,&STRING
&I       SETA  2
.LOOP    AIF   (&I GT &NUM).DONE
         L     &BASE(&I),ADDR&SYSNDX+&J
&J       SETA  &J+4
&I       SETA  &I+1
         AGO   .LOOP
.DCS     ANOP
         B     ADDR&SYSNDX+&J
ADDR&SYSNDX DS 0F
&I       SETA  2
&J       SETA  4096
.LOOP2   AIF   (&I GT &NUM).FINISH
         DC    A(BASE&SYSNDX+&J)
&J       SETA  &J+4096
&I       SETA  &I+1
         AGO   .LOOP2
.FINISH  ANOP
         MEXIT
.ERR1    MNOTE 4,'*** INCORRECT SPECIFICATION, TYPE=&TYPE.'
         MEND
./ ADD NAME=EASYGO   0100-02135-02135-1227-00015-00015-00000-VBCMACS
         MACRO
&NAME    EASYGO &SAVE=SAVEAREA,&RC=0
&NAME    L     13,4(,13)     GET POINTER TO OLD AREA
         AIF ('&RC'(1,1) EQ '(').REG
         LM    14,12,12(13)  RESTORE ALL OTHER REGISTERS
         LA    15,&RC.(0,0)
         AGO   .END
.REG     AIF   (&RC(1) EQ 15).NOLOAD
         LR    15,&RC(1)     SET RETURN CODE
.NOLOAD  LM    0,12,20(13)   RESTORE ALL OTHER REGISTERS
         L     14,12(,13)    LOAD RETURN REGISTER
.END     BR    14            RETURN
         AIF   ('&SAVE' EQ '*').MEND
&SAVE    DS    18F
.MEND    MEND
./ ADD NAME=EDIX     0100-02135-02135-1227-00039-00039-00000-VBCMACS
         MACRO
&NAME    EDIX &INLOC,&OUTLOC,&TYPE,&MASK,&DIGITS,&R=1
         LCLA &A
         LCLC &REG
&REG     SETC '&R'
&A       SETA &DIGITS-(&DIGITS/2)*2
         AIF (&A EQ 1).START
         MNOTE 4,'WARNING --- AN ODD NUMBER OF DIGITS SHOULD BE SPECIFI*
               ED'
.START   ANOP
&A       SETA  7-(&DIGITS-&A)/2
         AIF   ('&INLOC'(1,1) NE '(').CHECKTP
&REG      SETC  '&INLOC(1)'
         AIF   ('&NAME' EQ '').PROC2
&NAME    DS   0H
         AGO   .PROC2
.CHECKTP AIF  ('&TYPE' EQ 'F').FWORD
         AIF   ('&TYPE' EQ 'H').HWORD
         AIF   ('&TYPE' EQ 'C').BYTE
         MNOTE 4,'INVALID TYPE -- &TYPE'
         MEXIT
.FWORD   ANOP
&NAME    L   &REG,&INLOC
         AGO   .PROC2
.HWORD   ANOP
&NAME    LH   &REG,&INLOC
         AGO   .PROC2
.BYTE    ANOP
&NAME    SR   &REG,&REG
         IC   &REG,&INLOC
.PROC2   MVC   &OUTLOC,&MASK
         CL   &REG,=FE&DIGITS'1'
         BL   GOOD&SYSNDX
         MVC   &OUTLOC,=C'************'
         B   END&SYSNDX
GOOD&SYSNDX CVD &REG,DWD
         ED   &OUTLOC,DWD+&A
END&SYSNDX DS 0H
         MEND
./ ADD NAME=ENDMOVE  0100-02135-02135-1227-00045-00045-00000-VBCMACS
         MACRO
&NAME    ENDMOVE &DSECT=YES
         GBLC  &CSECT
         LCLC  &NAM,&DS
&DS      SETC  'DC '
&NAM     SETC  'ENDMOVE'
         AIF   (T'&NAME EQ 'O').NONAME
&NAM     SETC  '&NAME'
*
*    ENDEVOR MOVE ACTIVITY RECORD AS STRIPPED FROM SMF
*
.NONAME  AIF   ('&DSECT' EQ 'NO').NOSECT1
&DS      SETC  'DS '
         DSECT
.NOSECT1 ANOP
&NAM     DS    0CL160         STRIPPED ENDEVOR RECORD
RECTYPE  &DS   CL1'7'         MOVE RECORD
DATE     &DS   CL5' '         SMF DATE - HEADER
TIME     DS    0CL6           SMF TIME - HEADER
TIMEHH   &DS   CL2' '         HOURS
TIMEMM   &DS   CL2' '         MINUTES
TIMESS   &DS   CL2' '         SECONDS
CLEAR    DS    0CL148
SYS      &DS   CL4' '         SMF SYSTEM ID - HEADER
ENVIR    &DS   CL8' '         ENDEVOR ENVIRONMENT NAME - HEADER
REQUID   &DS   CL8' '         ENDEVOR REQUESTOR UID - HEADER
CCID     &DS   CL12' '        ENDEVOR CCID - BLK 4
COMMENT1 &DS   CL40' '        ACTION COMMENT - BLK 4
SYSTEM   &DS   CL8' '         ENDEVOR SYSTEM ID - BLK 1 (STAGE PROD)
SUBSYS   &DS   CL8' '         ENDEVOR SUBSYSTEM ID - BLK 1
TYPE     &DS   CL8' '         ENDEVOR ELEMENT TYPE - BLK 1
ELEMENT  &DS   CL10' '        ENDEVOR ELEMENT NAME - BLK 1
VERSION  &DS   CL2' '         ELEMENT VERSION - BLK 1
LEVEL    &DS   CL2' '         ELEMENT LEVEL   - BLK 1
UID      &DS   CL8' '         UID OF ACTION PROGRAMMER - BLK 2
ADATE    &DS   CL6' '         LAST ACTION DATE - BLK 2
ATIME    &DS   CL4' '         LAST ACTION TIME - BLK 2
PROCESS  &DS   CL10' '        PROCESSOR NAME - BLK 3
MDATE    &DS   CL6' '         DATE MOVE TOOK PLACE - BLK 3
MTIME    &DS   CL4' '         TIME MOVE TOOK PLACE - BLK 3
         AIF   ('&DSECT' EQ  'NO').NOSECT2
&CSECT   CSECT
.NOSECT2 ANOP
*
         MEND
./ ADD NAME=ENDSUB   0100-02135-02135-1227-00007-00007-00000-VBCMACS
         MACRO
&NAME    ENDSUB
         B   END&NAME        BRANCH AROUND LTORG
         LTORG
END&NAME  LM  11,14,&NAME.SAVE   RESTORE REGS
         DROP  R11
         MEND
./ ADD NAME=EXIT     0100-85287-85287-0937-00067-00067-00000-VBCMACS
         MACRO
&L       EXIT  &LENGTH=72,&RENT=N,&RC=(15),&TRANSP=N
.*
.*      EXIT - ASSEMBLER PROGRAM EPILOG - REENTRANT/NON-REENTRANT
.*
.*      MACRO BY DAVID R. BIVENS - 04/17/79
.*
         LCLC  &T
         AIF   (0 EQ K'&L).NOLBL
&L       DS    0H
.NOLBL   ANOP
*        DECHAIN SAVE AREAS
         L     13,4(13)
&T       SETC  T'&RC
         AIF   ('(' EQ '&RC'(1,1)).RCREG
         AIF   ('&T' NE 'F' AND '&T' NE 'A').NOTF
         L     15,&RC
         AGO   .GOTRC
.NOTF    AIF   ('&T' NE 'H' AND '&T' NE 'Y').NOTH
         LH    15,&RC
         AGO   .GOTRC
.NOTH    AIF   ('&T' NE 'N' AND '&T' NE 'U').NOTU
         LA    15,&RC
         AGO   .GOTRC
.NOTU    AIF   (1 NE L'&RC).NOTIC
         IC    15,&RC
         AGO   .GOTRC
.NOTIC   ANOP
         MNOTE *,'RETURN CODE TYPE IGNORED - &RC'
         L     15,16(13)           *** UNPREDICTABLE RETURN CODE ***
         AGO   .GOTRC
.RCREG   ANOP
&T       SETC  '&RC'(2,K'&RC-2)
         LR    15,&T
         AGO   .GOTRC
.GOTRC   ANOP
         AIF   ('Y' EQ '&TRANSP').NOSAVE
         STM   15,1,16(13)         SAVE R0,R1,R15.  INCLUDES RET CODE.
         AGO   .RCSET
.NOSAVE  ANOP
         ST    15,16(13)           STORE RETURN CODE FOR LATER USE.
.RCSET   AIF   ('Y' EQ '&RENT').FREE
.LOAD    ANOP
         LM    14,12,12(13)        RESTORE CALLERS REGS AND RET CODE.
         BR    14                  EXIT...
         MEXIT
.FREE    ANOP
         L     1,8(13)             ADDRESS OF OUR SAVE AREA.
         SR    0,0                 INDICATE SUBPOOL 0.
&T       SETC  T'&LENGTH
         AIF   ('F' NE '&T' AND 'A' NE '&T').TRYH
         L     0,&LENGTH
         AGO   .GOTLEN
.TRYH    AIF   ('H' NE '&T' AND 'Y' NE '&T').TRYN
         LH    0,&LENGTH
         AGO   .GOTLEN
.TRYN    AIF   ('N' NE '&T' AND 'U' NE '&T').TRYZ
         LA    0,&LENGTH
         AGO   .GOTLEN
.TRYZ    ANOP
         MNOTE 4,'UNSUPPORTED LENGTH DATA TYPE - &LENGTH - 72 ASSUMED'
         LA    0,72                ***** ASSUMED SAVE AREA LENGTH *****
.GOTLEN  ANOP
*        FREEMAIN R,LV=(0),A=(1)
         FREEMAIN R,LV=(0),A=(1)
         AGO   .LOAD
         MEND
./ ADD NAME=FCBD     0102-88117-88118-0921-00178-00176-00000-VBCMACS
         MACRO
&LABEL   FCBD  &LPI
         LCLA  &A(180),&LP,&N,&WK,&CC,&LAST,&K,&K1,&LI
         LCLB  &Q,&C,&PASS,&CCH(12)
         LCLC  &CH,&BLANK,&B,&B1
&LAST    SETA  N'&SYSLIST              GET NBR OPERANDS
         AIF   (&LAST LT 3).MACBAD     ERROR IF LESS THAN 3
.OP1     AIF   (T'&SYSLIST(1) NE 'N').OP1BAD OP1 MUST BE NUMERIC
&LI      SETA  6                       ASSUME OP1 SAYS 6 LPI
         AIF   (&SYSLIST(1) EQ 6).OP2  BRANCH IF SO
         AIF   (&SYSLIST(1) NE 8).OP1BAD ERROR IF NOT 6 OR 8
&LI      SETA  8                       SHOW 8 LINES PER INCH
.OP2     AIF   (T'&SYSLIST(2) NE 'N').OP2BAD OP2 MUST BE NUMERIC
         AIF   (&SYSLIST(2) LT 2 OR &SYSLIST(2) GT 180).OP2BAD
&LP      SETA  &SYSLIST(2)             SET NBR LINES PER PAGE
.OP3     ANOP
&N       SETA  2                       SET OPERAND COUNTER TO 2
.OPN     ANOP                          START LOOP
&N       SETA  &N+1                    ADD 1 TO OPERAND COUNTER
         AIF   (&N GT &LAST).ENDSCAN   IF NO MORE OPERANDS
         AIF   (T'&SYSLIST(&N) NE 'N').OPH IF NOT NUMERIC
         AIF   (&N EQ 3).OP3BAD        ERROR IF OP3 NOT HYPHENATED
         AIF   (NOT &C).OPN            IGNORE OP IF INVALID &CC
&WK      SETA  &SYSLIST(&N)            SET WORK TO OPERAND VALUE
.OPN1    AIF   (&WK LT 1 OR &WK GT &LP).OPLBAD IF BAD LINE NBR
         AIF   (&A(&WK) NE 0 AND &A(&WK) NE &CC).DUPBAD IF DUPLICATE
&A(&WK)  SETA  &CC                     SET &WK-TH LINE TO &CC
         AGO   .OPN                    LOOP
.OPH     ANOP                          NON-NUMERIC OPERAND
&K       SETA  K'&SYSLIST(&N)          SET OPERAND CHAR COUNT
&K1      SETA  0                       SET CHAR COUNT TO 0
&WK      SETA  0                       WORK TO 0
&PASS    SETB  0                       SHOW 1ST PASS
.OPH1    ANOP                          START LOOP
&K1      SETA  &K1+1                   ADD 1 TO CHAR CTR
         AIF   (&K1 GT &K).OPH3        IF END OF STRING
&CH      SETC  '&SYSLIST(&N)'(&K1,1)   GET A CHARACTER
         AIF   ('&CH' LT '0' OR '&CH' GT '9').OPH2 IF NON-NUM
&WK      SETA  &WK*10+&CH              COMPILE DECIMAL NBR
         AGO   .OPH1                   LOOP
.OPH2    AIF   (&PASS OR '&CH' NE '-').HYPBAD ERROR IF NOT -
&CC      SETA  &WK                     SET CARRIAGE CHNL
&WK      SETA  0                       ZERO WORK
&PASS    SETB  1                       SHOW 2ND PASS
         AGO   .OPH1                   RETURN TO LOOP
.OPH3    AIF   (NOT &PASS).LOGBAD      ERROR IF 1ST PASS
         AIF   (&CC LT 1 OR &CC GT 12).OPCBAD IF CC BAD
&CCH(&CC) SETB 1                       SHOW CARRIAGE CHNL USED
&C       SETB  1                       SHOW VALID &CC
         AGO   .OPN1                   GO CHECK VALID LINE NBR
.ENDSCAN AIF   (&Q).QUITBAD            EXIT IF QUIT SWITCH
         AIF   (K'&LABEL LT 5).LABBAD1   LABEL MUST BE GT 4 BYTES
         AIF   (K'&LABEL GT 5).CKFCB2
&CH      SETC  '&LABEL'(K'&LABEL,1)     GET LAST CHAR OF LABEL
         AIF   ('&CH' EQ 'S' OR '&CH' EQ 'U').LABBAD2
.CKFCB2  AIF   ('&LABEL'(1,4) NE 'FCB2').LABBAD1
&N       SETA  0                       CHNL CTR TO 0
&C       SETB  0                       0 1ST TIME MSG SWITCH
&K       SETA  0                       0 TOP DOWN LINE CTR
&K1      SETA  &LP+1                   SET BOTTOM UP LINE CTR
.END11   ANOP                          START LOOP
&N       SETA  &N+1                    ADD 1 TO CHANNEL CTR
         AIF   (&N GT 12).BEGIN        IF ALL CHNLS DONE
         AIF   (&CCH(&N)).END11        IF CHNL IS ASSIGNED
         AIF   (&C).END12              IF NOT 1ST TIME
         MNOTE *,'THE FOLLOWING ASSIGNMENTS OF UNSPECIFIED '
         MNOTE *,'CARRIAGE CHANNELS PREVENT RUN-AWAY FORMS ---'
         MNOTE *,'A CHANNEL 1 MUST BE CODED OR A HASP0180 ERROR'
         MNOTE *,'MSG MAY RESULT AS STATED BY JES SOURCE ---'
&C       SETB  1                       SHOW 1ST TIME MSG WRITTEN
.END12   AIF   (&N EQ 9 OR &N EQ 12).END14 IF CHNL 9 OR 12
.END13   ANOP                          UNASSIGNED CHANNEL FOUND
&K       SETA  &K+1                    ADD 1 TO LINE CTR
         AIF   (&K GT &LP).END17       IF ALL LINES HAVE CHANNELS
         AIF   (&A(&K) NE 0).END13     IF THIS LINE HAS A CHNL
&WK      SETA  &K                      SET LINE NBR AND
         AGO   .END15                  GO ASSIGN CHNL TO IT
.END14   ANOP                          UNASSIGNED CHNL 9 OR 12
&K1      SETA  &K1-1                   LOWER LINE CTR BY 1
         AIF   (&K1 LT 1).END17        IF ALL LINES HAVE CHNLS
         AIF   (&A(&K1) NE 0).END14    IF THIS LINE HAS CHNL
&WK      SETA  &K1                     SET LINE NBR
.END15   ANOP                          ASSIGN CHANNEL TO LINE
&BLANK   SETC  ''                      ASSUME CHNL 10 OR GTR
         AIF   (&N GT 9).END16         IF CHNL GTR THAN 9
&BLANK   SETC  ' '                     ADD A BLANK FOR CHNL 9 OR LESS
.END16   MNOTE *,'   CARRIAGE CHANNEL &BLANK.&N IN LINE &WK'
&A(&WK)  SETA  &N                      ASSIGN CHNL NBR TO LINE
&CCH(&N) SETB  1                       SHOW CHANNEL ASSIGNED
         AGO   .END11                  BACK INTO LOOP
.END17   AIF   (&CCH(1)).END18         IF CHNL IS ASSIGNED
         MNOTE 4,'ERROR - CARRIAGE CHANNEL 1 IS NOT SPECIFIED AND'
         MNOTE *,'CANNOT BE INSERTED. CHANNEL 1 PUNCH IS'
         MNOTE *,'REQUIRED FOR 3211 CARRIAGE-RESTORE FUNCTION.'
         AGO   .QUITBAD
.END18   MNOTE 0,'WARNING - UNSPECIFIED CARRIAGE CHANNELS'
         MNOTE 0,'STARTING WITH CHANNEL &N CAN CAUSE'
         MNOTE 0,'RUN-AWAY FORMS.'
.BEGIN   ANOP
&LABEL   CSECT
&PASS    SETB  (&LI EQ 8)              &PASS = 1 FOR 8 LPI
&A(1)    SETA  &A(1)+16*&PASS          SET UP 1ST BYTE
&A(&LP)  SETA  &A(&LP)+16              SET UP LAST BYTE
&N       SETA  0                       CURRENT BYTE PTR TO 0
&K       SETA  0                       PREV NON-0 BYTE PTR TO 0
.DO      ANOP                          BUILD THE FCB
         DC    X'80',0C'               IS A DEFAULT FCB'
         DC    AL1(&LP),0C'            FCB IS &LP BYTES LONG'
.DOCT    ANOP
&N       SETA  &N+1                    POINT TO THE NEXT BYTE
         AIF   (&A(&N) EQ 0).DOCT      LOOP IF ITS 0
&K       SETA  &N-&K-1                 COMPUTE NBR OF 0 BYTES
         AIF   (&K EQ 0).DO1           SKIP DOING THEM IF NONE
         DC    &K.AL1(0),0C'           LINES WITH NO CHNLS'
.DO1     ANOP
&WK      SETA  &A(&N)                  SET WORK TO BYTE'S VALUE
         AIF   (&WK EQ 16).DO3         IF 0 DIGIT ENTRY
&B       SETC  ''                      SET 2 LCLC VARIABLES
&B1      SETC  ''                      TO NULL STRINGS
         AIF   (&WK GT 9).DO2          IF ADCON IS 2 DIGITS
&B       SETC  ' '                     ELSE ADD BLANK TO COMMENT
.DO2     ANOP
&WK      SETA  &WK-&WK/16*16           GET CHNL NBR
         AIF   (&WK GT 9).DO2A         IF CHNL NBR 2 DIGITS
&B1      SETC  ' '                     ELSE ADD BLANK TO COMMENT
.DO2A    DC    AL1(&A(&N)),0C'     &B.CHAN &B1.&WK IS AT LINE &N'
         AGO   .DO4
.DO3     DC    AL1(&A(&N))
.DO4     AIF   (&N EQ &LP).END         IF LAST BYTE PROCESSED
&K       SETA  &N                      SET K TO LAST NON-0 BYTE
         AGO   .DOCT                   GO LOOP
.OP1BAD  MNOTE 4,'INVALID OPERAND 1 - &SYSLIST(1) -'
         MNOTE *,'FIRST OPERAND MUST BE EITHER 6 OR 8.'
         AGO   .QUITBAD
.OP2BAD  MNOTE 4,'INVALID OPERAND 2 - &SYSLIST(2) -'
         MNOTE *,'SECOND OPERAND MUST BE A NUMBER GREATER THAN 1'
         MNOTE *,'AND NOT GREATER THAN 180.'
         AGO   .QUITBAD
.OP3BAD  MNOTE 4,'INVALID OPERAND 3 - &SYSLIST(3) -'
         MNOTE *,'THIRD OPERAND MUST HAVE A CARRIAGE CHANNEL'
         MNOTE *,'NUMBER, A HYPHEN, AND A LINE NUMBER.'
         AGO   .QUITBAD
.OPLBAD  AIF   (T'&SYSLIST(&N) NE 'N').OPLBADA
         MNOTE 4,'INVALID OPERAND &N - &SYSLIST(&N) -'
         AGO   .OPLBADB
.OPLBADA MNOTE 4,'INVALID SUBOPERAND &WK OF OPERAND &N - &SYSLIST(&N)'
.OPLBADB MNOTE *,'LINE NUMBER MUST BE GREATER THAN 1 AND '
         MNOTE *,'NOT GREATER THAN &LP..'
         AGO   .QUITBAD
.DUPBAD  MNOTE 4,'DUPLICATE SPECIFICATION - OPERAND &N ASSIGNS'
         MNOTE *,'CARRIAGE CHANNEL &CC TO LINE &WK, WHICH WAS'
         MNOTE *,'PREVIOUSLY ASSIGNED CHANNEL &A(&WK)..'
         AGO   .QUITBAD
.HYPBAD  MNOTE 4,'INVALID OPERAND &N - &SYSLIST(&N) -'
         AIF   (&PASS).HYPBADA
         MNOTE *,'UNRECOGNIZABLE CHARACTER ''&CH'''
         AGO   .HYPBADB
.HYPBADA MNOTE *,'UNRECOGNIZABLE CHARACTER ''&CH'' IN LINE NUMBER.'
.HYPBADB ANOP
         AGO   .QUITBAD
.OPCBAD  MNOTE 4,'INVALID OPERAND &N - &SYSLIST(&N) -'
         MNOTE *,'CARRIAGE CHANNEL MUST BE GREATER THAN 0'
         MNOTE *,'AND NOT GREATER THAN 12.'
         AGO   .QUITBAD
.LOGBAD  MNOTE 4,'INTERNAL LOGIC ERROR AT OPERAND &N'
         AGO   .QUITBAD
.MACBAD  MNOTE 4,'TOO FEW OPERANDS SPECIFIED. AT LEAST LINES PER'
         MNOTE *,'INCH, LINES PER PAGE, AND ONE CARRIAGE CONTROL'
         MNOTE *,'PUNCH MUST BE SPECIFIED.'
.QUITBAD MNOTE *,'FCB WILL NOT BE GENERATED'
         MEXIT
.LABBAD1 MNOTE 4,'LABEL MUST BE AT LEAST 5 BYTES, BEGINNING WITH FCB2'
         MNOTE *,'LAST 4 ARE THE FCB IDENTIFIER'
         AGO   .QUITBAD
.LABBAD2 MNOTE 4,'LABELS FCB2S AND FCB2U ARE RESERVED FOR JES2 USE'
         AGO   .QUITBAD
.END     ANOP
         MEND
./ ADD NAME=FIELD    0100-02135-02135-1227-00049-00049-00000-VBCMACS
         MACRO
&LBL     FIELD &ROW=,&COL=,&LENGTH=,&DATA=,&TYPE=C,&SF1=,&SF2=,&IC=NO, X
               &SBA=YES,&COLUMNS=80
         GBLC  &ADR(64)
         GBLA  &SBAMAX
         LCLA  &I,&J,&POSIT
         LCLC  &SCRADDR
&SCRADDR SETC  ''
         AIF   (&SBAMAX GT 1).SKIPINT
         SBAINIT
.SKIPINT ANOP
         AIF   (T'&ROW EQ 'O' OR T'&COL EQ 'O').SKIP
&POSIT   SETA  ((&ROW-1)*&COLUMNS+&COL)
&I       SETA  (&POSIT/&SBAMAX)
&J       SETA  (&POSIT-(&I*&SBAMAX))
         AIF   (&J LE 0).NOADD
&I       SETA  &I+1
.NOADD   AIF   (&I GE 1).NOSET
&I       SETA  1
.NOSET   AIF   (&J GE 1).CONTGEN
&J       SETA  &SBAMAX
.CONTGEN AIF   ('&SBA' NE 'NO').INCLSBA
&SCRADDR SETC  '&ADR(&I).&ADR(&J)'
         AGO   .SKIP
.INCLSBA ANOP
&SCRADDR SETC  '11&ADR(&I).&ADR(&J)'
.SKIP    AIF   (T'&SF1 EQ 'O').NOSF1
&SCRADDR SETC  '&SCRADDR.1D&SF1'
.NOSF1   AIF   ('&IC' NE 'YES').NOIC
&SCRADDR SETC  '&SCRADDR.13'
.NOIC    ANOP
         AIF   ('&SCRADDR' EQ '').CKCONS
         DC    X'&SCRADDR'
.CKCONS  AIF   (T'&DATA EQ 'O').EMPTY
         AIF   (T'&LENGTH EQ 'O').GENCONS
&LBL     DC    &TYPE.L&LENGTH.&DATA
         AGO   .CKSF2
.GENCONS ANOP
&LBL     DC    &TYPE.&DATA
         AGO   .CKSF2
.EMPTY   ANOP
         AIF   (T'&LENGTH EQ 'O').CKSF2
&LBL     DS    &TYPE.L&LENGTH
*        EMPTY FIELD GENERATED
.CKSF2   AIF   (T'&SF2 EQ 'O').END
         DC    X'1D&SF2'
.END     ANOP
         SPACE
         MEND
./ ADD NAME=FOLDER   0100-02135-02135-1227-00012-00012-00000-VBCMACS
         PRINT  NOGEN
         DBD    NAME=FOLDDBD,ACCESS=(HIDAM,VSAM)
         DATASET DD1=FOLDER,DEVICE=3380,SIZE=4096
         SEGM   NAME=FOLDER,PARENT=0,BYTES=(167,45),FREQ=70
         FIELD  NAME=(FNAME,SEQ,U),BYTES=36,START=3,TYPE=C
         FIELD  NAME=FALIAS,BYTES=4,START=39,TYPE=X
         LCHILD NAME=(FOLDINS,FOLDXXX),PTR=INDX
         LCHILD NAME=(XALIAS,ALIASDBD),PTR=INDX
         XDFLD  NAME=ALIAS,SRCH=FALIAS,NULLVAL=ZERO
         DBDGEN
         FINISH
         END
./ ADD NAME=FOLDXXX  0100-02135-02135-1227-00009-00009-00000-VBCMACS
         PRINT  NOGEN
         DBD    NAME=FOLDXXX,ACCESS=(INDEX,VSAM,NOPROT)
         DATASET DD1=FOLDIND,DEVICE=3380
         SEGM   NAME=FOLDINS,PARENT=0,BYTES=36
         FIELD  NAME=(FOLDINF,SEQ,U),BYTES=36,START=1,TYPE=C
         LCHILD NAME=(FOLDER,FOLDDBD),INDEX=FNAME
         DBDGEN
         FINISH
         END
./ ADD NAME=GAIC     0100-02135-02135-1227-00004-00004-00000-VBCMACS
         MACRO
&NAME    GAIC  &ADDR,&GROUP
&NAME    IHBGAM1 10983,&ADDR,&GROUP
         MEND
./ ADD NAME=GCON     0100-02135-02135-1227-00025-00025-00000-VBCMACS
         MACRO
&NAME  GCON  &UNIT            UNIT CONNECT ORDER
         GBLA  &IHBBLC,&IHBBLIM
         IHBGAM3
&IHBBLC    SETA  &IHBBLC+2              UPDATE BUFFER-LOC COUNTER
       AIF     (&IHBBLC LE &IHBBLIM).PROC
         IHBERMAC 182
.PROC    AIF   (T'&UNIT EQ 'O').NOTE    DETERMINE UNIT
         AIF   ('&UNIT'(1,1) EQ 'R').RECRT
         AIF   ('&UNIT'(1,1) EQ 'S').SCANR
         AIF   ('&UNIT'(1,1) EQ 'A').APERT
         AIF   ('&UNIT'(1,1) EQ 'D').DEFLR
.NOTE    IHBERMAC  180,UNIT,DEFLECTION
.DEFLR ANOP
&NAME  DC      H'10923'
       MEXIT
.RECRT ANOP
&NAME  DC      H'10920'
       MEXIT
.SCANR ANOP
&NAME  DC      H'10921'
       MEXIT
.APERT ANOP
&NAME  DC      H'10922'
       MEND
./ ADD NAME=GDA      0100-02135-02135-1227-00036-00036-00000-VBCMACS
         MACRO
         GDA
GDA      DSECT
*        THE VSM GLOBAL DATA AREA IS IN SQA. IT CONTAINS SYSTEM-      *
*        RELATED VSM CONTROL BLOCKS AND POINTERS.                     *
GVSMFLAG DS  0F    GLOBAL FLAGS
GDAFLAGS DS  B
NIPFOURK EQU  X'20'          FLAG RSM NOT READY (NIP)
SQATHRS1 EQU  X'08'          SQA THRESHOLD 1 (APPROACHING
*                            CRITICAL) PASSED IF ON
SQATHRS2 EQU  X'04'          SQA THRESHOLD 2 (CRITICAL) PASSED
*                            IF ON
WAITQUE  EQU  X'02'          INDICATES V=R GETPART SPECIFIC IN A WAIT
*                            FOR REAL REGION SPACE
RESV     DS  BL3
VRDREG   DS  F     DEFAULT V=R REGION SIZE
CSAPQEP  DS  F     CSA PQE PTR
VRPQEP   DS  F     V=R PQE PTR
PASTRT   DS  F     PRIVATE AREA START ADDRESS
PASIZE   DS  F     PRIVATE AREA SIZE
SQASPQEP DS  F     SQA SPQE PTR
SQASPLFT DS  F     SQA SPACE LEFT UNALLOCATED
VRPOSTQ  DS  0F    V=R POST QUEUE ANCHOR BLOCK
VRPFEL   DS  F     PTR TO FIRST Q EL.
VRPLEL   DS  F     PTR TO LAST Q EL.
VRWAITQ  DS  0F    V=R WAIT QUEUE ANCHOR BLOCK
VRWFEL   DS  F     PTR TO FIRST Q EL.
VRWLEL   DS  F     PTR TO LAST Q EL.
PFSTCPAB DS  F     FIRST CPAB PTR
CSASPQEP DS  F     FIRST CSA SPQE PTR
*                                                                     *
*   THE FOLLOWING FIELDS MUST REMAIN IN SEQUENCE                      *
*                                                                     *
GLBLCELL DS  F     INTERNAL CELL ANCHOR BLOCK
GBLCELCT DS  F     COUNT OF FREE INTERNAL CELLS
         MEND
./ ADD NAME=GDS      0100-02135-02135-1227-00039-00039-00000-VBCMACS
       MACRO
&NAME  GDS     &X,&Y,&I
       GBLA    &IHBBLC,&IHBBLIM
         LCLC  &BEAM,&C,&XBUK,&YBUK
         LCLA  &XA,&YA
&C       SETC  '01010101'
&IHBBLC    SETA  &IHBBLC+1              UPDATE BUFFER-LOC COUNTER
       AIF     (&IHBBLC LE &IHBBLIM).TESTI
         IHBERMAC 182
.TESTI   AIF   (T'&I EQ 'O').NOTE       TEST BEAM INTENSITY
         AIF   ('&I'(1,1) EQ 'U' OR '&I' EQ 'ON').ONRT
         AIF   ('&I'(1,1) EQ 'B' OR '&I' EQ 'OFF').OFFRT
.NOTE    IHBERMAC  180,BEAM,BLANKED
.OFFRT ANOP
&BEAM    SETC  '1'
         AGO   .TESTX
.ONRT  ANOP
&BEAM    SETC  '0'
.TESTX   AIF   (T'&X EQ 'O').XNG        VALIDATE X-COORDINATE
         AIF   ('&X'(1,1) EQ '+' OR '&X'(1,1) EQ '-').XNG
         AIF   (T'&X NE 'N').XNG
.XPL     AIF   (&X GT 7).XNG
&XA      SETA  &X
         AGO   .TESTY
.XNG     IHBERMAC  180,X,0
&XA      SETA  0
.TESTY   AIF   (T'&Y EQ 'O').YNG        VALIDATE Y-COORDINATE
         AIF   ('&Y'(1,1) EQ '+' OR '&Y'(1,1) EQ '-').YNG
         AIF   (T'&Y NE 'N').YNG
.YPL     AIF   (&Y GT 7).YNG
&YA      SETA  &Y
         AGO   .DONE
.YNG     IHBERMAC  180,Y,0
&YA      SETA  0
.DONE    ANOP
&XBUK  SETC  '&BEAM'.'&C'((&XA+4)/4,1).'&C'((&XA+2)/2,1).'&C'(&XA+1,1)
&YBUK    SETC    '0'.'&C'((&YA+4)/4,1).'&C'((&YA+2)/2,1).'&C'(&YA+1,1)
&NAME    DC    BL1'&XBUK&YBUK'
         MEND
./ ADD NAME=GDSF     0100-02135-02135-1227-00072-00072-00000-VBCMACS
         MACRO
&NAME    GDSF  &A,&B,&C
         GBLA  &IHBBLC,&IHBBLIM,&IHBXSP,&IHBYSP,&IHBVSP,&IHBBPX
         GBLA  &IHBBPY,&IHBCRSZ
         LCLC  &RD,&CL,&SP,&BASE,&CHAR1
&RD      SETC  '0'
&CL      SETC  '0'
&SP      SETC  '0'
&BASE    SETC  '00001'
&IHBBLC    SETA  &IHBBLC+1
         AIF   (&IHBBLC LE &IHBBLIM).TESTA
         IHBERMAC 182
.TESTA   AIF   (T'&A EQ 'O').TESTB
         AIF   ('&A'(1,1) EQ 'R').SETRDA
         AIF   ('&A'(1,1) EQ 'C').SETCLA
         AIF   ('&A'(1,1) EQ 'S').SETSPA
         IHBERMAC  183,PARAM-1,NO-FUNCTION
.TESTB   AIF   (T'&B EQ 'O').TESTC
         AIF   ('&B'(1,1) EQ 'R').SETRDB
         AIF   ('&B'(1,1) EQ 'C').SETCLB
         AIF   ('&B'(1,1) EQ 'S').SETSPB
         IHBERMAC  183,PARAM-2,NO-FUNCTION
.TESTC   AIF   (T'&C EQ 'O').PROCEED
         AIF   ('&C'(1,1) EQ 'R').SETRDC
         AIF   ('&C'(1,1) EQ 'C').SETCLC
         AIF   ('&C'(1,1) EQ 'S').SETSPC
         IHBERMAC  183,PARAM-3,NO-FUNCTION
.PROCEED ANOP
&CHAR1   SETC  '&BASE'.'&RD'.'&CL'.'&SP'
&NAME    DC    BL1'&CHAR1'
         AIF   ('&SP' NE '1').EXIT
         AIF   (&IHBVSP EQ 1).VSINC
.ERROR   IHBERMAC 187
.EXIT    MEXIT
.VSINC   ANOP
&IHBBPX    SETA  &IHBBPX+&IHBXSP
&IHBBPY    SETA  &IHBBPY+&IHBYSP
         AIF   (&IHBBPX LT 0 OR &IHBBPX GT 4095).VSXERR
.VSYTST  AIF   (&IHBBPY LT 0 OR &IHBBPY GT 4095).VSYERR
         MEXIT
.VSXERR  IHBERMAC  186,BPX
         AGO   .VSYTST
.VSYERR  IHBERMAC  186,BPY
               MEXIT
.SETRDA  ANOP
&RD      SETC  '1'
         AGO   .TESTB
.SETCLA  ANOP
&CL      SETC  '1'
         AGO   .TESTB
.SETSPA  ANOP
&SP      SETC  '1'
         AGO   .TESTB
.SETRDB  ANOP
&RD      SETC  '1'
         AGO   .TESTC
.SETCLB  ANOP
&CL      SETC  '1'
         AGO   .TESTC
.SETSPB  ANOP
&SP      SETC  '1'
         AGO   .TESTC
.SETRDC  ANOP
&RD      SETC  '1'
         AGO   .PROCEED
.SETCLC  ANOP
&CL      SETC  '1'
         AGO   .PROCEED
.SETSPC  ANOP
&SP      SETC  '1'
         AGO   .PROCEED
         MEND
./ ADD NAME=GECV     0100-02135-02135-1227-00028-00028-00000-VBCMACS
         MACRO
&NAME  GECV  &SIZE            ENTER CHAR MODE VARIABLE
         GBLA  &IHBBLC,&IHBBLIM,&IHBCRSZ
         IHBGAM3
&IHBBLC    SETA  &IHBBLC+2              UPDATE BUFFER-LOC COUNTER
       AIF   (&IHBBLC LE &IHBBLIM).PROC
         IHBERMAC 182
.PROC    AIF   (T'&SIZE EQ 'O').NOTE    VALIDATE CHARACTER SIZE
         AIF   ('&SIZE'(1,1) EQ 'B').BASRT
         AIF   ('&SIZE'(1,1) EQ 'L').LARRT
         AIF   ('&SIZE'(1,1) EQ 'S').SMART
         AIF   ('&SIZE'(1,1) EQ 'U').UNCHR
.NOTE    IHBERMAC  180,SIZE,UNCHANGED
.UNCHR ANOP
&NAME  DC      H'10835'
       MEXIT
.BASRT ANOP
&NAME  DC      H'10832'
&IHBCRSZ SETA    1
       MEXIT
.SMART ANOP
&NAME  DC      H'10834'
&IHBCRSZ   SETA  0
       MEXIT
.LARRT ANOP
&NAME  DC      H'10833'
&IHBCRSZ   SETA  2
       MEND
./ ADD NAME=GENMSG   0100-02135-02135-1227-00007-00007-00000-VBCMACS
         MACRO
         GENMSG &TEXT
         LCLC  &LBLTEXT
&LBLTEXT SETC  'IMS&SYSNDX'
         DC    AL2(L'&LBLTEXT-1)
&LBLTEXT DC    C&TEXT
         MEND
./ ADD NAME=GESM     0100-02135-02135-1227-00030-00030-00000-VBCMACS
         MACRO
&NAME  GESM  &SIZE            ENTER STROKE MODE
         GBLA  &IHBCRSZ
         GBLA  &IHBBLC,&IHBBLIM,&IHBSMSW
         IHBGAM3
&IHBSMSW  SETA  1
&IHBBLC    SETA  &IHBBLC+2              UPDATE BUFFER-LOC COUNTER
       AIF     (&IHBBLC LE &IHBBLIM).OK
         IHBERMAC 182
.OK      AIF   (T'&SIZE EQ 'O').NOTE    VALIDATE CHARACTER SIZE
         AIF   ('&SIZE'(1,1) EQ 'B').BASRT
         AIF   ('&SIZE'(1,1) EQ 'L').LARRT
         AIF   ('&SIZE'(1,1) EQ 'S').SMART
         AIF   ('&SIZE'(1,1) EQ 'U').UNCHR
.NOTE    IHBERMAC  180,SIZE,UNCHANGED
.UNCHR ANOP
&NAME  DC      H'10843'
         MEXIT
.SMART ANOP
&IHBCRSZ SETA  0
&NAME  DC      H'10842'
         MEXIT
.LARRT ANOP
&IHBCRSZ SETA  2
&NAME  DC      H'10841'
         MEXIT
.BASRT ANOP
&IHBCRSZ SETA  1
&NAME  DC      H'10840'
       MEND
./ ADD NAME=GESU     0100-02135-02135-1227-00004-00004-00000-VBCMACS
         MACRO
&NAME  GESU
&NAME    IHBGAM2 10930
         MEND
./ ADD NAME=GFEF     0100-02135-02135-1228-00004-00004-00000-VBCMACS
         MACRO
&NAME  GFEF
&NAME    IHBGAM2 10932
         MEND
./ ADD NAME=GFFM     0100-02135-02135-1228-00037-00037-00000-VBCMACS
         MACRO
&NAME  GFFM  &DIST,&MOT       FILM FRAME MOTION
         GBLA  &IHBBLC,&IHBBLIM
         LCLA  &WDIST,&WMOT,&BLCBUK
         IHBGAM3
&IHBBLC    SETA  &IHBBLC+4              UPDATE BUFFER-LOC COUNTER
       AIF   (&IHBBLC LE &IHBBLIM).TESTD
         IHBERMAC 182
.TESTD   AIF   (T'&DIST EQ 'O').NOTE1   DETERMINE DISTANCE
       AIF   ('&DIST' EQ 'A').SETDA
       AIF   ('&DIST' EQ 'B').SETDB
       AIF   ('&DIST' EQ 'C').SETDC
       AIF   ('&DIST' EQ 'D').SETDD
.NOTE1   IHBERMAC  180,DISTANCE,D
.SETDD ANOP
&WDIST SETA  4
       AGO   .TESTM
.SETDA ANOP
&WDIST SETA  20
       AGO   .TESTM
.SETDB ANOP
&WDIST SETA  10
       AGO   .TESTM
.SETDC ANOP
&WDIST SETA  0008
.TESTM   AIF   (T'&MOT EQ 'O').NOTE2    DETERMINE FILM MOTION
         AIF   ('&MOT'(1,1) EQ 'F').FWDRT
         AIF   ('&MOT'(1,1) EQ 'B').BACKR
.NOTE2   IHBERMAC  180,MOTION,FORWARD
.FWDRT ANOP
&NAME  DC      H'10960'
       DC    XL2'&WDIST'
       MEXIT
.BACKR ANOP
&NAME  DC      H'10961'
       DC    XL2'&WDIST'
       MEND
./ ADD NAME=GFRM     0100-02135-02135-1228-00027-00027-00000-VBCMACS
         MACRO
&NAME  GFRM  &DIST,&MOT       FILM REGISTRATION MOTION
         GBLA  &IHBBLC,&IHBBLIM
         LCLA  &WDIST,&WMOT,&BLCBUK
         IHBGAM3
&IHBBLC    SETA  &IHBBLC+4              UPDATE BUFFER-LOC COUNTER
       AIF   (&IHBBLC LE &IHBBLIM).TESTD
         IHBERMAC 182
.TESTD   AIF   (T'&DIST EQ 'O').NOTE1
         AIF   (T'&DIST NE 'N').NOTE1
         AIF   (&DIST GT 63).NOTE1
&WDIST   SETA  &DIST
         AGO   .TESTM
.NOTE1   IHBERMAC  180,DISTANCE,0
&WDIST SETA  0
.TESTM AIF   (T'&MOT EQ 'O').NOTE2
         AIF   ('&MOT'(1,1) EQ 'F').FWDRT
         AIF   ('&MOT'(1,1) EQ 'B').BACKR
.NOTE2   IHBERMAC  180,MOTION,FORWARD
.FWDRT ANOP
&NAME  DC      H'10962'
       DC    XL2'&WDIST'
       MEXIT
.BACKR ANOP
&NAME  DC      H'10963'
       DC    XL2'&WDIST'
       MEND
./ ADD NAME=GLCW     0100-02135-02135-1228-00004-00004-00000-VBCMACS
         MACRO
&NAME    GLCW  &ADDR,&GROUP
&NAME    IHBGAM1 10976,&ADDR,&GROUP
         MEND
./ ADD NAME=GLIC     0100-02135-02135-1228-00004-00004-00000-VBCMACS
         MACRO
&NAME    GLIC  &ADDR,&GROUP
&NAME    IHBGAM1 10977,&ADDR,&GROUP
         MEND
./ ADD NAME=GLRC     0100-02135-02135-1228-00004-00004-00000-VBCMACS
         MACRO
&NAME    GLRC  &ADDR,&GROUP
&NAME    IHBGAM1 10978,&ADDR,&GROUP
         MEND
./ ADD NAME=GLRR     0100-02135-02135-1228-00004-00004-00000-VBCMACS
         MACRO
&NAME    GLRR  &ADDR,&GROUP
&NAME    IHBGAM1 10980,&ADDR,&GROUP
         MEND
./ ADD NAME=GLTR     0100-02135-02135-1228-00004-00004-00000-VBCMACS
         MACRO
&NAME    GLTR  &ADDR,&GROUP
&NAME    IHBGAM1 10979,&ADDR,&GROUP
         MEND
./ ADD NAME=GLVS     0100-02135-02135-1228-00055-00055-00000-VBCMACS
       MACRO
&NAME  GLVS  &DX,&DY          LOAD VARIABLE SPACE
         GBLA  &IHBBLC,&IHBBLIM,&IHBVSP,&IHBXSP,&IHBYSP
         LCLA  &WX,&WY,&BLCBUK
         LCLC  &XBUK,&YBUK
         IHBGAM3
&IHBVSP      SETA  1
&IHBBLC    SETA  &IHBBLC+4              UPDATE BUFFER-LOC COUNTER
       AIF     (&IHBBLC LE &IHBBLIM).TESTX
         IHBERMAC 182
.TESTX ANOP
&NAME  DC      H'10968'
       AIF     (T'&DX EQ 'O').NOX
         AIF   ('&DX'(1,1) EQ '+' OR '&DX'(1,1) EQ '-').XSIGN
         AIF   (T'&DX NE 'N').NOX
&WX      SETA  &DX
.XTEST   AIF   (&WX GT 127).NOX
         AIF   ('&DX'(1,1) EQ '-').XNEG
.XRAT  ANOP
       DC      FL1'&WX'
       AGO     .TESTY
.NOX     IHBERMAC  180,DX,56-R.U.
&WX    SETA    56
         AGO   .XRAT
.XSIGN   ANOP
&WX      SETA  K'&DX-1
&XBUK    SETC  '&DX'(2,&WX)
&WX      SETA  &XBUK
         AGO   .XTEST
.XNEG    DC    FL1'-&WX'
&WX      SETA  0-&WX
.TESTY ANOP
&IHBXSP  SETA  &WX
       AIF     (T'&DY EQ 'O').NOY
         AIF   ('&DY'(1,1) EQ '+' OR '&DY'(1,1) EQ '-').YSIGN
         AIF   (T'&DY NE 'N').NOY
&WY      SETA  &DY
.YTEST   AIF   (&WY GT 127).NOY
         AIF   ('&DY'(1,1) EQ '-').YNEG
.YRAT  ANOP
       DC      FL1'&WY'
         AGO   .YSP
.NOY     IHBERMAC  180,DY,0-R.U.
&WY    SETA    0
         AGO   .YRAT
.YSIGN   ANOP
&WY      SETA  K'&DY-1
&YBUK    SETC  '&DY'(2,&WY)
&WY      SETA  &YBUK
         AGO   .YTEST
.YNEG    DC    FL1'-&WY'
&WY      SETA  0-&WY
.YSP     ANOP
&IHBYSP  SETA  &WY
       MEND
./ ADD NAME=GMLD     0100-02135-02135-1228-00017-00017-00000-VBCMACS
         MACRO
&NAME  GMLD  &SIZ             MAKE LINE DENSITY
         GBLA  &IHBBLC,&IHBBLIM
         IHBGAM3
&IHBBLC    SETA  &IHBBLC+2              UPDATE BUFFER-LOC COUNTER
         AIF   (&IHBBLIM GE &IHBBLC).OK
         IHBERMAC 182
.OK      AIF   (T'&SIZ EQ 'O').NOTE     DETERMINE LINE DENSITY
         AIF   ('&SIZ'(1,1) EQ 'B').BAS
         AIF   ('&SIZ'(1,1) EQ 'L').LIGHT
.NOTE    IHBERMAC  180,DENSITY,BASIC
.BAS   ANOP
&NAME  DC      H'10940'
         MEXIT
.LIGHT   ANOP
&NAME  DC      H'10941'
         MEND
./ ADD NAME=GMLW     0100-02135-02135-1228-00017-00017-00000-VBCMACS
         MACRO
&NAME  GMLW  &SIZ             MAKE LINE WIDTH
         GBLA  &IHBBLC,&IHBBLIM
         IHBGAM3
&IHBBLC    SETA  &IHBBLC+2              UPDATE BUFFER-LOC COUNTER
         AIF   (&IHBBLIM GE &IHBBLC).OK
         IHBERMAC 182
.OK      AIF   (T'&SIZ EQ 'O').NOTE     DETERMINE LINE WIDTH
         AIF   ('&SIZ'(1,1) EQ 'B').BAS
         AIF   ('&SIZ'(1,1) EQ 'W').WIDE
.NOTE    IHBERMAC  180,WIDTH,BASIC
.BAS   ANOP
&NAME  DC      H'10936'
         MEXIT
.WIDE    ANOP
&NAME  DC      H'10937'
         MEND
./ ADD NAME=GMSR     0100-02135-02135-1228-00017-00017-00000-VBCMACS
         MACRO
&NAME  GMSR  &A               MAKE SCAN RESPONSE
         GBLA  &IHBBLC,&IHBBLIM
         IHBGAM3
&IHBBLC    SETA  &IHBBLC+2              UPDATE BUFFER-LOC COUNTER
       AIF   (&IHBBLC LE &IHBBLIM).TEST
         IHBERMAC 182
.TEST  AIF   (T'&A EQ 'O').NOTE
         AIF   ('&A'(1,1) EQ 'N').NEGRT
         AIF   ('&A'(1,1) EQ 'P').POSRT
.NOTE    IHBERMAC  180,RESPONSE,NEGATIVE
.NEGRT ANOP
&NAME  DC      H'10928'
       MEXIT
.POSRT ANOP
&NAME  DC      H'10929'
       MEND
./ ADD NAME=GNRLFAIL 0100-02135-02135-1228-00117-00117-00000-VBCMACS
         MACRO                                                          0000000
&NAME    GNRLFAIL &RET=,&TYPE=,&GFCB=,&CPPL=,&KEYN08=NO                 0000000
.*                                                                      0000000
.*  THIS MACRO IS USED TO ISSUE ERROR MESSAGES FOR CERTAIN              0000000
.*  FAILURES.  IT IS ASSUMED THAT ON ENTRY R15 CONTAINS                 0000000
.*  EITHER THE ERROR RETURN CODE OR ABEND CODE. THIS ROUTINE            0000000
.*  WILL DESTROY R1.                                                    0000000
.*                                                                      0000000
         GBLC  &P                                                       0000000
         GBLC  &GNRLF                                                   0000000
         LCLC  &CALLID                                                  0000000
         LCLC  &GNRLFCB                                                 0000000
         LCLC  &LCLLBL                                                  0000000
         LCLC  &GFBITS                                                  0000000
         AIF   ('&TYPE' EQ '').ERR1   MUST SUPPLY TYPE                  0000000
         AIF   ('&RET' EQ '').SYSLBL                                    0000000
&LCLLBL  SETC  '&RET'                                                   0000000
         AGO   .CONT1                                                   0000000
.SYSLBL  ANOP                                                           0000000
&LCLLBL  SETC  '&P'.'&SYSNDX'                                           0000000
.CONT1   ANOP                                                           0000000
         AIF   ('&GFCB' EQ '').NOGFCB                                   0000000
&GNRLFCB SETC  '&GFCB'                                                  0000000
         AGO   .CONT2                                                   0000000
.NOGFCB  ANOP                                                           0000000
&GNRLFCB SETC  '&P'.'GNRLF'                                             0000000
&GNRLF   SETC  'YES'  SO CPDATA ALLOCATES CONTROL BLOCKS                0000000
.CONT2   ANOP                                                           0000000
.*  DETERMINE THE CORRECT GFBITS SETTING BASED UPON THE                 0000000
.*  GNRLFAIL TYPE REQUEST AND THE PROTECT KEY                           0000000
&GFBITS  SETC  '0'                                                      0000000
         AIF   ('&TYPE' NE 'SSREQ' OR '&KEYN08' NE 'YES').CONT4         0000000
&GFBITS  SETC  'GFKEYN08+GFSUBSYS'                                      0000000
         AGO   .CONT6                                                   0000000
.CONT4   ANOP                                                           0000000
         AIF   ('&TYPE' NE 'SSREQ').CONT5                               0000000
&GFBITS  SETC  'GFSUBSYS'                                               0000000
         AGO   .CONT6                                                   0000000
.CONT5   ANOP                                                           0000000
         AIF   ('&KEYN08' NE 'YES').CONT6                               0000000
&GFBITS  SETC  'GFKEYN08'                                               0000000
.CONT6   ANOP                                                           0000000
         AIF   ('&NAME' EQ '').NONAME                                   0000000
&NAME    EQU   *                                                        0000000
.NONAME  ANOP                                                           0000000
         AIF   ('&TYPE' NE 'PARSE').NOPARS                              0000000
         LA    R1,4           IF PARSE ERROR CODE IS 4 OR 20,           0000000
         CR    R15,R1         ERROR MESSAGE HAS BEEN ISSUED             0000000
         BE    &LCLLBL                                                  0000000
         LA    R1,20                                                    0000000
         CR    R15,R1                                                   0000000
         BE    &LCLLBL                                                  0000000
.NOPARS  ANOP                                                           0000000
         LA    R1,&GNRLFCB+4   R1 => GNRLFAIL CONTROL BLOCK             0000000
         ST    R1,&GNRLFCB                                              0000000
         USING GFCBPTR,R1                                               0000000
         AIF   ('&TYPE' EQ 'SSREQ').SSREQT    DON'T ZERO PTR IF SSREQ   0000000
         XC    GFCBPTR,GFCBPTR  ZERO THE OPTIONAL POINTERS              0000000
         AGO   .CONT3                                                   0000000
.SSREQT  ANOP                                                           0000000
         ST    R0,GFCBPTR     R0 => SSOB                                0000000
.CONT3   ANOP                                                           0000000
         XC    GF02PTR,GF02PTR   ZERO PTR TO TSO MESSAGE ISSUER         0000000
         ST    R15,GFRCODE   STORE THE RETURN OR ABEND CODE             0000000
         AIF   ('&TYPE' NE 'PUTLINE').NOPUTL                            0000000
&CALLID  SETC  'GFPUTL'                                                 0000000
         AGO   .LINK                                                    0000000
.NOPUTL  ANOP                                                           0000000
         AIF   ('&TYPE' NE 'PARSE').NOPRS                               0000000
&CALLID  SETC  'GFPARSE'                                                0000000
         AGO   .LINK                                                    0000000
.NOPRS   ANOP                                                           0000000
         AIF   ('&TYPE' NE 'ABEND').NOABND                              0000000
&CALLID  SETC  'GFABEND'                                                0000000
         AGO   .LINK                                                    0000000
.NOABND  ANOP                                                           0000000
         AIF    ('&TYPE' NE 'SSREQ').ERR3                               0000000
&CALLID  SETC  'GFSSREQ'                                                0000000
.LINK    ANOP                                                           0000000
         LA    R15,&CALLID   SET THE FALURE CODE INTO                   0000000
         STH   R15,GFCALLID   THE CONTROL BLOCK                         0000000
         MVI   GFBITS,&GFBITS                                           0000000
         XC    GFRESV1,GFRESV1                                          0000000
         AIF   ('&CPPL' NE '').CPPL                                     0000000
         L     R15,4(R13)                                               0000000
         L     R15,24(R15)    R15 => CPPL                               0000000
         AGO   .NOCPPL                                                  0000000
.CPPL    ANOP                                                           0000000
         L     R15,&CPPL      R15 => CPPL                               0000000
.NOCPPL  ANOP                                                           0000000
         ST    R15,GFCPPLP                                              0000000
         XC    GFDSNLEN,GFDSNLEN                                        0000000
         XC    GFPGMNL,GFPGMNL     ZERO THE PROGRAM NAME LENGTH         0000000
         XC    GFDSNP,GFDSNP                                            0000000
         XC    GFPGMNP,GFPGMNP                                          0000000
         XC    GFRESV2,GFRESV2                                          0000000
         XC    GFRESV3,GFRESV3                                          0000000
         DROP  R1                                                       0000000
         LA    R1,&GNRLFCB                                              0000000
         LINK  EP=IKJEFF19                                              0000000
         AIF   ('&RET' EQ '').GENLBL                                    0000000
         B     &LCLLBL           GO TO ERROR LABEL                      0000000
         AGO   .EXIT                                                    0000000
.GENLBL  ANOP                                                           0000000
         AIF   ('&TYPE' NE 'PARSE').EXIT                                0000000
&LCLLBL  DS    0H                                                       0000000
.EXIT    ANOP                                                           0000000
         MEXIT                                                          0000000
.ERR1    ANOP                                                           0000000
         MNOTE 8,'TYPE PARAMETER MISSING ON GNRLFAIL'                   0000000
         DC    F'0'                                                     0000000
         MEXIT                                                          0000000
.ERR3    ANOP                                                           0000000
         MNOTE 8,'INVALID TYPE ON GNRLFAIL'                             0000000
         DC    F'0'                                                     0000000
         MEXIT                                                          0000000
         MEND                                                           0000000
./ ADD NAME=GRDA     0100-02135-02135-1228-00004-00004-00000-VBCMACS
         MACRO
&NAME  GRDA
&NAME    IHBGAM2 10913
         MEND
./ ADD NAME=GRDB     0100-02135-02135-1228-00004-00004-00000-VBCMACS
         MACRO
&NAME  GRDB
&NAME    IHBGAM2 10914
         MEND
./ ADD NAME=GRDE     0100-02135-02135-1228-00004-00004-00000-VBCMACS
         MACRO
&NAME  GRDE
&NAME    IHBGAM2 10912
         MEND
./ ADD NAME=GRDS     0100-02135-02135-1228-00004-00004-00000-VBCMACS
         MACRO
&NAME  GRDS
&NAME    IHBGAM2 10915
         MEND
./ ADD NAME=GSCW     0100-02135-02135-1228-00004-00004-00000-VBCMACS
         MACRO
&NAME    GSCW  &ADDR,&GROUP
&NAME    IHBGAM1 10984,&ADDR,&GROUP
         MEND
./ ADD NAME=GSIC     0100-02135-02135-1228-00004-00004-00000-VBCMACS
         MACRO
&NAME    GSIC  &ADDR,&GROUP
&NAME    IHBGAM1 10985,&ADDR,&GROUP
         MEND
./ ADD NAME=GTFSVC   0100-02135-02135-1228-00033-00033-00000-VBCMACS
         MACRO
         GTFSVC
         LCLC  &CSECT
&CSECT   SETC  '&SYSECT'
GTFSVCD  DSECT
GTFSVC   DS    0XL65
         DS    XL4                     RDW
AID      DS    XL1                     X'FF' = TRACE RECORD
FID      DS    XL1
EID      DS    XL2                     X'1000' = SVC RECORD
ASCB     DS    XL4
CPUID    DS    XL2
JOBN     DS    CL8
PSW      DS    0XL8
         DS    XL3
SVCN     DS    XL1
         DS    XL4
TCB      DS    XL4
MODN     DS    CL8
DDNAME   DS    0X
REG15    DS    XL4
REG0     DS    XL4
REG1     DS    XL4
PLEN     DS    XL1
PLIST    DS    0XL10
LEN      DS    XL4
         DS    XL4
FLAG     DS    XL1                     X'00' OR X'10' UNCON SINGLE
SUBPOOL  DS    XL1
*
*
&CSECT   CSECT
         MEND
./ ADD NAME=GTNS     0100-02135-02135-1228-00004-00004-00000-VBCMACS
         MACRO
&NAME    GTNS  &ADDR,&GROUP
&NAME    IHBGAM1 11000,&ADDR,&GROUP
         MEND
./ ADD NAME=GTNZ     0100-02135-02135-1228-00004-00004-00000-VBCMACS
         MACRO
&NAME    GTNZ  &ADDR,&GROUP
&NAME    IHBGAM1 11002,&ADDR,&GROUP
         MEND
./ ADD NAME=GTOS     0100-02135-02135-1228-00004-00004-00000-VBCMACS
         MACRO
&NAME    GTOS  &ADDR,&GROUP
&NAME    IHBGAM1 11001,&ADDR,&GROUP
         MEND
./ ADD NAME=GTR1     0100-02135-02135-1228-00031-00031-00000-VBCMACS
         MACRO
&NAME  GTR1  &A0,&A1          TRANSFER ON RESPONSE 1BIT
         GBLA  &IHBBLC,&IHBBLIM,&IHBBLP
         GBLC  &IHBINIT
         IHBGAM3
&IHBBLC    SETA  &IHBBLC+6              UPDATE BUFFER-LOC COUNTER
       AIF   (&IHBBLC LE &IHBBLIM).PROC
         IHBERMAC 182
.PROC  ANOP
&NAME  DC      H'10993'
.TESA0   AIF   (T'&A0 EQ 'O').NOA0
         AIF   ('&A0'(1,1) EQ '+' OR '&A0'(1,1) EQ '-').NOA0
         AIF   (T'&A0 NE 'N').SYMA0
         AIF   (&A0 GT 32767).NOA0
         DC    H'&A0'
.TESA1   AIF   (T'&A1 EQ 'O').NOA1
         AIF   ('&A1'(1,1) EQ '+' OR '&A1'(1,1) EQ '-').NOA1
         AIF   (T'&A1 NE 'N').SYMA1
         AIF   (&A1 GT 32767).NOA1
         DC    H'&A1'
       MEXIT
.NOA0    IHBERMAC  180,A0,0
         DC    X'0000'
       AGO   .TESA1
.NOA1    IHBERMAC  180,A1,0
         DC    X'0000'
         MEXIT
.SYMA0   DC    AL2(&A0-&IHBINIT+&IHBBLP)
         AGO   .TESA1
.SYMA1   DC    AL2(&A1-&IHBINIT+&IHBBLP)
       MEND
./ ADD NAME=GTR2     0100-02135-02135-1228-00051-00051-00000-VBCMACS
         MACRO
&NAME  GTR2  &A0,&A1,&A2,&A3
         GBLA  &IHBBLC,&IHBBLIM,&IHBBLP
         GBLC  &IHBINIT
         IHBGAM3
&IHBBLC    SETA  &IHBBLC+10             UPDATE BUFFER-LOC COUNTER
       AIF     (&IHBBLC LE &IHBBLIM).PROC
         IHBERMAC 182
.PROC  ANOP
&NAME  DC      H'10994'
.TESA0   AIF   (T'&A0 EQ 'O').NOA0
         AIF   ('&A0'(1,1) EQ '+' OR '&A0'(1,1) EQ '-').NOA0
         AIF   (T'&A0 NE 'N').SYMA0
         AIF   (&A0 GT 32767).NOA0
         DC    H'&A0'
.TESA1   AIF   (T'&A1 EQ 'O').NOA1
         AIF   ('&A1'(1,1) EQ '+' OR '&A1'(1,1) EQ '-').NOA1
         AIF   (T'&A1 NE 'N').SYMA1
         AIF   (&A1 GT 32767).NOA1
         DC    H'&A1'
.TESA2   AIF   (T'&A2 EQ 'O').NOA2
         AIF   ('&A2'(1,1) EQ '+' OR '&A2'(1,1) EQ '-').NOA2
         AIF   (T'&A2 NE 'N').SYMA2
         AIF   (&A2 GT 32767).NOA2
         DC    H'&A2'
.TESA3   AIF   (T'&A3 EQ 'O').NOA3
         AIF   ('&A3'(1,1) EQ '+' OR '&A3'(1,1) EQ '-').NOA3
         AIF   (T'&A3 NE 'N').SYMA3
         AIF   (&A3 GT 32767).NOA3
         DC    H'&A3'
       MEXIT
.NOA0    IHBERMAC  180,A0,0
         DC    X'0000'
       AGO   .TESA1
.NOA1    IHBERMAC  180,A1,0
         DC    X'0000'
       AGO     .TESA2
.NOA2    IHBERMAC  180,A2,0
         DC    X'0000'
       AGO     .TESA3
.NOA3    IHBERMAC  180,A3,0
         DC    X'0000'
         MEXIT
.SYMA0   DC    AL2(&A0-&IHBINIT+&IHBBLP)
         AGO   .TESA1
.SYMA1   DC    AL2(&A1-&IHBINIT+&IHBBLP)
         AGO   .TESA2
.SYMA2   DC    AL2(&A2-&IHBINIT+&IHBBLP)
         AGO   .TESA3
.SYMA3   DC    AL2(&A3-&IHBINIT+&IHBBLP)
       MEND
./ ADD NAME=GTR3     0100-02135-02135-1228-00091-00091-00000-VBCMACS
         MACRO
&NAME  GTR3    &A0,&A1,&A2,&A3,&A4,&A5,&A6,&A7
         GBLA  &IHBBLC,&IHBBLIM,&IHBBLP
         GBLC  &IHBINIT
         IHBGAM3
&IHBBLC    SETA  &IHBBLC+18             UPDATE BUFFER-LOC COUNTER
       AIF     (&IHBBLC LE &IHBBLIM).PROC
         IHBERMAC 182
.PROC  ANOP
&NAME  DC      H'10995'
.TESA0   AIF   (T'&A0 EQ 'O').NOA0
         AIF   ('&A0'(1,1) EQ '+' OR '&A0'(1,1) EQ '-').NOA0
         AIF   (T'&A0 NE 'N').SYMA0
         AIF   (&A0 GT 32767).NOA0
         DC    H'&A0'
.TESA1   AIF   (T'&A1 EQ 'O').NOA1
         AIF   ('&A1'(1,1) EQ '+' OR '&A1'(1,1) EQ '-').NOA1
         AIF   (T'&A1 NE 'N').SYMA1
         AIF   (&A1 GT 32767).NOA1
         DC    H'&A1'
.TESA2   AIF   (T'&A2 EQ 'O').NOA2
         AIF   ('&A2'(1,1) EQ '+' OR '&A2'(1,1) EQ '-').NOA2
         AIF   (T'&A2 NE 'N').SYMA2
         AIF   (&A2 GT 32767).NOA2
         DC    H'&A2'
.TESA3   AIF   (T'&A3 EQ 'O').NOA3
         AIF   ('&A3'(1,1) EQ '+' OR '&A3'(1,1) EQ '-').NOA3
         AIF   (T'&A3 NE 'N').SYMA3
         AIF   (&A3 GT 32767).NOA3
         DC    H'&A3'
.TESA4   AIF   (T'&A4 EQ 'O').NOA4
         AIF   ('&A4'(1,1) EQ '+' OR '&A4'(1,1) EQ '-').NOA4
         AIF   (T'&A4 NE 'N').SYMA4
         AIF   (&A4 GT 32767).NOA4
         DC    H'&A4'
.TESA5   AIF   (T'&A5 EQ 'O').NOA5
         AIF   ('&A5'(1,1) EQ '+' OR '&A5'(1,1) EQ '-').NOA5
         AIF   (T'&A5 NE 'N').SYMA5
         AIF   (&A5 GT 32767).NOA5
         DC    H'&A5'
.TESA6   AIF   (T'&A6 EQ 'O').NOA6
         AIF   ('&A6'(1,1) EQ '+' OR '&A6'(1,1) EQ '-').NOA6
         AIF   (T'&A6 NE 'N').SYMA6
         AIF   (&A6 GT 32767).NOA6
         DC    H'&A6'
.TESA7   AIF   (T'&A7 EQ 'O').NOA7
         AIF   ('&A7'(1,1) EQ '+' OR '&A7'(1,1) EQ '-').NOA7
         AIF   (T'&A7 NE 'N').SYMA7
         AIF   (&A7 GT 32767).NOA7
         DC    H'&A7'
       MEXIT
.NOA0    IHBERMAC  180,A0,0
         DC    X'0000'
       AGO   .TESA1
.NOA1    IHBERMAC  180,A1,0
         DC    X'0000'
       AGO     .TESA2
.NOA2    IHBERMAC  180,A2,0
         DC    X'0000'
       AGO     .TESA3
.NOA3    IHBERMAC  180,A3,0
         DC    X'0000'
       AGO     .TESA4
.NOA4    IHBERMAC  180,A4,0
         DC    X'0000'
       AGO     .TESA5
.NOA5    IHBERMAC  180,A5,0
         DC    X'0000'
       AGO     .TESA6
.NOA6    IHBERMAC  180,A6,0
         DC    X'0000'
       AGO     .TESA7
.NOA7    IHBERMAC  180,A7,0
         DC    X'0000'
         MEXIT
.SYMA0   DC    AL2(&A0-&IHBINIT+&IHBBLP)
         AGO   .TESA1
.SYMA1   DC    AL2(&A1-&IHBINIT+&IHBBLP)
         AGO   .TESA2
.SYMA2   DC    AL2(&A2-&IHBINIT+&IHBBLP)
         AGO   .TESA3
.SYMA3   DC    AL2(&A3-&IHBINIT+&IHBBLP)
         AGO   .TESA4
.SYMA4   DC    AL2(&A4-&IHBINIT+&IHBBLP)
         AGO   .TESA5
.SYMA5   DC    AL2(&A5-&IHBINIT+&IHBBLP)
         AGO   .TESA6
.SYMA6   DC    AL2(&A6-&IHBINIT+&IHBBLP)
         AGO   .TESA7
.SYMA7   DC    AL2(&A7-&IHBINIT+&IHBBLP)
       MEND
./ ADD NAME=GTR4     0100-02135-02135-1228-00172-00172-00000-VBCMACS
         MACRO
&NAME  GTR4    &A0,&A1,&A2,&A3,&A4,&A5,&A6,&A7,                        *
               &A8,&A9,&A10,&A11,&A12,&A13,&A14,&A15
         GBLA  &IHBBLC,&IHBBLIM,&IHBBLP
         GBLC  &IHBINIT
         IHBGAM3
&IHBBLC    SETA  &IHBBLC+36             UPDATE BUFFER-LOC COUNTER
       AIF     (&IHBBLC LE &IHBBLIM).PROC
         IHBERMAC 182
.PROC  ANOP
&NAME  DC      H'10996'
.TESA0   AIF   (T'&A0 EQ 'O').NOA0
         AIF   ('&A0'(1,1) EQ '+' OR '&A0'(1,1) EQ '-').NOA0
         AIF   (T'&A0 NE 'N').SYMA0
         AIF   (&A0 GT 32767).NOA0
         DC    H'&A0'
.TESA1   AIF   (T'&A1 EQ 'O').NOA1
         AIF   ('&A1'(1,1) EQ '+' OR '&A1'(1,1) EQ '-').NOA1
         AIF   (T'&A1 NE 'N').SYMA1
         AIF   (&A1 GT 32767).NOA1
         DC    H'&A1'
.TESA2   AIF   (T'&A2 EQ 'O').NOA2
         AIF   ('&A2'(1,1) EQ '+' OR '&A2'(1,1) EQ '-').NOA2
         AIF   (T'&A2 NE 'N').SYMA2
         AIF   (&A2 GT 32767).NOA2
         DC    H'&A2'
.TESA3   AIF   (T'&A3 EQ 'O').NOA3
         AIF   ('&A3'(1,1) EQ '+' OR '&A3'(1,1) EQ '-').NOA3
         AIF   (T'&A3 NE 'N').SYMA3
         AIF   (&A3 GT 32767).NOA3
         DC    H'&A3'
.TESA4   AIF   (T'&A4 EQ 'O').NOA4
         AIF   ('&A4'(1,1) EQ '+' OR '&A4'(1,1) EQ '-').NOA4
         AIF   (T'&A4 NE 'N').SYMA4
         AIF   (&A4 GT 32767).NOA4
         DC    H'&A4'
.TESA5   AIF   (T'&A5 EQ 'O').NOA5
         AIF   ('&A5'(1,1) EQ '+' OR '&A5'(1,1) EQ '-').NOA5
         AIF   (T'&A5 NE 'N').SYMA5
         AIF   (&A5 GT 32767).NOA5
         DC    H'&A5'
.TESA6   AIF   (T'&A6 EQ 'O').NOA6
         AIF   ('&A6'(1,1) EQ '+' OR '&A6'(1,1) EQ '-').NOA6
         AIF   (T'&A6 NE 'N').SYMA6
         AIF   (&A6 GT 32767).NOA6
         DC    H'&A6'
.TESA7   AIF   (T'&A7 EQ 'O').NOA7
         AIF   ('&A7'(1,1) EQ '+' OR '&A7'(1,1) EQ '-').NOA7
         AIF   (T'&A7 NE 'N').SYMA7
         AIF   (&A7 GT 32767).NOA7
         DC    H'&A7'
.TESA8   AIF   (T'&A8 EQ 'O').NOA8
         AIF   ('&A8'(1,1) EQ '+' OR '&A8'(1,1) EQ '-').NOA8
         AIF   (T'&A8 NE 'N').SYMA8
         AIF   (&A8 GT 32767).NOA8
         DC    H'&A8'
.TESA9   AIF   (T'&A9 EQ 'O').NOA9
         AIF   ('&A9'(1,1) EQ '+' OR '&A9'(1,1) EQ '-').NOA9
         AIF   (T'&A9 NE 'N').SYMA9
         AIF   (&A9 GT 32767).NOA9
         DC    H'&A9'
.TESA10  AIF   (T'&A10 EQ 'O').NOA10
         AIF   ('&A10'(1,1) EQ '+' OR '&A10'(1,1) EQ '-').NOA10
         AIF   (T'&A10 NE 'N').SYMA10
         AIF   (&A10 GT 32767).NOA10
         DC    H'&A10'
.TESA11  AIF   (T'&A11 EQ 'O').NOA11
         AIF   ('&A11'(1,1) EQ '+' OR '&A11'(1,1) EQ '-').NOA11
         AIF   (T'&A11 NE 'N').SYMA11
         AIF   (&A11 GT 32767).NOA11
         DC    H'&A11'
.TESA12  AIF   (T'&A12 EQ 'O').NOA12
         AIF   ('&A12'(1,1) EQ '+' OR '&A12'(1,1) EQ '-').NOA12
         AIF   (T'&A12 NE 'N').SYMA12
         AIF   (&A12 GT 32767).NOA12
         DC    H'&A12'
.TESA13  AIF   (T'&A13 EQ 'O').NOA13
         AIF   ('&A13'(1,1) EQ '+' OR '&A13'(1,1) EQ '-').NOA13
         AIF   (T'&A13 NE 'N').SYMA13
         AIF   (&A13 GT 32767).NOA13
         DC    H'&A13'
.TESA14  AIF   (T'&A14 EQ 'O').NOA14
         AIF   ('&A14'(1,1) EQ '+' OR '&A14'(1,1) EQ '-').NOA14
         AIF   (T'&A14 NE 'N').SYMA14
         AIF   (&A14 GT 32767).NOA14
         DC    H'&A14'
.TESA15  AIF   (T'&A15 EQ 'O').NOA15
         AIF   ('&A15'(1,1) EQ '+' OR '&A15'(1,1) EQ '-').NOA15
         AIF   (T'&A15 NE 'N').SYMA15
         AIF   (&A15 GT 32767).NOA15
         DC    H'&A15'
       MEXIT
.NOA0    IHBERMAC  180,A0,0
         DC    X'0000'
       AGO   .TESA1
.NOA1    IHBERMAC  180,A1,0
         DC    X'0000'
       AGO     .TESA2
.NOA2    IHBERMAC  180,A2,0
         DC    X'0000'
       AGO     .TESA3
.NOA3    IHBERMAC  180,A3,0
         DC    X'0000'
       AGO     .TESA4
.NOA4    IHBERMAC  180,A4,0
         DC    X'0000'
       AGO     .TESA5
.NOA5    IHBERMAC  180,A5,0
         DC    X'0000'
       AGO     .TESA6
.NOA6    IHBERMAC  180,A6,0
         DC    X'0000'
       AGO     .TESA7
.NOA7    IHBERMAC  180,A7,0
         DC    X'0000'
       AGO     .TESA8
.NOA8    IHBERMAC  180,A8,0
         DC    X'0000'
       AGO     .TESA9
.NOA9    IHBERMAC  180,A5,0
         DC    X'0000'
       AGO     .TESA10
.NOA10   IHBERMAC  180,A10,0
         DC    X'0000'
       AGO     .TESA11
.NOA11   IHBERMAC  180,A11,0
         DC    X'0000'
       AGO     .TESA12
.NOA12   IHBERMAC  180,A12,0
         DC    X'0000'
       AGO     .TESA13
.NOA13   IHBERMAC  180,A13,0
         DC    X'0000'
       AGO     .TESA14
.NOA14   IHBERMAC  180,A14,0
         DC    X'0000'
       AGO     .TESA15
.NOA15   IHBERMAC  180,A15,0
         DC    X'0000'
         MEXIT
.SYMA0   DC    AL2(&A0-&IHBINIT+&IHBBLP)
         AGO   .TESA1
.SYMA1   DC    AL2(&A1-&IHBINIT+&IHBBLP)
         AGO   .TESA2
.SYMA2   DC    AL2(&A2-&IHBINIT+&IHBBLP)
         AGO   .TESA3
.SYMA3   DC    AL2(&A3-&IHBINIT+&IHBBLP)
         AGO   .TESA4
.SYMA4   DC    AL2(&A4-&IHBINIT+&IHBBLP)
         AGO   .TESA5
.SYMA5   DC    AL2(&A5-&IHBINIT+&IHBBLP)
         AGO   .TESA6
.SYMA6   DC    AL2(&A6-&IHBINIT+&IHBBLP)
         AGO   .TESA7
.SYMA7   DC    AL2(&A7-&IHBINIT+&IHBBLP)
         AGO   .TESA8
.SYMA8   DC    AL2(&A8-&IHBINIT+&IHBBLP)
         AGO   .TESA9
.SYMA9   DC    AL2(&A9-&IHBINIT+&IHBBLP)
         AGO   .TESA10
.SYMA10  DC    AL2(&A10-&IHBINIT+&IHBBLP)
         AGO   .TESA11
.SYMA11  DC    AL2(&A11-&IHBINIT+&IHBBLP)
         AGO   .TESA12
.SYMA12  DC    AL2(&A12-&IHBINIT+&IHBBLP)
         AGO   .TESA13
.SYMA13  DC    AL2(&A13-&IHBINIT+&IHBBLP)
         AGO   .TESA14
.SYMA14  DC    AL2(&A14-&IHBINIT+&IHBBLP)
         AGO   .TESA15
.SYMA15  DC    AL2(&A15-&IHBINIT+&IHBBLP)
       MEND
./ ADD NAME=GTSL     0100-02135-02135-1228-00004-00004-00000-VBCMACS
         MACRO
&NAME    GTSL  &ADDR,&GROUP
&NAME    IHBGAM1 11006,&ADDR,&GROUP
         MEND
./ ADD NAME=GTZE     0100-02135-02135-1228-00004-00004-00000-VBCMACS
         MACRO
&NAME    GTZE  &ADDR,&GROUP
&NAME    IHBGAM1 11003,&ADDR,&GROUP
         MEND
./ ADD NAME=HAREALLC 0100-87029-87029-1039-00050-00050-00000-VBCMACS
         MACRO                                                          ..ALLC..
&NAME    HAREALLC &TABLE,&LEN,&INCR                                     ..ALLC..
.*                                                                      ..ALLC..
.*           WHERE                                                      ..ALLC..
.*                                                                      ..ALLC..
.*       &TABLE IS A REGISTER POINTING TO THE OLD TABLE. AFTER          ..ALLC..
.*       EXECUTION OF THE MACRO, &TABLE POINTS TO THE NEW TABLE.        ..ALLC..
.*                                                                      ..ALLC..
.*       &LEN IS A REGISTER CONTAINING THE LENGTH OF THE OLD TABLE.     ..ALLC..
.*       AFTER EXECUTION OF THE MACRO, &LEN CONTAINS THE LENGTH         ..ALLC..
.*       OF THE NEW TABLE.                                              ..ALLC..
.*                                                                      ..ALLC..
.*       &INCR IS AN ABSOLUTE EXPRESSION CONTAINING THE INCREMENT       ..ALLC..
.*       TO BE ADDED TO THE LENGTH OF THE OLD TABLE TO FORM THE         ..ALLC..
.*       LENGTH OF THE NEW TABLE.                                       ..ALLC..
.*                                                                      ..ALLC..
.*       HAREALLC WILL ALLOCATE AN NEW TABLE; MOVE THE OLD TABLE        ..ALLC..
.*       INTO THE NEW TABLE; AND DEALLOCATE THE OLD TABLE. THE          ..ALLC..
.*       ADDRESS AND LENGTH OF THE NEW TABLE ARE RETURNED IN            ..ALLC..
.*       &TABLE AND &LEN, RESPECTIVELY.                                 ..ALLC..
.*                                                                      ..ALLC..
&NAME    STM   R0,R3,$&SYSNDX.SA       SAVE LOCAL REGISTERS             ..ALLC..
         LR    R0,&LEN                 = L'OLD TABLE                    ..ALLC..
         A     R0,=A(&INCR)            = L'NEW TABLE                    ..ALLC..
         ST    R0,$&SYSNDX.L           "   "     "                      ..ALLC..
         OI    $&SYSNDX.L,X'80'        INDICATE E.O.L.                  ..ALLC..
         GETMAIN LU,LA=$&SYSNDX.L,A=$&SYSNDX.T                          ..ALLC..
         LTR   &LEN,&LEN               1ST TIME?                        ..ALLC..
         BZ    $&SYSNDX                  YES, SKIP MOVE & DEALLOCATE    ..ALLC..
         LR    R0,&TABLE               -> OLD TABLE                     ..ALLC..
         LR    R1,&LEN                 = L'OLD TABLE                    ..ALLC..
         L     R2,$&SYSNDX.T           -> NEW TABLE                     ..ALLC..
         LR    R3,R1                   = L'OLD TABLE                    ..ALLC..
         MVCL  R2,R0                   MOVE OLD TABLE TO NEW TABLE      ..ALLC..
         ST    &LEN,$&SYSNDX.L         = L'OLD TABLE                    ..ALLC..
         OI    $&SYSNDX.L,X'80'        INDICATE E.O.L.                  ..ALLC..
         ST    &TABLE,$&SYSNDX.F       -> OLD TABLE                     ..ALLC..
         FREEMAIN LU,LA=$&SYSNDX.L,A=$&SYSNDX.F                         ..ALLC..
$&SYSNDX EQU   *                                                        ..ALLC..
         L     &TABLE,$&SYSNDX.T       RETURN NEW TABLE ADDR            ..ALLC..
         LR    R0,&LEN                 = L'OLD TABLE                    ..ALLC..
         A     R0,=A(&INCR)            = L'NEW TABLE                    ..ALLC..
         LR    &LEN,R0                 RETURN NEW TABLE LEN             ..ALLC..
         LM    R0,R3,$&SYSNDX.SA       RESTORE LOCAL REGISTERS          ..ALLC..
         B     $&SYSNDX.L+4            BR AROUND STORAGE AREAS          ..ALLC..
$&SYSNDX.SA DS 4F                      LOCAL REGISTER SAVE AREA         ..ALLC..
$&SYSNDX.F DS  F                       OLD TABLE ADDR                   ..ALLC..
$&SYSNDX.T DS  F                       NEW TABLE ADDR                   ..ALLC..
$&SYSNDX.L DS  F                       TABLE LENGTH                     ..ALLC..
         MEND                                                           ..ALLC..
./ ADD NAME=HARECB   0100-87029-87029-1039-00019-00019-00000-VBCMACS
         MACRO
&NAME    HARECB &GP=N
.*
.*       HARECB - ARGUMENT CONTROL BLOCK IS THE PRIMARY INTERFACE
.*       BETWEEN THE TWO ENTRY POINTS SUQ221II AND SUQ221IM AND
.*       THE ARGUMENT PROCESSING ROUTINES.
.*
         LCLC  &I,&M,&L
&I       SETC  'I'.'&NAME'(2,5)
&M       SETC  'M'.'&NAME'(2,5)
&L       SETC  'L''S'.'&NAME'(2,5)
.*
         AIF   ('&GP' EQ 'N').HARECB5
&I       SETC  '0'
&M       SETC  '0'
&L       SETC  '4'
.HARECB5 ANOP
&NAME    DC    A(&I),A(&M),2A(0),H'0',X'00',AL1(&L)
         MEND
./ ADD NAME=HAREGPLD 0105-87009-87056-1512-00036-00034-00000-VBCMACS
         MACRO                                                          ..GPLD..
&NAME    HAREGPLD &GP=,&L=5,&N=10                                       ..GPLD..
.*                                                                      ..GPLD..
.*       HAREGPLD - WILL ALLOCATE AND LOAD THE DIAGNOSIS, DRUG, AND     ..GPLD..
.*       PROCEDURE GROUP TABLES.                                        ..GPLD..
.*                                                                      ..GPLD..
         CLC   CGPID,=C'&GP'           GP RECORD?                       ..GPLD..
         BNE   $&SYSNDX.9                NO, GO TO NEXT PROC            ..GPLD..
         TM    FLAGS,GPLOD             1ST PASS?                        ..GPLD..
         BZ    IEXIT                     NO, EXIT                       ..GPLD..
         LA    R8,CGPNTRY              -> SUCNTL GP ENTRY               ..GPLD..
         LA    R9,&N                   = MAX ENTRIES/RECORD             ..GPLD..
         L     R4,&GP.WORK             -> OLD TABLE                     ..GPLD..
         L     R7,&GP.WORK+4           = # TABLE ENTRIES                ..GPLD..
         SPACE                                                          ..GPLD..
$&SYSNDX.0 LR  R5,R7                   R5 = L'TABLE                     ..GPLD..
         MH    R5,=Y(4+2*&L)                                            ..GPLD..
         CLC   4(&L,R8),=(&L)C' '      NULL ENTRY?                      ..GPLD..
         BE    $&SYSNDX.2                YES, EXIT                      ..GPLD..
         HAREALLC R4,R5,4+2*&L         ALLOC NEW TABLE                  ..GPLD..
         LR    R6,R4                   -> T(1)                          ..GPLD..
         AR    R6,R5                   -> T(N+1)                        ..GPLD..
         S     R6,=A(4+2*&L)           -> T(N)                          ..GPLD..
         MVC   0(2*&L,R6),4(R8)        MOVE IN ARG RANGE                ..GPLD..
         MVC   2*&L.(4,R6),0(R8)       MOVE IN GP ID                    ..GPLD..
         LA    R7,1(R7)                INCREMENT # ENTRIES              ..GPLD..
* CHANGED '26' (4+ 2*11) TO '14' (4+2*5)
*WKF
$&SYSNDX.2 LA  R8,14(R8)               -> NEXT SUCNTL ENTRY             ..GPLD..
         BCT   R9,$&SYSNDX.0           LOOP AGAIN, AS REQ'D             ..GPLD..
         SPACE                                                          ..GPLD..
         ST    R4,&GP.WORK             SAVE NEW TABLE ADDRESS           ..GPLD..
         ST    R7,&GP.WORK+4           SAVE # ENTRIES                   ..GPLD..
         B     IEXIT                   EXIT                             ..GPLD..
$&SYSNDX.9 EQU *                                                        ..GPLD..
         MEND                                                           ..GPLD..
./ ADD NAME=HAREINIT 0101-87029-87279-0926-00232-00232-00002-VBCMACS
         MACRO
&NAME    HAREINIT &T,&LCNTL,&LTBL,&DUPL,&MULT,&GP,&DSECT
         LCLC  &CNAME,&#,&#GP,&S,&SA,&PFX
&PFX     SETC  '&NAME'(2,5)
&#       SETC  '#'.'&PFX'
&#GP     SETC  '#'.'&GP'
&CNAME   SETC  'C'.'&PFX'
&S       SETC  'S'.'&PFX'
&SA      SETC  '&PFX'.'SA'
.*
&NAME    HARENTRY RSV=&SA,ID=*
         L     R11,0(R1)               -> HARECB
         USING HARECB,R11
         L     R10,4(R1)               -> SUCNTL
         USING SUCNTL,R10
         AIF   ('&DSECT' NE 'SULINES').AP118
         OI    HARECBFG,LINEARG        INDICATE LINE ARGUMENT
         AGO   .AP119
.AP118   ANOP
         AIF   ('&DSECT' NE 'SUQ221IP').AP119
         OI    HARECBFG,ALTARG
.AP119   ANOP
         LH    R2,HARECB#              SET LOOP COUNT
         LTR   R2,R2                   FIRST TIME?
         BNZ   &PFX.IA                   NO, BYPASS 1ST TIME PROC
         LA    R0,2*(&LTBL)+LMASK      ALLOCATE TABLE
         GETMAIN R,LV=(0)
         AIF   ('&T' NE 'P').AP120
         PACK  &PFX.IU(&LTBL),&PFX.I9S(2*(&LTBL)-3)
         MP    &PFX.IU(&LTBL),=PL1'-1'
         PACK  &PFX.IU+&LTBL.(&LTBL),&PFX.I9S(2*(&LTBL)-1)
.AP120   ANOP
         MVC   0(2*(&LTBL),R1),&PFX.IU LOAD U->0 MAP
         XC    2*(&LTBL)(LMASK,R1),2*(&LTBL)(R1)
         ST    R1,HARECBTB             INIT HARECBTBL AD
         L     R1,4(R13)               RESTORE R1
         L     R1,24(R1)
         LA    R2,1                    SET LOOP COUNT TO 1
         STH   R2,HARECB#              INIT HARECB#
         SPACE
.*
         AIF   ('&DUPL' EQ '0').AP200
&PFX.IA  LA    R6,&CNAME                R6 -> FIXED ARGUMENT
         AGO   .AP202
.AP200   ANOP
&PFX.IA  HARELOC &S,R6                  R6 -> 1ST FLOATING ARGUMENT
.AP202   ANOP
.*
.*
.*
         EJECT
&PFX.IB  L     R5,8(R1)                -> MASKDSPL|ROWMASK|FLAG
         AIF   ('&DUPL' EQ '0').AP310
         CLC   0(&LCNTL,R6),=(&LCNTL)C' ' NULL ARG?
         BNE   &PFX.ID                   NO, GO TO NON-NULL PROC
         AGO   .AP390
.*
.AP310   ANOP
         CLC   &#,=H'0'                DOES ARG EXIST?
         BE    &PFX.IB1                  NO, GO TO NULL PROC
         CLC   0(&LCNTL,R6),=(&LCNTL)C' ' IS ARG NULL?
         BNE   &PFX.ID                   NO, GO TO NON-NULL PROC
&PFX.IB1 EQU *
         AIF   (K'&GP NE 0).AP320
         AGO   .AP390
.*
.AP320   ANOP
         CLC   &#GP,=H'0'              DOES GROUP ARG EXIST?
         BE    &PFX.IB2                  NO, GO TO NULL PROC
         HARELOC &#GP,R4
         CLC   0(4,R4),=4C' '          IS GROUP ARG NULL?
         BNE   &PFX.IG                   NO, GO TO GROUP PROC
&PFX.IB2 EQU *
.*
.AP390   ANOP
         L     R3,HARECBTB             R3 -> T(1)
         A     R3,0(R5)                R3 -> T(1) + MASKDSPL
         LA    R4,(&LTBL)*2             = 2*L'ARG
         AR    R3,R4                   R3 -> T(1)+MASKDSPL+2*L'ARG
         A     R4,=A(LMASK)            = L'ENTRY
&PFX.IC  OC    0(1,R3),IMOFFSET(R5)    .OR. ROWMASK ONTO MASK(T)
         AR    R3,R4                   -> NEXT ENTRY
         BCT   R2,&PFX.IC
         B     &PFX.IX                 EXIT
         SPACE
*                                      LOAD MAP(S) INTO MAP SET
&PFX.ID  EQU   *                       SET UP FOR INDEX MAP LOOP
.*
         AIF   ('&DUPL' EQ '0').AP400
         LA    R7,1                    R7 = LOOP COUNT
         AGO   .AP402
.AP400   ANOP
         LA    R7,&#                   R7 = LOOP COUNT
         LH    R7,0(R7)
.AP402   ANOP
.*
         OI    HARECBFG,ARGON          INDICATE ARG IS ACTIVE
         SPACE
&PFX.IE  EQU *                         INDEX MAP LOOP
         CLC   0(&LCNTL,R6),=(&LCNTL)C' ' NULL ENTRY => END OF LIST
         BE    &PFX.IX                 IF SO, EXIT
.*
         AIF   ('&DUPL' NE '1').AP501
         AIF   ('&T' EQ 'P').AP500
         MVC   &PFX.IW(&LTBL),0(R6)    DISCRETE ---> RANGE
         MVC   &PFX.IW+&LTBL.(&LTBL),&PFX.IW
         AGO   .AP520
.AP500   ANOP
         ZAP   &PFX.IW(&LTBL),0(&LCNTL,R6) DISCRETE ---> RANGE
         MP    &PFX.IW(&LTBL),=PL1(&MULT)  SCALE
         MVC   &PFX.IW+&LTBL.(&LTBL),&PFX.IW
         AGO   .AP520
.*
.AP501   ANOP
         AIF   ('&T' NE 'P').AP502
         CP    0(&LCNTL,R6),&LCNTL.(&LCNTL,R6) CIRCULAR ARGUMENT?
         AGO   .AP502A
.AP502   ANOP
         CLC   0(&LTBL,R6),&LTBL.(R6)  CIRCULAR ARGUMENT?
.AP502A  ANOP
         BNH   &PFX.IE1                  NO, GO TO NON-CIRCULAR CASE
         MVC   &PFX.IW(&LTBL),&PFX.IU  CIRCULAR CASE
         AIF   ('&T' EQ 'P').AP503
         MVC   &PFX.IW+&LTBL.(&LTBL),&LTBL.(R6)
         AGO   .AP503A
.AP503   ANOP
         ZAP   &PFX.IW+&LTBL.(&LTBL),&LCNTL.(R6)
         MP    &PFX.IW+&LTBL.(&LTBL),=PL1'&MULT'  SCALE
.AP503A  ANOP
         BAL   R9,&PFX.IL              INSERT (-INF,ARG(U))
         AIF   ('&T' EQ 'P').AP504
         MVC   &PFX.IW(&LTBL),0(R6)
         AGO   .AP504A
.AP504   ANOP
         ZAP   &PFX.IW+&LTBL.(&LTBL),0(&LCNTL,R6)
         MP    &PFX.IW+&LTBL.(&LTBL),=PL1'&MULT'  SCALE
.AP504A  ANOP
         MVC   &PFX.IW+&LTBL.(&LTBL),&PFX.IU+&LTBL
         AIF   ('&T' NE 'P').AP506
         SP    &PFX.IW+&LTBL.(&LTBL),=PL1'1'
         AGO   .AP506A
.AP506   ANOP
         MVI   &PFX.IW+2*(&LTBL)-1,X'FE'
.AP506A  ANOP
         B     &PFX.IE2                INSERT (ARG(L),+INF-1)
         AIF   ('&T' EQ 'P').AP508
&PFX.IE1 MVC   &PFX.IW(2*(&LTBL)),0(R6) NON-CIRCULAR ARGUMENT
         AGO   .AP508A
.AP508   ANOP
&PFX.IE1 ZAP   &PFX.IW(&LTBL),0(&LCNTL,R6) NON-CIRCULAR CASE
         MP    &PFX.IW(&LTBL),=PL1'&MULT'  SCALE
         ZAP   &PFX.IW+&LTBL.(&LTBL),&LCNTL.(&LCNTL,R6)
         MP    &PFX.IW+&LTBL.(&LTBL),=PL1'&MULT'  SCALE
.AP508A  ANOP
.*
.*
.*
.AP520   ANOP
.*
&PFX.IE2 BAL   R9,&PFX.IL              INSERT MAP INTO SET
         LA    R6,2*&LCNTL.(R6)        INCREMENT FLOATING ARG PTR
         BCT   R7,&PFX.IE              END INDEX MAP LOOP
.*
.*             GROUP PROC
.*
         AIF   ('&GP' EQ '').AP700
         EJECT
&PFX.IG EQU *                          GROUP PROC
         CLC   &#GP,=H'0'              DOES GROUP ARG EXIST?
         BE    &PFX.IX                   YES, EXIT
         HARELOC &#GP,R4
         CLC   0(4,R4),=(&LCNTL)C' '   IS 1ST GROUP ARG NULL?
         BE    &PFX.IX                   YES, EXIT
         LA    R5,&#GP                 R5 = # GROUPS
         LH    R5,0(R5)
         L     R6,12(R1)               -> DGWORK|PGWORK|XGWORK
.*
         LCLC  &DISPL
&DISPL   SETC  '0'
         AIF   ('&GP' EQ 'DGGP').AP602
         AIF   ('&GP' EQ 'XGGP').AP600
&DISPL   SETC  '8'                     -> PGWORK
         AGO   .AP602
.AP600   ANOP
&DISPL   SETC  '16'                    -> XGWORK
.AP602   ANOP
.*
&PFX.IG1 L     R7,&DISPL+4(R6)         = # ENTRIES IN GPTBL
         LTR   R7,R7                   # ENTRIES = 0 ===> GPTBL ¬ EXIST
         BZ    &PFX.IX                 NOT EXIST; IF SO, EXIT
         OI    HARECBFG,ARGON          ENABLE ARGUMENT
         L     R8,&DISPL.(R6)          --> GPTBL(1)
&PFX.IG2 CLC   0(4,R4),2*(&LCNTL)(R8)  GP(L) < GP(T)?
         BH    &PFX.IG3                  YES,
         CLC   4(4,R4),2*(&LCNTL)(R8)  GP(U) > GP(T)?
         BL    &PFX.IG3
         AIF   ('&T' EQ 'P').AP650
         MVC   &PFX.IW(2*&LCNTL),0(R8) MOVE IN ARGS
         AGO   .AP652
.AP650   ANOP
         ZAP   &PFX.IW(&LTBL),8(&LCNTL,R8) MOVE IN ARGS
         MP    &PFX.IW(&LTBL),=PL1'&MULT'
         ZAP   &PFX.IW+&LTBL.(&LTBL),8+&LCNTL(&LCNTL,R8)
         MP    &PFX.IW+&LTBL.(&LTBL),=PL1'&MULT'
.AP652   ANOP
         BAL   R9,&PFX.IL              INSERT ARG IN MAP SET
&PFX.IG3 LA    R8,4+2*(&LCNTL)(R8)     -> NEXT GPTBL ENTRY
         BCT   R7,&PFX.IG2             END GPTBL LOOP
         LA    R4,2*(&LCNTL)(R4)       -> NEXT GP ARG
         BCT   R5,&PFX.IG1             END GP ARG LOOP
.AP700   ANOP
.*
.*             END GROUP PROC
.*
         SPACE
&PFX.IX  HAREXIT RC=0
         SPACE
         AIF   ('&T' EQ 'P').AP800
&PFX.IW  DS    2CL(&LCNTL)             ARGUMENT WORK
&PFX.IU  DC    (&LCNTL)X'00',(&LCNTL)X'FF' RANGE = UNIVERSE
         AGO   .AP802
.AP800   ANOP
&PFX.IW  DS    2PL(&LTBL)              ARGUMENT WORK
&PFX.IU  DS    2PL(&LTBL)              RANGE = UNIVERSE
&PFX.I9S DC    ZL16'9999999999999999'
.AP802   ANOP
.*
.*
.*
         EJECT
&PFX.IL  TLOAD &PFX.IW,&T
         MEND
./ ADD NAME=HAREINI2 0100-87021-87029-1039-00232-00232-00000-VBCMACS
         MACRO
&NAME    HAREINIT &T,&LCNTL,&LTBL,&DUPL,&MULT,&GP,&DSECT
         LCLC  &CNAME,&#,&#GP,&S,&SA,&PFX
&PFX     SETC  '&NAME'(2,5)
&#       SETC  '#'.'&PFX'
&#GP     SETC  '#'.'&GP'
&CNAME   SETC  'C'.'&PFX'
&S       SETC  'S'.'&PFX'
&SA      SETC  '&PFX'.'SA'
.*
&NAME    HARENTRY RSV=&SA,ID=*
         L     R11,0(R1)               -> HARECB
         USING HARECB,R11
         L     R10,4(R1)               -> SUCNTL
         USING SUCNTL,R10
         AIF   ('&DSECT' NE 'SULINES').AP118
         OI    HARECBFG,LINEARG        INDICATE LINE ARGUMENT
         AGO   .AP119
.AP118   ANOP
         AIF   ('&DSECT' NE 'SUQ221IP').AP119
         OI    HARECBFG,ALTARG
.AP119   ANOP
         LH    R2,HARECB#              SET LOOP COUNT
         LTR   R2,R2                   FIRST TIME?
         BNZ   &PFX.IA                   NO, BYPASS 1ST TIME PROC
         LA    R0,2*(&LTBL)+LMASK      ALLOCATE TABLE
         GETMAIN R,LV=(0)
         AIF   ('&T' NE 'P').AP120
         PACK  &PFX.IU(&LTBL),&PFX.I9S(2*(&LTBL)-3)
         MP    &PFX.IU(&LTBL),=PL1'-1'
         PACK  &PFX.IU+&LTBL.(&LTBL),&PFX.I9S(2*(&LTBL)-1)
.AP120   ANOP
         MVC   0(2*(&LTBL),R1),&PFX.IU LOAD U->0 MAP
         XC    2*(&LTBL)(LMASK,R1),2*(&LTBL)(R1)
         ST    R1,HARECBTB             INIT HARECBTBL AD
         L     R1,4(R13)               RESTORE R1
         L     R1,24(R1)
         LA    R2,1                    SET LOOP COUNT TO 1
         STH   R2,HARECB#              INIT HARECB#
         SPACE
.*
         AIF   ('&DUPL' EQ '0').AP200
&PFX.IA  LA    R6,&CNAME                R6 -> FIXED ARGUMENT
         AGO   .AP202
.AP200   ANOP
&PFX.IA  HARELOC &S,R6                  R6 -> 1ST FLOATING ARGUMENT
.AP202   ANOP
.*
.*
.*
         EJECT
&PFX.IB  L     R5,8(R1)                -> MASKDSPL|ROWMASK|FLAG
         AIF   ('&DUPL' EQ '0').AP310
         CLC   0(&LCNTL,R6),=(&LCNTL)C' ' NULL ARG?
         BNE   &PFX.ID                   NO, GO TO NON-NULL PROC
         AGO   .AP390
.*
.AP310   ANOP
         CLC   &#,=H'0'                DOES ARG EXIST?
         BE    &PFX.IB1                  NO, GO TO NULL PROC
         CLC   0(&LCNTL,R6),=(&LCNTL)C' ' IS ARG NULL?
         BNE   &PFX.ID                   NO, GO TO NON-NULL PROC
&PFX.IB1 EQU *
         AIF   (K'&GP NE 0).AP320
         AGO   .AP390
.*
.AP320   ANOP
         CLC   &#GP,=H'0'              DOES GROUP ARG EXIST?
         BE    &PFX.IB2                  NO, GO TO NULL PROC
         HARELOC &#GP,R4
         CLC   0(4,R4),=4C' '          IS GROUP ARG NULL?
         BNE   &PFX.IG                   NO, GO TO GROUP PROC
&PFX.IB2 EQU *
.*
.AP390   ANOP
         L     R3,HARECBTB             R3 -> T(1)
         A     R3,0(R5)                R3 -> T(1) + MASKDSPL
         LA    R4,(&LTBL)*2             = 2*L'ARG
         AR    R3,R4                   R3 -> T(1)+MASKDSPL+2*L'ARG
         A     R4,=A(LMASK)            = L'ENTRY
&PFX.IC  OC    0(1,R3),IMOFFSET(R5)    .OR. ROWMASK ONTO MASK(T)
         AR    R3,R4                   -> NEXT ENTRY
         BCT   R2,&PFX.IC
         B     &PFX.IX                 EXIT
         SPACE
*                                      LOAD MAP(S) INTO MAP SET
&PFX.ID  EQU   *                       SET UP FOR INDEX MAP LOOP
.*
         AIF   ('&DUPL' EQ '0').AP400
         LA    R7,1                    R7 = LOOP COUNT
         AGO   .AP402
.AP400   ANOP
         LA    R7,&#                   R7 = LOOP COUNT
         LH    R7,0(R7)
.AP402   ANOP
.*
         OI    HARECBFG,ARGON          INDICATE ARG IS ACTIVE
         SPACE
&PFX.IE  EQU *                         INDEX MAP LOOP
         CLC   0(&LCNTL,R6),=(&LCNTL)C' ' NULL ENTRY => END OF LIST
         BE    &PFX.IX                 IF SO, EXIT
.*
         AIF   ('&DUPL' NE '1').AP501
         AIF   ('&T' EQ 'P').AP500
         MVC   &PFX.IW(&LTBL),0(R6)    DISCRETE ---> RANGE
         MVC   &PFX.IW+&LTBL.(&LTBL),&PFX.IW
         AGO   .AP520
.AP500   ANOP
         ZAP   &PFX.IW(&LTBL),0(&LCNTL,R6) DISCRETE ---> RANGE
         MP    &PFX.IW(&LTBL),=PL1(&MULT)  SCALE
         MVC   &PFX.IW+&LTBL.(&LTBL),&PFX.IW
         AGO   .AP520
.*
.AP501   ANOP
         AIF   ('&T' NE 'P').AP502
         CP    0(&LCNTL,R6),&LCNTL.(&LCNTL,R6) CIRCULAR ARGUMENT?
         AGO   .AP502A
.AP502   ANOP
         CLC   0(&LTBL,R6),&LTBL.(R6)  CIRCULAR ARGUMENT?
.AP502A  ANOP
         BNH   &PFX.IE1                  NO, GO TO NON-CIRCULAR CASE
         MVC   &PFX.IW(&LTBL),&PFX.IU  CIRCULAR CASE
         AIF   ('&T' EQ 'P').AP503
         MVC   &PFX.IW+&LTBL.(&LTBL),&LTBL.(R6)
         AGO   .AP503A
.AP503   ANOP
         ZAP   &PFX.IW+&LTBL.(&LTBL),&LCNTL.(R6)
         MP    &PFX.IW+&LTBL.(&LTBL),=PL1'&MULT'  SCALE
.AP503A  ANOP
         BAL   R9,&PFX.IL              INSERT (-INF,ARG(U))
         AIF   ('&T' EQ 'P').AP504
         MVC   &PFX.IW(&LTBL),0(R6)
         AGO   .AP504A
.AP504   ANOP
         ZAP   &PFX.IW+&LTBL.(&LTBL),0(&LCNTL,R6)
         MP    &PFX.IW+&LTBL.(&LTBL),=PL1'&MULT'  SCALE
.AP504A  ANOP
         MVC   &PFX.IW+&LTBL.(&LTBL),&PFX.IU+&LTBL
         AIF   ('&T' NE 'P').AP506
         SP    &PFX.IW+&LTBL.(&LTBL),=PL1'1'
         AGO   .AP506A
.AP506   ANOP
         MVI   &PFX.IW+2*(&LTBL)-1,X'FE'
.AP506A  ANOP
         B     &PFX.IE2                INSERT (ARG(L),+INF-1)
         AIF   ('&T' EQ 'P').AP508
&PFX.IE1 MVC   &PFX.IW(2*(&LTBL)),0(R6) NON-CIRCULAR ARGUMENT
         AGO   .AP508A
.AP508   ANOP
&PFX.IE1 ZAP   &PFX.IW(&LTBL),0(&LCNTL,R6) NON-CIRCULAR CASE
         MP    &PFX.IW(&LTBL),=PL1'&MULT'  SCALE
         ZAP   &PFX.IW+&LTBL.(&LTBL),&LCNTL.(&LCNTL,R6)
         MP    &PFX.IW+&LTBL.(&LTBL),=PL1'&MULT'  SCALE
.AP508A  ANOP
.*
.*
.*
.AP520   ANOP
.*
&PFX.IE2 BAL   R9,&PFX.IL              INSERT MAP INTO SET
         LA    R6,2*&LCNTL.(R6)        INCREMENT FLOATING ARG PTR
         BCT   R7,&PFX.IE              END INDEX MAP LOOP
.*
.*             GROUP PROC
.*
         AIF   ('&GP' EQ '').AP700
         EJECT
&PFX.IG EQU *                          GROUP PROC
         CLC   &#GP,=H'0'              DOES GROUP ARG EXIST?
         BE    &PFX.IX                   YES, EXIT
         HARELOC &#GP,R4
         CLC   0(4,R4),=(&LCNTL)C' '   IS 1ST GROUP ARG NULL?
         BE    &PFX.IX                   YES, EXIT
         LA    R5,&#GP                 R5 = # GROUPS
         LH    R5,0(R5)
         L     R6,12(R1)               -> DGWORK|PGWORK|XGWORK
.*
         LCLC  &DISPL
&DISPL   SETC  '0'
         AIF   ('&GP' EQ 'DGGP').AP602
         AIF   ('&GP' EQ 'XGGP').AP600
&DISPL   SETC  '8'                     -> PGWORK
         AGO   .AP602
.AP600   ANOP
&DISPL   SETC  '16'                    -> XGWORK
.AP602   ANOP
.*
&PFX.IG1 L     R7,&DISPL+4(R6)         = # ENTRIES IN GPTBL
         LTR   R7,R7                   # ENTRIES = 0 ===> GPTBL ¬ EXIST
         BZ    &PFX.IX                 NOT EXIST; IF SO, EXIT
         OI    HARECBFG,ARGON          ENABLE ARGUMENT
         L     R8,&DISPL.(R6)          --> GPTBL(1)
&PFX.IG2 CLC   0(4,R4),2*(&LCNTL)(R8)  GP(L) < GP(T)?
         BL    &PFX.IG3                  YES,
         CLC   4(4,R4),2*(&LCNTL)(R8)  GP(U) > GP(T)?
         BH    &PFX.IG3
         AIF   ('&T' EQ 'P').AP650
         MVC   &PFX.IW(2*&LCNTL),0(R8) MOVE IN ARGS
         AGO   .AP652
.AP650   ANOP
         ZAP   &PFX.IW(&LTBL),8(&LCNTL,R8) MOVE IN ARGS
         MP    &PFX.IW(&LTBL),=PL1'&MULT'
         ZAP   &PFX.IW+&LTBL.(&LTBL),8+&LCNTL(&LCNTL,R8)
         MP    &PFX.IW+&LTBL.(&LTBL),=PL1'&MULT'
.AP652   ANOP
         BAL   R9,&PFX.IL              INSERT ARG IN MAP SET
&PFX.IG3 LA    R8,4+2*(&LCNTL)(R8)     -> NEXT GPTBL ENTRY
         BCT   R7,&PFX.IG2             END GPTBL LOOP
         LA    R4,2*(&LCNTL)(R4)       -> NEXT GP ARG
         BCT   R5,&PFX.IG1             END GP ARG LOOP
.AP700   ANOP
.*
.*             END GROUP PROC
.*
         SPACE
&PFX.IX  HAREXIT RC=0
         SPACE
         AIF   ('&T' EQ 'P').AP800
&PFX.IW  DS    2CL(&LCNTL)             ARGUMENT WORK
&PFX.IU  DC    (&LCNTL)X'00',(&LCNTL)X'FF' RANGE = UNIVERSE
         AGO   .AP802
.AP800   ANOP
&PFX.IW  DS    2PL(&LTBL)              ARGUMENT WORK
&PFX.IU  DS    2PL(&LTBL)              RANGE = UNIVERSE
&PFX.I9S DC    ZL16'9999999999999999'
.AP802   ANOP
.*
.*
.*
         EJECT
&PFX.IL  TLOAD &PFX.IW,&T
         MEND
./ ADD NAME=HARELOC  0101-87009-87029-1040-00039-00039-00000-VBCMACS
         MACRO
&LABEL   HARELOC &NAME,&REG
.*
.*       HARELOC NAME,REG WILL LOAD THE ADDRESS OF THE TABLE ASSOCIATED
.*       WITH THE "NAME" ARGUMENT INTO "REG". THE MACRO ASSUMES THAT
.*       'S'|'NAME' IS IN SUCLAIM, '#'|'NAME' IS IN THE CONTROL FILE,
.*       '$'|'NAME' IS THE NAME OF AN HARECB, A ONE-TO-ONE RELATION
.*WKF
.*  CHANGE REFERENCE TO 'BEGINNING WITH $XXXXX TO FIRST CTR IN MATRIX
.*   RECORD
.*       EXISTS BETWEEN THE HARECBS BEGINNING WITH $LOS AND THE "#"
.*       FIELDS IN SUCNTL.
.*
         LCLC  &#
&#       SETC  '#'.'&NAME'(2,5)
.*
&LABEL   ST    R11,$&SYSNDX.S          SAVE HARECB POINTER
         L     R11,16(R1)              -> 1ST FLOATING HARECB
         STM   R14,R0,$&SYSNDX.S+4     SAVE R15-R0 (LOCAL REGS)
         LA    &REG,CTABLES            -> BEGINNING OF TABLE AREA
.*WKF
.*   CHANGE 'LA   R15,XXXXX' TO FIRST MATRIX COUNTER
.*
         LA    R15,#LOS                -> 1ST COUNT
         LA    R14,&#                  -> THIS COUNT
$&SYSNDX CR    R15,R14                 END OF LOOP?
         BNL   $&SYSNDX.S+16             YES, EXIT
         SR    R0,R0                   R0 = 2 * L'ARG * #ARGS
         IC    R0,ACBFLEN
         SLA   R0,1
         MH    R0,0(R15)
         AR    &REG,R0                 ACCUMULATE DISPLACEMENTS
         LA    R15,2(R15)              -> NEXT COUNT
         LA    R11,LHARECB(R11)        -> NEXT ARG LENGTH
         B     $&SYSNDX
$&SYSNDX.S DS  4F
         L     R11,$&SYSNDX.S          RESTORE HARECB POINTER
         LM    R14,R0,$&SYSNDX.S+4     RESTORE R14-R0
         MEND
./ ADD NAME=HAREMAIN 0100-87029-87029-1040-00108-00108-00000-VBCMACS
         MACRO
&NAME    HAREMAIN &T,&L,&N,&DSECT
         LCLC  &PFX,&SA,&S
&PFX     SETC  '&NAME'(2,5)
&SA      SETC  '&PFX'.'SA'
&S       SETC  'S&PFX'
&NAME    HARENTRY RSV=&SA,ID=*
         L     R11,4(R1)               -> CURRENT HARECB
         USING HARECB,R11
         L     R10,0(R1)               -> CLAIM DATA
         USING &DSECT,R10
.*
         SPACE
         LA    R2,&S                   R2 -> 1ST ARG
         LA    R3,&N                   R3 = # ARGS
         TM    HARECBFG,BINSRCH        SHOULD BINARY SEARCH BE USED?
         BO    &PFX.MB                   YES, BYPASS SERIAL SEARCH
         SPACE
.*
&PFX.MS  L     R7,HARECBTB             I = 1
         SPACE
&PFX.MS1 EQU   *                       SERIAL LOOP
.*
         AIF   ('&T' EQ 'P').APM200
         CLC   0(L'&S,R2),&L.(R7)      ARG .GE. TABLE(I,U)?
         AGO   .APM210
.APM200  ANOP
         CP    0(L'&S,R2),&L.(&L,R7)   ARG .GE. TABLE(I,U)?
.APM210  ANOP
.*
         BL    &PFX.MS2                  YES, EXIT LOOP
         LA    R7,2*(&L)+LMASK(R7)     I = I + 1
         B     &PFX.MS1                LOOP AGAIN
         SPACE
*                                      MAINMAP=AND(MAINMAP,MAP(I))
&PFX.MS2 L     R8,8(R1)                -> MAINMAP
         NC    0(LMASK,R8),2*(&L)(R7)
         LA    R15,4                   RC = 0, UNLESS MAINMAP = ZEROS
         BZ    *+8                         THEN
         LA    R15,0                   RC = 4
         CLC   (L'&S)*2(L'&S,R2),=(L'&S)C' '  END OF VECTOR?
         BE    &PFX.MS3                  YES, EXIT LOOP
         LA    R2,L'&S.(R2)            -> NEXT ARG
         BCT   R3,&PFX.MS              CONTINUE LOOPING
         SPACE
&PFX.MS3 HAREXIT
         EJECT
&PFX.MB  MVC   &PFX.MBI+4,HARECB#      N
         SR    R6,R6
         LH    R7,&PFX.MBI+4           I = N / 2 (ROUNDED)
         D     R6,=F'2'
         LTR   R6,R6
         BZ    *+8
         LA    R7,1(R7)
         MVC   &PFX.MBI+2,=H'1'        M = 1
&PFX.MB0 STH   R7,&PFX.MBI             SAVE I
         BCTR  R7,0                    I -> TABLE(I)
         MH    R7,=Y(2*(&L)+LMASK)
         A     R7,HARECBTB
         AIF   ('&T' EQ 'P').APM310
         CLC   0(L'&S,R2),0(R7)        ARG(L) < TABLE(I,L)?
         AGO   .APM320
.APM310  ANOP
         CP    0(L'&S,R2),0(&L,R7)     ARG(L) < TABLE(I,L)?
.APM320  ANOP
         BL    &PFX.MB4                  NO
         AIF   ('&T' EQ 'P').APM330
         CLC   0(L'&S,R2),&L.(R7)      ARG(L) GE TABLE(I,U)?
         AGO   .APM340
.APM330  ANOP
         CP    0(L'&S,R2),&L.(&L,R7)   ARG(L) GE TABLE(I,U)?
.APM340  ANOP
         BL    &PFX.MB8                  YES, WE HAVE A HIT!
         MVC   &PFX.MBI+2,&PFX.MBI     M = I
         BAL   R9,&PFX.MB6             I = (N - M) / 2 + M
         B     &PFX.MB0
&PFX.MB4 MVC   &PFX.MBI+4,&PFX.MBI     N = I
         BAL   R9,&PFX.MB6             I = (N - M) / 2 + M
         CH    R7,&PFX.MBI
         BNE   &PFX.MB0
         BCTR  R7,0
         B     &PFX.MB0
         SPACE
&PFX.MB6 SR    R6,R6
         LH    R7,&PFX.MBI+4           I = (N - M) / 2 + M
         SH    R7,&PFX.MBI+2
         D     R6,=F'2'
         LTR   R6,R6                   ROUND UP IF ANY REMAINDER
         BZ    *+8
         LA    R7,1(R7)
         AH    R7,&PFX.MBI+2
         BR    R9
         SPACE
*                                      MAINMASK=AND(MAINMASK,MASK(I))
&PFX.MB8 L     R8,8(R1)                -> MAIN MASK
         NC    0(LMASK,R8),2*(&L)(R7)
         LA    R15,4                   RC = 0, UNLESS MAINMAP = ZEROS
         BZ    *+8                         THEN
         LA    R15,0                   RC = 4
         CLC   (L'&S)*2(L'&S,R2),=(L'&S)C' '  END OF VECTOR?
         BE    &PFX.MB9
         LA    R2,L'&S.(R2)              -> NEXT ARG
         BCT   R3,&PFX.MB              CONTINUE LOOPING
         EJECT
&PFX.MB9 HAREXIT
         SPACE
&PFX.MBI DS    3H                      INDEXES: I, M, N
         MEND
./ ADD NAME=HARENTRY 0100-87029-87029-1040-00108-00108-00000-VBCMACS
         MACRO
&L       HARENTRY &SAVE=(14,12),&BASE=12,&REGS=N,&BASES=1,&ID=,&RSV=
         GBLA  &ENTER
         LCLA  &TEMP,&WORK,&R1,&R2,&IDLEN
&ENTER   SETA  2
         AIF   ('&BASE' NE '&ENTER').USE2
&ENTER   SETA  3
.USE2    ANOP
         AIF   (0 EQ K'&L).NOLBL
         AIF   (0 NE K'&SYSECT).NOCS
&L       CSECT
.NOLBL   ANOP
         AIF   (0 EQ K'&ID).IDOUT
         AGO   .IDOK
.NOCS    ANOP
&L       DS    0H
         AGO   .IDOK
.BADID   ANOP
         MNOTE 4,'INVALID CSECT IDENTIFIER SPECIFIED'
         AGO   .IDOUT
.IDOK    ANOP
         AIF   (255 LT K'&ID).BADID
         AIF   ('*' EQ '&ID').SPCLID
&WORK    SETA  ((K'&ID+2)/2)*2+4
&TEMP    SETA  K'&ID
         B     &WORK.(15)              BRANCH AROUND ID.
         DC    AL1(&TEMP)              ID LENGTH
         DC    C'&ID'
&IDLEN   SETA  &WORK
         AGO   .IDOUT
.SPCLID  ANOP
         B     14(15)
         DC    AL1(8)
         AIF   (0 NE K'&L).NEWSECT
         DC    CL8'&SYSECT'
&IDLEN   SETA  14
         AGO   .IDOUT
.NEWSECT ANOP
         DC    CL8'&L'
&IDLEN   SETA  14
.IDOUT   ANOP
         AIF   (2 EQ N'&SAVE).REGOK1
         MNOTE 4,'INVALID SPECIFICATION OF SAVE REGISTERS - &SAVE - (14,
               2 USED'
.REGOK1  ANOP
&R1      SETA  &SAVE(1)
&R2      SETA  &SAVE(2)
         STM   &R1,&R2,12(13)
         LR    &ENTER,1                SAVE REG1 PARM ADDRESS.
         LR    &BASE,15                LOAD BASE REGISTER.
&WORK    SETA  8
&WORK    SETA  &WORK+&IDLEN
         USING *-&WORK,&BASE           ESTABLISH ADDRESSABILITY.
         LCLA  &BASEN,&BASEO,&BASNO,&DISP
&DISP    SETA  &BASE-&BASES
         AIF   (&DISP GE 2).BASNOK
         MNOTE 8,'INVALID BASE= / BASES= COMBINATION, RESULTS WOULD'
         MNOTE 8,'CREATE BASE REGISTERS LESS THAN R2.'
         MEXIT
.BASNOK  ANOP
&BASEN   SETA  &BASE
&BASEO   SETA  &BASEN
&BASNO   SETA  &BASES
&DISP    SETA  4095
&WORK    SETA  &WORK+4
.NXTBAS  ANOP
&BASNO   SETA  &BASNO-1
         AIF   (0 GE &BASNO).BASEND
&BASEN   SETA  &BASEN-1
&BASEO   SETA  &BASEN+1
         AIF   (&BASEN LT 2).BASERR
         LA    &BASEN,4095(,&BASEO)
         USING *-&WORK+&DISP,&BASEN
&DISP    SETA  &DISP+4096
&WORK    SETA  &WORK+4
         AGO   .NXTBAS
.BASERR  MNOTE 8,'INVALID BASE REGISTER COMBINATION SPECIFIED'
         MEXIT
.BASEND  ANOP
         AIF   (0 NE K'&RSV).HISAVE
         MNOTE 8,'SAVE AREA NOT SPECIFIED'
         MEXIT
.HISAVE  ANOP
         LA    1,&RSV                  USER-PROVIDED SAVE AREA ADDRESS.
         ST    13,4(1)                 SAVE AREA FORWARD CHAIN.
         ST    1,8(13)                 SAVE AREA BACKWARD CHAIN.
         LM    14,0,12(13)             RESTORE R0, R14, R15...
         LR    13,1                    OUR SAVE AREA ADDRESS.
         LR    1,&ENTER                RESTORE REG 1 ADDRESS.
         AIF   ('Y' NE '&REGS').NOREGS
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
.NOREGS  ANOP
         MEND
./ ADD NAME=HAREPROC 0100-87029-87029-1041-00074-00074-00000-VBCMACS
         MACRO
         HAREPROC &HARECB,&I=(C,0,,0,),&M=(SUCLAIM,1,0)
.*
         LCLC  &NAME,&T,&LCNTL,&LTBL,&DCNTL,&DSECT,&GP,&DCLM
         LCLA  &SCNTL,&SCLM,&MULT
.*
&T       SETC  '&I(1)'                 T'CNTL   (DEFAULT = C)
         AIF   ('&T' NE '').HP100
&T       SETC  'C'
.HP100   ANOP
.*
&DCNTL   SETC  '&I(2)'                 D'CNTL   (DEFAULT = 0)
         AIF   ('&DCNTL' NE '').HP200
&DCNTL   SETC  '0'
.HP200   ANOP
.*
&LCNTL   SETC  '&I(3)'                 L'CNTL   (DEFAULT = L'CLM)
         AIF   ('&LCNTL' NE '').HP300
&LCNTL   SETC  'L''S'.'&HARECB'(2,5)
.HP300   ANOP
.*
&SCNTL   SETA  0                       S'CNTL   (DEFAULT = 0)
         AIF   (K'&I(4) EQ 0).HP400
&SCNTL   SETA  &I(4)
.HP400   ANOP
.*
&GP      SETC  '&I(5)'                 GROUP ID (DEFAULT = '')
.*
&DSECT   SETC  '&M(1)'                 DSECT TO BE USED IN MAINLINE
         AIF   ('&DSECT' NE '').HP500
&DSECT   SETC  'SUCLAIM'
.HP500   ANOP
.*
&DCLM    SETC  '&M(2)'                 D'CLM    (DEFAULT = 1)
         AIF   ('&DCLM' NE '').HP600
&DCLM    SETC  '1'
.HP600   ANOP
.*           M
&SCLM    SETA  0                       S'CLM    (DEFAULT = 0)
         AIF   (K'&M(3) EQ 0).HP700
&SCLM    SETA  &M(3)
.HP700   ANOP
.*
&LTBL    SETC  'L''S'.'&HARECB'(2,5)   L'TBL = L'CLM IF TYPE = C
         AIF   ('&T' EQ 'C').HP800
&LTBL    SETC  '&LTBL'.'+2'            L'TBL = L'CLM+1 IF TYPE = P
.HP800   ANOP
.*
&MULT    SETA  1
         LCLA  &WORK
&WORK    SETA  &SCLM-&SCNTL
.MULT    ANOP
         AIF   (&WORK EQ 0).ENDMULT
&MULT    SETA  &MULT*10
&WORK    SETA  &WORK-1
         AGO   .MULT
.ENDMULT ANOP
.*
.*
.*
&NAME    SETC  'I'.'&HARECB'(2,5)
&NAME    HAREINIT &T,&LCNTL,&LTBL,&DCNTL,&MULT,&GP,&DSECT
.*
.*
.*
         EJECT
&NAME    SETC  'M'.'&HARECB'(2,5)
&NAME    HAREMAIN &T,&LTBL,&DCLM,&DSECT
         LCLC  &SA
&SA      SETC  '&HARECB'(2,5).'SA'
&SA      DS    18F
         SPACE
         LTORG
         MEND
./ ADD NAME=HAREXIT  0100-87029-87029-1041-00038-00038-00000-VBCMACS
         MACRO
&L       HAREXIT &RC=(15),&TRANSP=Y
.*
         LCLC  &T
&L       L     13,4(13)
&T       SETC  T'&RC
         AIF   ('(' EQ '&RC'(1,1)).RCREG
         AIF   ('&T' NE 'F' AND '&T' NE 'A').NOTF
         L     15,&RC
         AGO   .GOTRC
.NOTF    AIF   ('&T' NE 'H' AND '&T' NE 'Y').NOTH
         LH    15,&RC
         AGO   .GOTRC
.NOTH    AIF   ('&T' NE 'N' AND '&T' NE 'U').NOTU
         LA    15,&RC
         AGO   .GOTRC
.NOTU    AIF   (1 NE L'&RC).NOTIC
         IC    15,&RC
         AGO   .GOTRC
.NOTIC   ANOP
         MNOTE *,'RETURN CODE TYPE IGNORED - &RC'
         L     15,16(13)               ** UNPREDICTABLE RETURN CODE **
         AGO   .GOTRC
.RCREG   ANOP
&T       SETC  '&RC'(2,K'&RC-2)
         AIF   ('&T' EQ '15').GOTRC
         LR    15,&T
.GOTRC   ANOP
         AIF   ('Y' EQ '&TRANSP').NOSAVE
         STM   15,1,16(13)             SAVE R0,R1,R15. INCLUDES RC.
         AGO   .RCSET
.NOSAVE  ANOP
         ST    15,16(13)               STORE RC FOR LATER USE.
.RCSET   ANOP
         LM    14,12,12(13)            RESTORE CALLERS REGS AND RC.
         BR    14                      EXIT...
         MEXIT
         MEND
./ ADD NAME=HDWREC   0100-02135-02135-1228-00036-00036-00000-VBCMACS
         MACRO
         HDWREC &DSECT=YES
*
*
*
  AIF    ('&DSECT' EQ 'NO').GEN
HDWRECD  DSECT
.GEN     ANOP
HDWREC   DS    0CL120     ***** HARDWARE UTILIZATION RECORD *****
HSTDAT   DS    PL3                     START DATE, YYDDD
HSTIME   DS    PL4                     START TIME, MINUTES, 3 DEC PLACE
HJOB     DS    CL8                     JOB NAME
HSTEP    DS    CL8                     STEP NAME
HPGM     DS    CL8                     PROGRAM NAME
HENTIME  DS    PL4                     END TIME, MINUTES, 3 DEC PLACES
HDYWK    DS    CL1                     DAY OF WEEK
HPTITN   DS    PL3                     PARTITION SIZE, 5 CORE
HKUSED   DS    PL3                     K-CORE USED
HCPUTIM  DS    PL4                     CPU TIME, MINUTES, 3 DEC PLACES
HDDNAM   DS    CL8                     DDNAME
HDSN     DS    CL44                    DSNAME
HNVOL    DS    PL2                     NUMBER VOLUMES IN DATASET
HCUU     DS    CL3                     CHANNEL-UNIT ADDRESS
HVOL     DS    CL6                     VOL SER NBR
HTYPE    DS    CL1                     DEVICE TYPE, K=3330, J=2314,
*                                        L=TAPE
HXTNTS   DS    PL2                     NUMBER EXTENTS
HACCES   DS    PL5                     NBR ACCESSES
HALLOC   DS    PL3                     NBR TRACKS ALLOCATED
         AIF   ('&DSECT' EQ 'NO').XIT
&SYSECT  CSECT
*
*
*
.XIT     ANOP
         MEND
./ ADD NAME=HEXTOBIN 0100-02135-02135-1228-00021-00021-00000-VBCMACS
         MACRO
&L       HEXTOBIN  &TRANS
         GBLA  &RET
         GBLB  &CODE
         LCLA  &I
         LCLC  &WK
&RET     SETA  0
&CODE    SETB  0
&WK      SETC  '&TRANS'(1,1)
.LOOP    AIF   (&I GT 15).ER
&I       SETA  &I+1
         AIF   ('&WK' NE '0123456789ABCDEF'(&I,1)).LOOP
&RET     SETA  &RET*16+&I-1
         AIF   (&CODE).END
&I       SETA  0
&CODE    SETB  1
&WK      SETC  '&TRANS'(2,1)
         AGO   .LOOP
.ER      MNOTE 16,'***ERROR IN ALTSEQ CHAR ''&WK'' IN &TRANS'
&CODE    SETB  0
.END     MEND
./ ADD NAME=HOOK     0100-02135-02135-1228-00091-00091-00000-VBCMACS
         MACRO
&NAME    HOOK  &EID=,&TYPE=
         GBLB  &HOOKSW
         GBLB  &TEMPSW
.*A000000-999999                                                 Y01014
.*A021500,024440,C019500,C044500,C045000                         Y02014
.*A028100,044100-044900,041100,C028000,041000                    Y02014
.*C013500,024200,D015500-020500,024500,024400,024500-026000      Y02014
.* DETERMINE THE TYPE OF HOOK
         AIF   ('&EID' NE '').TYPECHK
         MNOTE 8,'AHL052  INSUFFICIENT KEYWORD PARAMETERS.'
         MEXIT
.TYPECHK ANOP
         AIF   ('&TYPE' EQ '').PMPMAP
         AIF   ('&TYPE' NE 'P' AND '&TYPE' NE 'BP' AND '&TYPE' NE      X
               'BPN').TMP
.PMPMAP  ANOP
.**********************************************************************
.*  THE FOLLOWING LOGIC DETERMINES WHICH MAPPING MACRO SHOULD BE CALLED
.*  WHEN A NEW MAPPING MACRO IS ADDED, THIS PORTION MUST BE UPDATED TO
.*  CALL THE NEW MACRO.
.**********************************************************************
.IEACHEK ANOP
         AIF   ('&EID'(1,3) EQ 'IEA').IEA
         AGO   .IECCHEK
.IEA     ANOP
         IEAPMP
         AGO   .BRCHK
.IECCHEK ANOP
         AIF   ('&EID'(1,3) EQ 'IEC').IEC
         AGO   .IRACHEK
.IEC     ANOP
         IECPMP
         AGO   .BRCHK
.IRACHEK ANOP
         AIF   ('&EID'(1,3) EQ 'IRA').IRA
         AGO   .ISPCHEK
.IRA     ANOP
         IRAPMP
         AGO   .BRCHK
.ISPCHEK ANOP
         AIF   ('&EID'(1,3) NE 'ISP').INVEID
         ISPPMP
         AGO   .BRCHK
.**********************************************************************
.**********************************************************************
.TMP     ANOP
         AIF   ('&TYPE' EQ 'T' OR '&TYPE' EQ 'BT' OR '&TYPE' EQ        X
               'BTN').HKSWCHK
  MNOTE 8,'AHL053  INVALID TYPE= KEYWORD.'
         MEXIT
.HKSWCHK ANOP
         AIF   (&HOOKSW).TEMPEID
         AIF   ('&NAME' EQ '').NONAME
&NAME    EQU   *
.NONAME  ANOP
         MEXIT
.**********************************************************************
.*  THE FOLLOWING DETERMINES IF THE TEMPORARY MAPPING MACRO MUST
.*  BE CALLED.
.**********************************************************************
.TEMPEID ANOP
         AIF   ('&EID'(1,3) EQ 'TMP').T10
         AGO   .INVEID
.T10     ANOP
         AIF   (&TEMPSW).BRCHK
         TMPEID
&TEMPSW  SETB  1
         AGO   .BRCHK
.INVEID  ANOP
         MNOTE 8,'AHL055  INVALID EID= KEYWORD.'
         MEXIT
.BRCHK   ANOP
.* GENERATE BRANCH OR PERMANENT HOOK
         AIF   ('&TYPE' EQ 'BP' OR '&TYPE' EQ 'BT' OR '&TYPE' EQ 'BTN' X
               OR '&TYPE' EQ 'BPN').GENBR
&NAME    DC    XL1'AF',AL3(&EID)   MC INSTRUCTION
         MEXIT
.GENBR   ANOP
*
* SPECIAL BRANCH HOOK GENERATED BY THE HOOK MACRO
*
         AIF   ('&TYPE' EQ 'BPN' OR '&TYPE' EQ 'BTN').CON1
&NAME    L     15,IEACON1          RESIDENT RTN E.P.S
         AGO   .BRANCH
.CON1    ANOP
&NAME    L     15,IEACON2          RESIDENT RTN E.P.S
.BRANCH  ANOP
         BALR  14,15               BRANCH HOOK
         DC    XL1'47',AL3(&EID)   NOP TO CARRY EID
         MEND
./ ADD NAME=HOSMAST  0100-02135-02135-1228-00195-00195-00000-VBCMACS
         MACRO
&NAME    HOSMAST  &DSECT=
*****
*****
*****
         AIF   ('&DSECT' EQ 'YES').DSECT
&NAME    DS    0CL656   *** HOSPITAL MASTER RECORD ***
*****
         AGO   .GENREC
.DSECT   ANOP
&NAME    DSECT ,        *** HOSPITAL MASTER RECORD ***
*                       RECORD LENGTH 656 BYTES
*****
.GENREC  ANOP
*
HOSTATUS DS    0CL129 *STATUS INFORMATION ***
HODELCOD DS    CL1      O/S DELETE CODE
HOHOSNO  DS    CL3      HOSPITAL NO ** KEY FIELD ** CHG 07/23/73
HOTYPCOD DS    PL1      TYPE HOSPITAL CODE
HOEFFDT  DS    PL4      HOSPITAL EFFECTIVE DATE
HONAME   DS    CL24     HOSPITAL NAME
HOADDR1  DS    CL24     ADDRESS LINE 1
HOADDR2  DS    CL24     ADDRESS LINE 2
HOADDR3  DS    CL24     ADDRESS LINE 3
HOATTN   DS    CL24     ATTENTION LINE
*
HORATES  DS    0CL34  *RATE INFORMATION ***
HOAVSP   DS    PL3      AVERAGE S/P ROOM ALLOW
HOIRPD   DS    PL3      INPATIENT RATE PER DAY
HOORPD   DS    PL3      OUTPATIENT RATE PER DAY
HOPASP   DS    PL3      PREV AVER S/P ROOM ALLOW
HOAACE   DS    PL4      AVER ALLOW CHG EFF DATE
HOPIR    DS    PL3      PREV INPATIENT RATE
HOPIRC   DS    PL4      PREV INPAT RATE CHG DATE
HOPORAT  DS    PL3      PREV OUTPATIENT RATE
HOPORC   DS    PL4      PREV OUTPAT RATE CHG DATE
HOLACTDT DS    PL4      LAST ACTIVITY DATE
*
HOMTDREG DS    0CL32  *MONTH TO DATE REGULAR ***
HOMIRC   DS    PL3      MTD INPAT REG CASES
HOMORC   DS    PL3      MTD OUTPAT REG CASES
HOMIRD   DS    PL3      MTD INPAT REG DAYS
HOMORD   DS    PL3      MTD OUTPAT REG DAYS
HOMPPRB1 DS    PL4      MTD PAT PAY REG R/B1
HOMPPRB2 DS    PL4      MTD PAT PAY REG R/B2
HOMPPRB3 DS    PL4      MTD PAT PAY REG R/B3
HOMPPRNI DS    PL4      MTD PAT PAY NONINCL SERV
HOMPPRD  DS    PL4      MTD PAT PAY REG DED
*
HOMTDFEP DS    0CL32  *MONTH TO DATE FEP ***
HOMIFC   DS    PL3      MTD INPAT FEP CASES
HOMOFC   DS    PL3      MTD OUTPAT FEP CASES
HOMIFD   DS    PL3      MTD INPAT FEP DAYS
HOMOFD   DS    PL3      MTD OUTPAT FEP DAYS
HOMPPFB1 DS    PL4      MTD PAT PAY FEP R/B1
HOMPPFB2 DS    PL4      MTD PAT PAY FEP R/B2
HOMPPFB3 DS    PL4      MTD PAT PAY FEP R/B3
HOMPFNI  DS    PL4      MTD PAT FEP NONINCL
HOMPPFD  DS    PL4      MTD PAT PAY FEP DED
*
HOMTDHST DS    0CL32  *MONTH TO DATE HOST ***
HOMIHC   DS    PL3      MTD INPAT HOST CASES
HOMOHC   DS    PL3      MTD OUTPAT HOST CASES
HOMIHD   DS    PL3      MTD INPAT HOST DAYS
HOMOHD   DS    PL3      MTD OUTPAT HOST DAYS
HOMPPHB1 DS    PL4      MTD PAT PAY HOST R/B1
HOMPPHB2 DS    PL4      MTD PAT PAY HOST R/B2
HOMPPHB3 DS    PL4      MTD PAT PAY HOST R/B3
HOMPHNI  DS    PL4      MTD PAT HOST NONINCL
HOMPHD   DS    PL4      MTD PAT HOST DED
*
HOMTDMSC DS    0CL73  *MONTH TO DATE MISC ***
HOMMCC   DS    PL4      MTD MED COV CHGS
HOMMPT   DS    PL4      MTD MED PAID TENT
HOMSCC   DS    PL4      MTD SURG COV CHGS
HOMSPT   DS    PL4      MTD SURG PAID TENT
HOMOCC   DS    PL4      MTD OUTPAT COV CHGS
HOMOPT   DS    PL4      MTD OUTPAT PAID TENT
HOMXCC   DS    PL4      MTD XRAY COV CHGS
HOMXPT   DS    PL4      MTD XRAY PAID TENT
HOMMCV   DS    PL4      MTD MAT COV CHGS
HOMMTPT  DS    PL4      MTD MAT PAID TENT
HOMOTCC  DS    PL4      MTD OTHER COV CHGS
HOMOTPT  DS    PL4      MTD OTHER PAID TENT
HOMTOTCC DS    PL5      MTD TOT COV CHGS
HOMTOTPD DS    PL5      MTD TOT PAID TENT
HOBCICA  DS    PL5      BC INPAT CK AMT
HOBCOCA  DS    PL5      BC OUTPAT CK AMT
HOSNACA  DS    PL5      SNA CHECK AMT
*
HOMTDSNA DS    0CL18  *MONTH TO DATE SNA ***
HOMSTC   DS    PL3      MTD SNA TOT CASES
HOMSTD   DS    PL3      MTD SNA TOT DAYS
HOMSTCHG DS    PL4      MTD SNA TOT CHGS
HOMSTPDT DS    PL4      MTD SNA TOT PAID TENT
HOMSTDED DS    PL4      MTD SNA TOT DEDUCT
*
HOYTDREG DS    0CL39  *YEAR TO DATE REG ***
HOYIRC   DS    PL3      YTD INPAT REG CASES
HOYORC   DS    PL3      YTD OUTPAT REG CASES
HOYIRD   DS    PL4      YTD INPAT REG DAYS
HOYORD   DS    PL4      YTD OUTPAT REG DAYS
HOYPPRB1 DS    PL5      YTD PAT PAY REG R/B1
HOYPPRB2 DS    PL5      YTD PAT PAY REG R/B2
HOYPPRB3 DS    PL5      YTD PAT PAY REG R/B3
HOYPPRNI DS    PL5      YTD PAT PAY REG NONINCL
HOYPPRD  DS    PL5      YTD PAT PAY REG DED
*
HOYTDFEP DS    0CL39  *YEAR TO DATE FEP ***
HOYIFC   DS    PL3      YTD INPAT FEP CASES
HOYOFC   DS    PL3      YTD OUTPAT FEP CASES
HOYIFD   DS    PL4      YTD INPAT FEP DAYS
HOYOFD   DS    PL4      YTD OUTPAT FEP DAYS
HOYPPFB1 DS    PL5      YTD PAT PAY FEP R/B1
HOYPPFB2 DS    PL5      YTD PAT PAY FEP R/B2
HOYPPFB3 DS    PL5      YTD PAT PAY FEP R/B3
HOYPPFNI DS    PL5      YTD PAT PAY FEP NONINCL
HOYPPFD  DS    PL5      YTD PAT PAY FEP DED
*
HOYTDHST DS    0CL39  *YEAR TO DATE HOST ***
HOYIHC   DS    PL3      YTD INPAT HOST CASES
HOYOHC   DS    PL3      YTD OUTPAT HOST CASES
HOYIHD   DS    PL4      YTD INPAT HOST DAYS
HOYOHD   DS    PL4      YTD OUTPAT HOST DAYS
HOYPPHB1 DS    PL5      YTD PAT PAY HOST R/B1
HOYPPHB2 DS    PL5      YTD PAT PAY HOST R/B3
HOYPPHB3 DS    PL5      YTD PAT PAY HOST R/B3
HOYPPHNI DS    PL5      YTD PAT PAY HOST NON-INCL
HOYPPHD  DS    PL5      YTD PAT PAY HOST DED
*
HOYTDMSC DS    0CL72  *YEAR TO DATE MISC ***
HOYMCC   DS    PL5      YTD MED COV CHGS
HOYMPT   DS    PL5      YTD MED PAID TENT
HOYSCC   DS    PL5      YTD SURG COV CHGS
HOYSPT   DS    PL5      YTD SURG PAID TENT
HOYOCC   DS    PL5      YTD OUTPAT COV CHGS
HOYOPT   DS    PL5      YTD OUTPAT PAID TENT
HOYXCC   DS    PL5      YTD XRAY CHGS
HOYXPT   DS    PL5      YTD XRAY PAID TENT
HOYMTCC  DS    PL5      YTD MAT COV CHGS
HOYMTPT  DS    PL5      YTD MAT PAID TENT
HOYOTCC  DS    PL5      YTD OTHER CHGS
HOYOTPT  DS    PL5      YTD OTHER PAID TENT
HOYTCC   DS    PL6      YTD TOT COV CHGS
HOYTPT   DS    PL6      YTD TOT PAID TENT
*
HOYTDSNA DS    0CL22  *YEAR TO DATE SNA ***
HOYSTC   DS    PL3      YTD SNA TOT CASES
HOYSTD   DS    PL4      YTD SNA TOT DAYS
HOYSNTC  DS    PL5      YTD SNA TOT CHGS
HOYSTPT  DS    PL5      YTD SNA TOT PAID TENT
HOYSNTD  DS    PL5      YTD SNA TOT DEDUCT
*
*
HOPYTREG DS    0CL32  *PREV YEAR TO DATE REG ***
HOPIRCA  DS    PL3      PREV YTD INPAT REG CASES
HOPORCA  DS    PL3      PREV YTD OUTPAT REG CASES
HOPIRD   DS    PL3      PREV YTD INPAT REG DAYS
HOPORD   DS    PL3      PREV YTD OUTPAT REG DAYS
HOPPPRB1 DS    PL4      PREV YTD PAT PAY REG R/B1
HOPPPRB2 DS    PL4      PREV YTD PAT PAY REG R/B2
HOPPPRB3 DS    PL4      PREV YTD PAT PAY REG R/B3
HOPPPNI  DS    PL4      PREV YTD PAT PAY NON-INCL
HOPPPD   DS    PL4      PREV YTD PAT PAY DED
*
HOPYTFEP DS    0CL32  *PREV YEAR TO DATE FEP ***
HOPIFC   DS    PL3      PREV YTD INPAT FEP CASES
HOPOFC   DS    PL3      PREV YTD OUTPAT FEP CASES
HOPIFD   DS    PL3      PREV YTD INPAT FEP DAYS
HOPOFD   DS    PL3      PREV YTD OUTPAT FEP DAYS
HOPPFB1  DS    PL4      PREV YTD PAT FEP R/B1
HOPPFB2  DS    PL4      PREV YTD PAT PAY FEP R/B2
HOPPFB3  DS    PL4      PREV YTD PAT PAY FEP R/B3
HOPPFNI  DS    PL4      PREV YTD PAT FEP NON-INCL
HOPPFD   DS    PL4      PREV YTD PAT FEP DED
*
HOPYTHST DS    0CL32  *PREV YEAR TO DATE HOST ***
HOPIHC   DS    PL3      PREV YTD INPAT HOST CASES
HOPOHC   DS    PL3      PREV YTD OUTPAT HOST CASES
HOPIHD   DS    PL3      PREV YTD INPAT HOST DAYS
HOPOHD   DS    PL3      PREV YTD OUTPAT HOST DAYS
HOPPHB1  DS    PL4      PREV YTD PAT HOST R/B1
HOPPHB2  DS    PL4      PREV YTD PAT HOST R/B2
HOPPHB3  DS    PL4      PREV YTD PAT HOST R/B3
HOPPHNI  DS    PL4      PREV YTD PAT HOST NON-INCL
HOPPHD   DS    PL4      PREV YTD PAT HOST DED
*****
*****
*****
         AIF   ('&DSECT' EQ 'YES').CSCT
         MEXIT
.CSCT    ANOP
&SYSECT  CSECT
         MEXIT
         MEND
./ ADD NAME=IAPS     0100-02135-02135-1228-00157-00157-00000-VBCMACS
         MACRO
         IAPS  &SMBBASE=,     DSECT NAME IS SMB                        ,
               &TCTBASE=      DSECT NAME IS TCT
.**********************************************************************
.*                                                                    *
.*       THE IAPS MACRO GENERATES DSECTS FOR THE                      *
.*       BLOCKS USED BY THE APPLICATIONS SCHEDULER.                   *
.*                                                                    *
.*       IF A KEYWORD ENDING IN -BASE IS SPECIFIED, THE CORRESPONDING *
.*       DSECT (OR CSECT) IS GENERATED.  IF THE KEYWORD IS OMITTED,   *
.*       THE CORRESPONDING DSECT (OR CSECT) IS NOT GENERATED.         *
.*                                                                    *
.**********************************************************************
.*
.*
.*
.*
.*
***********************************************************************
*                                                                     *
*        APPLICATION PROGRAM SCHEDULER DUMMY SECTIONS                 *
*                                                                     *
***********************************************************************
*
*
*
         AIF   ('&SMBBASE' EQ  '').ENDSMB
SMB      DSECT
***********************************************************************
*                                                                     *
*        SMB - SCHEDULER MESSAGE BLOCK                                *
*                                                                     *
***********************************************************************
SMBQEBP  DS    A              BACKWARD POINTER
SMBQEFP  DS    A              FORWARD POINTER
         QDEST DSECT=NO,PRE=SMB                                @BM01444
         SPACE 1
SMBQFLG1 EQU   SMBFLG1       SMB QUEUE FLAG 1                  @BM01444
*              LABEL RETAINED FOR COMPATABILITY
         SPACE 1
SMBQFLG2 EQU   SMBFLG2        SMB QUEUE FLAG 2                 @BM01444
*              LABEL RETAINED FOR COMPATABILITY
         ORG   SMBAVGLN       ORG BACK TO MAP QMGR FIELDS      @BM01444
*              WITH ORIGINAL SMB DEFINITIONS FOR COMPATABILITY
         SPACE 1
SMBQAVGL DS    H              AVERAGE MESSAGE LENGTH FOR DESTINATION
SMBDQCT  DS    H              NUMBER OF MESSAGES DEQUEUED
SMBNQCT  DS    H              NUMBER OF MESSAGES ENQUEUED
*:                             NOTE: SMBNQCT-SMBDQCT=OLD SMBNQCT FIELD
SMBTRNCD DC    D'0'           SMB TRANSACTION CODE
SMBSTATS DC    X'00'          SMB STATUS BYTE
SMBSRESP EQU   X'80'          RESPONSE MODE
SMBSMULT EQU   X'40'          MULTI-SEGMENT TRANSACTION
SMBSNOQU EQU   X'20'          SMB STOPPED FOR QUEUEING         @BM02035
SMBNOSC  EQU   X'10'          DON'T SCHEDULE THIS SMB          @BM02035
SMBLOCK  EQU   X'08'          SMB LOCKED                       @BM02035
SMBSINQU EQU   X'04'          NON-INQUIRY ONLY
*:       EQU   X'02'          RESERVED
SMBSSMB  EQU   X'01'          ALWAYS 1, INDICATES SMB.         @BM02709
         SPACE 1
SMBFLAG1 DS    C              SMB FLAG 1
SMB1CONV EQU   X'80'            CONVERSATIONAL SMB
SMB1UPP  EQU   X'40'            UPPER CASE TRANSLATION REQUESTED
SMB1CSPA EQU   X'20'            INCORE SPA REQUEST
SMB1NORE EQU   X'10'            NON-RECOVERABLE TRANSACTION    @BI590
SMB1INIT EQU   X'08'            INIT PGM BFRS WITH EACH NEW MESSAGE
SMBAGE   EQU   X'04'            SMB IS AN AGING SMB
SMBENQ   EQU   X'02'            SMB IS ENQUEUED ON TCT
SMBPST   EQU   X'01'            SMB IS ENQUEUED ON PST
         SPACE 1
SMBFLAG2 DS    C              SMB FLAG 2                       @BI590
SMB2FIXL EQU   X'80'            FIXED LENGTH SPA.              @BI590
*:       EQU   X'40'            RESERVED.
*:       EQU   X'20'            RESERVED.
SMB2DRRT EQU   X'10'            DIRECTED ROUTING DEFINED       @BM30420
SMBFPPTX EQU   X'08'            IMS/VS/FP POTENTIAL TX         @BIAH3WI
SMBFPXCL EQU   X'04'            IMS/VS/FP EXCLUSIVE TX         @BIAH3WI
SMB2SMS  EQU   X'02'            SMB STOPPED MSG SENT.          @BM01456
SMB2RMT  EQU   X'01'            ALWAYS ONE FOR REMOTE SMB.     @BM01456
         SPACE
SMBFLAG3 DS    C              SMB FLAG 3                       @BI517
SMB3NOCT EQU   X'80'            ON INTENT SCHEDULE ANY         @BI517
SMB3HICT EQU   X'40'            ON INTENT SCHEDULE HIGH ONLY   @BI517
SMB3NXCL EQU   X'20'            ON INTENT SCHEDULE NEXT CLASS  @BI517
SMB3PARL EQU   X'10'            PARALLEL LIMIT SPECIFIED.      @BM02709
SMB3WFI  EQU   X'08'            WAIT FOR INPUT TRANSACTION
SMB3QMW  EQU   X'04'            WFI TRANSACTION WAITING
SMB3SDEQ EQU   X'02'            SMBDEQ CALLED DURING SCHEDULING@BM03997
SMB3SMVR EQU   X'01'            SMB IS IN/WAITING FOR MOVER    @BM01456
         SPACE 1
SMBQCBPR DS    C              SMB CURRENT PRIORITY
SMBSLTE  DS    C              USER EDIT ROUTINE NUMBER
SMBPRIOR DS    C              LIMIT AND NORMAL PRIORITY
SMBCLASS DS    C              SMB MESSAGE CLASS FOR SCHEDULING
SMBCTMP  DS    CL2            COMMUNICATION TERMINAL MATRIX PTR (REL)
SMBCPMP  DS    CL2            COMMUNICATION PASSWORD MATRIX PTR (REL)
SMBRCTE  DS    0A             ROUTING CODE TABLE ENTRY ADDRS   @BIAH3WI
SMBSPAL  DS    H              LENGTH OF SPA
SMBLMTCT DS    H              ENQUEUED LIMIT COUNT
SMBCOUNT DS    H              PROCESSING LIMIT COUNT
SMBTIME  DS    H              TIME SLICE
SMBSAVPR DS    C              CURRENT PRIORITY BEFORE DEADLOCK @BA52597
SMBWFICT DC    XL1'00'        NO. OF RGNS WAITING FOR INPUT    @BA54379
SMBSIDR  DS    C              DESTINATION SID.                 @BI895
SMBSIDL  DS    C              LOCAL SID.                       @BI895
SMBPDIR  DS    A              PSB DIRECTORY ADDRESS (RELATIVE) @BM02419
SMBSEGNO DC    H'0'           OUTPUT LIMIT OF MSG SEGMENTS     @BM01444
SMBSEGSZ DC    H'0'           OUTPUT MAX SEGMENT LENGTH        @BM01444
SMBRGNS  DS    H              NO. OF RGNS TRANS CURRENTLY SCHD @BI517
SMBPARLM DS    H              PARLIM VALUE FROM TRANSACT STMT  @BI517
SMBAOIFL DS    C              AOI FLAGS                        @BIB98
SMBTCMDA EQU   X'80'          TRAN AUTHORIZED TO ISSUE CMDS    @BIB98
SMBAOIC1 EQU   X'40'          SECURITY VIOLATION CNTR 1        @BIB98
SMBAOIC2 EQU   X'20'          SECURITY VIOLATION CNTR 2        @BIB98
*        EQU   X'1F'          RESERVED
         DS    C              RESERVED                         @BIB98
SMBAOIPT DS    AL2(0)         COMMAND SECURITY MATRIX PTR      @BIB98
         EJECT
.ENDSMB  AIF   ('&TCTBASE' NE '').GENTCT
         MEXIT
.GENTCT  ANOP
***********************************************************************
*                                                                     *
*        TCT - TRANSACTION CLASS TABLE                                *
*                                                                     *
***********************************************************************
TCT      DSECT
TCTQEUC  DC    XL1'00'  QE USE COUNT
TCTQEBP  DC    XL3'00'  QE BACKWARD POINTER
TCTQEST  DC    XL1'0A'  QE STATUS
TCTQEFP  DC    XL3'00'  QE FORWARD POINTER
TCTFLAG  DC    XL1'80'  TCT ENTRY STATUS
TCTACT   EQU   128      THE CLASS IS ACTIVE - CAN BE SCHEDULED
TCTINT   EQU   32       COULD NOT SCHEDULE - INTERNAL CAUSE
TCTCLAS  DC    XL1'00'  CLASS OF THIS TCT ENTRY
TCTENQCT DC    H'0000'  NUMBER OF SMB'S ENQ ON THIS TCT ENTRY
TCTPRIOR DC    F'0'     HIGHEST PRIORITY POINTER
TCTQCBS  DS    0H       PRIORITY LEVELS                        @BA52597
TCTQCB15 DC    F'0'     A(LAST SMB) AT PRIORITY 15 (DEADLOCK)  @BA52597
TCTQCB14 DC    F'0'     A(LAST SMB) AT PRIORITY 14             @BA52597
TCTQCB13 DC    F'0'     A(LAST SMB) AT PRIORITY 13             @BA52597
TCTQCB12 DC    F'0'     A(LAST SMB) AT PRIORITY 12             @BA52597
TCTQCB11 DC    F'0'     A(LAST SMB) AT PRIORITY 11             @BA52597
TCTQCB10 DC    F'0'     A(LAST SMB) AT PRIORITY 10             @BA52597
TCTQCB09 DC    F'0'     A(LAST SMB) AT PRIORITY 09             @BA52597
TCTQCB08 DC    F'0'     A(LAST SMB) AT PRIORITY 08             @BA52597
TCTQCB07 DC    F'0'     A(LAST SMB) AT PRIORITY 07             @BA52597
TCTQCB06 DC    F'0'     A(LAST SMB) AT PRIORITY 06             @BA52597
TCTQCB05 DC    F'0'     A(LAST SMB) AT PRIORITY 05             @BA52597
TCTQCB04 DC    F'0'     A(LAST SMB) AT PRIORITY 04             @BA52597
TCTQCB03 DC    F'0'     A(LAST SMB) AT PRIORITY 03             @BA52597
TCTQCB02 DC    F'0'     A(LAST SMB) AT PRIORITY 02             @BA52597
TCTQCB01 DC    F'0'     A(LAST SMB) AT PRIORITY 01             @BA52597
TCTQCB00 DC    F'0'     A(LAST SMB) AT PRIORITY 00 (BMP)       @BA52597
         EJECT
         MEXIT
         MEND
./ ADD NAME=ICATCHER 0102-84279-84279-1538-00020-00020-00006-VBCMACS
         MACRO
&X       ICATCHER &DATA=
         GBLB  &GLBL
         LCLC  &TIME,&HOUR,&MINUTE,&ID
         EJECT ,
         SPACE 3
&ID      SETC  '&SYSECT'
&TIME    SETC  '&SYSTIME'
&HOUR    SETC  '&TIME'(1,2)
&MINUTE  SETC  '&TIME'(4,2)
         $PRINTC5 '&ID          '
         SPACE 3
         $PRINTC5 '&SYSDATE        '
         SPACE 3
         $PRINTC5 ' &HOUR.:&MINUTE          '
         AIF   (T'&DATA EQ 'O').GETOUT
         SPACE 3
         $PRINTC5 '&DATA                 '
.GETOUT  EJECT ,
         MEND
./ ADD NAME=IEAPMP   0100-02135-02135-1228-00028-00028-00000-VBCMACS
         MACRO
         IEAPMP
         GBLB  &IEAPMPS
.*A000000-999999                                                 Y01014
.*A019100,019600-019920                                          Y02014
.*C006500,008500,009000,019000,019500                            Y02014
.*D007500,008000,009500-018000                                   Y02014
.* DETERMINE IF MAP ALREADY EXPANDED
         AIF   (&IEAPMPS).XPNDED
.* EXPAND THE MAPPING MACRO
.EXPAND  ANOP
&IEAPMPS SETB  1
*
* SYMBOLIC EID TABLE FOR THE HOOK MACRO
*
IEAABOF  EQU   X'0F0200'
IEASVCH  EQU   X'010000'
IEAPINT  EQU   X'060101'
IEATINT  EQU   X'060200'
IEAEINT  EQU   X'060201'
IEASTAE  EQU   X'040002'
IEAFRR   EQU   X'040003'
IEADISP1 EQU   X'000001'
IEADISP2 EQU   X'000002'
IEADISP3 EQU   X'000003'
IEADISP4 EQU   X'000004'
IEASVCD  EQU   X'0F0100'
.XPNDED  MEND
./ ADD NAME=IECDCAT  0100-02135-02135-1228-00067-00067-00000-VBCMACS
*%       GOTO  CATPLS1;             /* BILINGUAL MACRO
         MACRO
         IECDCAT
         DSECT
CAT      DS    0F
         SPACE 1                   */
*%CATPLS1 : ;
*/* ******************************************************************/
*/*                                                                  */
*/*  THIS DSECT DESCRIBES AN ENTRY IN THE CHANNEL AVAILABILITY       */
*/*  TABLE. THE TABLE IS CPU RELATED AND RESIDES IN THE PCCA.        */
*/*  EACH PHYSICAL CHANNEL ATTACHED TO THE CPU CONTAINS AN ENTRY     */
*/*  IN THE CAT AND IS INDEXED BY THAT CHANNEL NUMBER. THE ENTRY     */
*/*  CONTAINS THE CHANNEL ID, CHANNEL STATUS, AND CHANNEL            */
*/*  STATISTICS.                                                     */
*/*  THE FOLLOWING FIELDS ARE MODIFIED BY  THE I/O SUPERVISOR.       */
*/*  THE MODIFICATIONS ARE SERIALIZED VIA DISABLED STATE AND         */
*/*  ALWAYS IN THE CPU OWNING THIS CAT.                              */
*/*         CATFLA                                                   */
*/*         CATSIOCT                                                 */
*/*                                                                  */
*/* ******************************************************************/
* %      GOTO CATPLS2;             /*
         SPACE 1
CATFLG   DS    XL1                 CAT ENTRY FLAG BYTE (NON-IOS)
CATRES1  EQU   X'80'               RESERVED
CATNOP   EQU   X'40'               CHANNEL NOT OPERATIVE
CATNGEN  EQU   X'20'               CHANNEL NOT SYSGENNED
CATNCPU  EQU   X'10'               CHANNEL NOT ON THIS CPU
CATNID   EQU   X'08'               CHANNEL ID (CATCHID) INVALID
CATFLG5  EQU   X'04'               RESERVED
CATFLG6  EQU   X'02'               RESERVED
CATFLG7  EQU   X'01'               RESERVED
CATFLA   DS    XL1                 IOS FLAG BYTE
CATBSY   EQU   X'80'               CHANNEL BUSY
CATIORST EQU   X'40'               CHAN NEED I/O RESTART       @G552PLM
CATFLARS EQU   X'3F'               RESERVED                    @G552PLM
CATSIOCT DS    XL2                 CHANNEL SIO COUNT
CATCHID  DS    XL4                 CHANNEL ID
CATELP2  EQU    3                  ENTRY LENGTH IN POWERS OF 2
CATEL    EQU   *-CAT               CHANNEL TABLE ENTRY LENGTH
         MEND  ,                   */
*%CATPLS2 : ;
*   DCL 1 CAT  BASED(CATPTR),
*       2 CATENTRY CHAR(1),        /* ENTRY NAME              */
*         3 CATFLG CHAR(1),        /* CAT FLAG BYTE (NON-IOS) */
*          4 CATRES1 BIT(1),       /* RESERVED                */
*          4 CATNOP  BIT(1),       /* CHANNEL NOT OPERATIVE   */
*          4 CATNGEN BIT(1),       /* CHANNEL NOT SYSGENNED   */
*          4 CATNCPU BIT(1),       /* CHANNEL NOT ON THIS CPU */
*          4 CATNID  BIT(1),       /* CHANNEL ID INVALID      */
*          4 CATFLG5 BIT(1),       /* RESERVED                */
*          4 CATFLG6 BIT(1),       /* RESERVED                */
*          4 CATFLG7 BIT(1),       /* RESERVED                */
*       2 CATFLA   BIT(8),         /* IOS FLAG BYTE           */
*         3 CATBSY  BIT(1),        /* CHANNEL BUSY            */
*         3 CATIORST BIT(1),       /* CHAN NEEDS I/O RESTART @G552PLM*/
*         3 CATFLARS BIT(6),       /* RESERVED               @G552PLM*/
*       2 CATSIOCT  CHAR(2),       /* CHANNEL SIO COUNT       */
*       2 CATCHID   CHAR(4),       /* CHANNEL ID              */
*       2 CATEND  CHAR(0);         /* END OF CAT              */
*   DCL CATELP2 BIT(8) CONSTANT('03'X);  /*
*                                     ENTRY LENGTH IN
*                                     POWERS OF 2             */
*
*%DCL  CATEL  CHAR;                /* LENGTH OF CAT           */
*%CATEL='ADDR(CATEND)-ADDR(CATENTRY)';
./ ADD NAME=IECDCRCA 0100-02135-02135-1228-00126-00126-00000-VBCMACS
*%GOTO CRCAPLS ;   /* BILINGUAL MAPPING */
         MACRO
         IECDCRCA   &DSECT=YES
.*A000000-999999                                                Y30CQLF
*%CRCAPLS: ;
*              /* BILINGUAL MAPPING
***********************************************************************
********************       OS/VS2 REL3             ********************
*****     CHANNEL RECONFIGURATION HARDWARE COMMUNICATIONS AREA    *****
********************        MAY 16, 1974           ********************
**********************************************************************/
*%GOTO CRCAPL2 ;   /*
         AIF   ('&DSECT' EQ 'YES').DSECT
IECVCRCA DS    0D
         AGO   .NDSECT
.DSECT   ANOP
CRCA     DSECT
         DS    0D
.NDSECT  ANOP
CRCAID   DC    CL4'CRCA'               CRCA IDENTIFIER
***********************************************************************
***                      CRCA FLAGS                                 ***
***********************************************************************
CRCAFLGS DS    0F                      FLAGS
CRCAFLG1 DC    X'00'                   FIRST FLAG BYTE
CRCADIAG EQU   X'80'                   CRH CONNECTION OUTSTANDING
CRCADINT EQU   X'40'                   CRH INTERRUPT - FLAG FOR CCH
CRCACCH  EQU   X'20'                   CHANNEL BURP  - FLAG FOR IOS
CRCAHIO  EQU   X'10'                   CRH INTERRUPT - FLAG FROM HIO
CRCAFTIM EQU   X'08'                   CRHT 1ST TIME ENTERED   @ZM30496
*
CRCAFLG2 DC    X'00'                   SECOND FLAG BYTE
CRCAFLG3 DC    X'00'                   RESERVED
CRCAFLG4 DC    X'00'                   RESERVED
***********************************************************************
****              MAINTENANCE CONTROL WORD                         ****
***********************************************************************
CRCAMCW  DS    0D                      USED BY ALL CRH ROUTINES TO
*                                      CONTROL THE HARDWARE
CRCAMCWZ DC    X'01'                   MCW CHANNEL FUNCTION BYTE
CRCAMCWY EQU   X'01'                   BIT ALWAYS ON IN MCW FOR CRH
         DC    XL2'00'                 UNUSED BY CRH
CRCAMCWF DC    X'00'                   MCW CRH FUNCTION BYTE
CRCAMCWI EQU   X'20'                   MCW FOR CRH
CRCAMCWM EQU   X'10'                   ORING FLAG-MAKE CRH CONNECTION
CRCAMCWB EQU   X'EF'                   ANDING FLAG-BREAK CRH CONNECTION
         DC    F'0'                    UNUSED BY CRH
***********************************************************************
***                         ADDRESSES                               ***
***********************************************************************
CRCACRHT DC    V(IECVCRHT)             ADDRESS OF TIMER POP ROUTINE
CRCACRH1 DC    V(IECVCRH1)             ADDRESS OF TCH HOOK ROUTINE
CRCACRH2 DC    V(IECVCRH2)             ADDRESS OF SIO HOOK ROUTINE
CRCACRH3 DC    V(IECVCRH3)             ADDRESS OF SENSE HOOK ROUTINE
CRCACINT DC    V(IECVCINT)             ADDRESS OF CRH SLIH
CRCAPCCA DC    A(0)                    ADDRESS OF PCCA FOR DEAD CPU
CRCACAT  DC    A(0)                    ADDRESS OF CAT FOR DEAD CPU
CRCARSV1 DC    2F'0'                   RESERVED
***********************************************************************
****                        CRCA WORK AREAS                        ****
***********************************************************************
CRCACHAN DC    H'0'                    CHANNEL ID OF CONNECTED CHANNEL
CRCARSV2 DC    H'0'                    RESERVED
CRCACTIM DC    D'0'                    CURRENT TIME - USED BY IECVCRHT
CRCAITIM DC    D'0'                    TIME OF LAST I/O INTERRUPT
CRCARSV3 DC    2F'0'                   RESERVED
CRCAEND  EQU   *
***********************************************************************
         MEND  ,                       */
*%CRCAPL2: ;
  DCL 1 CRCA BASED(CRCAPTR),
        2 CRCAID CHAR(4),              /* CRCA IDENTIFIER            */
 /********************************************************************/
 /*                         CRCA FLAGS                               */
 /********************************************************************/
        2 CRCAFLGS,                    /* FLAGS                      */
          3 CRCAFLG1 CHAR(1),          /* FIRST FLAG BYTE            */
            4 CRCADIAG BIT(1),         /* CRH CONNECTION OUTSTANDING */
            4 CRCADINT BIT(1),         /* CRH INTERRUPT-FLAG FOR CCH */
            4 CRCACCH  BIT(1),         /* CHANNEL BURP -FLAG FOR IOS */
            4 CRCAHIO  BIT(1),         /* CRH INTERRUPT-FLAG FROM HIO*/
            4 CRCAFTIM BIT(1),         /* CRHT 1ST TIME IN   @ZM30496*/
            4 *        BIT(3),         /* RESERVED           @ZM30496*/
          3 CRCAFLG2 CHAR(1),          /* SECOND FLAG BYTE           */
          3 CRCAFLG3 CHAR(1),          /* RESERVED                   */
          3 CRCAFLG4 CHAR(1),          /* RESERVED                   */
 /********************************************************************/
 /*                         MAINTENANCE CONTROL WORD                 */
 /********************************************************************/
        2 CRCAMCW CHAR(8) BDY(DWORD),  /* USED BY ALL CRH ROUTINES
                                          TO CONTROL THE HARDWARE    */
          3 CRCAMCWZ CHAR(1),          /* CHANNEL FUNCTION BYTE      */
            4 *        BIT(7),         /* UNUSED BY CRH              */
            4 CRCAMCWY BIT(1),         /* BIT ALWAYS ON FOR CRH      */
          3 *        CHAR(2),          /* UNUSED BY CRH              */
          3 CRCAMCWF CHAR(1),          /* MCW CRH FUNCTION BYTE      */
            4 *        BIT(2),         /* UNUSED BY CRH              */
            4 CRCAMCWI BIT(1),         /* BIT ON-MCW FOR CRH         */
            4 CRCAMCWM BIT(1),         /* BIT ON-MAKE CRH CONNECTION
                                         BIT OFF-BREAK CRH CONNECTION*/
            4 CRCAMCWC BIT(4),         /* CHANNEL NUMBER OF CONNECTED
                                          CHANNEL                    */
          3 *        CHAR(4),          /* UNUSED BY CRH              */
 /********************************************************************/
 /*                         ADDRESSES                                */
 /********************************************************************/
        2 CRCACRHT PTR(31),            /* ADDRESS OF TIMER POP RTN.  */
        2 CRCACRH1 PTR(31),            /* ADDRESS OF TCH HOOK ROUTINE*/
        2 CRCACRH2 PTR(31),            /* ADDRESS OF SIO HOOK ROUTINE*/
        2 CRCACRH3 PTR(31),            /* ADDRESS OF SENSE HOOK RTN. */
        2 CRCACINT PTR(31),            /* ADDRESS OF CRH SLIH        */
        2 CRCAPCCA PTR(31),            /* ADDR OF PCCA FOR DEAD CPU  */
        2 CRCACAT  PTR(31),            /* ADDRESS OF CAT FOR DEAD CPU*/
        2 CRCARSV1 CHAR(8),            /* RESERVED                   */
 /********************************************************************/
 /*                         CRCA WORK AREAS                          */
 /********************************************************************/
        2 CRCACHAN CHAR(2) BDY(WORD),  /* CHANNEL ID OF CONNECTED
                                          CHANNEL                    */
        2 CRCARSV2 CHAR(2),            /* RESERVED                   */
        2 CRCACTIM CHAR(8) BDY(DWORD), /* CURRENT TIME - USED BY
                                          IECVCRHT                   */
        2 CRCAITIM CHAR(8) BDY(DWORD), /* TIME OF LAST I/O INTERRUPT */
        2 CRCARSV3 CHAR(8),            /* RESERVED                   */
        2 CRCAEND  CHAR(*);
 /********************************************************************/
./ ADD NAME=IECDIOQ  0100-02135-02135-1228-00066-00066-00000-VBCMACS
* %      GOTO IOQPLS;              /* GO TO THE PLS VERSION   */
         MACRO
         IECDIOQ
IOQ      DSECT
         SPACE 1
****************************************************************
*                                                              *
*   THIS DSECT DESCRIBES THE ELEMENT USED BY THE I/O           *
*   SUPERVISOR WHEN QUEUING I/O REQUESTS TO A LOGICAL          *
*   CHANNEL OR TO A DEVICE (UCB).                              *
*                                                              *
****************************************************************
         SPACE 1
IOQLNK   DS    A                   LINK FIELD
IOQFLA   DS    XL1                 IOQ FLAG BYTE A
IOQSLCH  EQU   X'80'               IOQ ASSOC WITH A SENSE LCH
IOQENQ   EQU   X'40'               IOQ IS ENQUEUED
IOQLBSY  EQU   X'20'               UPDATE LCHLGBSY COUNTER
IOQPBSY  EQU   X'10'               UPDATE LCHPYBSY COUNTER
*        EQU   X'08'               RESERVED
*        EQU   X'04'               RESERVED
*        EQU   X'03'               RESERVED
IOQFLB   DS    XL1                 IOQ FLAG BYTE B
IOQRESV  EQU   X'80'               RESERVE FLAG
IOQRLSE  EQU   X'40'               RELEASE FLAG
IOQALOC  EQU   X'3C'               ALLOCATED INDICATOR TO IECVSMGR
*        EQU   X'03'               RESERVED
IOQPRI   DS    XL1                 PRIORITY
IOQPTH   DS    XL1                 CURRENT PATH MASK
IOQIOSB  DS    A                   ADDRESS OF IOSB
IOQL     EQU   *-IOQLNK            LENGTH OF IOQ
         MEND
*%IOQPLS: ;
*
*/*************************************************************/
*/*                                                           */
*/*  THIS STRUCTURE DESCRIBES THE ELEMENT USED BY THE I/O     */
*/*  SUPERVISOR WHEN QUEUING  I/O REQUESTS  TO A  LOGICAL     */
*/*  CHANNEL OR TO A DEVICE (UCB).                            */
*/*                                                           */
*/*************************************************************/
*/*                                                           */
*/*   05/30/72  LEVEL=00                                      */
*/*                                                           */
*/*************************************************************/
*
*   DCL 1 IOQ  BDY(WORD)  BASED(IOQPTR),
*       2 IOQLNK    PTR(31),       /* LINK FIELD              */
*       2 IOQFLAGS  PTR(31),       /* ADDRESS OF IOSB         */
*         3 IOQFLA  BIT(8),        /* IOQ FLAG BYTE A         */
*          4 IOQSLCH  BIT(1),      /* IOQ ASSOC WTH SENSE  LCH*/
*          4 IOQENQ   BIT(1),      /* IOQ IS ENQUEUED         */
*          4 IOQLBSY  BIT(1),      /* UPDATE LCHLGBSY COUNTER */
*          4 IOQPBSY  BIT(1),      /* UPDATE LCHPYBSY COUNTER */
*          4 *        BIT(4),      /* RESERVED                */
*         3 IOQFLB  BIT(8),        /* IOQ FLAG BYTE B         */
*           4 IOQRESV BIT(1),      /* RESERVE FLAG            */
*           4 IOQRLSE BIT(1),      /* RELEASE FLAG            */
*           4 *       BIT(6),      /* RESERVED                */
*         3 IOQPRI  CHAR(1),       /* PRIORITY                */
*         3 IOQPTH  CHAR(1),       /* CURRENT PATH MASK       */
*       2 IOQIOSB   PTR(31),       /* ADDRESS OF IOSB         */
*       2 IOQEND    CHAR(0);       /* END OF IOQ              */
*
*%DCL IOQL  CHAR;                  /* LENGTH OF IOQ           */
*%IOQL='ADDR(IOQEND)-ADDR(IOQLNK)';
./ ADD NAME=IECDIPIB 0100-02135-02135-1228-00162-00162-00000-VBCMACS
* %      GOTO IPIBPLS;             /* GO TO PLS VERSION       */
         MACRO
         IECDIPIB   &DSECT=YES
         AIF   ('&DSECT' EQ 'NO').IPIB1
IPIB     DSECT
         AGO   .IPIB2
.IPIB1   ANOP
IPIB     DS    0D
.IPIB2   ANOP
         SPACE 1
****************************************************************
*                                                              *
*   THIS DSECT DESCRIBES THE IOS PURGE INTERFACE BLOCK WHICH   *
*   IS BUILT IN THE PURGE WORK AREA. IT IS USED TO HOLD ALL    *
*   THE INFORMATION THAT IS COMMUNICATED BETWEEN PURGE AND     *
*   THE CHANNEL SCHEDULER AND ITS DRIVERS.                     *
*                                                              *
****************************************************************
         SPACE 1
IPIBOPT  DS    XL1                 OPTIONS NEEDED BY DRIVERS
*                                  FOR CHANNEL SCHEDULER WHEN
*                                  PURGING THEIR QUEUES.
IPIBMEM  EQU   X'80'               ASID PURGE WAS SPECIFIED
IPIBTASK EQU   X'40'               TCB PURGE WAS SPECIFIED IF
*                                  ASID PURGE WAS NOT
*                                  SPECIFIED
IPIBRBP  EQU   X'20'               RB PURGE SPECIFIED
IPIBPOST EQU   X'10'               POST THE ECBS RELATED TO THE
*                                  I/O REQUESTS THAT ARE PURGED
IPIBREL  EQU   X'08'               PURGE ONLY REQUESTS THAT ARE
*                                  MARKED RELATED
IPIBHALT EQU   X'04'               HALT I/O REQUESTS - DO NOT
*                                  BUILD A CHAIN FOR RESTORE
IPIBOTCB EQU   X'02'               PURGE SO THAT I/O REQUESTS
*                                  MAY BE RESTORED TO THE
*                                  ORIGINATING TCB
         SPACE 1
IPIBDVID DS    XL1                 DRIVER ID FOR DSID PURGE  DCRR 21082
*                                  DEFAULT VALUE OF X'00'    DCRR 21082
*                                  IMPLIES EXCP              DCRR 21082
         DS    XL2                 RESERVED
IPIBCNT  DS    A                   COUNT OF I/O REQUESTS TO BE
*                                  COMPLETED. DECREMENTED BY
*                                  IOS DRIVERS WHEN I/O EVENT
*                                  COMPLETES
IPIBECB  DS    A                   ECB TO BE POSTED WHEN IPIBCNT
*                                  GOES TO ZERO. PURGE WAITS ON
*                                  THIS ECB WHEN THE COUNT IS
*                                  ESTABLISHED.
IPIBARG  DS    A                   PURGE ARGUMENT. IF ASID
*                                  PURGE, THE RIGHT TWO BYTES
*                                  CONTAIN THE ASID OF THE ASID
*                                  BEING PURGED AND THE LEFT
*                                  TWO BYTES CONTAIN THE SIGN
*                                  BIT OF THE ASID. IF TCB
*                                  PURGE, THEN THE TCB ADDRESS.
IPIBSRB  DS    A                   POINTER TO FIRST SRB ON CHAIN
*                                  OF SRBS THAT HAVE BEEN COL-
*                                  LECTED FOR RETURN TO THE
*                                  APPROPRIATE DRIVER OF THE
*                                  CHANNEL SCHEDULER.
IPIBIO   DS    A                   POINTER TO I/O REQUEST CHAIN
*                                  RETURNED TO PURGE FOR PLACE-
*                                  MENT ON THE PIRL.
IPIBDVRU DS    A                   POINTER TO ADDITIONAL INFOR-
*                                  MATION THE DRIVER MAINTAINS
*                                  INSURE TO THE PROPER RESTOR-
*                                  ATION OF ITS QUEUE OF I/O
*                                  REQUESTS (E.G.PROTECT KEYS
*                                  TCB ADDRESSES ETC)
IPIBPIRL DS    A                   POINTER TO PIRL FOR THIS
*                                  PURGE REQUEST.
IPIBPSQ  DS    A                   POINTER TO CHAIN OF I/O RE-
*                                  QUESTS INVOLVED WITH THIS
*                                  PURGE FOUND BY ROUTINES RUN-
*                                  NING ASYNCHRONOUSLY WITH THE
*                                  PURGE ROUTINE (E.G. THE IN-
*                                  TERRUPT HANDLER).
IPIBLNK  DS    A                   MAY BE A MAX OF 2 IPIBS/ASID@YM07220
*                                  IF SO, THIS POINTS TO 2ND  @YM07220
*                                  IPIB WHICH MUST BE A HALT OR = 0
         MEND
*%IPIBPLS: ;
*
* /************************************************************/
* /*                                                          */
* /*   THIS STRUCTURE DESCRIBES THE IOS PURGE INTERFACE BLOCK */
* /*   WHICH IS BUILT IN THE PURGE WORK AREA . IT IS USED TO  */
* /*   HOLD ALL THE INFORMATION THAT IS COMMUNICATED BETWEEN  */
* /*   PURGE AND THE CHANNEL SCHEDULER AND ITS DRIVERS.       */
* /*                                                          */
* /************************************************************/
*
*DCL 1 IPIB  BDY(WORD)  BASED(IPIBPTR),
*    2 IPIBOPT     BIT(8),         /* OPTIONS NEEDED BY DRVRS
*                                     OF CHANNEL SCHEDULR WHEN
*                                     PURGING THEIR QUEUES    */
*     3 IPIBMEM    BIT(1),         /* ASID   PURGE WAS SPECFD */
*     3 IPIBTASK   BIT(1),         /* TCB PURGE WAS SPECIFIED
*                                     IF ASID   PURGE WAS NOT */
*     3 IPIBRBP    BIT(1),         /* RB PURGE SPECIFIED      */
*     3 IPIBPOST   BIT(1),         /* POST THE ECBS RELATED TO
*                                     THE I/O REQUESTS THAT
*                                     ARE PURGED              */
*     3 IPIBREL    BIT(1),         /* PURGE ONLY REQUESTS THAT
*                                     ARE MARKED RELATED      */
*     3 IPIBHALT   BIT(1),         /* HALT I/O REQUESTS - DO
*                                     NOT BUILD A CHAIN FOR
*                                     RESTORE                 */
*     3 IPIBOTCB   BIT(1),         /* PURGE SO I/O REQUESTS
*                                     MAY BE RESTORED TO THE
*                                     ORIGINATING TCB         */
*     3 *          BIT(1),         /* RESERVED                */
*
*    2 IPIBDVID    CHAR(1),        /* DRIVER ID FOR DSID PURGE
*                                     DEFAULT VALUE OF X'00'
*                                     IMPLIES EXCP  DCRR 21082*/
*    2 *           CHAR(2),        /* RESERVED                */
*    2 IPIBCNT     CHAR(4),        /* COUNT OF I/O REQUESTS TO
*                                     BE COMPLETED. DECREMENTD
*                                     BY IOS DRIVERS WHEN
*                                     I/O EVENT COMPLETES     */
*    2 IPIBECB     PTR(31),        /* ECB TO BE POSTED WHEN
*                                     IPIBCNT GOES TO ZERO.
*                                     PURGE WAITS ON THIS ECB
*                                     WHEN COUNT IS ESTABLISHD*/
*    2 IPIBARG     PTR(31),        /* PURGE ARGUMENT. IF ASID
*                                     PURGE, THE RIGHT 2 BYTES
*                                     CONTAIN THE ASID OF THE
*                                     ASID BEING PURGED AND
*                                     THE LEFT TWO BYTES HAVE
*                                     THE SIGN BIT OF THE ASID
*                                     IF TCB PURGE, THEN THE
*                                     TCB ADDRESS             */
*    2 IPIBSRB     PTR(31),        /* PTR TO FIRST SRB ON CHN
*                                     OF SRBS THAT HAVE BEEN
*                                     COLLECTED FOR RETURN TO
*                                     THE APPROPRIATE DRIVER
*                                     OF THE CHANNL SCHEDULER */
*    2 IPIBIO      PTR(31),        /* PTR TO I/O REQUEST CHAIN
*                                     RETURNED TO PURGE FOR
*                                     PLACEMENT ON THE PIRL   */
*    2 IPIBDVRU    PTR(31),        /* PTR TO ADTNL INFO EACH
*                                     DRIVER MAINTNS TO INSURE
*                                     PROPER RESTORATN OF ITS
*                                     QUEUE OF REQUESTS (E.G.
*                                     PROTECT KEYS - TCB ADDR)
*                                     RETURNED TO PURGE FOR
*                                     PLACEMENT ON THE PIRL   */
*    2 IPIBPIRL    PTR(31),        /* PTR TO PIRL FOR THIS
*                                     PURGE REQUEST           */
*    2 IPIBPSQ     PTR(31),        /* PTR TO CHAIN OF I/O REQ.
*                                     INVOLVED WITH THIS PURGE
*                                     FOUND BY ROUTINES RUNNG
*                                     ASYNCHRONOUSLY WITH THE
*                                     PURGE ROUTINE (E.G. THE
*                                     INTERRUPT HANDLER).     */
*    2 IPIBLNK    PTR(31),         /* PTS TO 2ND IPIB IF 2,  @YM07220*/
*                                  /* EITHER PTS TO HALT IPIB@YM07220*/
*                                  /* OR =0, MAX OF 2 IPIBS  @YM07220*/
*
*    2 IPIBEND     CHAR(0);        /* END OF IPIB             */
./ ADD NAME=IECDLCH  0100-02135-02135-1228-00076-00076-00000-VBCMACS
* %      GOTO  LCHPLS;             /* GO TO THE PL/S VERSION   */
*
         MACRO
         IECDLCH
LCH      DSECT
         SPACE 1
*****************************************************************
*                                                               *
*   THIS MACRO DSECT DESCRIBES THE LOGICAL CHANNEL QUEUE TABLE. *
*                                                               *
*****************************************************************
         SPACE 1
LCHENTRY DS    0D                  DOUBLEWORD ALIGNMENT
LCHFST   DS    F                   FIRST IOQ ON LCH
LCHLST   DS    F                   LAST IOQ ON LCH
LCHLOCK  DS    F                   LOCKWORD ASSOCIATED WITH LCH YM3157P
LCHRSV01 DS    F                   RESERVED                     YM3157P
LCHTCH   DS    F                   TCH CHANNEL LIST
LCHCHCNT DS    FL1                 NUMBER OF CHANNELS ON LCH
LCHFLA   DS    XL1                 FLAG BYTE
         SPACE 1
LCHLKHLD EQU   X'80'               LCHLOCK HELD ON ENTRY
*        EQU   X'7F'               RESERVED
         SPACE 1
LCHRSV02 DS    H                   RESERVED                     YM3157P
LCHTOTAL DS    H                   TOTAL REQUESTS STARTED OR
*                                  QUEUED
LCHRSV03 DS    H                   RESERVED                     YM3157P
LCHLGBSY DS    H                   NUMBER REQUESTS QUEUED
*                                  BECAUSE LOGICALLY BUSY
LCHPYBSY DS    H                   NUMBER REQUESTS QUEUED
*                                  BECAUSE PHYSICALLY BUSY
LCHEL    EQU   *-LCHENTRY          ENTRY LENGTH
LCHELP2  EQU   5                   LENGTH OF LCH IN POWERS OF TWO
         MEND
*%LCHPLS: ;
*
* /*************************************************************/
* /*                                                           */
* /* THIS STRUCTURE DESCRIBES THE LOGICAL CHANNEL QUEUE TABLE. */
* /* CALLERS OF THIS MACRO SHOULD RESPECIFY THE LCH BASED  ON  */
* /* THE ADDRESS GOTTEN FROM THE CVT.                          */
* /*                                                           */
* /*************************************************************/
* /*                                                           */
* /*     09/05/73     LEVEL=00                                 */
* /*                                                           */
* /*************************************************************/
*
*   DCL  1 LCH  BDY(DWORD)  BASED(LCHPTR),
*        2  LCHENTRY  PTR(31),     /* LABEL IDENTIFICATION     */
*          3  LCHFST  PTR(31),     /* FIRST IOQ  ON LCH        */
*        2  LCHLST    PTR(31),     /* LAST IOQ  ON LCH         */
*        2  LCHLOCK   CHAR(4),     /* LOCKWORD FOR LCH YM3157P */
*        2  LCHRSV01  CHAR(4),     /* RESVERVED        YM3157P */
*        2  LCHTCH    PTR(31),     /* TCH CHANNEL LIST         */
*        2  LCHCHCNT  FIXED(8),    /* NUMBER OF CHANNELS IN
*                                     LIST                     */
*        2  LCHFLA    CHAR(1),     /* FLAG BYTE                */
*          3  LCHLKHLD  BIT(1),    /* LOCK HELD ON ENTRY       */
*          3  *         BIT(7),    /* RESERVED                 */
*
*        2  LCHRSV02    CHAR(2),   /* RESERVED         YM3157P */
*        2  LCHTOTAL  FIXED(15),   /* TOTAL REQUESTS STARTED
*                                     OR QUEUED                */
*        2  LCHRSV03  CHAR(2),     /* RESERVED         YM3157P */
*        2  LCHLGBSY  FIXED(15),   /* NUMBER OF RQSTS QUEUED
*                                     BECAUSE LOGICALLY BUSY   */
*        2  LCHPYBSY  FIXED(15),   /* NUMBER RQSTS QUEUED
*                                     BECAUSE PHYSICALLY BUSY  */
*        2  LCHEND    CHAR(0);     /* END OF LCH               */
*   DCL LCHELP2 BIT(8) CONSTANT('05'X);  /*
*                                     LCH ELEM LNGTH POWER OF 2*/
*
*%DCL  LCHEL  CHAR;                /* LENGTH OF TABLE          */
*%LCHEL='ADDR(LCHEND)-ADDR(LCHENTRY)';
./ ADD NAME=IECDSIAB 0100-02135-02135-1228-00026-00026-00000-VBCMACS
*%GOTO SIABPLS1;
         MACRO
         IECDSIAB
*%SIABPLS1: ;
* /************************************************************/
* /*                                                          */
* /*           THIS IS THE DESCRIPTION OF HOW THE AREA        */
* /*           OF STORAGE RECIEVED FROM IOS STORAGE MANAGER   */
* /*           IS SUBDIVIDED INTO SRB AND IOSB.               */
* /*                                                          */
* /************************************************************/
*%GOTO SIABPLS2;
SIAB     DSECT
SIABCMCH DS    0F                  CHAIN POINTER FOR STORAGE MGR
SIABSRB  DS    12F                 THIS IS THE SRB AREA
SIABIOSB DS    28F                 THIS IS THE IOSB AREA
SIABEL   EQU   *-SIABCMCH          SIAB LENGTH
         MEND
*%SIABPLS2: ;
*   DCL 1 SIAB  BDY(WORD)  BASED(SIABPTR),
*        2 SIABCMCH CHAR(0),       /*CHAIN PTR FOR STORAGE MGR*/
*        2 SIABSRB  CHAR(48),      /*THIS IS THE SRB AREA     */
*        2 SIABIOSB CHAR(112),     /*THIS IS THE IOSB AREA    */
*        2 SIABEND  CHAR(0);       /*THIS IS THE END OF SIAB  */
*%DCL SIABEL CHAR;                 /* SIAB LENGTH             */
*%SIABEL='ADDR(SIABEND)-ADDR(SIABCMCH)';
./ ADD NAME=IECDVOID 0100-02135-02135-1228-00080-00080-00000-VBCMACS
         MACRO
         IECDVOID  &CSECT=NO
****************************************************************
*                                                              *
*    THIS IS THE VECTOR OF IOS DRIVERS CONTROL BLOCK. IT IS    *
*    ADDRESSABLE THROUGH THE IOCOM VIA IOCVOID.                *
*                                                              *
****************************************************************
         AIF   ('&CSECT' NE 'YES').VOI001
IECVOID  DS    0F
*   DRIVER ID =0   RESERVED
         DC    A(IECVOB14)
         DC    A(IECVOB14)
         DC    A(IECVOB14)
IECVOENT EQU   *
*   DRIVER ID =1  MISCELLANEOUS ID FOR I/O REQUESTS NOT NEEDING
*                 VOID SERVICES.
         DC    A(IECVOB14)
         DC    A(IECVOB14)
         DC    A(IECVOB14)
*   DRIVER ID =2  EXCP
         DC    V(IECVXPUR)         EXCP PURGE SUBROUTINE ADDRESS
         DC    V(IECVXRES)         RESTORE SUBROUTINE
         DC    V(IECVEXTC)         EXTENT CHECK SUBROUTINE
*   DRIVER ID =3  VSAM
         DC    V(IDA121A6)         ABP PURGE SUBROUTINE
         DC    A(IECVOB14)
         DC    A(IECVOB14)
*   DRIVER ID =4  VTAM
         DC    A(IECVOB14)
         DC    A(IECVOB14)
         DC    A(IECVOB14)
*   DRIVER ID =5  TCAM
         DC    A(IECVOB14)
         DC    A(IECVOB14)
         DC    A(IECVOB14)
*   DRIVER ID =6  OLTEP
         DC    A(IECVOB14)
         DC    A(IECVOB14)
         DC    A(IECVOB14)
*   DRIVER ID =7  PCI FETCH
         WXTRN IEWFTPRG
         WXTRN IEWFTXCK
         DC    V(IEWFTPRG)
         DC    A(IECVOB14)
         DC    V(IEWFTXCK)
*   DRIVER ID =8  RESERVED
         DC    A(IECVOB14)
         DC    A(IECVOB14)
         DC    A(IECVOB14)
*   DRIVER ID =9  SS1
         DC    A(IECVOB14)
         DC    A(IECVOB14)
         DC    A(IECVOB14)
*   DRIVER ID =A  ??????
         DC    A(IECVOB14)
         DC    A(IECVOB14)
         DC    A(IECVOB14)
*   DRIVER ID =B  ??????
         DC    A(IECVOB14)
         DC    A(IECVOB14)
         DC    A(IECVOB14)
*   DRIVER ID =C  ??????
         DC    A(IECVOB14)
         DC    A(IECVOB14)
         DC    A(IECVOB14)
IECVOEND EQU   *
*  DUMMY VOID TABLE ENTRY - ZERO REG 15 AND RETURN ON 14
IECVOB14 SLR   15,15               ZERO REG 15
         BR    14                  RETURN TO CALLER
         MEXIT
.VOI001  ANOP
VOID     DSECT
VOIENTRY DS    0F
VOIPRG   DS    A                   ADDR OF DRIVER PURGE SUBR
VOIRSTR  DS    A                   ADDR OF DRIVER RESTORE SUBR
VOIEXTNT DS    A                   ADDR OF DRIVER EXTENT CHECK
*                                  SUBROUTINE
VOIEL    EQU   *-VOIENTRY          LENGTH OF VOID
         MEND
./ ADD NAME=IEFDSOCB 0100-02135-02135-1228-00084-00084-00000-VBCMACS
         MACRO
         IEFDSOCB
*
* * * * * * * * * DIRECT SYSOUT CONTROL BLOCK (DSOCB) * * * * * * * * *
*
*
DSOCSCB  DS    F * (00)  MFT - ADDRESS OF CSCB CREATED AT
*                              'START' COMMAND TIME.
DSOECB   EQU   DSOCSCB * MVT - ECB FOR PENDING STOP/MODIFY.
DSOWAIT  EQU   128  BIT-0  ECB WAIT BIT
DSOPOST  EQU   64 * BIT-1  ECB POST BIT
*
DSONXT   DS    F * (04)  ADDRESS OF NEXT DSOCB OR ZEROS.
*
DSOID    DS    XL1 (08)  IDENTIFIER OF A DSOCB. HEX'FD'
*
DSOSCLS  DS    CL1 (09)  SYSOUT CLASS ASSIGNED TO THIS DEVICE.
*
DSOKEY   DS    XL1 (10)  PROTECT KEY OF PARTITION/INITIATOR
*                        USING THIS DSOCB OR ZERO.  NON-ZERO
*                        ENTRY INDICATES THE DSOCB HAS BEEN
*                        SELECTED FOR JOB.
*
         DS    CL1 (11)  (RESERVED)
*
DSOIND1  DS    CL1 (12)  INDICATOR BYTE 1.
*
* * * * * * * * * EQUATES FOR 'DSOIND1'  * * * * * * * * * * * * * * *
*
DSOTAPE  EQU   128 * BIT-0    TAPE OUTPUT DEVICE.
DSOPRINT EQU   64 *  BIT-1    PRINTER OUTPUT DEVICE.
DSOPUNCH EQU   32 *  BIT-2    PUNCH OUTPUT DEVICE.
*                             N O T E  -  BIT 0 AND 1 OR 2 MAY
*                                         BE ON TO DENOTE PRINTER
*                                         OR PUNCH DESTINE
*                                         VIA TAPE.
DSOCR    EQU   16 *  BIT-3    THIS DSOCB NOT AVAILABLE FOR
*                             THIS STEP. (CONDITIONED BY C/R)
DSOSTEP  EQU   8 *   BIT-4    THIS DSOCB HAS BEEN SELECTED
*                             FOR PRESENT STEP.
DSOJSEP  EQU   4 *   BIT-5    JOB SEPARATORS HAVE BEEN WRITTEN.
DSOMSGCL EQU   2 *   BIT-6    'DSOSCLS' ALSO EQUALS THE JOBS
*                             MESSAGE CLASS.
DSONOOP  EQU   1 *   BIT-7    THIS DSOCB NO LONGER AVAILABLE
*                             FOR SELECTION
*
DSOIND2  DS    CL1 (13)  INDICATOR BYTE 2.
*
* * * * * * * * * EQUATES FOR 'DSOIND2'  * * * * * * * * * * * * * * *
*
DSOISTOP EQU   128 * BIT-0    INTERNAL STOP ISSUED DUE TO SCH ABEND
DSOSM    EQU   64 *  BIT-1    STOP/MODIFY PENDING, POST ECB IN DSOCB
*                             MVT ONLY
***      EQU   32 *  BIT-2    (RESERVED)
***      EQU   16 *  BIT-3    (RESERVED)
***      EQU   8 *   BIT-4    (RESERVED)
***      EQU   4 *   BIT-5    (RESERVED)
***      EQU   2 *   BIT-6    (RESERVED)
***      EQU   1 *   BIT-7    (RESERVED)
*
DSOUCB   DS    H * (14)  ADDRESS OF ALLOCATED UCB FOR THIS DSOCB.
*
DSOTIOT  DS    F * (16)  MFT - FIELDS FROM DSO TIOT - TIOESTTA(1),
*                             TIOERLOC(2) AND TIOESTTB(1)
*                        MVT - ADDRESS OF TIOT IN SQS.
*
DSOJFCB  DS    F * (20)  TTR OF THIS DEVICE'S JFCB ON THE
*                        JOB QUEUE. (XXX0)
*
DSOJCLS  DS    XL8 (24)  JOB CLASSES THIS DSOCB CAN BE USED IN.
*                        N O T E  -  JOB CLASSES HAVE BEEN
*                                    CONVERTED TO SYSTEM JOB
*                                    CLASS IDENTIFIERS. (QMGR)
*
DSOSEP   DS    CL8 (32)  JOB SEPARATOR MODULE NAME. IF NO
*                        ENTRY, BIT-5 IN DSOIND1 IS TO
*                        REMAIN ON.
*
         DS    CL8 (40)  (RESERVED AREA)
*
DSOCBLNG EQU   *-DSOCSCB      LENGTH OF DSOCB
*
*
         MEND
./ ADD NAME=IEFTIOT1 0100-02135-02135-1228-00112-00112-00000-VBCMACS
         MACRO
         IEFTIOT1
TIOT1    EQU   * -            TIOTPTR
TIOCNJOB DS    CL8  -         JOB NAME
TIOCSTEP DS    CL16 -         FOR A JOB STEP THAT IS NOT A PROCEDURE
*                             STEP, 8-BYTE JOB STEP NAME AND 8 RESERVED
*                             BYTES.  FOR A JOB STEP THAT IS A
*                             PROCEDURE STEP, 8-BYTE PROCEDURE STEP
*                             NAME AND 8-BYTE JOB STEP NAME OF THE JOB
*                             STEP THAT CALLED THE PROCEDURE.
***********************************************************************
*   DD ENTRY                                                          *
*        THERE IS A 16-BYTE DD ENTRY FOR EACH DD STATEMENT IN THE     *
*        JOB STEP OR PROCEDURE STEP.  (REFERENCES TO GDG (ALL) DATA   *
*        SETS, THE JOBLIB DATA SET OR PGM=*.DDNAME CREATE STILL       *
*        OTHER DD ENTRIES.)                                           *
*        A DD ENTRY INCLUDES A DEVICE ENTRY.  BEFORE ALLOCATION,      *
*        THERE MAY BE SEVERAL DEVICE ENTRIES IN EACH DD ENTRY.        *
***********************************************************************
TIOENTRY EQU   * -            TIODDPTR
TIOELNGH DS    FL1 -          LENGTH, IN BYTES, OF THIS ENTRY
*                             (INCLUDING ALL DEVICE ENTRIES)
TIOESTTA DS    B -            STATUS BYTE A
TIOSLTYP EQU   X'80' -        NONSTANDARD LABEL (TAPE)
TIOSPLTP EQU   X'40' -        DURING ALLOCATION, SPLIT CYLINDER
*                             PRIMARY.  (THIS IS THE FIRST DD ENTRY FOR
*                             A SPLIT CYLINDER.)
*                             DURING STEP TERMINATION, NO UNALLOCATION
*                             NECESSARY.
TIOSPLTS EQU   X'20' -        DURING ALLOCATION, SPLIT CYLINDER
*                             SECONDARY.  (THIS IS NOT THE FIRST DD
*                             ENTRY FOR A SPLIT CYLINDER.)
*                             DURING STEP TERMINATION, REWIND BUT NO
*                             UNLOADING.
TIOSJBLB EQU   X'10' -        JOBLIB INDICATOR
TIOSDADS EQU   X'08' -        DADSM ALLOCATION NECESSRY
TIOSLABL EQU   X'04' -        LABELED TAPE.  IF BIT 0 IS OFF, SL OR
*                             SUL.  IF BIT 0 IS ALSO ON, AL OR AUL.
TIOSDSP1 EQU   X'02' -        REWIND/UNLOAD THE TAPE VOLUME (TAPE)
*                             PRIVATE VOLUME (DIRECT ACCESS)
TIOSDSP2 EQU   X'01' -        REWIND THE TAPE VOLUME (TAPE)
*                             PUBLIC VOLUME (DIRECT ACCESS)
TIOERLOC DS    0CL2 -         RELATIVE LOCATION OF POOL
TIOEWTCT DS    CL1 -          DURING ALLOCATION, NUMBER OF DEVICES
*                             REQUESTED FOR THIS DATA SET
TIOELINK DS    CL1 -          DURING ALLOCATION, LINK TO THE
*                             APPROPRIATE PRIME SPLIT, UNIT AFFINITY,
*                             VOLUME AFFINITY OR SUBALLOCATE TIOT
*                             ENTRY.  AFTER ALLOCATION, FLAG BYTE.
TIOSYOUT EQU   X'80' -        THIS IS A SYSOUT DATA SET THAT CONTAINS
*                             DATA (AFTER CLOSE)
TIOTRV01 EQU   X'40' -        RESERVED
TIOTTERM EQU   X'20' -        DEVICE IS A TERMINAL
TIOEDYNM EQU   X'10' -        DYNAM CODED ON DD STATEMENT
TIOEQNAM EQU   X'08' -        QNAME CODED ON DD STATEMENT
TIOESSDS EQU   X'02' -        ENTRY FOR A SUBSYSTEM DATA SET
TIOTREM  EQU   X'01' -        ENTRY FOR A REMOTE DEVICE
TIOEDDNM DS    CL8 -          DD NAME
TIOEJFCB DS    CL3 -          RELATIVE TRACK ADDRESS (TTR) OF THE JFCB.
*                             (DURING ALLOCATION, TTR OF THE SIOT IF
*                             SUBALLOCATE WAS REQUESTED.)
TIOESTTC DS    B -            STATUS BYTE C.  USED DURING ALLOCATION
*                             ONLY.  SET TO ZEROS AT END OF ALLOCATION.
TIOSDKCR EQU   X'80' -        MAIN STORAGE OR DASD ADDRESS
TIOSDEFR EQU   X'40' -        DEFERRED MOUNT
TIOSAFFP EQU   X'20' -        PRIMARY UNIT AFFINITY
TIOSAFFS EQU   X'10' -        SECONDARY UNIT AFFINITY
TIOSVOLP EQU   X'08' -        PRIMARY VOLUME AFFINITY
TIOSVOLS EQU   X'04' -        SECONDARY VOLUME AFFINITY
TIOSBALP EQU   X'02' -        PRIMARY SUBALLOCATE
TIOSBALS EQU   X'01' -        SECONDARY SUBALLOCATE
***********************************************************************
*   DEVICE ENTRIES                                                    *
*      1. DURING ALLOCATION -                                         *
*                ONE DEVICE ENTRY FOR EACH DEVICE REQUIRED, OR FOR    *
*                EACH PUBLIC DEVICE ELIGIBLE.                         *
*      2. DURING PROBLEM PROGRAM -                                    *
*                ONE DEVICE ENTRY FOR EACH ALLOCATED DEVICE.          *
***********************************************************************
TIOESTTB DS    B -            STATUS BYTE B - DURING ALLOCATION AND
*                             DURING PROBLEM PROGRAM
TIOSUSED EQU   X'80' -        DATA SET IS ON DEVICE
TIOSREQD EQU   X'40' -        DATA SET WILL USE DEVICE
TIOSPVIO EQU   X'20' -        DEVICE VIOLATES SEPARATION
TIOSVLSR EQU   X'10' -        VOLUME SERIAL PRESENT
TIOSSETU EQU   X'08' -        SETUP MESSAGE REQUIRED
TIOSMNTD EQU   X'04' -        IF 0, DELETE UNLOADED VOLUME IF UNLOAD
*                             REQUIRED.  IF 1, RETAIN UNLOADED VOLUME
*                             IF UNLOAD REQUIRED.
TIOSUNLD EQU   X'02' -        UNLOAD REQUIRED
TIOSVERF EQU   X'01' -        VERIFICATION REQUIRED
TIOEFSRT DS    AL3 -          DURING PROBLEM PROGRAM, ADDRESS OF UCB.
*                             DURING ALLOCATION, BITS 0-11 CONTAIN
*                             OFFSET, IN THE UCB LOOK-UP TABLE, TO AN
*                             ADDRESS FOR A DEVICE REQUIRED OR ELIGIBLE
*                             FOR THIS DATA SET.  THE UCB LOOK-UP TABLE
*                             HAS ADDRESSES OF UCB'S.  BITS 12-23
*                             CONTAIN OFFSET, IN THE STEP VOLUME TABLE
*                             (VOLT), TO THE VOLUME SERIAL NUMBER FOR
*                             THE VOLUME REQUIRED OR ELIGIBLE FOR THIS
*                             DATA SET.
*        TIOT POOL ENTRY
POOLSTAR EQU   *
         DS    CL1 -          RESERVED
TIOPNSLT DS    FL1 -          NUMBER OF SLOTS FOR POOL
         DS    CL1 -          RESERVED
TIOPNSRT DS    FL1 -          NUMBER OF DEVICES (FILLED SLOTS)
TIOPPOOL DS    CL8 -          POOL NAME
TIOPSTTB DS    XL1 -          STATUS OF SLOT
TIOPSLOT DS    AL3 -          UCB ADDRESS OR EMPTY SLOT
TIOTFEND DS    CL4 -          FINAL END OF THE TIOT - BINARY ZEROS
         MEND
./ ADD NAME=IGC0024C 0100-02135-02135-1041-00100-00100-00000-VBCMACS
IGC0024C CSECT
* THIS TYPE 3, UNRESTRICTED SVC PLACES THE USER IN A REQUESTED
* PROTECT KEY, AND/OR IN SUPERVISOR STATE. REG 0 CONTAINS THE
* DESIRED PROTECT KEY IN IT'S LOW ORDER BYTE. IF THE VALUE IN
* THE REGISTER IS GREATER THAN FF, THE PROTECT KEY IS SET FROM
* THE VALUE IN THE TCB (TCBPKF). THE STATE CODE IS PLACED IN
* REGISTER 1: IF REGISTER 1 IS ZERO, THE CALLER IS PLACED IN
* SUPERVISOR STATE, IF REGISTER 1 IS EQUAL TO 1, USER IS
* PLACED IN PROGRAM STATE. WHEN REGISTER 1 IS NEITHER 0 NOR
* 1, NO ACTION IS TAKEN BY THIS SVC.
*
* AUTHOR R THORNTON JAN 1978
*
* ON ENTRY, REGISTERS CONTAIN THE FOLLOWING:
*   REG 0  = VALUE PASSED BY CALLER
*   REG 1  = VALUE PASSED BY CALLER
*   REG 2  = UNPREDICTABLE
*   REG 3  = ADDRESS OF CVT
*   REG 4  = ADDRESS OF TCB
*   REG 5  = ADDRESS OF SVRB
*   REG 6  = ADDRESS OF E.P. TO IGC0024C
*   REG 7  = ADDRESS OF ASCB
*   REG 8  = UNPREDICTABLE
*   REG 9  = UNPREDICTABLE
*   REG A  = UNPREDICTABLE
*   REG B  = UNPREDICTABLE
*   REG C  = UNPREDICTABLE
*   REG D  = VALUE PASSED BY CALLER
*   REG E  = RETURN ADDRESS FOR IGC0024C ON COMPLETION
*   REG F  = VALUE PASSED BY CALLER
*
* REGISTERS ARE SAVED BY THE CONTROL PROGRAM BEFORE ENTRY TO IGC0024C.
* ON RETURN, REGISTERS 2-E ARE RESTORED TO THEIR ORIGINAL VALUES, WHILE
* REGISTERS 0, 1, AND F, MAINTAIN THE VALUES CONTAINED AT TIME OF
*          EXIT FROM IGC0024C.
*
* CHARACTERISTICS: ENABLED, REFRESHABLE, NO LOCKS HELD OR USED,
*                  LOCATED IN SYS1.LPALIB, SUPERVISOR STATE,
*                  PROTECT KEY ZERO.
*
* METHOD OF OPERATION:
*  1. TEST REG 1 FOR A VALUE OF 0 OR 1. IF NEITHER, EXIT
*     WITHOUT PROCESSING.
*  2. LOCATE THE RB FOR THE CALLER BY USE OF THE RBLINK FIELD
*     OF THE SVRB BUILT FOR IGC0024C (ADDRESS IN REG 5).
*  3. IF REG 0 IS GREATER THAN FF, GET THE PROTECT KEY FROM
*     THE CALLER'S TCB (ADDRESS IN REG 4).
*  4. PLACE THE REQUESTED PROTECT KEY AND STATE IN THE RESUME
*     PSW IN THE CALLER'S RB.
*  5. RETURN TO THE CONTROL PROGRAM VIA BRANCH TO THE ADDRESS
*     IN REGISTER E.
*
*
*
         USING IGC0024C,BASE
PKEY     EQU   0
STATE    EQU   1
RB       EQU   2
CVT      EQU   3
TCB      EQU   4
SVRB     EQU   5
BASE     EQU   6
ASCB     EQU   7
EVEN     EQU   8
ODD      EQU   9
RETURN   EQU   14
RETCODE  EQU   15
*
*
*
         LA    RETCODE,4               SET ERROR RETURN CODE
         LTR   STATE,STATE             TEST REG 1 = ZERO
         BZ    R1OK                    YES, O.K.
         C     STATE,F1                TEST REG 1 = 1
         BE    R1OK                    YES, O.K.
         BR    RETURN                  REG 1 INVALID, RETURN
R1OK     L     RB,28(SVRB)             GET CALLER'S RB ADDRESS
         C     PKEY,FF                 REG 0 > FF
         BNH   GOTKEY                  NO
         SR    PKEY,PKEY
         IC    PKEY,28(TCB)            GET TCBPKF
         SRL   PKEY,4                  SHIFT OUT LOW 4 BITS
GOTKEY   LR    EVEN,PKEY               COPY PROTECT KEY
         SR    ODD,ODD                 CLEAR ODD REG
         ICM   ODD,8,17(RB)            GET PK, CMWP FROM CALLER'S PSW
         SLL   ODD,4                   SHIFT OUT ORIGINAL PROTECT KEY B
         SLDL  EVEN,3                  SHIFT CMW BITS TO EVEN REGISTER
         SLL   EVEN,1                  MAKE P BIT ZERO, SUPVR STATE
         LTR   STATE,STATE             CALLER WANTS SUPVR STATE
         BE    SETPSW                  YES, ALL SET
         LA    EVEN,1(EVEN)            NO, SET PROBLEM STATE
SETPSW   STC   EVEN,17(RB)             SET PROT KEY AND STATE
         SR    RETCODE,RETCODE         SET RETCODE FOR NORMAL COMPL
         BR    RETURN                  RETURN TO CALLER
*
*
*
F1       DC    F'1'
FF       DC    F'255'
         END
./ ADD NAME=IHACSD   0100-02135-02135-1228-00300-00300-00000-VBCMACS
*
*        %GOTO CSDL1;   /*
         MACRO
         IHACSD &DSECT=YES    */
*%CSDL1 : ;
*
*/* **************************************************************** */
*/*                                                                  */
*/*            COMMON SYSTEM DATA AREA                               */
*/*                                                                  */
*/*  OS/VS2 RELEASE 3, 07/23/74, LEVEL=1                             */
*/*                                                                  */
*/*  METHOD OF ACCESS                                                */
*/*      BAL  - DSECT IS PRODUCED UNLESS DSECT=NO IS SPECIFIED.      */
*/*             USING ON CSD GIVES ADDRESSABILITY FOR ALL SYMBOLS.   */
*/*      PL/S - INCLUDE CVT TO DEFINE CVTCSD                         */
*/*                                                                  */
*/* **************************************************************** */
*%GOTO CSDL2;  /*
         SPACE 1
         AIF   ('&DSECT' EQ 'NO').CSD0010
CSD      DSECT
         AGO   .CSD0020
.CSD0010 ANOP
         DS    0D
CSD      EQU   *
.CSD0020 ANOP
CSDCSD   DC    CL4'CSD ' -    CONTROL BLOCK ACRONYM IN EBCDIC
CSDCPUJS DC    XL2'00' -      BIT MASK OF CPU'S AVAILABLE FOR JOB
*                             SCHEDULING
CSDCHAD  DC    H'0' -         HIGHEST CHANNEL ADDRESS SYSGEN'ED  MDC014
CSDSAFF  DS    0XL2 -         BIT MASK OF CPU'S AVAILABLE TO PROCESS
*                             SERVICE REQUESTS (SRB'S)           MDC018
CSDCPUAL DC    XL2'00' -      BIT MASK OF CPU'S CURRENTLY ALIVE  MDC015
CSDCPUOL DC    H'0' -         NUMBER OF CPU'S CURRENTLY ALIVE    MDC016
CSDSCWRD DS    0BL4 -         SUPERVISOR CONTROL INFORMATION
CSDSCFL1 DC    XL1'00' -      FIRST BYTE OF CSDSCWRD
CSDRV042 EQU   X'80',,C'X' -  RESERVED                           MDC011
CSDSYSND EQU   X'40' -        SYSTEM-WIDE NON-DISPATCHABILITY BIT.
*                             INDICATES ALL ADDRESS SPACES (SRB'S AND
*                             TASKS) ARE NON-DISPATCHABLE EXCEPT THOSE
*                             WITH EXEMPT STATUS (ASCBXMPT)
CSDRV001 EQU   X'20',,C'X' -  RESERVED
CSDRV002 EQU   X'10',,C'X' -  RESERVED
CSDRV003 EQU   X'08',,C'X' -  RESERVED
CSDRV004 EQU   X'04',,C'X' -  RESERVED
CSDRV005 EQU   X'02',,C'X' -  RESERVED
CSDRV006 EQU   X'01',,C'X' -  RESERVED
CSDSCFL2 DC    XL1'00' -      SECOND BYTE OF CSDSCWRD
CSDRV007 EQU   X'80',,C'X' -  RESERVED
CSDRV008 EQU   X'40',,C'X' -  RESERVED
CSDRV009 EQU   X'20',,C'X' -  RESERVED
CSDRV010 EQU   X'10',,C'X' -  RESERVED
CSDRV011 EQU   X'08',,C'X' -  RESERVED
CSDRV012 EQU   X'04',,C'X' -  RESERVED
CSDRV013 EQU   X'02',,C'X' -  RESERVED
CSDRV014 EQU   X'01',,C'X' -  RESERVED
CSDSCFL3 DC    XL1'00' -      THIRD BYTE OF CSDSCWRD
CSDRV015 EQU   X'80',,C'X' -  RESERVED
CSDRV016 EQU   X'40',,C'X' -  RESERVED
CSDRV017 EQU   X'20',,C'X' -  RESERVED
CSDRV018 EQU   X'10',,C'X' -  RESERVED
CSDRV019 EQU   X'08',,C'X' -  RESERVED
CSDRV020 EQU   X'04',,C'X' -  RESERVED
CSDRV021 EQU   X'02',,C'X' -  RESERVED
CSDRV022 EQU   X'01',,C'X' -  RESERVED
CSDSCFL4 DC    XL1'00' -      FOURTH BYTE OF CSDSCWRD
CSDRV023 EQU   X'80',,C'X' -  RESERVED
CSDRV024 EQU   X'40',,C'X' -  RESERVED
CSDRV025 EQU   X'20',,C'X' -  RESERVED
CSDRV026 EQU   X'10',,C'X' -  RESERVED
CSDRV027 EQU   X'08',,C'X' -  RESERVED
CSDRV028 EQU   X'04',,C'X' -  RESERVED
CSDRV029 EQU   X'02',,C'X' -  RESERVED
CSDRV030 EQU   X'01',,C'X' -  RESERVED
CSDRV043 DC    F'0' -         RESERVED                    MDC012-MDC013
CSDMF1CP DC    XL2'00' -      BIT MASK OF CPU'S VARIED ONLINE OR
*                             OFFLINE.  MF/1 WILL TEST THESE FLAGS AT
*                             REPORTING INTERVALS FOR CPU VARY ACTIVITY
*                             AND THEN RESET HALFWORD TO ZERO    MDC007
CSDACR   DC    XL1'00' -      VALUE OF X'FF' MEANS ACR IS IN PROGRESS
*                             WITHIN SYSTEM                      MDC006
CSDFLAGS DC    XL1'00' -      FLAG BYTE                          MDC001
CSDMP    EQU   X'80' -        INDICATES MULTIPROCESSING SYSTEM
*                             INSTRUCTION SET IS AVAILABLE.  CSDCPUAL
*                             MUST BE EXAMINED TO DETERMINE WHETHER A
*                             MULTIPROCESSING SYSTEM IS RUNNING OR JUST
*                             HALF A MULTIPROCESSING SYSTEM.
*                             (MDC300)                         @Z30AQ9A
CSDRV032 EQU   X'40',,C'X' -  RESERVED
CSDRV033 EQU   X'20',,C'X' -  RESERVED
CSDRV034 EQU   X'10',,C'X' -  RESERVED
CSDRV035 EQU   X'08',,C'X' -  RESERVED
CSDRV036 EQU   X'04',,C'X' -  RESERVED
CSDRV037 EQU   X'02',,C'X' -  RESERVED
CSDRV038 EQU   X'01',,C'X' -  RESERVED
CSDMAFF  DC    XL80'00' -     CPU-AFFINITY FEATURE TABLE
*                             (TEN 8-BYTE ENTRIES)
CSDRV044 DC    XL2'00' -      RESERVED                           MDC018
CSDDDRCT DC    H'0' -         DDR DEVICE ALLOCATION INTERFACE COUNT
*                             FIELD.  ACCESSED AND MODIFIED UNDER CMS
*                             LOCK.  INCREMENTED BY DDR TO INDICATE TO
*                             DYNAMIC ALLOCATION THAT DDR EXCHANGED
*                             ADDRESSES IN THE IOS LOOKUP TABLE. MDC008
CSDGDCC  DC    F'0' -         COUNT OF USABLE CLOCK COMPARATORS
*                             CURRENTLY IN THE CONFIGURATION     MDC003
CSDGDINT DC    F'0' -         COUNT OF USABLE CPU TIMERS CURRENTLY IN
*                             THE CONFIGURATION                  MDC004
CSDGDTOD DC    F'0' -         COUNT OF CPU'S WHICH HAVE ACCESS TO A
*                             GOOD TOD CLOCK                     MDC005
CSDTCNT  DC    F'0' -         COUNT OF TAPE ALLOCATIONS IN PROGRESS
*                                                                MDC009
CSDUCNT  DC    F'0' -         COUNT OF UNIT RECORD ALLOCATIONS IN
*                             PROGRESS                           MDC010
CSDMASK  DS    0XL32 -        TABLE OF BIT MASKS FOR TESTING BITS IN
*                             CSDCPUAL                           MDC017
         DC    X'8000' -      CPU 0                              MDC017
         DC    X'4000' -      CPU 1                              MDC017
         DC    X'2000' -      CPU 2                              MDC017
         DC    X'1000' -      CPU 3                              MDC017
         DC    X'0800' -      CPU 4                              MDC017
         DC    X'0400' -      CPU 5                              MDC017
         DC    X'0200' -      CPU 6                              MDC017
         DC    X'0100' -      CPU 7                              MDC017
         DC    X'0080' -      CPU 8                              MDC017
         DC    X'0040' -      CPU 9                              MDC017
         DC    X'0020' -      CPU A                              MDC017
         DC    X'0010' -      CPU B                              MDC017
         DC    X'0008' -      CPU C                              MDC017
         DC    X'0004' -      CPU D                              MDC017
         DC    X'0002' -      CPU E                              MDC017
         DC    X'0001' -      CPU F                              MDC017
         DC    XL152'00' -    RESERVED
         MEND  , -   */
*%CSDL2 : ;
*
*DECLARE
*  1 CSD      BASED(CVTCSD)  BDY(DWORD),
*   2 CSDCSD      CHAR(4) BDY(WORD),     /* CONTROL BLOCK ACRONYM IN
*                                           EBCDIC                   */
*   2 CSDCPUJS    BIT(16) BDY(WORD),     /* BIT MASK OF CPU'S
*                                           AVAILABLE FOR JOB
*                                           SCHEDULING               */
*   2 CSDCHAD     FIXED(15),             /* HIGHEST CHANNEL ADDRESS
*                                           SYSGEN'ED          MDC014*/
*   2 CSDCPUAL    BIT(16) BDY(WORD),     /* BIT MASK OF CPU'S
*                                           CURRENTLY ALIVE    MDC015*/
*    3 CSDSAFF     BIT(16),              /* BIT MASK OF CPU'S
*                                           AVAILABLE TO PROCESS
*                                           SERVICE REQUESTS (SRB'S)
*                                                              MDC018*/
*   2 CSDCPUOL    FIXED(15),             /* NUMBER OF CPU'S CURRENTLY
*                                           ALIVE              MDC016*/
*   2 CSDSCWRD    CHAR(4) BDY(WORD),     /* SUPERVISOR CONTROL
*                                           INFORMATION              */
*    3 CSDSCFL1    BIT(8),               /* FIRST BYTE OF CSDSCWRD   */
*     4 CSDRV042 BIT(1),                 /* RESERVED           MDC011*/
*     4 CSDSYSND BIT(1),                 /* SYSTEM-WIDE NON-
*                                           DISPATCHABILITY BIT.
*                                           INDICATES ALL ADDRESS
*                                           SPACES (SRB'S AND TASKS)
*                                           ARE NON-DISPATCHABLE
*                                           EXCEPT THOSE WITH EXEMPT
*                                           STATUS (ASCBXMPT)        */
*     4 CSDRV001 BIT(1),                 /* RESERVED                 */
*     4 CSDRV002 BIT(1),                 /* RESERVED                 */
*     4 CSDRV003 BIT(1),                 /* RESERVED                 */
*     4 CSDRV004 BIT(1),                 /* RESERVED                 */
*     4 CSDRV005 BIT(1),                 /* RESERVED                 */
*     4 CSDRV006 BIT(1),                 /* RESERVED                 */
*    3 CSDSCFL2    BIT(8),               /* SECOND BYTE OF CSDSCWRD  */
*     4 CSDRV007 BIT(1),                 /* RESERVED                 */
*     4 CSDRV008 BIT(1),                 /* RESERVED                 */
*     4 CSDRV009 BIT(1),                 /* RESERVED                 */
*     4 CSDRV010 BIT(1),                 /* RESERVED                 */
*     4 CSDRV011 BIT(1),                 /* RESERVED                 */
*     4 CSDRV012 BIT(1),                 /* RESERVED                 */
*     4 CSDRV013 BIT(1),                 /* RESERVED                 */
*     4 CSDRV014 BIT(1),                 /* RESERVED                 */
*    3 CSDSCFL3    BIT(8),               /* THIRD BYTE OF CSDSCWRD   */
*     4 CSDRV015 BIT(1),                 /* RESERVED                 */
*     4 CSDRV016 BIT(1),                 /* RESERVED                 */
*     4 CSDRV017 BIT(1),                 /* RESERVED                 */
*     4 CSDRV018 BIT(1),                 /* RESERVED                 */
*     4 CSDRV019 BIT(1),                 /* RESERVED                 */
*     4 CSDRV020 BIT(1),                 /* RESERVED                 */
*     4 CSDRV021 BIT(1),                 /* RESERVED                 */
*     4 CSDRV022 BIT(1),                 /* RESERVED                 */
*    3 CSDSCFL4    BIT(8),               /* FOURTH BYTE OF CSDSCWRD  */
*     4 CSDRV023 BIT(1),                 /* RESERVED                 */
*     4 CSDRV024 BIT(1),                 /* RESERVED                 */
*     4 CSDRV025 BIT(1),                 /* RESERVED                 */
*     4 CSDRV026 BIT(1),                 /* RESERVED                 */
*     4 CSDRV027 BIT(1),                 /* RESERVED                 */
*     4 CSDRV028 BIT(1),                 /* RESERVED                 */
*     4 CSDRV029 BIT(1),                 /* RESERVED                 */
*     4 CSDRV030 BIT(1),                 /* RESERVED                 */
*   2 CSDRV043    FIXED(31),             /* RESERVED    MDC012-MDC013*/
*   2 CSDMF1CP    BIT(16),               /* BIT MASK OF CPU'S VARIED
*                                           ONLINE OR OFFLINE.  MF/1
*                                           WILL TEST THESE FLAGS AT
*                                           REPORTING INTERVALS FOR
*                                           CPU VARY ACTIVITY AND
*                                           THEN RESET HALFWORD TO
*                                           ZERO               MDC007*/
*   2 CSDACR      CHAR(1),               /* VALUE OF X'FF' MEANS ACR
*                                           IN IS PROGRESS WITHIN
*                                           SYSTEM             MDC006*/
*   2 CSDFLAGS    BIT(8),                /* FLAG BYTE          MDC001*/
*    3 CSDMP    BIT(1),                  /* INDICATES MULTIPROCESSING
*                                           SYSTEM INSTRUCTION SET IS
*                                           AVAILABLE.  CSDCPUAL MUST
*                                           BE EXAMINED TO DETERMINE
*                                           WHETHER A MULTIPROCESSING
*                                           SYSTEM IS RUNNING OR JUST
*                                           HALF A MULTIPROCESSING
*                                           SYSTEM. (MDC300) @Z30AQ9A*/
*    3 CSDRV032 BIT(1),                  /* RESERVED                 */
*    3 CSDRV033 BIT(1),                  /* RESERVED                 */
*    3 CSDRV034 BIT(1),                  /* RESERVED                 */
*    3 CSDRV035 BIT(1),                  /* RESERVED                 */
*    3 CSDRV036 BIT(1),                  /* RESERVED                 */
*    3 CSDRV037 BIT(1),                  /* RESERVED                 */
*    3 CSDRV038 BIT(1),                  /* RESERVED                 */
*   2 CSDMAFF   (10) CHAR(8),            /* CPU-AFFINITY FEATURE
*                                           TABLE                    */
*   2 CSDRV044    BIT(16),               /* RESERVED           MDC018*/
*   2 CSDDDRCT    FIXED(15),             /* DDR DEVICE ALLOCATION
*                                           INTERFACE COUNT FIELD.
*                                           ACCESSED AND MODIFIED
*                                           UNDER CMS LOCK.
*                                           INCREMENTED BY DDR TO
*                                           INDICATE TO DYNAMIC
*                                           ALLOCATION THAT DDR
*                                           EXCHANGED ADDRESSES IN
*                                           THE IOS LOOKUP TABLE.
*                                                              MDC008*/
*   2 CSDGDCC     FIXED(31),             /* COUNT OF USABLE CLOCK
*                                           COMPARATORS CURRENTLY IN
*                                           THE CONFIGURATION  MDC003*/
*   2 CSDGDINT    FIXED(31),             /* COUNT OF USABLE CPU
*                                           TIMERS CURRENTLY IN THE
*                                           CONFIGURATION      MDC004*/
*   2 CSDGDTOD    FIXED(31),             /* COUNT OF CPU'S WHICH HAVE
*                                           ACCESS TO A GOOD TOD
*                                           CLOCK              MDC005*/
*   2 CSDTCNT     FIXED(31),             /* COUNT OF TAPE ALLOCATIONS
*                                           IN PROGRESS        MDC009*/
*   2 CSDUCNT     FIXED(31),             /* COUNT OF UNIT RECORD
*                                           ALLOCATIONS IN PROGRESS
*                                                              MDC010*/
*   2 CSDMASK   (16) CHAR(2),            /* TABLE OF BIT MASKS FOR
*                                           TESTING BITS IN CSDCPUAL
*                                                              MDC017*/
*   2 *           CHAR(152) BDY(DWORD);  /* RESERVED                 */
T(1),                  /* INDICATES MULTIPROCESSING    *
                          SYSTEM INSTRUCTION SET IS     *
                          AVAILABLE.  CSDCPUAL MUST    ø*
                          BE EXAMINED TO DETERMINE      *
                          WHETHER A MULTIPROCESSING   â*
                          SYSTEM IS RUNNING OR JUST   âØ*
                          HALF A MULTIPROCESSING      ä&*
                          SYSTEM. (MDC300) @Z30AQ9A*/ à*    3 CSDRV03240Ü2Ü9
T(1),                  /* RESERVED                 */ á *    3 CSDRV03340Ü2Ü9
T(1),                  /* RESERVED                 */ & *    3 CSDRV03440Ü2Ü9
T(1),                  /* RESERVED                 */ í *    3 CSDRV03540Ü2Ü9
T(1),                  /* RESERVED                 */ - *    3 CSDRV03640Ü2Ü9
T(1),                  /* RESERVED                 */ Á *    3 CSDRV03740Ü2Ü9
T(1),                  /* RESERVED                 */ ø *    3 CSDRV03840Ü2Ü9
T(1),                  /* RESERVED                 */ Í *   2 CSDMAFF 40404Ù1
0) CHAR(8),            /* CPU-AFFINITY FEATURE        Ø *
                          TABLE                    */ e *   2 CSDRV044
BIT(16),               /* RESERVED           MDC018*/ ° *   2 CSDDDRCT
FIXED(15),             /* DDR DEVICE ALLOCATION        *
                          INTERFACE COUNT FIELD.       *
                          ACCESSED AND MODIFIED        *
                          UNDER CMS LOCK.              *
                          INCREMENTED BY DDR TO       	 *
                          INDICATE TO DYNAMIC          *
                          ALLOCATION THAT DDR          *
                          EXCHANGED ADDRESSES IN       *
                          THE IOS LOOKUP TABLE.        *
                                             MDC008*/ *   2 CSDGDCC
FIXED(31),             /* COUNT OF USABLE CLOCK        *
                          COMPARATORS CURRENTLY IN     *
                          THE CONFIGURATION  MDC003*/  *   2 CSDGDINT
FIXED(31),             /* COUNT OF USABLE CPU         
 *
                          TIMERS CURRENTLY IN THE      *
                          CONFIGURATION      MDC004*/  *   2 CSDGDTOD
FIXED(31),             /* COUNT OF CPU'S WHICH HAVE     *
                          ACCESS TO A GOOD TOD        á *
                          CLOCK              MDC005*/ & *   2 CSDTCNT
FIXED(31),             /* COUNT OF TAPE ALLOCATIONS   - *
                          IN PROGRESS        MDC009*/ Á *   2 CSDUCNT
FIXED(31),             /* COUNT OF UNIT RECORD        ø *
                          ALLOCATIONS IN PROGRESS     Í *
                                             MDC010*/ Ø *   2 CSDMASK 40404Ù1
6) CHAR(2),            /* TABLE OF BIT MASKS FOR      n *
                          TESTING BITS IN CSDCPUAL      *
                                             MDC017*/ 	 *   2 *
./ ADD NAME=IHAOLD   0100-02135-02135-1228-00383-00383-00000-VBCMACS
         MACRO
         IHAPSA
*                *****   PREFIXED SAVE AREA   *****
PSA      DSECT
FLC      EQU   *
FLCIPPSW DS    0CL8           IPL PSW
FLCRNPSW DC    XL4'040E0000'  RESTART NEW PSW (AFTER IPL)
         DC    V(IEAVRSTR)    SECOND HALF OF RESTART NEW PSW
IPLPSW   EQU   FLCIPPSW     ALIAS
FLCICCW1 DS    0CL8           IPL CCW1
FLCROPSW DC    XL8'00'        RESTART OLD PSW (AFTER IPL)
FLCICCW2 DS    0CL8           IPL CCW2
FLCCVT   DC    V(IEACVT)      ADDRESS OF CVT (AFTER IPL)
         DC    XL4'00'        RESERVED (AFTER IPL)
FLCEOPSW DC    XL8'00'        EXTERNAL OLD PSW
EXOPSW   EQU   FLCEOPSW     ALIAS
FLCSOPSW DC    XL8'00'        SVC OLD PSW
SVCOPSW  EQU   FLCSOPSW     ALIAS
FLCPOPSW DC    XL8'00'        PROGRAM CHECK OLD PSW
PIOPSW   EQU   FLCPOPSW     ALIAS
FLCMOPSW DC    XL8'00'        MACHINE CHECK OLD PSW
MCOPSW   EQU   FLCMOPSW     ALIAS
FLCIOPSW DC    XL8'00'        INPUT/OUTPUT OLD PSW
IOOPSW   EQU   FLCIOPSW     ALIAS
FLCCSW   DC    XL8'00'        CHANNEL STATUS WORD
FLCCAW   DC    XL4'00'        CHANNEL ADDRESS WORD
FLCCVT2  DC    V(IEACVT)      ADDRESS OF CVT - USED BY DUMP
*                             ROUTINES
FLCTIMER DC    XL4'FFFFFFFF'  TIMER
TIMER    EQU   FLCTIMER
FLCTRACE DC    A(0)           ADDRESS OF TRACE TABLE HEADER
FLCENPSW DC    XL4'040C0000'  EXTERNAL NEW PSW
         DC    V(IEAQEX00)    SECOND HALF OF EXTERNAL NEW PSW
EXNPSW   EQU   FLCENPSW     ALIAS
FLCSNPSW DC    XL4'040C0000'  SVC NEW PSW
         DC    V(IEAQSC00)    SECOND HALF OF SVC NEW PSW
SVCNPSW  EQU   FLCSNPSW     ALIAS
FLCPNPSW DC    XL4'000E0000'  PROGRAM CHECK NEW PSW
         DC    V(IEAQPK00)    SECOND HALF OF PROGRAM CHECK NEW PSW
PINPSW   EQU   FLCPNPSW     ALIAS
FLCMNPSW DC    XL4'00080000'  MACHINE CHECK NEW PSW
         DC    V(IGFPMCIH)    SECOND HALF OF MACHINE CHECK NEW PSW
MCNPSW   EQU   FLCMNPSW     ALIAS
FLCINPSW DC    XL4'040C0000'  INPUT/OUTPUT NEW PSW
         DC    V(IEAQIO00)    SECOND HALF OF I/O NEW PSW
IONPSW   EQU   FLCINPSW     ALIAS
         DC    XL4'00'        RESERVED
PSAEEPSW DS    0F             EXTENDED PSW DATA STORED ON EXTERNAL
*                             INTERRUPT
PSASPAD  DC    H'0'           ISSUING PROCESSOR'S PHYSICAL ADDRESS ON
*                             EMS OR EXTERNAL CALL INTERRUPT
FLCEICOD DC    H'0'           EXTERNAL INTERRUPTION CODE
EXCODE   EQU   FLCEICOD     ALIAS
PSAESPSW DS    0F             EXTENDED PSW DATA STORED ON SVC
*                             INTERRUPT
         DC    XL1'00'        RESERVED   SET TO ZERO
FLCSVILC DC    FL1'0'         SVC INSTRUCTION LENGTH COUNTER
*                             NUMBER OF BYTES
FLCSILCB EQU   X'07'          SIGNIFICANT BITS IN ILC FIELD   LAST
*                             BIT IS ALWAYS ZERO
SVCILC   EQU   FLCSVILC       ALIAS
FLCSVCN  DC    H'0'           SVC INTERRUPTION CODE   SVC NUMBER MDC081
SVCNUM   EQU   FLCSVCN        ALIAS
PSAEPPSW DS    0CL8           EXTENDED PSW FOR PROGRAM INTERRUPT MDC086
         DC    XL1'00'        RESERVED   SET TO ZERO
FLCPIILC DC    FL1'0'         PROGRAM INTERRUPT LENGTH COUNTER
*                             NUMBER OF BYTES IN INSTRUCTION CAUSING
*                             PROGRAM INTERRUPTION
FLCPILCB EQU   X'07'          SIGNIFICANT BITS IN ILC FIELD   LAST
*                             BIT IS ALWAYS ZERO
PIILC    EQU   FLCPIILC       ALIAS
FLCPICOD DS    0H             PROGRAM INTERRUPTION CODE
PICODE   EQU   FLCPICOD       ALIAS
PSARV049 DC    XL1'00'        RESERVED FOR IMPRECISE INTERRUPTS
PSAPICOD DC    FL1'0'         8 BIT INTERRUPT CODE
PSAPIPER EQU   X'80'          PER INTERRUPT OCCURRED
PSAPIMC  EQU   X'40'          MONITOR CALL INTERRUPT OCCURRED
PSAPIPC  EQU   X'3F'          AN UNSOLICITED PROGRAM CHECK HAS
*                             OCCURRED IF ANY OF THESE 6 BITS ARE
*                             ON
FLCTEA   DS    0A             TRANSLATION EXCEPTION ADDRESS
         DC    XL1'00'        RESERVED   SET TO ZERO
FLCTEAA  DC    AL3(0)         TRANSLATION EXCEPTION ADDRESS
         DC    XL1'00'        RESERVED   SET TO ZERO
FLCMCNUM DC    XL1'00'        MONITOR CLASS NUMBER
FLCPERCD DC    XL1'00'        PROGRAM EVENT RECORDING CODE
         DC    XL1'00'        RESERVED   SET TO ZERO
FLCPER   DS    0A             PER ADDRESS
         DC    XL1'00'        RESERVED   SET TO ZERO
FLCPERA  DC    AL3(0)         PER ADDRESS
         DC    XL1'00'        RESERVED   SET TO ZERO
FLCMTRCD DC    XL3'00'        MONITOR CODE
         DC    XL8'00'        RESERVED
FLCMCLA  DS    0XL344         MACHINE CHECK LOGOUT AREA
FLCCHNID DC    XL4'00'        CHANNEL ID
FLCIOEL  DS    0A             SAME AS FLCIOELA BELOW
         DC    XL1'00'        RESERVED
FLCIOELA DC    AL3(0)         I/O EXTENDED LOGOUT (IOEL) POINTER
FLCLCL   DC    XL4'00'        LIMITED CHANNEL LOGOUT (ECSW)
         DC    XL2'00'        RESERVED
         DC    XL1'00'        RESERVED
         DC    XL1'00'        RESERVED
FLCIOA   DS    0A             I/O ADDRESS
         DC    XL1'00'        RESERVED
FLCIOAA  DC    AL3(0)         I/O ADDRESS
         DC    XL44'00'       RESERVED
FLCMCIC  DC    XL8'00'        MACHINE CHECK INTERRUPTION CODE
         DC    XL8'00'        RESERVED
FLCFSA   DS    0A             FAILING STORAGE ADDRESS
         DC    XL1'00'        ZEROES
FLCFSAA  DC    AL3(0)         FAILING STORAGE ADDRESS
FLCRGNCD DC    XL4'00'        REGION CODE
FLCFLA   DC    XL96'00'       FIXED LOGOUT AREA
FLCFPSAV DC    XL32'00'       FLOATING POINT REGISTER SAVE AREA
FLCGRSAV DC    16F'0'         GENERAL REGISTER SAVE AREA
FLCCRSAV DC    16F'0'         CONTROL REGISTER SAVE AREA
FLCHDEND DS    0D             END OF HARDWARE ASSIGNMENTS
PSAPSA   DC    CL4'PSA '      CONTROL BLOCK ACRONYM IN EBCDIC
PSACPUPA DC    H'0'           PHYSICAL CPU ADDRESS (CHANGED DURING ACR)
PSACPULA DC    H'0'           LOGICAL CPU ADDRESS
PSAPCCAV DC    A(0)           VIRTUAL ADDRESS OF PCCA
PSAPCCAR DC    A(0)           REAL ADDRESS OF PCCA
PSALCCAV DC    A(0)           VIRTUAL ADDRESS OF LCCA
PSALCCAR DC    A(0)           REAL ADDRESS OF LCCA
PSATNEW  DC    A(0)           TCB NEW POINTER
IEATCBP  EQU   PSATNEW        ALIAS
PSATOLD  DC    A(0)           TCB OLD POINTER
PSAANEW  DC    A(0)           ASCB NEW POINTER
PSAAOLD  DC    A(0)           ASCB OLD POINTER
PSASUPER DS    0BL4           SUPERVISOR CONTROL WORD
PSASUP1  DC    XL1'00'        FIRST BYTE OF PSASUPER
PSAIO    EQU   X'80'          I/O FLIH
PSASVC   EQU   X'40'          SVC FLIH
PSAEXT   EQU   X'20'          EXTERNAL FLIH
PSAPI    EQU   X'10'          PROGRAM CHECK FLIH
PSALOCK  EQU   X'08'          LOCK ROUTINE
PSADISP  EQU   X'04'          DISPATCHER
PSAIPCDR EQU   X'02'          SIGP   DIRECT
PSAIPCRP EQU   X'01'          SIGP   REMOTE PENDING
PSASUP2  DC    XL1'00'        SECOND BYTE OF PSASUPER
PSAIPCRI EQU   X'80'          SIGP   REMOTE IMMEDIATE
PSAGTF   EQU   X'40'          GTF GIVEN CONTROL FROM FLIH
PSAIPCEC EQU   X'20'          EXTERNAL CALL SLIH IS ACTIVE
PSAIPCES EQU   X'10'          EMERGENCY SIGNAL SLIH IS ACTIVE
PSAIPCE2 EQU   X'08'          EMERGENCY SIGNAL (EMS) SLIH RECURSIVE
*                             ENTRY FLAG
PSAACR   EQU   X'04'          AUTOMATIC CPU RECONFIGURATION (ACR) IN
*                             CONTROL
PSARTM   EQU   X'02'          RECOVERY TERMINATION MONITOR (RTM) IN
*                             CONTROL
PSALCR   EQU   X'01'          LOW CORE REFRESH ROUTINE IS ACTIVE MDC126
PSASUP3  DC    XL1'00'        THIRD BYTE OF PSASUPER
PSAIOSUP EQU   X'80'          IF ON, A MAINLINE IOS COMPONENT SUCH AS
*                             CHANNEL SCHEDULER HAS ENTERED A
*                             PHYSICALLY DISABLED STATE WITHOUT REGARD
*                             TO LOCKING REQUIREMENTS
PSAPI2   EQU   X'40'          PROGRAM CHECK FLIH RECURSION
PSAPSREG EQU   X'20'          PSA RECOVERY RECURSION
PSARV010 EQU   X'10',,C'X'    RESERVED
PSARV011 EQU   X'08',,C'X'    RESERVED
PSARV012 EQU   X'04',,C'X'    RESERVED
PSARV013 EQU   X'02',,C'X'    RESERVED
PSARV014 EQU   X'01',,C'X'    RESERVED
PSASUP4  DC    XL1'00'        FOURTH BYTE OF PSASUPER
PSARV015 EQU   X'80',,C'X'    RESERVED
PSARV016 EQU   X'40',,C'X'    RESERVED
PSARV017 EQU   X'20',,C'X'    RESERVED
PSARV018 EQU   X'10',,C'X'    RESERVED
PSARV019 EQU   X'08',,C'X'    RESERVED
PSARV020 EQU   X'04',,C'X'    RESERVED
PSARV021 EQU   X'02',,C'X'    RESERVED
PSARV022 EQU   X'01',,C'X'    RESERVED
PSAGPREG DC    3F'0'          REGISTER SAVE AREA FOR I/O FLIH, SVC
*                             FLIH, EXTERNAL FLIH AND SYSTEM TRACE
PSARSREG DC    F'0'           RESTART FLIH REGISTER SAVE
PSAPIREG DC    F'0'           PROGRAM CHECK FLIH REGISTER SAVE
         DS    0D             ALIGN PSAEXPS1 TO DOUBLE WORD
PSAEXPS1 DC    XL8'00'        EXTERNAL FLIH PSW SAVE AREA 1
         DS    0D             ALIGN PSAEXPS2 TO DOUBLE WORD
PSAEXPS2 DC    XL8'00'        EXTERNAL FLIH PSW SAVE AREA 2
         DS    0D             ALIGN PSAMPSW TO DOUBLE WORD
PSAMPSW  DC    XL8'000C000000000000'   SETLOCK MODEL PSW
         DS    0D             ALIGN PSAMCHEX TO DOUBLE WORD
PSAMCHEX DC    XL8'00'        MCH EXIT PSW
PSAIPCR  DC    X'AD00'        FIRST HALF OF IPC INSTRUCTION TO BE
*                             EXECUTED
         DC    Y(PSAIPCRM-PSA)   SECOND HALF OF IPC INSTRUCTION
PSAIPCRM DC    XL1'00'        BYTE USED BY ABOVE IPC INSTRUCTION
         DC    XL3'00'        RESERVED
PSAIPCD  DC    X'AD00'        FIRST HALF OF IPC INSTRUCTION TO BE
*                             EXECUTED
         DC    Y(PSAIPCDM-PSA)   SECOND HALF OF IPC INSTRUCTION
PSAIPCDM DC    XL1'00'        BYTE USED BY ABOVE IPC INSTRUCTION
         DC    XL3'00'        RESERVED
PSAIPCSA DC    F'0'           IPC REGISTER SAVE AREA
PSAHLHIS DC    F'0'           SAVE AREA FOR PSAHLHI
PSARECUR DC    XL1'00'        RESTART FLIH RECURSION INDICATOR.  IF
*                             X'00', FLIH NOT IN CONTROL.  IF X'FF',
*                             FLIH IN CONTROL, ENTRY IS RECURSIVE.
PSADSSGO DC    XL1'00'        INITIALIZE DSS FLAG, SET BY OPERATOR.
*                             IF X'00', DSS NOT TO BE ACTIVATED.  IF
*                             NOT X'00', NEXT RESTART INTERRUPT FROM
*                             CONSOLE SHOULD INITIALIZE DSS.
PSARV050 DC    H'0'           RESERVED
PSASRSA  DC    A(0)           REAL ADDRESS OF SAVE AREA USED DURING
*                             STOP AND RESTART SUBROUTINE
PSACLHT  DS    0CL56          CPU LOCKS HELD TABLE.  INITIALIZED TO
*                             ZERO.  IF LOCK IS HELD, WORD REPRESENTING
*                             LOCK HAS ITS ADDRESS.
PSADISPL DC    A(0)           GLOBAL DISPATCHER LOCK
PSAASML  DC    A(0)           AUXILIARY STORAGE MANAGEMENT (ASM) LOCK
PSASALCL DC    A(0)           SPACE ALLOCATION LOCK
PSAIOSSL DC    A(0)           IOS SYNCHRONIZATION LOCK
PSAIOSCL DC    A(0)           IOS CHANNEL AVAILABLE TABLE LOCK
PSAIOSUL DC    A(0)           IOS UNIT CONTROL BLOCK LOCK
PSAIOSLL DC    A(0)           IOS LOGICAL CHANNEL QUEUE LOCK
PSATPNCL DC    A(0)           TCAM'S TPNCP LOCK
PSATPDNL DC    A(0)           TCAM'S TPDNCB LOCK
PSATPACL DC    A(0)           TCAM'S TPACBDEB LOCK
PSAOPTL  DC    A(0)           OPTIMIZER LOCK
PSACMSL  DC    A(0)           CROSS MEMORY SERVICES LOCK
PSALOCAL DC    A(0)           LOCAL LOCK
PSARV023 DC    A(0)           RESERVED LOCK
PSALKSA  DS    0CL64          SETLOCK REGISTER SAVE AREA
PSALKR0  DC    F'0'           SETLOCK'S CALLER'S REGISTER 0
PSALKR1  DC    F'0'           SETLOCK'S CALLER'S REGISTER 1
PSALKR2  DC    F'0'           SETLOCK'S CALLER'S REGISTER 2
PSALKR3  DC    F'0'           SETLOCK'S CALLER'S REGISTER 3
PSALKR4  DC    F'0'           SETLOCK'S CALLER'S REGISTER 4
PSALKR5  DC    F'0'           SETLOCK'S CALLER'S REGISTER 5
PSALKR6  DC    F'0'           SETLOCK'S CALLER'S REGISTER 6
PSALKR7  DC    F'0'           SETLOCK'S CALLER'S REGISTER 7
PSALKR8  DC    F'0'           SETLOCK'S CALLER'S REGISTER 8
PSALKR9  DC    F'0'           SETLOCK'S CALLER'S REGISTER 9
PSALKR10 DC    F'0'           SETLOCK'S CALLER'S REGISTER 10
PSALKR11 DC    F'0'           SETLOCK'S CALLER'S REGISTER 11
PSALKR12 DC    F'0'           SETLOCK'S CALLER'S REGISTER 12
PSALKR13 DC    F'0'           SETLOCK'S CALLER'S REGISTER 13
PSALKR14 DC    F'0'           SETLOCK'S CALLER'S REGISTER 14
PSALKR15 DC    F'0'           SETLOCK'S CALLER'S REGISTER 15
PSACLHS  DS    0F             CPU LOCKS HELD STRING
PSAHLHI  DC    F'0'           HIGHEST LOCK HELD INDICATOR
PSALITA  DC    V(IEAVELIT)    ADDRESS OF LOCK INTERFACE TABLE
         DS    0D             ALIGN PSAPSWSV TO DOUBLE WORD
PSAPSWSV DC    XL8'00'        PSW SAVE AREA FOR DISPATCHER AND ACR
PSACR0   DC    F'0'           SAVE AREA FOR CONTROL REGISTER 0
PSAMCHFL DC    XL1'00'        MCH RECURSION FLAGS
PSASYMSK DC    XL1'00'        THIS FIELD WILL BE USED IN CONJUNCTION
*                             WITH THE STNSM INSTRUCTION TO PLACE IOS
*                             CHANNEL SCHEDULER INTO A DISABLED STATE
*                             AND SIMULTANEOUSLY SAVE THE SYSTEM MASK
*                             OF THE CALLER
PSARV061 DC    XL1'00'        RESERVED
PSAMCHIC DC    XL1'00'        MCH INITIALIZATION COMPLETE FLAGS
PSAWKRAP DC    A(0)           REAL ADDRESS OF VARY CPU PARAMETER LIST
PSAWKVAP DC    A(0)           VIRTUAL ADDRESS OF VARY CPU PARAMETER
*                             LIST
PSAVSTAP DC    H'0'           WORK AREA FOR VARY CPU
PSACPUSA DC    H'0'           PHYSICAL CPU ADDRESS (STATIC)
PSASTOR  DC    F'0'           MASTER MEMORY'S SEGMENT TABLE ORIGIN
*                             REGISTER (STOR) VALUE
PSADSSRS DC    F'0'           REGISTER SAVE FOR DSS PROGRAM AND SVC
*                             INTERRUPT HANDLERS
PSADSSR2 DC    F'0'           REGISTER SAVE AREA FOR DSS I/O AND
*                             EXTERNAL INTERRUPT HANDLERS
PSADSSR3 DC    F'0'           REGISTER SAVE AREA FOR DSS ERROR RECOVERY
*                             ROUTINE
PSADSSWK DC    F'0'           WORK AREA FOR DSS INTERRUPT HANDLERS
PSADSSTS DC    5F'0'          REGISTER SAVE FOR DSS MODULES MAKING
*                             CALLS TO IQATSS
PSADSSFL DS    0BL4           DSS FLAG BYTES
PSADSSF1 DC    XL1'00'        DSS STATUS BYTE
PSADSSMV EQU   X'80'          DSS MONITORING, VS2 RUNNING
PSADSSDM EQU   X'40'          DSS IN VS2 2 VM
PSADSSDD EQU   X'20'          DSS IN DSS VM
PSADSSDW EQU   X'10'          DSS IN DSS WAIT
PSADSSTP EQU   X'08'          DSS PROCESSING SIGP
PSADSSSP EQU   X'04'          DSS SIGP PENDING
PSADSSOI EQU   X'02'          DSS EXECUTING OVERLAID INSTRUCTION
PSADSSPI EQU   X'01'          DSS EXECUTING PRIVILEGED INSTRUCTION
PSADSSF2 DC    XL1'FF'        SYSTEM STATUS BYTE
PSADSSPS EQU   X'FF'          SYSTEM RUNNING IN PROBLEM STATE
PSADSSSS EQU   X'FE'          SYSTEM RUNNING IN PRIVILEGED STATE
PSADSSF3 DC    XL1'00'        DSS FLAG BYTE
PSADSSGP EQU   X'80'          DSS SIGP INDICATOR
PSADSSES EQU   X'40'          ERROR SHORT SAVE INDICATOR
PSADSSNM EQU   X'20'          NON MONITORABLE CODE INDICATOR
PSADSSRW EQU   X'10'          DSS OWNS CVTRSTWD
PSADSSMC EQU   X'08'          MACHINE CHECK RUNNING
PSARV055 EQU   X'04',,C'X'    RESERVED FOR DSS
PSARV056 EQU   X'02',,C'X'    RESERVED FOR DSS
PSARV057 EQU   X'01',,C'X'    RESERVED FOR DSS
PSADSSF4 DC    XL1'00'        DSS RECURSION FLAGS
PSADSSRC EQU   X'80'          PROGRAM SVC RECURSION FLAG
PSADSS12 EQU   X'40'          PROGRAM INTERRUPT 12 RECURSION FLAG
PSADSSIE EQU   X'20'          I/O EXTERNAL RECURSION FLAG
PSADSSC0 EQU   X'10'          CONTROL REGISTER 0 INVALID FLAG
PSADSSDE EQU   X'08'          DAT ERROR WHILE DSS RUNNING IN VS2 VM
PSADSSVE EQU   X'04'          DAT ERROR WHILE DSS RUNNING IN DSS VM
PSADSS10 EQU   X'02'          SEGMENT EXCEPTION RECURSION FLAG
PSADSS05 EQU   X'01'          ADDRESSING EXCEPTION RECURSION FLAG
         DS    0D             ALIGN PSADSSRP TO DOUBLEWORD
PSADSSRP DC    XL8'00'        DSS TO VS2 2 RESUME PSW
         DS    0D             ALIGN PSADSSPP TO DOUBLEWORD
PSADSSPP DC    XL8'00'        DSS PSW FOR RETURNING CONTROL FROM
*                             PRIVILEGED INSTRUCTION STREAM TO VS2
PSADSS14 DC    F'0'           DSS RESTART SECOND LEVEL INTERRUPT
*                             HANDLER CONTROL REGISTER 14 SAVE AREA
PSADSSFW DC    F'0'           FULL WORD DSS WORK AREA
PSADSSPR DC    F'0'           DSS REGISTER SAVE FOR PRIVILEGED
*                             INSTRUCTION STREAM
PSADSSED EQU   *              END OF DSS FIELDS
PSARV025 DC    F'0'           RESERVED FOR DSS
PSARV040 DC    F'0'           RESERVED FOR DSS
PSARV041 DC    F'0'           RESERVED FOR DSS
PSARV042 DC    F'0'           RESERVED FOR DSS
PSARV043 DC    F'0'           RESERVED FOR DSS
PSARV044 DC    F'0'           RESERVED FOR DSS
PSARV045 DC    F'0'           RESERVED FOR DSS
PSARSVT  DS    0CL64          RECOVERY STACK VECTOR TABLE
PSARSVTE DS    0CL64          RECOVERY STACK VECTOR TABLE
PSACSTK  DC    A(0)           ADDRESS OF CURRENTLY USED FUNCTIONAL
*                             RECOVERY ROUTINE (FRR) STACK
PSANSTK  DC    A(0)           ADDRESS OF NORMAL FRR STACK
PSASSTK  DC    A(0)           ADDRESS OF SVC I/O DISPATCHER FRR STACK
PSASSAV  DC    A(0)           ADDRESS OF INTERRUPTED STACK SAVED BY
*                             SVC I/O DISPATCHER
PSAMSTK  DC    A(0)           ADDRESS OF MCH FRR STACK
PSAMSAV  DC    A(0)           ADDRESS OF INTERRUPTED STACK SAVED BY
*                             MCH
PSAPSTK  DC    A(0)           ADDRESS OF PROGRAM CHECK FLIH FRR STACK
PSAPSAV  DC    A(0)           ADDRESS OF INTERRUPTED STACK SAVED BY
*                             PROGRAM CHECK FLIH
PSAESTK1 DC    A(0)           ADDRESS OF EXTERNAL FLIH FRR STACK FOR
*                             NON RECURSIVE ENTRIES
PSAESAV1 DC    A(0)           ADDRESS OF INTERRUPTED STACK SAVED BY
*                             NON RECURSIVE ENTRIES
PSAESTK2 DC    A(0)           ADDRESS OF EXTERNAL FLIH FRR STACK FOR
*                             FIRST LEVEL RECURSIONS
PSAESAV2 DC    A(0)           ADDRESS OF INTERRUPTED STACK SAVE BY
*                             EXTERNAL FLIH FOR FIRST LEVEL RECURSIONS
PSAESTK3 DC    A(0)           ADDRESS OF EXTERNAL FLIH FRR STACK FOR
*                             SECOND LEVEL RECURSIONS AND ACR
PSAESAV3 DC    A(0)           ADDRESS OF INTERRUPTED STACK SAVED BY
*                             EXTERNAL FLIH (ACR) FOR SECOND LEVEL
*                             RECURSIONS
PSARSTK  DC    A(0)           ADDRESS OF RESTART FLIH FRR STACK
PSARSAV  DC    A(0)           ADDRESS OF INTERRUPTED STACK SAVED BY
*                             RESTART FLIH
         DS    0D             ALIGN PSARPSW TO DOUBLE WORD
PSASRPSW DC    XL8'00'        RESUME PSW FOR STOP AND RESTART
*                             SUBROUTINE
         DS    0D             ALIGN PSARSPSW TO DOUBLE WORD
PSARSPSW DC    XL8'00'        RESUME PSW FIELD FOR RESTART INTERRUPT
*                             HANDLER
         DS    0D             ALIGN PSASTART TO DOUBLE WORD
PSASTART BR    14             START FATHOM RECORDING
         DC    XL14'00'       REST OF PSASTART
         DS    0D             ALIGN PSASTOP TO DOUBLE WORD
PSASTOP  BR    14             STOP FATHOM RECORDING
         DC    XL14'00'       REST OF PSASTOP
         DS    0F             ALIGN PSASFACC TO FULL WORD
PSASFACC DC    XL4'8007D000'   SETFRR ABEND COMPLETION CODE USED WHEN
*                             A SETFRR ADD IS ISSUED AGAINST A FULL
*                             FRR STACK
PSALSFCC DC    XL4'581003F0'   A LOAD INSTRUCTION TO PRIME REGISTER 1
*                             WITH THE SETFRR ABEND COMPLETION CODE IN
*                             PSASFACC
PSASVC13 SVC   13             AN SVC 13 INSTRUCTION
PSARV059 DC    H'0'           RESERVED
PSAPIR2  DC    F'0'           PROGRAM CHECK FLIH REGISTER SAVE
         DS    0D             ALIGN PSAPCPSW TO DOUBLE WORD
PSAPCPSW DC    XL8'00'        TEMPORARY OLD PSW STORAGE FOR PROGRAM
*                             FLIH
PSAATCVT DC    A(0)           ADDRESS OF VTAM ATCVT.  INITIALIZED BY
*                             VTAM.
PSARV062 DC    F'0'           RESERVED
PSAUSEND DS    0D             END OF ASSIGNED FIELDS
         DC    2032XL1'00'    RESERVED
         DS    0D             ALIGN PSASTAK TO DOUBLE WORD
PSASTAK  DC    596XL1'00'     NORMAL FRR STACK
         DC    428XL1'00'     RESERVED FOR EXPANSION OF PSASTAK
         MEND
./ ADD NAME=IHAPCCA  0100-02135-02135-1228-00650-00650-00000-VBCMACS
*
*        %GOTO PCCAL1;  /*
         MACRO
         IHAPCCA &DSECT=YES   */
*%PCCAL1 : ;
*
*/* **************************************************************** */
*/*                                                                  */
*/*            PHYSICAL CONFIGURATION COMMUNICATION AREA             */
*/*                                                                  */
*/*  OS/VS2 SU47, 09/03/76, LEVEL=1                                  */
*/*                                                                  */
*/*  METHOD OF ACCESS                                                */
*/*      BAL  - DSECT IS PRODUCED UNLESS DSECT=NO IS SPECIFIED.      */
*/*             USING ON PCCA GIVES ADDRESSABILITY FOR ALL SYMBOLS.  */
*/*      PL/S - DCL PCCAPTR PTR                                      */
*/*                                                                  */
*/* **************************************************************** */
*%GOTO PCCAL2;  /*
         SPACE 1
         AIF   ('&DSECT' EQ 'NO').PCCA010
PCCA     DSECT
         AGO   .PCCA020
.PCCA010 ANOP
         DS    0D
PCCA     EQU   *
.PCCA020 ANOP
PCCAPCCA DC    CL4'PCCA' -    CONTROL BLOCK ACRONYM IN EBCDIC
PCCACPID DC    XL12'00' -     CPU ID (CONTAINS SERIAL NUMBER)
PCCACPUA DC    H'0' -         PHYSICAL CPU ADDRESS
PCCACAFM DC    H'0' -         BIT MASK CORRESPONDING TO PHYSICAL CPU
*                             ADDRESS
PCCATQEP DC    A(0) -         TQE POINTER
PCCAPSAV DC    A(0) -         VIRTUAL ADDRESS OF PSA
PCCAPSAR DC    A(0) -         REAL ADDRESS OF PSA
PCCARV81 DS    A -            RESERVED                           MDC005
PCCARV82 DS    A -            RESERVED                           MDC005
PCCARV83 DS    A -            RESERVED                           MDC005
PCCARV84 DS    A -            RESERVED                           MDC005
PCCARV85 DS    A -            RESERVED                           MDC005
PCCARV86 DS    A -            RESERVED                           MDC005
PCCARV87 DS    A -            RESERVED                           MDC005
PCCARV88 DS    A -            RESERVED                           MDC005
PCCARV89 DS    A -            RESERVED                           MDC005
PCCARV90 DS    A -            RESERVED                           MDC005
PCCARV91 DS    A -            RESERVED                           MDC005
PCCARV92 DS    A -            RESERVED                           MDC005
PCCARV93 DS    A -            RESERVED                           MDC005
PCCARV94 DS    A -            RESERVED                           MDC005
PCCARV95 DS    A -            RESERVED                           MDC005
PCCARV96 DS    A -            RESERVED                           MDC005
PCCARV97 DS    A -            RESERVED                           MDC005
PCCARV98 DS    A -            RESERVED                           MDC005
PCCARV99 DS    A -            RESERVED                           MDC005
PCCARV9A DS    A -            RESERVED                           MDC005
PCCARV9B DS    A -            RESERVED                           MDC005
PCCARV9C DS    A -            RESERVED                           MDC005
PCCARV9D DS    A -            RESERVED                           MDC005
PCCARV9E DS    A -            RESERVED                           MDC005
PCCATMST DS    0BL4 -         TIMER STATUS BYTES
PCCATMFL DC    XL1'00' -      FIRST BYTE OF PCCATMST
PCCAINIT EQU   X'80' -        ENTRY HAS BEEN INITIALIZED
PCCASYNC EQU   X'40' -        CLOCK OUT OF SYNCHRONIZATION
PCCAVKIL EQU   X'20' -        VARY CPU SHOULD BE CANCELLED
PCCAMCC  EQU   X'10' -        PROCESSING FOR PERMANENTLY DAMAGED CLOCK
*                             COMPARATOR MUST BE DONE
PCCAMINT EQU   X'08' -        PROCESSING FOR CPU TIMER MUST BE DONE
PCCARV02 EQU   X'04',,C'X' -  RESERVED
PCCARV03 EQU   X'02',,C'X' -  RESERVED
PCCARV04 EQU   X'01',,C'X' -  RESERVED
PCCATODE DC    XL1'00' -      TOD CLOCK ERROR FLAGS
PCCANUTD EQU   X'80' -        CLOCK CANNOT BE USED
PCCANFTD EQU   X'40' -        CLOCK SHOULD NOT BE RESET
PCCACTTD EQU   X'3F' -        ERROR COUNT (6 BITS)
PCCACCE  DC    XL1'00' -      FLAGS FOR CLOCK COMPARATOR
PCCANUCC EQU   X'80' -        CLOCK COMPARATOR CANNOT BE USED
PCCANFCC EQU   X'40' -        CLOCK COMPARATOR SHOULD NOT BE RESET
PCCACTCC EQU   X'3F' -        ERROR COUNT (6 BITS)
PCCAINTE DC    XL1'00' -      FLAGS FOR CPU TIMER
PCCANUIN EQU   X'80' -        CPU TIMER CANNOT BE USED
PCCANFIN EQU   X'40' -        CPU TIMER SHOULD NOT BE RESET
PCCACTIN EQU   X'3F' -        ERROR COUNT (6 BITS)
PCCARPB  DC    F'0' -         EXTERNAL CALL SIGP BUFFER
PCCAEMSB DS    0CL16 -        EMERGENCY SIGNAL SIGP BUFFER
PCCAEMSI DS    0BL4 -         FIRST WORD OF EMS BUFFER
PCCARISP DC    XL1'00' -      CONTAINS PARALLEL/SERIAL REQUEST
*                             INDICATOR FOR REMOTE IMMEDIATE SIGNAL
PCCAPARL EQU   X'80' -        PARALLEL REQUEST                   MDC002
PCCASERL EQU   X'40' -        SERIAL REQUEST                     MDC003
PCCARV06 EQU   X'20',,C'X' -  RESERVED
PCCARV07 EQU   X'10',,C'X' -  RESERVED
PCCARV08 EQU   X'08',,C'X' -  RESERVED
PCCARV09 EQU   X'04',,C'X' -  RESERVED
PCCARV10 EQU   X'02',,C'X' -  RESERVED
PCCARV11 EQU   X'01',,C'X' -  RESERVED
PCCAEMS2 DC    XL1'00' -      SECOND BYTE OF PCCAEMSI
PCCARV12 EQU   X'80',,C'X' -  RESERVED
PCCARV13 EQU   X'40',,C'X' -  RESERVED
PCCARV14 EQU   X'20',,C'X' -  RESERVED
PCCARV15 EQU   X'10',,C'X' -  RESERVED
PCCARV16 EQU   X'08',,C'X' -  RESERVED
PCCARV17 EQU   X'04',,C'X' -  RESERVED
PCCARV18 EQU   X'02',,C'X' -  RESERVED
PCCARV19 EQU   X'01',,C'X' -  RESERVED
PCCAEMS3 DC    XL1'00' -      THIRD BYTE OF PCCAEMSI
PCCARV20 EQU   X'80',,C'X' -  RESERVED
PCCARV21 EQU   X'40',,C'X' -  RESERVED
PCCARV22 EQU   X'20',,C'X' -  RESERVED
PCCARV23 EQU   X'10',,C'X' -  RESERVED
PCCARV24 EQU   X'08',,C'X' -  RESERVED
PCCARV25 EQU   X'04',,C'X' -  RESERVED
PCCARV26 EQU   X'02',,C'X' -  RESERVED
PCCARV27 EQU   X'01',,C'X' -  RESERVED
PCCARMSB DC    XL1'00' -      CONTAINS RMS INDICATOR
PCCARV28 EQU   X'80',,C'X' -  RESERVED
PCCARV29 EQU   X'40',,C'X' -  RESERVED
PCCARV30 EQU   X'20',,C'X' -  RESERVED
PCCARV31 EQU   X'10',,C'X' -  RESERVED
PCCARV32 EQU   X'08',,C'X' -  RESERVED
PCCARV33 EQU   X'04',,C'X' -  RESERVED
PCCARV34 EQU   X'02',,C'X' -  RESERVED
PCCARMS  EQU   X'01' -        SIGP WAS ISSUED VIA RMS
PCCAEMSP DC    A(0) -         REMOTE IMMEDIATE SIGNAL PARAMETER ADDRESS
PCCAEMSE DC    A(0) -         REMOTE IMMEDIATE SIGNAL RECEIVING ROUTINE
*                             ENTRY POINT ADDRESS
PCCAEMSA DC    A(0) -         PCCA ADDRESS OF THE RECEIVING ROUTINE
PCCAPWAV DC    A(0) -         VIRTUAL ADDRESS OF MCH PROCESSOR WORK
*                             AREA
PCCAPWAR DC    A(0) -         REAL ADDRESS OF MCH PROCESSOR WORK AREA
PCCALRBV DC    A(0) -         VIRTUAL ADDRESS OF MCH LOGREC BUFFER
PCCALRBR DC    A(0) -         REAL ADDRESS OF MCH LOGREC BUFFER
         DS    0D -           ALIGN PCCACHEL TO DOUBLEWORD
PCCACHEL DS    0XL112 -       CHANNEL LOGOUT AREA FOR 2880 OR M/145
         DC    112XL1'FF' -   INITIALIZATION FOR PCCACHEL
         DS    0D -           ALIGN PCCAWERP TO DOUBLEWORD
PCCAWERP DS    0XL8 -         WORK ERPIB FOR CCH
PCCACHUB DC    A(0) -         UCB ADDRESS OF THE DEVICE IN USE WHEN
*                             THE CHANNEL-DETECTED ERROR OCCURRED.
*                             THIS FIELD IS ZERO IF CCH HAS NOT
*                             CREATED AN ERPIB FOR THE ERP'S.
PCCACHPF DC    XL1'00' -      PROGRAM FLAGS.  INDICATES THE SELECTION
*                             OR INTERRUPTION SEQUENCE WHEN THE CSW WAS
*                             STORED.
PCCACSIO EQU   X'80' -        THE CSW WAS STORED AFTER A START I/O
*                             INSTRUCTION WAS EXECUTED.
PCCACINT EQU   X'40' -        THE CSW WAS STORED AFTER AN I/O
*                             INTERRUPTION
PCCACTIO EQU   X'20' -        THE CSW WAS STORED AFTER A TEST I/O
*                             INSTRUCTION WAS EXECUTED.
PCCACHIO EQU   X'10' -        THE CSW WAS STORED AFTER A HALT I/O
*                             INSTRUCTION WAS EXECUTED
PCCARV37 EQU   X'08',,C'X' -  RESERVED
PCCACSNS EQU   X'04' -        THE SENSE DATA WAS STORED
PCCACCNT EQU   X'02' -        THE CSW COUNT IS VALID
PCCACNOR EQU   X'01' -        NO RETRY IS TO BE ATTEMPTED UNDER ANY
*                             CONDITIONS
PCCACHBL DC    XL1'00' -      PROBABLE SOURCE OF ERROR
PCCACCPU EQU   X'80' -        CPU ERROR
PCCACCHA EQU   X'40' -        CHANNEL ERROR
PCCACSCU EQU   X'20' -        STORAGE CONTROL UNIT ERROR
PCCACSTG EQU   X'10' -        STORAGE ERROR
PCCACCUE EQU   X'08' -        CONTROL UNIT ERROR
PCCARV38 EQU   X'04',,C'X' -  RESERVED
PCCARV39 EQU   X'02',,C'X' -  RESERVED
PCCARV40 EQU   X'01',,C'X' -  RESERVED
PCCACHVA DC    XL1'00' -      VALIDITY INDICATORS.  WHEN THE DESIGNATED
*                             FIELD IS STORED BY THE CHANNEL WITH THE
*                             CORRECT CONTENTS THE VALIDITY BIT IS ONE.
*                             THE VALIDITY BIT FOR NON-STORED FIELDS
*                             IS MEANINGLESS.
PCCACITF EQU   X'80' -        INTERFACE ADDRESS IS VALID
PCCARV41 EQU   X'40',,C'X' -  RESERVED
PCCARV42 EQU   X'20',,C'X' -  RESERVED
PCCACSQV EQU   X'10' -        SEQUENCE CODE IS VALID
PCCACUNS EQU   X'08' -        UNIT STATUS IS VALID
PCCACCMD EQU   X'04' -        COMMAND ADDRESS IS VALID.  THE CSW
*                             CONTAINS A VALID COMMAND ADDRESS.
PCCACCHV EQU   X'02' -        CHANNEL ADDRESS IS VALID
PCCACDAV EQU   X'01' -        DEVICE ADDRESS IS VALID
PCCACHTS DC    XL1'00' -      TERMINATION AND SEQUENCE (RETRY) CODES
PCCACTEC EQU   X'C0' -        TWO-BIT TERMINATION CODE.  THIS CODE
*                             SPECIFIES THE TERMINATION SIGNALS USED ON
*                             THE I/O INTERFACE AFTER THE CHANNEL
*                             DETECTED THE ERROR.  THIS FIELD HAS
*                             MEANING ONLY WHEN ICC OR CCC IS INDICATED
*                             IN THE CSW.  THE FOLLOWING 4 EQU'S ARE
*                             THE VALUES FOR TERMINATION CODE.
PCCACTC0 EQU   X'00' -        INTERFACE DISCONNECT
PCCACTC1 EQU   X'40' -        STOP, STACK OR NORMAL TERMINATION
PCCACTC2 EQU   X'80' -        SELECTIVE RESET
PCCACTC3 EQU   X'C0' -        SYSTEM RESET
PCCARV43 EQU   X'20',,C'X' -  RESERVED
PCCARV44 EQU   X'10',,C'X' -  RESERVED
PCCACDIN EQU   X'08' -        I/O ERROR ALERT
PCCACSEQ EQU   X'07' -        THREE-BIT SEQUENCE CODE.  THESE CODES
*                             HAVE CHANNEL-DEPENDENT MEANINGS.
PCCACHS1 DC    XL1'00' -      CCH INTERNAL SWITCH 1
PCCACCMP EQU   X'80' -        COMMAND REGISTER PARITY IS VALID
PCCACNRE EQU   X'40' -        CCH WILL NOT CREATE A RECORD FOR THIS
*                             ERROR                              MDC006
PCCACFRR EQU   X'20' -        THE CCH FRR IS IN THE STACK        MDC007
PCCACNLS EQU   X'10' -        CCH IS TO PERFORM THE RECORD FUNCTION
*                             ONLY.  AN ERPIB IS NOT TO BE PLACED IN
*                             THE EWA.
PCCACAND EQU   X'08' -        ATTENTION HAS BEEN PRESENTED
PCCACIBC EQU   X'04' -        AN ERPIB FOR THIS ERROR HAS ALREADY BEEN
*                             CREATED
PCCACUCB EQU   X'02' -        UCB INVALID BIT
PCCARV47 EQU   X'01',,C'X' -  RESERVED
PCCACHS2 DC    XL1'00' -      CCH INTERNAL SWITCH 2
PCCACIOR EQU   X'80' -        I/O RESTART FUNCTION REQUIRED
PCCACALT EQU   X'40' -        THE ALTERNATE RETURN TO IOS IS TO BE USED
PCCACMOD EQU   X'20' -        NO MODULE IS AVAILABLE TO ANALYZE THE
*                             CHANNEL LOGOUT
PCCACNLG EQU   X'10' -        CCH DETECTED A FAILURE TO LOG OR FAILURE
*                             TO STORE AN ECSW CONDITION
PCCACURC EQU   X'08' -        THE STIDC FIELD OF THE CAT ENTRY IS
*                             VALID BUT NOT THAT OF A SUPPORTED
*                             CHANNEL                            MDC011
PCCACCRA EQU   X'04' -        CHANNEL RECONFIGURATION HARDWARE ACTIVE
*                             FOR THE CHANNEL  (MDC300)        @Y30CQ9A
PCCARV50 EQU   X'02',,C'X' -  RESERVED
PCCARV51 EQU   X'01',,C'X' -  RESERVED
PCCACHRB DC    XL1'00' -      CCH RECORD BYTE
PCCACSIB EQU   X'80' -        ERROR ON SIO
PCCACINB EQU   X'40' -        ERROR ON INTERRUPT
PCCACTIB EQU   X'20' -        ERROR ON TIO
PCCACHIB EQU   X'10' -        ERROR ON HIO
PCCARV52 EQU   X'08',,C'X' -  RESERVED
PCCACSNB EQU   X'04' -        SENSE DATA STORED
PCCACCVB EQU   X'02' -        COUNT VALID
PCCACNRB EQU   X'01' -        NO RETRY
PCCAIOSI DC    XL1'00' -      IOS INTERCEPT BYTE
PCCACHW1 DC    F'0' -         CCH WORK AREA 1
PCCACHW2 DC    F'0' -         CCH WORK AREA 2
PCCARV80 DC    H'0' -         RESERVED                           MDC004
PCCALOGL DC    FL1'0' -       LENGTH OF CHANNEL LOGOUT
PCCALGP1 DC    XL1'00' -      LOGOUT PARITY AREA 1
PCCALGP2 DC    XL1'00' -      LOGOUT PARITY AREA 2
PCCACHPB DC    FL1'0' -       LOGOUT PARITY BYTE COUNT
PCCARV05 DC    XL2'00' -      RESERVED FOR CCH
PCCACHF1 DC    XL1'00' -      CCH FOOTPRINT BYTE 1
PCCACF11 EQU   X'80' -        IOS GPR'S SAVED
PCCACF12 EQU   X'40' -        UCB ADDRESS IS ZERO
PCCACF13 EQU   X'20' -        ERPIB EXISTS
PCCACF14 EQU   X'10' -        IGFCCHSI ENTERED
PCCACF15 EQU   X'08' -        IGFCCHII ENTERED
PCCACF16 EQU   X'04' -        IGFCCHFE ENTERED
PCCACF17 EQU   X'02' -        IGFC60 ENTERED
PCCACF18 EQU   X'01' -        IGFC70 ENTERED
PCCACHF2 DC    XL1'00' -      CCH FOOTPRINT BYTE 2
PCCACF21 EQU   X'80' -        IGFC80 ENTERED
PCCACF22 EQU   X'40' -        IGFCIC ENTERED
PCCACF23 EQU   X'20' -        IGFCCHRD ENTERED                   MDC008
PCCACF24 EQU   X'10' -        IGFCCHMP ENTERED
PCCACF25 EQU   X'08' -        IGFCCHUC ENTERED
PCCACF26 EQU   X'04' -        IGFCCHAS ENTERED                   MDC009
PCCACF27 EQU   X'02' -        IGFCCHIO ENTERED
PCCACF28 EQU   X'01' -        EXIT CCH
PCCACHF3 DC    XL1'00' -      CCH FOOTPRINT BYTE 3
PCCARV64 EQU   X'80',,C'X' -  RESERVED
PCCARV65 EQU   X'40',,C'X' -  RESERVED
PCCARV66 EQU   X'20',,C'X' -  RESERVED
PCCARV67 EQU   X'10',,C'X' -  RESERVED
PCCARV68 EQU   X'08',,C'X' -  RESERVED
PCCARV69 EQU   X'04',,C'X' -  RESERVED
PCCARV70 EQU   X'02',,C'X' -  RESERVED
PCCARV71 EQU   X'01',,C'X' -  RESERVED
PCCACHF4 DC    XL1'00' -      CCH FOOTPRINT BYTE 4
PCCARV72 EQU   X'80',,C'X' -  RESERVED
PCCARV73 EQU   X'40',,C'X' -  RESERVED
PCCARV74 EQU   X'20',,C'X' -  RESERVED
PCCARV75 EQU   X'10',,C'X' -  RESERVED
PCCARV76 EQU   X'08',,C'X' -  RESERVED
PCCARV77 EQU   X'04',,C'X' -  RESERVED
PCCARV78 EQU   X'02',,C'X' -  RESERVED
PCCARV79 EQU   X'01',,C'X' -  RESERVED
PCCACHSV DC    3F'0' -        CCH INTERNAL SAVE AREA.  FIRST WORD
*                             CONTAINS THE ADDRESS OF THE CURRENT CCH
*                             RECORD BUFFER                      MDC010
PCCACHID DC    XL8'00' -      STORE CHANNEL ID WORK AREA
PCCALOGA DC    A(0) -         ADDRESS OF CHANNEL LOGOUT          MDC004
PCCARV54 DC    A(0) -         RESERVED
PCCARV55 DC    A(0) -         RESERVED
PCCARV56 DC    A(0) -         RESERVED
PCCARV57 DC    A(0) -         RESERVED
PCCARV58 DC    A(0) -         RESERVED
PCCARV59 DC    A(0) -         RESERVED
PCCARV60 DC    A(0) -         RESERVED
PCCARV61 DC    A(0) -         RESERVED
PCCARV62 DC    A(0) -         RESERVED
PCCARV63 DC    A(0) -         RESERVED
PCCAATTR DC    XL1'00' -      PROCESSOR ATTRIBUTES  (MDC302)   @G47AN9A
PCCACPUM EQU   X'80' -        INDICATOR THAT DEAD CPU HAD A MALFUNCTION
*                             (MDC301)                         @G47AN9A
PCCAIO   EQU   X'40' -        PROCESSOR HAS I/O CAPABILITY
*                             (MDC303)                         @G47AN9A
PCCAR100 EQU   X'20',,C'X' -  RESERVED                         @G47AN9A
PCCAR101 EQU   X'10',,C'X' -  RESERVED                         @G47AN9A
PCCAR102 EQU   X'08',,C'X' -  RESERVED                         @G47AN9A
PCCAR103 EQU   X'04',,C'X' -  RESERVED                         @G47AN9A
PCCAR104 EQU   X'02',,C'X' -  RESERVED                         @G47AN9A
PCCAR105 EQU   X'01',,C'X' -  RESERVED                         @G47AN9A
PCCARV01 DC    XL1'00' -      RESERVED
PCCARV35 DC    H'0' -         RESERVED
PCCARV36 DC    F'0' -         RESERVED
PCCACAT  DC    XL128'00' -    CHANNEL AVAILABILITY TABLE (16 CHANNELS,
*                             8 BYTES PER CHANNEL)               MDC005
         DC    XL72'00' -     RESERVED
         MEND  , -   */
*%PCCAL2 : ;
*
*DECLARE
*  1 PCCA     BASED(PCCAPTR) BDY(DWORD),
*   2 PCCAPCCA    CHAR(4) BDY(WORD),     /* CONTROL BLOCK ACRONYM IN
*                                           EBCDIC                   */
*   2 PCCACPID    CHAR(12) BDY(WORD),    /* CPU ID (CONTAINS SERIAL
*                                           NUMBER)                  */
*   2 PCCACPUA    PTR(15),               /* PHYSICAL CPU ADDRESS     */
*   2 PCCACAFM    BIT(16) BDY(WORD,3),   /* BIT MASK CORRESPONDING TO
*                                           PHYSICAL CPU ADDRESS     */
*   2 PCCATQEP    PTR(31),               /* TQE POINTER              */
*   2 PCCAPSAV    PTR(31),               /* VIRTUAL ADDRESS OF PSA   */
*   2 PCCAPSAR    PTR(31),               /* REAL ADDRESS OF PSA      */
*   2 PCCARV81    PTR(31),               /* RESERVED           MDC005*/
*   2 PCCARV82    PTR(31),               /* RESERVED           MDC005*/
*   2 PCCARV83    PTR(31),               /* RESERVED           MDC005*/
*   2 PCCARV84    PTR(31),               /* RESERVED           MDC005*/
*   2 PCCARV85    PTR(31),               /* RESERVED           MDC005*/
*   2 PCCARV86    PTR(31),               /* RESERVED           MDC005*/
*   2 PCCARV87    PTR(31),               /* RESERVED           MDC005*/
*   2 PCCARV88    PTR(31),               /* RESERVED           MDC005*/
*   2 PCCARV89    PTR(31),               /* RESERVED           MDC005*/
*   2 PCCARV90    PTR(31),               /* RESERVED           MDC005*/
*   2 PCCARV91    PTR(31),               /* RESERVED           MDC005*/
*   2 PCCARV92    PTR(31),               /* RESERVED           MDC005*/
*   2 PCCARV93    PTR(31),               /* RESERVED           MDC005*/
*   2 PCCARV94    PTR(31),               /* RESERVED           MDC005*/
*   2 PCCARV95    PTR(31),               /* RESERVED           MDC005*/
*   2 PCCARV96    PTR(31),               /* RESERVED           MDC005*/
*   2 PCCARV97    PTR(31),               /* RESERVED           MDC005*/
*   2 PCCARV98    PTR(31),               /* RESERVED           MDC005*/
*   2 PCCARV99    PTR(31),               /* RESERVED           MDC005*/
*   2 PCCARV9A    PTR(31),               /* RESERVED           MDC005*/
*   2 PCCARV9B    PTR(31),               /* RESERVED           MDC005*/
*   2 PCCARV9C    PTR(31),               /* RESERVED           MDC005*/
*   2 PCCARV9D    PTR(31),               /* RESERVED           MDC005*/
*   2 PCCARV9E    PTR(31),               /* RESERVED           MDC005*/
*   2 PCCATMST    CHAR(4) BDY(WORD),     /* TIMER STATUS BYTES       */
*    3 PCCATMFL    BIT(8),               /* FIRST BYTE OF PCCATMST   */
*     4 PCCAINIT BIT(1),                 /* ENTRY HAS BEEN
*                                           INITIALIZED              */
*     4 PCCASYNC BIT(1),                 /* CLOCK OUT OF
*                                           SYNCHRONIZATION          */
*     4 PCCAVKIL BIT(1),                 /* VARY CPU SHOULD BE
*                                           CANCELLED                */
*     4 PCCAMCC  BIT(1),                 /* PROCESSING FOR
*                                           PERMANENTLY DAMAGED CLOCK
*                                           COMPARATOR MUST BE DONE  */
*     4 PCCAMINT BIT(1),                 /* PROCESSING FOR CPU TIMER
*                                           MUST BE DONE             */
*     4 PCCARV02 BIT(1),                 /* RESERVED                 */
*     4 PCCARV03 BIT(1),                 /* RESERVED                 */
*     4 PCCARV04 BIT(1),                 /* RESERVED                 */
*    3 PCCATODE    PTR(8),               /* TOD CLOCK ERROR FLAGS    */
*     4 PCCANUTD BIT(1),                 /* CLOCK CANNOT BE USED     */
*     4 PCCANFTD BIT(1),                 /* CLOCK SHOULD NOT BE RESET*/
*     4 PCCACTTD BIT(6),                 /* ERROR COUNT              */
*    3 PCCACCE     PTR(8),               /* FLAGS FOR CLOCK
*                                           COMPARATOR               */
*     4 PCCANUCC BIT(1),                 /* CLOCK COMPARATOR CANNOT
*                                           BE USED                  */
*     4 PCCANFCC BIT(1),                 /* CLOCK COMPARATOR SHOULD
*                                           NOT BE RESET             */
*     4 PCCACTCC BIT(6),                 /* ERROR COUNT              */
*    3 PCCAINTE    PTR(8),               /* FLAGS FOR CPU TIMER      */
*     4 PCCANUIN BIT(1),                 /* CPU TIMER CANNOT BE USED */
*     4 PCCANFIN BIT(1),                 /* CPU TIMER SHOULD NOT BE
*                                           RESET                    */
*     4 PCCACTIN BIT(6),                 /* ERROR COUNT              */
*   2 PCCARPB     FIXED(31),             /* EXTERNAL CALL SIGP BUFFER*/
*   2 PCCAEMSB    CHAR(16) BDY(DWORD),   /* EMERGENCY SIGNAL SIGP
*                                           BUFFER                   */
*    3 PCCAEMSI    CHAR(4) BDY(WORD),    /* FIRST WORD OF EMS BUFFER */
*     4 PCCARISP    BIT(8),              /* CONTAINS PARALLEL/SERIAL
*                                           REQUEST INDICATOR FOR
*                                           REMOTE IMMEDIATE SIGNAL  */
*      5 PCCAPARL BIT(1),                /* PARALLEL REQUEST   MDC002*/
*      5 PCCASERL BIT(1),                /* SERIAL REQUEST     MDC003*/
*      5 PCCARV06 BIT(1),                /* RESERVED                 */
*      5 PCCARV07 BIT(1),                /* RESERVED                 */
*      5 PCCARV08 BIT(1),                /* RESERVED                 */
*      5 PCCARV09 BIT(1),                /* RESERVED                 */
*      5 PCCARV10 BIT(1),                /* RESERVED                 */
*      5 PCCARV11 BIT(1),                /* RESERVED                 */
*     4 PCCAEMS2    BIT(8),              /* SECOND BYTE OF PCCAEMSI  */
*      5 PCCARV12 BIT(1),                /* RESERVED                 */
*      5 PCCARV13 BIT(1),                /* RESERVED                 */
*      5 PCCARV14 BIT(1),                /* RESERVED                 */
*      5 PCCARV15 BIT(1),                /* RESERVED                 */
*      5 PCCARV16 BIT(1),                /* RESERVED                 */
*      5 PCCARV17 BIT(1),                /* RESERVED                 */
*      5 PCCARV18 BIT(1),                /* RESERVED                 */
*      5 PCCARV19 BIT(1),                /* RESERVED                 */
*     4 PCCAEMS3    BIT(8),              /* THIRD BYTE OF PCCAEMSI   */
*      5 PCCARV20 BIT(1),                /* RESERVED                 */
*      5 PCCARV21 BIT(1),                /* RESERVED                 */
*      5 PCCARV22 BIT(1),                /* RESERVED                 */
*      5 PCCARV23 BIT(1),                /* RESERVED                 */
*      5 PCCARV24 BIT(1),                /* RESERVED                 */
*      5 PCCARV25 BIT(1),                /* RESERVED                 */
*      5 PCCARV26 BIT(1),                /* RESERVED                 */
*      5 PCCARV27 BIT(1),                /* RESERVED                 */
*     4 PCCARMSB    BIT(8),              /* CONTAINS RMS INDICATOR   */
*      5 PCCARV28 BIT(1),                /* RESERVED                 */
*      5 PCCARV29 BIT(1),                /* RESERVED                 */
*      5 PCCARV30 BIT(1),                /* RESERVED                 */
*      5 PCCARV31 BIT(1),                /* RESERVED                 */
*      5 PCCARV32 BIT(1),                /* RESERVED                 */
*      5 PCCARV33 BIT(1),                /* RESERVED                 */
*      5 PCCARV34 BIT(1),                /* RESERVED                 */
*      5 PCCARMS  BIT(1),                /* SIGP WAS ISSUED VIA RMS  */
*    3 PCCAEMSP    PTR(31),              /* REMOTE IMMEDIATE SIGNAL
*                                           PARAMETER ADDRESS        */
*    3 PCCAEMSE    PTR(31),              /* REMOTE IMMEDIATE SIGNAL
*                                           RECEIVING ROUTINE ENTRY
*                                           POINT ADDRESS            */
*    3 PCCAEMSA    PTR(31),              /* PCCA ADDRESS OF THE
*                                           RECEIVING ROUTINE        */
*   2 PCCAPWAV    PTR(31),               /* VIRTUAL ADDRESS OF MCH
*                                           PROCESSOR WORK AREA      */
*   2 PCCAPWAR    PTR(31),               /* REAL ADDRESS OF MCH
*                                           PROCESSOR WORK AREA      */
*   2 PCCALRBV    PTR(31),               /* VIRTUAL ADDRESS OF MCH
*                                           LOGREC BUFFER            */
*   2 PCCALRBR    PTR(31),               /* REAL ADDRESS OF MCH
*                                           LOGREC BUFFER            */
*   2 PCCACHEL    CHAR(112) BDY(DWORD),  /* CHANNEL LOGOUT AREA FOR
*                                           2880 OR M/145            */
*   2 PCCAWERP    CHAR(8) BDY(DWORD),    /* WORK ERPIB FOR CCH       */
*    3 PCCACHUB    PTR(31),              /* UCB ADDRESS OF THE DEVICE
*                                           IN USE WHEN THE CHANNEL-
*                                           DETECTED ERROR OCCURRED.
*                                           THIS FIELD IS ZERO IF CCH
*                                           HAS NOT CREATED AN ERPIB
*                                           FOR THE ERP'S.           */
*    3 PCCACHPF    BIT(8),               /* PROGRAM FLAGS.  INDICATES
*                                           THE SELECTION OR
*                                           INTERRUPTION SEQUENCE
*                                           WHEN THE CSW WAS STORED. */
*     4 PCCACSIO BIT(1),                 /* THE CSW WAS STORED AFTER
*                                           A START I/O INSTRUCTION
*                                           WAS EXECUTED             */
*     4 PCCACINT BIT(1),                 /* THE CSW WAS STORED AFTER
*                                           AN I/O INTERRUPTION      */
*     4 PCCACTIO BIT(1),                 /* THE CSW WAS STORED AFTER
*                                           A TEST I/O INSTRUCTION
*                                           WAS EXECUTED             */
*     4 PCCACHIO BIT(1),                 /* THE CSW WAS STORED AFTER
*                                           A HALT I/O INSTRUCTION
*                                           WAS EXECUTED             */
*     4 PCCARV37 BIT(1),                 /* RESERVED                 */
*     4 PCCACSNS BIT(1),                 /* THE SENSE DATA WAS STORED*/
*     4 PCCACCNT BIT(1),                 /* THE CSW COUNT IS VALID   */
*     4 PCCACNOR BIT(1),                 /* NO RETRY IS TO BE
*                                           ATTEMPTED UNDER ANY
*                                           CONDITIONS               */
*    3 PCCACHBL    BIT(8),               /* PROBABLE SOURCE OF ERROR */
*     4 PCCACCPU BIT(1),                 /* CPU ERROR                */
*     4 PCCACCHA BIT(1),                 /* CHANNEL ERROR            */
*     4 PCCACSCU BIT(1),                 /* STORAGE CONTROL UNIT
*                                           ERROR                    */
*     4 PCCACSTG BIT(1),                 /* STORAGE ERROR            */
*     4 PCCACCUE BIT(1),                 /* CONTROL UNIT ERROR       */
*     4 PCCARV38 BIT(1),                 /* RESERVED                 */
*     4 PCCARV39 BIT(1),                 /* RESERVED                 */
*     4 PCCARV40 BIT(1),                 /* RESERVED                 */
*    3 PCCACHVA    BIT(8),               /* VALIDITY INDICATORS.  WHEN
*                                           THE DESIGNATED FIELD IS
*                                           STORED BY THE CHANNEL
*                                           WITH THE CORRECT CONTENTS
*                                           THE VALIDITY BIT IS ONE.
*                                           THE VALIDITY BIT FOR
*                                           NON-STORED FIELDS IS
*                                           MEANINGLESS.             */
*     4 PCCACITF BIT(1),                 /* INTERFACE ADDRESS IS
*                                           VALID                    */
*     4 PCCARV41 BIT(1),                 /* RESERVED                 */
*     4 PCCARV42 BIT(1),                 /* RESERVED                 */
*     4 PCCACSQV BIT(1),                 /* SEQUENCE CODE IS VALID   */
*     4 PCCACUNS BIT(1),                 /* UNIT STATUS IS VALID     */
*     4 PCCACCMD BIT(1),                 /* COMMAND ADDRESS IS VALID.
*                                           THE CSW CONTAINS A VALID
*                                           COMMAND ADDRESS.         */
*     4 PCCACCHV BIT(1),                 /* CHANNEL ADDRESS IS VALID */
*     4 PCCACDAV BIT(1),                 /* DEVICE ADDRESS IS VALID  */
*    3 PCCACHTS    BIT(8),               /* TERMINATION AND SEQUENCE
*                                           (RETRY) CODES            */
*     4 PCCACTEC BIT(2),                 /* TERMINATION CODE.  THIS
*                                           CODE SPECIFIES THE
*                                           TERMINATION SIGNALS USED
*                                           ON THE I/O INTERFACE
*                                           AFTER THE CHANNEL DETECTED
*                                           THE ERROR.  THIS FIELD
*                                           HAS MEANING ONLY WHEN ICC
*                                           OR CCC IS INDICATED IN
*                                           THE CSW.                 */
*%PCCACTC0='''00''B';                    /* INTERFACE DISCONNECT     */
*%PCCACTC1='''01''B';                    /* STOP, STACK OR NORMAL
*                                           TERMINATION              */
*%PCCACTC2='''10''B';                    /* SELECTIVE RESET          */
*%PCCACTC3='''11''B';                    /* SYSTEM RESET             */
*     4 PCCARV43 BIT(1),                 /* RESERVED                 */
*     4 PCCARV44 BIT(1),                 /* RESERVED                 */
*     4 PCCACDIN BIT(1),                 /* I/O ERROR ALERT          */
*     4 PCCACSEQ BIT(3),                 /* SEQUENCE CODE.  THESE
*                                           CODES HAVE CHANNEL-
*                                           DEPENDENT MEANINGS.      */
*   2 PCCACHS1    BIT(8),                /* CCH INTERNAL SWITCH 1    */
*    3 PCCACCMP BIT(1),                  /* COMMAND REGISTER PARITY
*                                           IS VALID                 */
*    3 PCCACNRE BIT(1),                  /* CCH WILL NOT CREATE A
*                                           RECORD FOR THIS ERROR
*                                                              MDC006*/
*    3 PCCACFRR BIT(1),                  /* THE CCH FRR IS IN THE
*                                           STACK              MDC007*/
*    3 PCCACNLS BIT(1),                  /* CCH IS TO PERFORM THE
*                                           RECORD FUNCTION ONLY.
*                                           AN ERPIB IS NOT TO BE
*                                           PLACED IN THE EWA.       */
*    3 PCCACAND BIT(1),                  /* ATTENTION HAS BEEN
*                                           PRESENTED                */
*    3 PCCACIBC BIT(1),                  /* AN ERPIB FOR THIS ERROR
*                                           HAS ALREADY BEEN CREATED */
*    3 PCCACUCB BIT(1),                  /* UCB INVALID BIT          */
*    3 PCCARV47 BIT(1),                  /* RESERVED                 */
*   2 PCCACHS2    BIT(8),                /* CCH INTERNAL SWITCH 2    */
*    3 PCCACIOR BIT(1),                  /* I/O RESTART FUNCTION
*                                           REQUIRED                 */
*    3 PCCACALT BIT(1),                  /* THE ALTERNATE RETURN TO
*                                           IOS IS TO BE USED        */
*    3 PCCACMOD BIT(1),                  /* NO MODULE IS AVAILABLE TO
*                                           ANALYZE THE CHANNEL
*                                           LOGOUT                   */
*    3 PCCACNLG BIT(1),                  /* CCH DETECTED A FAILURE TO
*                                           LOG OR FAILURE TO STORE
*                                           AN ECSW CONDITION        */
*    3 PCCACURC BIT(1),                  /* THE STIDC FIELD OF THE
*                                           CAT ENTRY IS VALID BUT
*                                           NOT THAT OF A SUPPORTED
*                                           CHANNEL            MDC011*/
*    3 PCCACCRA BIT(1),                  /* CHANNEL RECONFIGURATION
*                                           HARDWARE ACTIVE FOR THE
*                                           CHANNEL (MDC300) @Y30CQ9A*/
*    3 PCCARV50 BIT(1),                  /* RESERVED                 */
*    3 PCCARV51 BIT(1),                  /* RESERVED                 */
*   2 PCCACHRB    BIT(8),                /* CCH RECORD BYTE          */
*    3 PCCACSIB BIT(1),                  /* ERROR ON SIO             */
*    3 PCCACINB BIT(1),                  /* ERROR ON INTERRUPT       */
*    3 PCCACTIB BIT(1),                  /* ERROR ON TIO             */
*    3 PCCACHIB BIT(1),                  /* ERROR ON HIO             */
*    3 PCCARV52 BIT(1),                  /* RESERVED                 */
*    3 PCCACSNB BIT(1),                  /* SENSE DATA STORED        */
*    3 PCCACCVB BIT(1),                  /* COUNT VALID              */
*    3 PCCACNRB BIT(1),                  /* NO RETRY                 */
*   2 PCCAIOSI    CHAR(1),               /* IOS INTERCEPT BYTE       */
*   2 PCCACHW1    FIXED(31),             /* CCH WORK AREA 1          */
*   2 PCCACHW2    FIXED(31),             /* CCH WORK AREA 2          */
*   2 PCCARV80    FIXED(15),             /* RESERVED           MDC004*/
*   2 PCCALOGL    PTR(8),                /* LENGTH OF CHANNEL LOGOUT */
*   2 PCCALGP1    CHAR(1),               /* LOGOUT PARITY AREA 1     */
*   2 PCCALGP2    CHAR(1),               /* LOGOUT PARITY AREA 2     */
*   2 PCCACHPB    PTR(8),                /* LOGOUT PARITY BYTE COUNT */
*   2 PCCARV05    CHAR(2),               /* RESERVED FOR CCH         */
*   2 PCCACHF1    BIT(8),                /* CCH FOOTPRINT BYTE 1     */
*    3 PCCACF11 BIT(1),                  /* IOS GPR'S SAVED          */
*    3 PCCACF12 BIT(1),                  /* UCB ADDRESS IS ZERO      */
*    3 PCCACF13 BIT(1),                  /* ERPIB EXISTS             */
*    3 PCCACF14 BIT(1),                  /* IGFCCHSI ENTERED         */
*    3 PCCACF15 BIT(1),                  /* IGFCCHII ENTERED         */
*    3 PCCACF16 BIT(1),                  /* IGFCCHFE ENTERED         */
*    3 PCCACF17 BIT(1),                  /* IGFC60 ENTERED           */
*    3 PCCACF18 BIT(1),                  /* IGFC70 ENTERED           */
*   2 PCCACHF2    BIT(8),                /* CCH FOOTPRINT BYTE 2     */
*    3 PCCACF21 BIT(1),                  /* IGFC80 ENTERED           */
*    3 PCCACF22 BIT(1),                  /* IGFCIC ENTERED           */
*    3 PCCACF23 BIT(1),                  /* IGFCCHRD ENTERED   MDC008*/
*    3 PCCACF24 BIT(1),                  /* IGFCCHMP ENTERED         */
*    3 PCCACF25 BIT(1),                  /* IGFCCHUC ENTERED         */
*    3 PCCACF26 BIT(1),                  /* IGFCCHAS ENTERED   MDC009*/
*    3 PCCACF27 BIT(1),                  /* IGFCCHIO ENTERED         */
*    3 PCCACF28 BIT(1),                  /* EXIT CCH                 */
*   2 PCCACHF3    BIT(8),                /* CCH FOOTPRINT BYTE 3     */
*    3 PCCARV64 BIT(1),                  /* RESERVED                 */
*    3 PCCARV65 BIT(1),                  /* RESERVED                 */
*    3 PCCARV66 BIT(1),                  /* RESERVED                 */
*    3 PCCARV67 BIT(1),                  /* RESERVED                 */
*    3 PCCARV68 BIT(1),                  /* RESERVED                 */
*    3 PCCARV69 BIT(1),                  /* RESERVED                 */
*    3 PCCARV70 BIT(1),                  /* RESERVED                 */
*    3 PCCARV71 BIT(1),                  /* RESERVED                 */
*   2 PCCACHF4    BIT(8),                /* CCH FOOTPRINT BYTE 4     */
*    3 PCCARV72 BIT(1),                  /* RESERVED                 */
*    3 PCCARV73 BIT(1),                  /* RESERVED                 */
*    3 PCCARV74 BIT(1),                  /* RESERVED                 */
*    3 PCCARV75 BIT(1),                  /* RESERVED                 */
*    3 PCCARV76 BIT(1),                  /* RESERVED                 */
*    3 PCCARV77 BIT(1),                  /* RESERVED                 */
*    3 PCCARV78 BIT(1),                  /* RESERVED                 */
*    3 PCCARV79 BIT(1),                  /* RESERVED                 */
*   2 PCCACHSV  (3) FIXED(31),           /* CCH INTERNAL SAVE AREA.
*                                           FIRST WORD CONTAINS THE
*                                           ADDRESS OF THE CURRENT
*                                           CCH RECORD BUFFER  MDC010*/
*   2 PCCACHID    CHAR(8) BDY(WORD),     /* STORE CHANNEL ID WORK
*                                           AREA                     */
*   2 PCCALOGA    PTR(31),               /* ADDRESS OF CHANNEL
*                                           LOGOUT             MDC004*/
*   2 PCCARV54    PTR(31),               /* RESERVED                 */
*   2 PCCARV55    PTR(31),               /* RESERVED                 */
*   2 PCCARV56    PTR(31),               /* RESERVED                 */
*   2 PCCARV57    PTR(31),               /* RESERVED                 */
*   2 PCCARV58    PTR(31),               /* RESERVED                 */
*   2 PCCARV59    PTR(31),               /* RESERVED                 */
*   2 PCCARV60    PTR(31),               /* RESERVED                 */
*   2 PCCARV61    PTR(31),               /* RESERVED                 */
*   2 PCCARV62    PTR(31),               /* RESERVED                 */
*   2 PCCARV63    PTR(31),               /* RESERVED                 */
*   2 PCCAATTR    BIT(8),                /* PROCESSOR ATTRIBUTES
*                                           (MDC302)         @G47AN9A*/
*    3 PCCACPUM BIT(1),                  /* INDICATOR THAT DEAD CPU
*                                           HAD A MALFUNCTION
*                                           (MDC301)         @G47AN9A*/
*    3 PCCAIO   BIT(1),                  /* PROCESSOR HAS I/O
*                                           CAPABILITY
*                                           (MDC303)         @G47AN9A*/
*    3 PCCAR100 BIT(1),                  /* RESERVED         @G47AN9A*/
*    3 PCCAR101 BIT(1),                  /* RESERVED         @G47AN9A*/
*    3 PCCAR102 BIT(1),                  /* RESERVED         @G47AN9A*/
*    3 PCCAR103 BIT(1),                  /* RESERVED         @G47AN9A*/
*    3 PCCAR104 BIT(1),                  /* RESERVED         @G47AN9A*/
*    3 PCCAR105 BIT(1),                  /* RESERVED         @G47AN9A*/
*   2 PCCARV01    CHAR(1),               /* RESERVED                 */
*   2 PCCARV35    FIXED(15),             /* RESERVED                 */
*   2 PCCARV36    FIXED(31),             /* RESERVED                 */
*   2 PCCACAT     CHAR(128) BDY(DWORD),  /* CHANNEL AVAILABILITY
*                                           TABLE  (16 CHANNELS,
*                                           8 BYTES PER CHANNEL)
*                                                              MDC005*/
*   2 *           CHAR(72) BDY(DWORD);   /* RESERVED                 */
./ ADD NAME=ILOG23   0100-02135-02135-1228-00029-00029-00000-VBCMACS
         MACRO
&NAME    ILOG23 &DSECT=YES
         LCLC  &CSECT,&NAM
&CSECT   SETC  '&SYSECT'
&NAM     SETC  'ILOG23'
         AIF   (T'&NAME EQ 'O').NONAM
&NAM     SETC  '&NAME'
.NONAM   ANOP
         AIF   ('&DSECT' EQ 'NO').NODSECT
&NAM     DSECT
.NODSECT ANOP
&NAM.R   DS    0XL56
RDW      DS    0XL4
LEN      DS    XL2
         DS    XL2
RECTYPE  DS    XL1'23'
         DS    XL3
RDATE    DS    XL4
TRANSID  DS    CL8
         DS    XL4
SEQFLAG  DS    0XL4
         DS    XL3
FLAG     DS    XL1
ELAPSED  DS    XL4                     HHMMSSTC
         DS    XL24
         AIF   ('&DSECT' EQ 'NO').NOCSECT
&CSECT   CSECT
.NOCSECT ANOP
         MEND
./ ADD NAME=INIT     0100-85287-85287-0938-00149-00149-00000-VBCMACS
         MACRO
&L       INIT  &SAVE=(14,12),&BASE=12,&LENGTH=72,&RENT=N,&REGS=N,      *
               &BASES=1,&ID=,&RSV=,&LOC=BELOW
.*
.*      INIT - ASSEMBLER PROGRAM PROLOGUE - REENTRANT/NON-REENTRANT
.*
.*      MACRO BY DAVID R. BIVENS - 04/17/79
         GBLA  &ENTER
         LCLA  &TEMP,&INDEX,&WORK,&R1,&R2,&IDLEN
&INDEX   SETA  &SYSNDX
&ENTER   SETA  2
         AIF   ('&BASE' NE '&ENTER').USE2
&ENTER   SETA  3
.USE2    ANOP
         AIF   (0 EQ K'&L).NOLBL
&L       CSECT
.NOLBL   ANOP
         AIF   (0 EQ K'&ID).IDOUT
         AGO   .IDOK -WAS AIF ('U' EQ T'&ID).IDOK-
.BADID   ANOP
         MNOTE 4,'INVALID CSECT IDENTIFIER SPECIFIED'
         AGO   .IDOUT
.IDOK    ANOP
         AIF   (255 LT K'&ID).BADID
         AIF   ('*' EQ '&ID').SPCLID
&WORK    SETA  ((K'&ID+2)/2)*2+4
&TEMP    SETA  K'&ID
         B     &WORK.(15)              BRANCH AROUND ID.
         DC    AL1(&TEMP)          ID LENGTH
         DC    C'&ID'
&IDLEN   SETA  &WORK
         AGO   .IDOUT
.SPCLID  ANOP
         B     14(15)
         DC    AL1(8)
         AIF   (0 NE K'&L).NEWSECT
         DC    CL8'&SYSECT'
&IDLEN   SETA  14
         AGO   .IDOUT
.NEWSECT ANOP
         DC    CL8'&L'
&IDLEN   SETA  14
.IDOUT   ANOP
         AIF   (2 EQ N'&SAVE).REGOK1
         MNOTE 4,'INVALID SPECIFICATION OF SAVE REGISTERS - &SAVE - (14,
               2 USED'
.REGOK1  ANOP
&R1      SETA  &SAVE(1)
&R2      SETA  &SAVE(2)
         STM   &R1,&R2,12(13)
         LR    &ENTER,1            SAVE REG1 PARM ADDRESS.
         LR    &BASE,15            LOAD BASE REGISTER.
&WORK    SETA  8
&WORK    SETA  &WORK+&IDLEN
         USING *-&WORK,&BASE     ESTABLISH ADDRESSABILITY.
         LCLA  &BASEN,&BASEO,&BASNO,&DISP
&DISP    SETA  &BASE-&BASES
         AIF   (&DISP GE 2).BASNOK
         MNOTE 8,'INVALID BASE= / BASES= COMBINATION, RESULTS WOULD'
         MNOTE 8,'CREATE BASE REGISTERS LESS THAN R2.'
         MEXIT
.BASNOK  ANOP
&BASEN   SETA  &BASE
&BASEO   SETA  &BASEN
&BASNO   SETA  &BASES
&DISP    SETA  4095
&WORK    SETA  &WORK+4
.NXTBAS  ANOP
&BASNO   SETA  &BASNO-1
         AIF   (0 GE &BASNO).BASEND
&BASEN   SETA  &BASEN-1
&BASEO   SETA  &BASEN+1
         AIF   (&BASEN LT 2).BASERR
         LA    &BASEN,4095(,&BASEO)
         USING *-&WORK+&DISP,&BASEN
&DISP    SETA  &DISP+4096
&WORK    SETA  &WORK+4
         AGO   .NXTBAS
.BASERR  MNOTE 8,'INVALID BASE REGISTER COMBINATION SPECIFIED'
         MEXIT
.BASEND  ANOP
         AIF   ('Y' EQ '&RENT').YRENT
         AIF   (0 NE K'&RSV).HISAVE
.MYSAVE  ANOP
         B     PRSV&INDEX          BRANCH AROUND SAVE AREA.
RSVA&INDEX DS  18F                 SAVE AREA.
PRSV&INDEX DS  0H                  AROUND SAVE AREA.
         MNOTE *,'SAVE AREA GENERATED'
         LA    1,RSVA&INDEX
         AGO   .CHAIN
.HISAVE  ANOP
         AIF   ('F' NE T'&RSV AND 'A' NE T'&RSV).BADRSV
         LA    1,&RSV              USER-PROVIDED SAVE AREA ADDRESS.
         AGO   .CHAIN
.BADRSV  ANOP
         MNOTE 4,'INCORRECT SAVE AREA ADDRESS SPECIFIED'
         AGO   .MYSAVE
.YRENT   ANOP
         SR    0,0
         AIF   ('F' NE T'&LENGTH).TRYH
         L     0,&LENGTH
         AGO   .GOTLEN
.TRYH    AIF   ('H' NE T'&LENGTH).TRYA
         LH    0,&LENGTH
         AGO   .GOTLEN
.TRYA    AIF   ('A' NE T'&LENGTH).TRYU
         L     0,&LENGTH
         AGO   .GOTLEN
.TRYU    AIF   ('U' NE T'&LENGTH).TRYN
         LA    0,&LENGTH
         AGO   .GOTLEN
.TRYN    AIF   ('N' NE T'&LENGTH).TRYZ
         LA    0,&LENGTH
         AGO   .GOTLEN
.TRYZ    ANOP
         MNOTE 8,'UNSUPPORTED LENGTH CONSTANT - &LENGTH - 72 ASSUMED'
         LA    0,72                **** ASSUMED SUBPOOL 0 LENGTH ****
.GOTLEN  ANOP
*        GETMAIN R,LV=(0),LOC=(&LOC,ANY)
         GETMAIN R,LV=(0),LOC=(&LOC,ANY)
.CHAIN   ANOP
         ST    13,4(1)             SAVE AREA FORWARD CHAIN.
         ST    1,8(13)             SAVE AREA BACKWARD CHAIN.
         LM    14,0,12(13)    RESTORE R0, R14, R15...
         LR    13,1                OUR SAVE AREA ADDRESS.
         LR    1,&ENTER            RESTORE REG 1 ADDRESS.
         AIF   ('Y' NE '&REGS').NOREGS
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
FR0      EQU   0
FR2      EQU   2
FR4      EQU   4
FR6      EQU   6
.NOREGS  ANOP
         MEND
./ ADD NAME=INITSUB  0100-02135-02135-1228-00008-00008-00000-VBCMACS
         MACRO
&NAME    INITSUB
         CNOP   0,4
&NAME    STM   11,14,8(15)  .SAVE REGS
         BAL   R11,&NAME.SAVE-&NAME+16(R15)
         USING *,R11
&NAME.SAVE     DS             4F
         MEND
./ ADD NAME=INVLISTY 0100-02135-02135-1228-00132-00132-00000-VBCMACS
         MACRO
&NAME    INVLIST1 &ORDER=,&EOT=,&CPUID=0,&MASTER=NO              S99244
         GBLA  &IEDQAR(64)
         GBLB  &IEDQZA(64)
         GBLC  &IEDQZM(203)
         GBLC  &IEDQZN(200)
         LCLA  &LN,&IX,&ML,&T
         LCLB  &E,&MT                                            S99244
         LCLC  &V
.*C192000                                                        A44918
.*A760000,848000                                                SA52950
.*A074000,208000,536000                                          S99244
.*C016000,064000,076000                                          S99244
.*       LAST MODIFICATION DATE 05/05/72                         S99244
         AIF   (&IEDQZA(33)).A3
&IEDQZA(34) SETB 0
&IEDQAR(10) SETA 0
&IEDQAR(11) SETA 0
&IEDQZM(1) SETC ''
&IEDQZM(2) SETC '&CPUID'
&IEDQZM(3) SETC '&NAME'
         AIF   ('&EOT' EQ '').A2
&IEDQZM(1) SETC '&EOT'
.A2      AIF   (&LN GE K'&ORDER(1)).E1
&LN      SETA  &LN+1
         AIF   ('&ORDER(1)'(&LN,1) NE '+' AND '&ORDER(1)'(&LN,1) NE '-'X
               ).A2
&IEDQAR(33) SETA K'&ORDER(1)-&LN+1
         AIF   (&IEDQAR(33) GT 48).E1                            A44912
&IEDQZA(33) SETB 1
.A3      ANOP
         AIF   ('&MASTER' EQ 'NO' OR '&MASTER' EQ 'YES').A31     S99244
         MNOTE 12,'*** IHB348 INVALID MASTER OPERAND - &MASTER'  S99244
.A31     ANOP                                                    S99244
&LN      SETA  N'&ORDER-1
         AIF   ('&ORDER'(K'&ORDER-1,1) EQ ',').A4
&LN      SETA  &LN+1
&IEDQZA(33) SETB 0
         AGO   .A5
.A4      MNOTE *,'*** IHB319 CONTINUATION EXPECTED GENERATION DEFERRED'
         SPACE 2
.A5      ANOP
&IEDQAR(10) SETA &IEDQAR(10)+&LN
         AIF   (&IEDQAR(10) GT 200).E4
&IX      SETA  0
&ML      SETA  &IEDQAR(33)
         AIF   (&ML LT 9).A6
&ML      SETA  8
.A6      ANOP
         AIF   ('&ORDER(&LN)' EQ '').E2
&T       SETA  K'&ORDER(&LN)
         AIF   (&T LT &IEDQAR(33)+1 OR &T GT &IEDQAR(33)+8).E3
         AIF   ('&ORDER(&LN)'(&T-&IEDQAR(33)+1,1) EQ '+').A6A
         AIF   ('&ORDER(&LN)'(&T-&IEDQAR(33)+1,1) NE '-').E6
&IEDQAR(11) SETA &IEDQAR(11)+1
.A6A     ANOP
&IEDQZM(&IEDQAR(10)+3-&IX) SETC '&ORDER(&LN)'(1,&T-&IEDQAR(33))
&IEDQZN(&IEDQAR(10)-&IX) SETC '&ORDER(&LN)'(&T-&IEDQAR(33)+1,&ML)
.A7      AIF   (&LN EQ 1).A8
&IX      SETA  &IX+1
&LN      SETA  &LN-1
         AGO   .A6
.A8      AIF   (&IEDQZA(33)).A11
         AIF   (&IEDQZA(34)).G7
&LN      SETA  0
         AIF   ((&IEDQAR(10)/2*2) EQ &IEDQAR(10)).A9
&LN      SETA  2
.A9      CNOP  &LN,4
&T       SETA  82-&IEDQAR(1)
&IX      SETA  &IEDQAR(10)+3
.A10     DC    AL2((&IEDQZM(&IX)-IEDQTNT-&T)/&IEDQAR(1))
&IX      SETA  &IX-1
         AIF   (&IX GT 3).A10
&E       SETB  ('&IEDQZM(1)' NE '')
&LN      SETA  (&IEDQAR(33)+2)/2
         AIF  (&IEDQAR(33) NE 1).AOK
&LN      SETA 2
.AOK     ANOP
&MT      SETB  ('&MASTER' EQ 'YES')                              S99244
&IEDQZM(3) DC AL1(&IEDQAR(10)),AL1(&IEDQAR(10)-&IEDQAR(11)),AL1(&LN),B'X
               &E.0&MT.00000',A(&IEDQZM(2))                      S99244
.A11     AIF   (&IEDQAR(33) LT 9).G1
         INVLIST2 ORDER=&ORDER
         MEXIT
.E1      MNOTE 12,'*** IHB002 INVALID ORDER OPERAND SPECIFIED &ORDER(1)X
               '
         SPACE 2
         MEXIT
.E2      MNOTE 12,'*** IHB001 ORDER OPERAND &LN REQ''D -NOT SPECIFIED'
         SPACE 1
&IEDQZA(34) SETB 1
         AGO   .A7
.E3      MNOTE 12,'*** IHB002 INVALID ORDER OPERAND &LN SPECIFIED -&ORDX
               ER(&LN)'
         SPACE 1
&IEDQZA(34) SETB 1
         AGO   .A7
.E4      MNOTE 12,'*** IHB320 TOO MANY ENTRIES SPECIFIED'
         SPACE 2
&IEDQZA(34) SETB 1
.E5      MEXIT
.E6      MNOTE 12,'*** IHB307 INCONSISTENT LENGTH FOR &ORDER(&LN)'
&IEDQZA(34) SETB 1
         AGO   .A7
.G1      AIF   (&IEDQZA(33)).G7
&IX      SETA  1
.G2      AIF   ('&IEDQZN(&IX)'(1,1) NE '+').G3
         AIF   (&IEDQAR(33) NE 1).G2A                           SA52950
         DC    X'DF',AL1(&IX)                                   SA52950
         AGO   .G3                                              SA52950
.G2A     ANOP                                                   SA52950
&V       SETC  '&IEDQZN(&IX)'(2,&IEDQAR(33)-1)
         DC    X'&V',AL1(&IX)
.G3      ANOP
&IX      SETA  &IX+1
         AIF   (&IX LE &IEDQAR(10)).G2
         AIF   ('&IEDQZM(1)' EQ '').G4
         DC    XL1'&IEDQZM(1)'
.G4      DC    X'FE'
         AIF   (&IEDQAR(11) EQ 0).G7
&IX      SETA  1
.G5      AIF   ('&IEDQZN(&IX)'(1,1) NE '-').G6
         AIF   (&IEDQAR(33) NE 1).G5A                           SA52950
         DC    X'DF',AL1(&IX)                                   SA52950
         AGO   .G6                                              SA52950
.G5A     ANOP                                                   SA52950
&V       SETC  '&IEDQZN(&IX)'(2,&IEDQAR(33)-1)
         DC    X'&V',AL1(&IX)
.G6      ANOP
&IX      SETA  &IX+1
         AIF   (&IX LE &IEDQAR(10)).G5
.G7      MEND
./ ADD NAME=IOAREA   0100-02135-02135-1228-00686-00686-00000-VBCMACS
         MACRO
        IOAREA
IOAREA   DSECT
OUTREC   DS    0CL7000
*                                 ** COMMON FIELDS **
OUTRDW   DS    0F                      RECORD DESCRIPTOR WORD
RECLEN   DS    H                            RECORD LENGTH
         DS    H
OUTHDR   DS   0CL16    *** OUTPUT HEADER ***
RECTYP   DS    CL1           RECORD TYPE S,D,J,W,E OR P
SYSMDL   DS    CL4                     SYSTEM ID AND MODEL NO
RDSDT    DS    PL3                     READER START DATE YYDDD
RDSTIM   DS    PL4                     READER START TIME 1/1000 MIN
*
STPCOMP  DS   0CL124    ** STEP COMPLETION RECORD **
JOBNAM   DS    CL8                     JOB NAME
INITDT   DS    PL3                     STEP INITIATION DATE YYDDD
INITIM   DS    PL4                     STEP INITIATION TIME MIN/1000
STEPUSER DS   CL8      SMF USER FIELD  **
STEPNM   DS    CL8                     STEP NAME
STEPNO   DS    PL2                     STEP NO
LDMOD    DS    CL8                     LOAD MODULE NAME
PRIORITY DS    PL2                     STEP DISPATCHING PRIORITY
OPSYS    DS   CL1     **  OPERATING SYSTEM  **
DAYWK    DS    CL1                     DAY OF WEEK, 1=MON THRU 7=SUN
CMPDT    DS    PL3                     STEP COMPLETION DATE YYDDD
CMPTIM   DS    PL4                     STEP COMPLETION TIME MIN/1000
ALOCTIME DS   PL4      AMOUNT IN MIN/1000 **
INITIME  DS   PL4   INITIATION TIME IN MIN/1000 **
CPUTIM   DS    PL4                     CPU TIME 1/1000 MIN
PARTSIZ  DS    PL3                     PARTITION SIZE IN K
KCORUS   DS    PL3                     K-CORE USED
TOPDN    DS   PL3    ** VIRT STORAGE FROM TOP DV (VS2 ONLY ) **
ADDRSPC  DS   CL1  V=VIRTUAL,R=REAL
PAGEINS  DS   PL4   ** PAGE INS ***
PAGEOUTS  DS   PL4   ** PAGE OUTS **
VIOINS   DS   PL4   ** VIRTUAL IO INS **
VIOOUTS  DS   PL4   ** VIRTUAL IO OUTS **
NOSWAPS  DS   PL4    ** NMBR OF SWAPS TOTAL **
SWAPINS  DS   PL4   ** SWAP INS **
SWAPOUTS DS   PL4   ** NMBR OF SWAP OUTS **
DDDTA    DS   PL4    NMBR OF CARDS READ
CODETYPE DS    CL1                     COMP CODE TYPE U=USER, S=SYSTEM
COMPCOD  DS    CL3                     COMPLETION CODE
BV2RSVD  DS   XL12   ** RESERVED ***
NSETS    DS    PL2                     NBR DATA SETS USED, 0-255
COMPSET  DS    0CL13                VRBL DATA, 13 BYTES/DATASET
DEVTYP   DS    CL5                     DEVICE TYPE AND MODEL NBR
CHNLAD   DS    CL1                     CHANNEL ADDRESS
UNITAD   DS    CL2                     UNIT ADDRESS
EXCPCT   DS    PL5                     EXCP COUNT
*
         SPACE 3
         ORG   INITDT
DSACTV   DS   0CL180   *** DATASET ACTIVITY RECORD ****
CRDATE   DS    PL3                     RECORD CREATION DATE YYDDD
CRTIME   DS    PL4                     RECORD CREATION TIME MIN/1000
DSTEPNM  DS   CL8   ** STEP NAME **
DSTEPNO  DS   PL2    ** STEP NMBR **
DDAYWK   DS   CL1   ** DAY OF THE WEEK **
DCODTYP  DS   CL1   ** CODE TYPE  ***
DCOD     DS   CL3    ** CODE **
DINITDT  DS   PL3    ***   INOTIATION DATE **
DINITIM  DS   PL4   ** INITIATION TIME  **
DENDDT   DS   PL3   **  COMPLETION DATE **
DENDTIM  DS   PL4   ** COMPLETION TIME **
DDNAM    DS    CL8                     DD NAME
DSNAME   DS    CL44                    DATA SET NAME
GENNO    DS    CL8                     GENERATION SET INFO
ACCTEQ   DS    CL1                     ACCESS TECHNIQUE - B=BASIC,
*                                                         Q=QUEUED
DSORGN   DS    CL1                     ORGANIZATION - S = SEQUENTIAL,
*                                      I=INDEX-SEQ, D=DIRECT, P=PARTITN
*                                      G=GRAPHICS
FILTYP   DS    CL1                     FILE TYPE - O=OUTPUT, I=INPUT,
*                                      N=INOUT, T=OUTIN, U=UPDAT, R=RDB
FILST    DS    CL1                     FILE STATUS - T=TEMP, S=SYSOUT,
*                                      C=CATALOGUED, K=KEPT
DISPN    DS    CL1                     DISPOSITION - O=OLD, M=MOD,
*                                      N=NEW, S=SHR, D=DEL, R=REREAD,
*                                      L=LEAVE
RCFORM   DS    CL1                     RECORD FORMAT - F=FIXED, V=VRBL,
*                                      U=UNDEFINED
BLKNG    DS    CL1                     BLOCKING - B=BLOCKED, U=UNBLOCKE
LRECL    DS    PL3                     LOGICAL RECORD LENGTH
MAXBLK   DS    PL3                     MAXIMUM BLOCK LENGTH
AVGBLK   DS    PL3                     AVERAGE BLOCK LENGTH
KEYLEN   DS    PL2                     KEY LENGTH
TPDEN    DS    CL1                     TAPE DENSITY - 8=800BPI, 1=1600
DVCTYP   DS    CL5                     DEVICE TYPE AND MODEL NO
NVOL     DS    PL2                     NUMBER VOLUMES
VLSTAT   DS    CL1                     VOL STATUS - P=PUBLIC,
*                                      V=PRIVATE, S=STORAGE
NPSPAC   DS    PL3                     PRIMARY QUANTITY
NSSPAC   DS    PL3                     SECONDARY SPACE
TXREL    DS    PL3                     TRACKS RELEASED BY DADSM
TAPBLX   DS    PL5                     TAPE BLOCK COUNT
         ORG   TAPBLX
TXUSED   DS   PL5        TRACKS USED ( OVRLAYS TAPE BLOCK CNT )
NXTNTS   DS    PL2                     NUMBER XTENTS
TXALLOC  DS    PL3                     TRACKS ALLOCATED
NBROPNS  DS   PL2   ** # OF OPENS **
TOTVOLS  DS   PL2   ** TOTAL VOLUMNS ( EQU'  NVOL )
         DS   XL10    ** FILLER **
OUTUCB   DS    0CL14               * VRBL DATA, 14 BYTES/UCB
CHADR    DS    CL1                     CHANNEL ADDRESS
UNITADR  DS    CL2                     UNIT ADDRESS
VOLSER   DS    CL6                     VOL SER NO
EXCPCNT  DS    PL5                     EXCP COUNT
*
         SPACE   3
         ORG   INITDT
JOBCOMP  DS   0CL132    *** JOB COMPLETION RECORD ***
JBDATE   DS    PL3                     JOB START DATE
JBTIME   DS    PL4                     JOB START TIME
JBRDRDT  DS   PL3   ** RDR COMPLETION DATE  **
JBRDRTM  DS   PL4   ** ** RDR RDR COMP TIME **
JBCMPDT  DS   PL3   ** COMPLETION DATE  **
JBCMPTM  DS   PL4   ** COMPLETION TIME **
JBUSER  DS  XL8   ** SMF USER FIELD  **
JBCOMPCD DS    CL4                     JOB COMPLETION CODE
JBCLASS  DS   XL1   ** JOB CLASS **
JBPRTY   DS   PL2   ** JOB PRIORITY  **
JBACCTG  DS    CL25                    JOB ACCOUNTING DATA
JBPGMRNM DS    CL20                    PROGRAMMER NAME
JBCARDS  DS   PL4   ** CARDS READ  **
JBTRNSTM DS  PL4 ** TRANSACTION ACTIVE TIME **
JBSUNITS DS   PL4  SERVICE UNITS **
JBIPSGP  DS   PL2   ** PRIORITY GROUP **
JBRSV    DS   XL12   ** RESERVED **
         SPACE 3
SYSOUTR  DS   0CL112   ***  OUTPUT SYSOUT RECORD ***
         ORG   INITDT
DSYDATE  DS    PL3           SAME AS READER START DATE, TO SORT LOW
DSYTIME  DS    PL4           SAME AS READER START TIME, TO SORT LOW
SYDATE   DS    PL3           DATE OF SYSOUT START
SYTIME   DS    PL4           TIME OF SYSOUT START
SYCDATE  DS   PL3   ** SYSOUT END DATE  **
SYCTIME  DS   PL4   **  SYSOUT END TIME **
SYSMFUSR DS   XL8   ** SMF USER FIELD **
SYCLASS  DS    CL1           SYSOUT CLASS
SYFORM   DS    CL4           FORM NUMBER
SYCOUNT  DS    PL4           LINE COUNT
SYIOINDC DS    PL2           STATUS INDICATOR
SYNUMDS  DS    PL2           NUMBER OF SYSOUT DATASETS
SYRSV    DS   XL12   ** RESERVED **
SYVS1    DS    CL8           VS1 LOGON NUMBER
SYVS2    DS    0CL26         VS2 SECTION
SYHASPNO DS    CL4           HASP JOB NUMBER
SYHASDEV DS    CL8           HASP LOGICAL OUTPUT DEVICE NAME
SYHASFCB DS    CL4           HASP FCB
SYHASUCS DS    CL4           HASP UCS IDENTIFIER
SYHASPGS DS    PL4           HASP PAGE COUNT
SYHASRTE DS    PL2           HASP REMOTE NUMBER
*
         SPACE 3
WAITREC  DS   0CL77   ***  SYSTEM INFORMATION RECORD ***
         ORG   STPCOMP
WAITTYP  DS   XL1    **  INDICATE TYPE OF RECD **
*        IPL = I
*        WAIT = W
*        EOD = E
*        PAGING = P
EODTYP   DS   XL1   END OF DAY INDICATOR
*        ZEOD = E
*        CRASH = C
*        OTHER = ' '
WAITFIL  DS   XL6   ** FILLER **
WAITSDT  DS   PL3   ** START DATE **
WAITSTIM DS   PL4   ** START TIMR **
IPLRSN   DS   CL15   ** IPL REASON **
WAITIM   DS   PL4   ** TOTAL WAIT TIME **
TPAGEIN  DS   PL5   ** PAGE INS **
TPAGEOT  DS   PL5   ** PAGE OUTS **
TPAGERCM DS   PL5   **PAGES RECLAIMED **
WAITRSV  DS   XL12   ** RESERVED **
         EJECT
         ORG   OUTREC+502
RECORD   DS    CL4    RECORD DESC WORD (LL00)
SMFRECD  DS  0CL1   *** S M F  D A T A  R E C O R D S  ***
SMFDATA  DS    0CL14     *** SMF DATA RECORD HEADER ***
SMFSYS   DS    CL1           X'01' = VS1, X'02' = VS2
SMFTYP   DS    XL1        RECORD TYPE - SEE FOLLOWING DESCRIPTIONS
SMFTIME  DS    XL4        TIME 1/100 SEC
SMFDATE  DS    PL4        DATE 00YYDDD
SMFSYSID DS    CL2        SYSTEM ID
SMFMODEL DS    CL2        CPU MODEL NO
         SPACE 3
SMFIPL   DS    0CL13     *** IPL RECORD - TYPE 0 ***
*                        WRITTEN AFTER EACH IPL
IPLJBWT  DS    XL4        JOB WAIT TIME DEFAULT - MINUTES
IPLBFSZ  DS    XL4        SMF BUFFER SIZE
IPLMS    DS    XL4        MAIN STORAGE IN 1K BLOCKS
IPLOPT   DS    XL1        SMF OPTIONS, BIT0-SYSTEM AND JOB DATA,
*                                      BIT1-SYSTEM, JOB AND STEP DATA
*                                      BIT2-EXITS REQUESTED
         SPACE 3
         ORG   SMFIPL
SMFWTR   DS    0CL4      *** WAIT TIME RECORD - TYPE 1 ***
*                        ONE RECORD EVERY TEN MINUTES
WTRWT    DS    XL4        SYSTEM WAIT TIME SINCE LAST TYPE 1. 1/100 SEC
WENDTM   DS   XL4
WPGINS   DS   XL4
WPGOUTS  DS   XL4
WPGRCLM  DS   XL4
         SPACE 3
         ORG   SMFIPL
SMFDMP   EQU   *         *** SMF DUMP DATA SET HEADER - TYPE 2 ***
*                         NO DATA
         SPACE 3
         ORG   SMFIPL
SMFDTR   EQU   *         *** SMF DUMP DATA SET TRAILER - TYPE 3 ***
*                         NO DATA
         SPACE 3
         ORG   SMFIPL
SMFSTR   DS    0CL108 VARIABL *** STEP TERMINATION - TYPE 4 ***
STRJBNM  DS    CL8             JOB NAME
STRSTTM  DS    XL4             READER START TIME 1/100 SEC
STRSTDT  DS    PL4             READER START DATE 00YYDDD
STRUID   DS    CL8             USER IDENTIFICATION
STRSTNO  DS    XL1             STEP NUMBER
STRITM   DS    XL4             STEP INITIATION TIME 1/100 SEC
STRITD   DS    PL4             STEP INITIATION DATE 00YYDDD
STRDD    DS    PL4             NUMBER CARDS IN DD * SETS
STRCOMP  DS    XL2             STEP COMPLETION CODE
STRDSP   DS    XL1             PARTITION/STEP PRIORITY
STRPROG  DS    CL8             PROGRAM NAME
STRSTEP  DS    CL8             STEP NAME
STRPTSZ  DS    XL2             PARTITION SIZE - 1K BLOCKS
         DS    XL2             HRCHY 1 STORAGE
STRUSCR  DS    CL2             CORE STORAGE USED IN 1 K BLOCKS
         DS    XL2                     ROLLIN/ROLLOUT
STRH1R   DS    XL2                     HIER 1 CORE REQUESTED
STRH1U   DS    XL2                     HIER 1 CORE USED
STRSPKEY DS   XL1            STORAGE PROTECT KEY
STRTERMF DS   XL1            STEP TERMINATION INDICATORS
*       VIRTUAL STORAGE ONLY
*        BIT 0   RESERVED
*            1   VS1--CANCELED BY IEFUJV
*            2   VS1--CANCELED BY IEFUJI
*            3   VS1--CANCELED BY IEFUSI
*            4   VS1--CANCELED BY IEFACTRT
*            5   VS2--STEP TO BE RESTARTED
*            6   0--NORMAL COMPLETION , 1--ABEND
*            7   STEP NOT EXECUTED
STRRSVD1 DS   XL2      RESERVED
STRDEVAL DS   XL4    DEVICE ALLOCATION START TIME OF DAY
STRPRGLD DS   XL4    PROGRAM LOAD TIME OF DAY
STRRSVD2 DS    XL1    VS  RESERVED
STRSRBTM DS   XL3   VS STEP CPU TIME UNDER SRB
STRSTORF DS   XL2  BIT 7... 0-VIRTUAL,1--REAL..ADDRESS SPACE
STROFFST DS   XL2  VS OFFSET FROM BEGINNING OF RECORD
STRDEV   DS    XL2             TOTAL LENGTH OF THIS FIELD AND
*                               FOLLOWING DEVICE FIELDS
STEPDUCB DS    0XL8                VRBL DATA, 8 BYTES/DATASET
STEPDEV  DS    XL1             *DEVICE CLASS  08-UNIT RECORD
*                                             10-GRAPHICS
*                                             20-DIRECT ACCES TYPE
*                                             40-COMMUNICATION EQUIP
*                                             80-MAG TAPE
STEPUNT  DS    XL1             *UNIT TYPE. FOR DEVICE CLASS 08.
*                                01-2540R, 02-2540P, 03-1442RP,
*                                04-2501R, 05-2520RP, 08-1403PRNT,
*                                0A-1443PRNT, 10-2671PT, 18-2495TC,
*                                1A-1285OR, 1B-1287OR, 1C-1288OR,
*                                1D-1419PCU, 1E-1419/1275SCU,
*                                1F-1275PCU, 20-1052PK, 21-215OCON
*                              *UNIT TYPE. FOR DEVICE CLASS 10
*                                02-2250 DISPLAY, 03-2260 DISPLAY,
*                                04-1053 PRNT, 05-2280 FILM,
*                                06-2282 FILM, 07-MOD85 CONSOLE
*                              *UNIT TYPE. FOR DEVICE CLASS 20
*                                01-2311 DISK, 02-2301 DRUM,
*                                03-2303 DRUM, 04-2302 DISK,
*                                05-2321 CELL, 08-2314 DISK
*                              *UNIT TYPE. FOR DEVICE CLASS 40
*                                1X-9X ADAPTERS
*                            X1-2702TCU, X2-2701TCU, X3-2703TCU
*                              *UNIT TYPE. FOR DEVICE CLASS 80
*                                01-2400 TAPE
STEPCUU  DS    XL2             CHANNEL-UNIT ADDRESS 0CUU
STEPXCP  DS    XL4             EXCP COUNT
* NOTE. FOR A DD DUMMY FILE, THE ABOVE 8-BYTE FIELD IS ALL 0'S
ENDLENS  DS    XL1             LENGTH OF NEXT 3 FIELDS. THIS BYTE
*                              FOLLOWS THE LAST FIELD ABOVE
STEPTMCP DS    XL3             STEP CPU TIME 1/100 SEC
ACCFLNO  DS    XL1             NUMBER OF ACCOUNTING FIELDS TO FOLLOW
*                              ACCOUNTING FIELDS BELOW OCCUR NUMBER OF
*                              TIMES GIVEN BY ACCFLNO
ACCFLLN  DS    XL1               ACCOUNTING FIELD LENGTH, 0=OMITTED
ACCFDTA  DS    CL256            ACCOUNTING FIELD DATA
         SPACE 3
         ORG   SMFIPL
SMFJBTRM DS    0CL119  VRBL  *** JOB TERMINATION - TYPE 5 ***
JBTJBNM  DS    CL8             JOB NAME
JBTSTTM  DS    XL4             READER START TIME 1/100 SEC
JBTSTDT  DS    PL4             READER START DATE 00YYDDD
JBTUID   DS    CL8             USER IDENTIFICATION
JBTSTPS  DS    XL1             NUMBER JOB STEPS
JBTITM   DS    XL4             JOB INITIATION TIME 1/100 SEC
JBTITD   DS    PL4             JOB INITIATION DATE 00YYDDD
JBTDD    DS    XL4             NBR DD * CARDS
JBTCOMP  DS    XL2             JOB COMPLETION CODE
JBTPRTY  DS    XL1             JOB PRIORITY
JBTSTM   DS    XL4             READER STOP TIME 1/100 SEC
JBTSDT   DS    PL4             READER STOP DATE 00YYDDD
JBTRMND  DS    XL1             JOB TERMINATION. BITS 0,5,7 RESERVED.
*                               BITS 1-4 CANCELLED IN SMF EXIT RTNS,
*                               BIT 6 ABEND
JBTSCL   DS    XL5             SYSOUT CLASSES AND MSGLEVEL CLASS. BITS
*                               0-35 REPRESENT CLASSED A-Z-0-9
JBTCKPT  DS    XL1             CHECKPOINT/RESTART INDIC. BITS 1,2,6,7
*                               RESERVED, BIT0-SYSTEM RESTART, BIT3-
*                               CHECKPOINT TAKEN, BIT4-CHECKPOINT
*                               RESTART, BIT5-STEP RESTART
JBLRDCL  DS    XL1                     READER DEVICE CLASS
JBTRDUN  DS    XL1             READER UNIT TYPE
JBTINCL  DS    CL1             JOB INPUT CLASS
         DS    CL20            RESERVED
JBTOT4   DS    XL1             TOTAL LENGTH, NEXT 4 FIELDS
JBTPRMR  DS    CL20            PROGRAMMERS NAME
JBTCPU   DS    XL3             JOB CPU TIME 1/100 SEC
JBTNACTG DS    XL1             NUMBER ACCOUNTING FIELDS
*                            * ACCOUNTING FIELDS, VARIABLE
JBTACLN  DS    XL1                     ACCOUNTING FIELD LENGTH
JBTACDT  DS    CL1             ACCOUNTING FIELD DATA
         SPACE 3
         ORG   SMFIPL
SMFOWR   DS    0CL43     *** OUTPUT WRITER RECORD TYPE 6 ***
*                        WRITTEN WHEN SYSOUT CLASS COMPLETED FOR JOB
OWRJBNM  DS    CL8        JOB NAME
OWRSTTM  DS    XL4        READER START TIME 1/100 SEC
OWRSTDT  DS    PL4        READER START DATE 00YYDDD
OWRUID   DS    CL8        USER IDENTIFICATION
OWRCLS   DS    CL1        OUTPUT WRITER CLASS
OWRSTM   DS    XL4        WRITER START TIME 1/100 SEC
OWRWSTD  DS    PL4        WRITER START DATE 00YYDDD
OWRNREC  DS    XL4        LOGICAL RECORDS/FORM NO/CLASS
OWRERR   DS    XL1        I/O ERROR INDIC. 00-NO ERROR, 01-INPUT JOBQUE
*                          ERROR, 02-OUTPUT ERROR, 04-INPUT ERROR,
*                          05-BOTH 01 AND 04, 06-BOTH 01 AND 02
OWRDSTS  DS    XL1        DATA SETS WRITTEN
OWRFORM  DS    CL4        FORM NUMBER
OWVS1    DS    CL7           VS1 LOGON NUMBER
OWVS2    DS    0CL26         VS2 SECTION
OWHASPNO DS    CL4
OWHASDEV DS    CL8
OWHASFCB DS    CL4
OWHASUCS DS    CL4
OWHASPGS DS    CL4           PAGE COUNT - BINARY
OWHASRTE DS    CL2           ROUTE CODE - BINARY
         SPACE 3
         ORG   SMFIPL
SMFLOST  DS    0CL10     *** DATA LOST - TYPE 7 ***
*                        WRITTEN WHEN SMF DS AVAILABLE AFTER LOSS
LOSREC   DS    XL2        NUMBER LOST RECORDS
LOSTIM   DS    XL4        STARTING TIME OF LOSS 1/100
LOSDT    DS    PL4        STARTING DATE OF LOSS 00YYDDD
         SPACE 3
         ORG   SMFIPL
SMFIOCN  DS    0CL2 VARIABLE  *** I/O CONFIGURATION - TYPE 8 ***
*                        WRITTEN AFTER EACH IPL
IOLEN    DS    XL2             TOTAL LENGTH OF FOLLOWING FIELDS
* THE FOLLOWING 4 FIELDS APPEAR FOR EACH DEVICE ON LINE.
IODEVCL  DS    XL1             DEVICE CLASS
IOUNT    DS    XL1             UNIT TYPE
IOCUU    DS    XL2             CHANNEL-UNIT ADDRESS
         SPACE 3
         ORG   SMFIPL
SMFVRYON DS    0CL2 VARIABLE  *** VARY ONLINE - TYPE 9 ***
VOLEN    DS    XL2             TOTAL LENGTH OF FOLLOWING FIELDS
* FOLLOWING 4 BYTE GROUP APPEARS FOR EACH DEVICE VARIED ONLINE
VOUNIT   DS    XL2             UNIT BROUGHT ONLINE. X'2065'-CPU,
*                               X'2860'-MULTIPLEXOR,
*                               X'2870'-SELECTOR, X'2365'-STORAGE,
*                               FOR DEVICES, DEVICE CLASS AND UNIT TYPE
VOADDR   DS    XL1             FOR CPU-X'00', FOR CHANNEL-X'00' TO X'06
*                               CHANNEL NO, FOR DEVICE-CHANNEL ADDRESS,
*                               FOR STORAGE-ADDRESS INDEX
VOUNAD   DS    XL1             FOR CPU AND CHANNEL- X'01'-CPUA, X'02'
*                               CPUB, FOR STORAGE- SIZE INDEX, FOR
*                               DEVICE-UNIT ADDRESS
         SPACE 3
         ORG   SMFIPL
SMFALLOC DS    0CL26 VARIABLE *** ALLOCATION RECOVERY - TYPE 10 ***
ALLJBNM  DS    CL8             JOB NAME
ALLSTTM  DS    XL4             READER START TIME 1/100 SEC
ALLSTDT  DS    PL4             READER START DATE 00YYDDD
ALLVID   DS    CL8             USER IDENTIFICATION
ALLEN    DS    CL2             TOTAL LENGTH OF FOLLOWING FIELDS
* FOLLOWING 4-BYTES OCCUR FOR EACH DEVICE
ALLDEV   DS    XL1             DEVICE CLASS
ALLUNT   DS    XL1             UNIT TYPE
ALLCUU   DS    XL2             CHANNEL AND UNIT ADDRESS
         SPACE 3
         ORG   SMFIPL
SMFVRYOF DS    0CL2 VARIABLE  *** VARY OFFLINE - TYPE 11 ***
* SAME AS VARY ONLINE
         SPACE 3
         ORG   SMFIPL
SMFEOD   DS    0CL4      *** END OF DAY - TYPE 12 ***
* SAME AS WAIT TIME RECORD
         SPACE 3
         ORG   SMFIPL
SMFDSC   DS    0CL2 VARIABLE  *** MFT DYNAMIC STORAGE ALLOC - TYPE 13 *
*                        WRITTEN AFTER IPL AND EACH DEFINE COMMAND
DSCLEN   DS    XL2             LENGTH OF THIS AND REMAINING FIELDS
* FOLLOWING TEN BYTE FIELD OCCURS FOR EACH ACTIVE PARTITION
DSCPART  DS    XL1             PARTITION NO
DSCSTRG  DS    XL2             STORAGE IN 1K BLOCKS
         DS    XL2             HEIRARCHY 1 STORAGE
DSCJCLS  DS    XL1             NUMBER OF JOB CLASSES
DSCIDP   DS    CL4             BRDR-READER, BWTR-WRITER, ELSE JOB
*                              CLASSES RIGHT JUST. WITH LEADING BLANKS
         SPACE 3
         ORG   SMFIPL
SMFDSIR  DS    0CL274 TO 6398 *** INPUT OR RDBACK DATA SET - TYPE 14 **
*                        WRITTEN AFTER INPUT OR RDBACK FILE IS CLOSED
*                        OR PROCESSED BY EOV
DSJBNM   DS    CL8             JOB NAME
DSRTTM   DS    XL4             READER START TIME 1/100 SEC
DSRSTDT  DS    PL4             READER START DATE 00YYDDD
DSUID    DS    CL8             USER IDENTIFICATION
DSRECI   DS    XL2             RECORD INDICATORS. BITS 0,7-15 RESERVED,
*                               BIT1-RECD BY EOV, BIT2-DASD DEV,
*                               BIT3-TEMP DS, BIT4-DA ORG, BIT5-IS ORG,
*                               BIT6-JFCD IS ORG
DSDCBSEG DS    XL1             DCB/DEB SEGMENT LENGTH
DSNOUCB  DS    XL1             NO UCB SEGMENTS
DSUCBSEG DS    XL1             UCB SEGMENT LENGTH
DSEXTSEG DS    XL1             EXTENSION SEGMENT SIZE
         DS    CL4             RESERVED
         DS    0CL16          * TIOT SEGMENT, DD PORTION
DSDDLEN  DS    XL1             LENGTH OF DD ENTRY (TIOELNGH)
DSTPRWD  DS    XL1             TAPE REWINDING   (TIOESTTA)
DSNBRDV  DS    XL1             DURING ALLOC - NO DEVICES REQ (TIOEWTCT)
DSSYSOT  DS    XL1             BITS 1-7 RESERVED. BIT0-SYSOUT DS
*                               (TIOELINK)
DSDDNM   DS    CL8             DD NAME  (TIOEDDNM)
DSJFCB   DS    XL3             REL. TRK ADDR OF JFCB (TIOEJFCB)
DSALLC   DS    XL1             DURING ALLOCATION ONLY (TIOESTTC)
DSJFSEG  DS    0CL176        * JFCB SEGMENT NOT INCL EXTENSIONS
DSDSNAM  DS    CL44            DATA SET NAME (JFCBDSNM)
DSGENNO  DS    CL8             ELEMENT NO OR GEN NO (JFCBELNM)
DSINFC   DS    XL1             BIT0-CATALOGUED DS,... (JFCBTSDM)
DSYSCD   DS    CL13            SYSTEM CODE (JFCBSYSC)
DSLBTYP  DS    XL1             LABEL TYPE CODE (JFCBLTYP)
DSMOD    DS    XL1             TTR FOR DASD MOD (JFCBOTTR)
DSMTSEQ  DS    XL2             MAG TAPE FILE SEQ NO (JFCBFLSQ)
DSVLSEQ  DS    XL2             VOL SEQ NO (JFCBVLSQ)
DSOPNCL  DS    XL8             DATA MGMT OPEN/CLOSE INDIC (JFCBMASK)
DSCRDT   DS    XL3             CREATION DATE YDD (JFCBCRDT)
DSXPDT   DS    XL3             EXPIRATION DATE YDD (JFCBXPDT)
DSIND1   DS    XL1             BIT6-MEMBER OF GEN GROUP, BIT7-MEMBER
*                               OF PDS... (JFCBIND1)
DSIND2   DS    XL1             BITS0-1- 01-OLD, 10-MOD, 11-NEW
*                              BITS2-3- 01-DS SECURITY, BIT4-SHARED,
*                              BIT5-DELETE JFCB, BIT6-STORAGE VOL REQ
*                              BIT7-TEMP DS  (JFCBIND2)
DSBUFF   DS    XL1            NUMBER BUFFERS (JFCBUFNO OR JFCBUFRQ)
DSBUFND  DS    XL1            BUFFER TYPE (JFCB-FTEK,-HIAR,-FALN)
DSBUFLN  DS    XL2            BUFFER LENGTH (JFCBUFL)
DSEROPT  DS    XL1            ERROR OPTIONS (JFCEROPT)
DSDEVCHR DS    XL1            MT REC MODE (JFCTRTCH) 7-TRK, OR
*                             DA KEY LEN (JFCKEYLE) OR
*                             CARD R/P MODE (JFCMODE) OR
*                             CARD STACK (JFCSTACK) OR
*                             PRT NORM SPACING (JFCPRTSP) OR
*                             PAPER TAPE MODE (JFCCODE)
DSDENS   DS    XL1            MT DENSITY (JFCDEN)
*                               03=200BPI, 43=556BPI, 83=800BPI,
*                               C3=1600BPI
DSCHLIM  DS    XL1            BDAM SEARCH LIMIT (JFCLIMCT)
DSOPMOD  DS    XL2            FOR MOD DS
DSORGZ   DS    XL1            BIT0-IS, BIT1-PS, BIT2-DA, BIT3-5 RSVD,
*                             BIT6-PO, BIT7-UNMOVABLE (JFCDSORG)
DSGRAPH  DS    XL1            GRAPHICS ORGANIZATION
DSRECFM  DS    XL1            BITS0-1 10-FIXED, 01-VAR, 11-UNDEF,
*                             BIT2-TRK  OFLO, BIT3-BLOCKED,
*                             BIT4-FIXED, BIT5-6 10-ASA CTLCHR,
*                             01-MACH, CODE CTLCHR, 00- NO CTLCHR
*                             BIT7-0 (JFCRECFM)
DSOPTCD  DS    XL1            OPTION CODES (JFCOPTCD)
DSBLKSZ  DS    XL2            MAX BLOCK SIZE (JFCBLKSI)
DSLRECL  DS    XL2            LOGICAL RECLEN (JFCLRECL)
DSCHPGM  DS    XL1            NUMBER CHANNEL PGMS (JFCNCP)
DSMSTRK  DS    XL1            NO MASTER INDEX TRKS (JFCNTM)
DSKEYLOC DS    XL2            KEY LOCATION (JFCRKP)
DSCYLOVF DS    XL1            CYL OFLO TRKS (JFCCYLOF)
         DS    XL1            RESERVED (JFCDBUFN)
DSQDLY   DS    XL1            SECONDS INTENTIONAL QTAM POLL DELAY
DSQPRTY  DS    XL1            QTAM PRIORITY (JFCCPRI) OR SMF MFT
*                              SYSOUT OUTLIM= VALUE (JFCOUTLI)
DSQTWK   DS    XL2            QTAM WORK LENGTH (JFCSOWA)
         DS    XL1            RESERVED
DSNVSER  DS    XL1            NUMBER OF VOL SER NOS (JFCBNVOL)
DSVLSRS  DS    CL30           1ST 5 VOL SER NOS (JFCBVOLS)
         DS    XL1            RESERVED (JFCBEXTL)
DSTTRJ   DS    XL3            TTR JFCB EXT BLK (JFCBEXAD)
DSDAQTY  DS    XL3            PRIMARY DA STORAGE REQRD (JFCBPQTY)
DSSPAC   DS    XL1            SPACE TYPE REQUESTED (JFCBCTRI)
*                               BITS0-1, 00=ABSTR, 01=AVG BLK LEN, 10=
*                               TRACKS, 11=CYLNDRS, BITS2-3 RESERVED,
*                               BIT4=CONTIG, BIT5-MXIG, BIT6-ALX
*                               BIT7-ROUND
DS2SPAC  DS    XL3                     SECONDARY DA SPACE (JFCBSQTY)
         DS    XL1            RESERVED
DSDIRSP  DS    XL3            STORAGE FOR DIRECTORY OR INDEX (JFCBDQTY)
DSJFADR  DS    XL3            JFCB STRG ADDR (JFCBSPNM)
DS1ALLOC DS    XL2            TTR 1ST TRK ALLOC (JFCBABST)
DSJFSAL  DS    XL3            JFCB ADDR FOR SPACE ALLOC (JFCBSBNM)
DSAVBKLN DS    XL3            AVERAGE BLOCK LENGTH (JFCBDRLH)
DSNBRVOL DS    XL1            NUMBER VOLUMES (JFCBVLCT)
DSPLCYL  DS    XL1            NO TRK/CYL FOR SPLIT CYL (JFCBSPTN)
*
*
DSDCB    DS    0CL24         * DCB/DEB SEGMENT
DSDCSRG  DS    XL2            DATA SET ORGANIZATION (DCBDSORG)
DSDCRFM  DS    XL1            RECORD FORMAT (DCBRECFM)
DSINMAC  DS    XL1            INPUT METHOD- BIT2-BASIC (DCBMACRF)
DSOUTMAC DS    XL1            OUTPUT METHOD- BIT2-BASIC (DCBMACRF)
DSOPFLGS DS    XL1            OPEN ROUTINE FLAGS (DCBOFLGS)
DSOPTNS  DS    XL1            OPTION CODES-MOSTLY IS OPTIONS (DCBOPTCD)
         DS    XL1            RESERVED
DSDBFLG  DS    XL1            STATUS FLAGS (DEBOFLGS)
DSENDIS  DS    XL1            BIT0-SYSABEND OR SYSUDUMP DS,
*                             BITS2,3 01-REREAD, 11-LEAVE
*                             BITS4-7 1111-OUTPUT, 0011-INOUT,
*                                     0111-OUTIN, 0001-RDBACK,
*                                     0100-UPDAT  (DEBOPATB)
DSVLSQ   DS    XL2            VOL SEQ FOR MULTI-VOL SEQ DS (DEBVOLSQ)
DSBKXT   DS    XL4            TAPE VOLUME BLOCK COUNT (DCBBLKCT)
*                              OR TTR LAST REC FOR DASD
DSTPSNO  DS    0CL6           TAPE DATA SET SER NO
DSTKRL   DS    XL4             OR DASD TRKS RELEASED BY DADSM AND
DSXTREL  DS    XL1             EXTENTS RELEASED BY DADSM
         DS    XL3            RESERVED
DSUCBSG  DS    0CL24 VARIABLE UCB SEGMENT- 1 FOR EACH UCB IN THE DS
DSUCHNL  DS    XL1            CHANNEL ADDRESS (UCBCHA)
DSUNAD   DS    XL1            UNIT ADDRESS (UCBUA)
DSUVLNO  DS    CL6            VOL SER NO (SRTEVOLI/DCELVOLI)
DSUDVTP  DS    XL4            DEVICE TYPE (UCBTYP)
DSUVLST  DS    XL1            (SRTESTAB/DCELSTAB) VOLUME STATUS
*                              BIT1-NOT SHARABLE, BIT3-PRIVATE,
*                              BIT4-PUBLIC, BIT5-STORAGE, BIT6-JOBLIB
*                              ON VOLUME, BIT7-CONTROL
DSUEXTS  DS    XL1            NUMBER OF EXTENTS
         DS    XL2            RESERVED
DSUEXCP  DS    XL4            EXCP COUNT
DSUTXALL DS    0XL4           DISK TRACKS ALLOCATED
DSUTPSCT DS    XL2            TAPE DS SEQ COUNT (SRTEFSCT)
DSUTPSNO DS    XL2            TAPE DS SEQ NO (SRTEFSEQ)
DSISAM   DS    0CL28 ISAM EXTENSION FOLLOWING LAST UCB
         DS    XL2                     RESERVED
DISMAC   DS    XL1             BIT4-UPDATE READ, BIT5-UPDATE READ,
*                              BIT6-ADD WRITE (DCBMAC)
DISIX    DS    XL1             NBR INDEX LEVELS (DCBNLEV)
DISNFL   DS    XL4             NBR READS TO NON-1ST OFLO (DCBRORG3)
DISNPR   DS    XL4             NBR PRIME DATA RECDS (DCBNREC)
DISIOF   DS    XL2             NBR INDEP OFLO TRKS REM (DCBRORG2)
DISNOF   DS    XL2                     NBR OFLO RECDS (DCBNOREC)
DISFOF   DS    XL2             NBR FULL CYLOFLO AREAS (DCBRORG1)
         DS    XL1                     RESERVED
DISIIE   DS    XL1             NBR INDEP INDX XTNTS (DBNIEE)
DISPDE   DS    XL1             NBR PRIME DATA XTNTS (DEBNPEE)
DISIOX   DS    XL1             NBR INDEP OFLO XTNTS (DEBNOEE)
DISIXC   DS    XL2             INDEP INDEX CYL
DISPDC   DS    XL2             NBR PRIME DATA CYL
DISOFC   DS    XL2             NBR INDEP OFLO CYL
DSESV    DS    0CL12     ESV EXTENSION - FOLLOWS ISAM EXTENSION
         DS    XL1            RESERVED
         DS    XL1            NO TEMP READ ERRORS
         DS    XL1            NO TEMP WRITE ERRORS
         DS    XL1            NO PERM READ ERRORS
         DS    XL1            NO PERM WRITE ERRORS
         DS    XL1            NO NOISE BLOCKS
         DS    XL2            NO START I/O'S
         DS    XL2            NO ERASE GAPS
         DS    CL2            NO CLEANER ACTIONS
         SPACE 3
         ORG   SMFIPL
SMFDSOU  DS    0CL274 TO 6398 *** OUTPUT, UPDATE, INOUT, OR OUTIN
*                                  DATA SETS - TYPE 15 ***
*                        WRITTEN WHEN AN OUTPUT, UPDAT, INOUT, OR OUTIN
*                        FILE IS CLOSED OR PROCESSED BY EOV
* SAME DEFINITION AS TYPE 14
         SPACE 3
         ORG   SMFIPL
SMFSCRDS DS    0CL82 TO 2122 *** SCRATCH DATA SET - TYPE 17 ***
*                        WRITTEN WHEN A DATA SET IS SCRATCHED
SCRJOB   DS    CL8            JOB NAME
SCRSTIM  DS    XL4            READER START TIME 1/100 SEC
SCRSTDT  DS    PL4            READER START DATE 00YYDDD
SCRUID   DS    CL8            USER IDENTIFICATION
SCRECIND DS    XL2            RECORD INDICATORS
SCRDSN   DS    CL44           DS NAME
         DS    XL3            RESERVED
SCRNVOL  DS    XL1            NUMBER VOLUMES
SCRVOLS  DS    0CL8           1 FIELD FOR EACH VOLUME
         DS    XL2             RESERVED
SCRVSRL  DS    CL6             VOLUME SERIAL NO
         SPACE 3
         ORG   SMFIPL
SMFRENAM DS    0CL126 TO 2166 *** RENAME DATA SET - TYPE 18 ***
RENJBNAM DS    CL8             JOB NAME
RENSTTM  DS    XL4             READER START TIME 1/100 SEC
RENSTDT  DS    PL4             READER START DATE 00YYDDD
RENUID   DS    CL8             USER IDENTIFICATION
         DS    XL2             RESERVED
RENOLD   DS    CL44            OLD DS NAME
RENNEW   DS    CL44            NEW DS NAME
         DS    XL3             RESERVED
RENNVOL  DS    XL1             NUMBER VOLUMES
RENVOLS  DS    0CL8            1 FIELD PER VOLUME
         DS    XL2             RESERVED
RENVSRL  DS    CL6             VOLUME SERIAL NO
         SPACE 3
         ORG   SMFIPL
SMFDAVL  DS    0CL46     *** DIRECT ACCESS VOLUME - TYPE 19 ***
*                        WRITTEN AT IPL, AT HALT EOD, AND WHEN ANY USER
*                        VOLUME IS DISMOUNTED
         DS    XL2        RESERVED
DAVSRL   DS    CL6        VOLUME SERIAL NO
DAVOWNR  DS    CL10       OWNER IDENTIFICATION
DAVDEVTY DS    CL4        DEVICE TYPE
DAVVTOC  DS    XL5        VTOC ADDRESS
DAVVTJ   DS    XL1        VTOC INDICATORS (DS4VTOCI)
DAVDSCB  DS    XL2        NUMBER OF DSCB'S
DAV0DSC  DS    XL2        NUMBER FORMAT 0 DSCB'S
DAVUNUA  DS    XL2        NUMBER UNUSED ALT TRACKS
DAVUNALL DS    XL4        NUMBER UNALLOC CYL AND TRACKS
DAVFREE  DS    XL4        NO CYL AND TRACKS IN LARGEST FREE EXTENT
DAVUNEX  DS    XL2        NO UNALLOC EXTENTS
         DS    XL2        RESERVED
         SPACE 3
         ORG   SMFIPL
SMFJOBST DS    0CL47 VARIABLE *** JOB START - TYPE 20 ***
*                        WRITTEN AT JOB INITIATION WHEN DATA SET ACCTG
*                        AND/OR DA VOLUME INFO IS SPECIFIED
JOBJBNM  DS    CL8             JOB NAME
JOBSTTM  DS    XL4             READER START TIME 1/100 SEC
JOBSTDT  DS    PL4             READER START DATE 00YYDD
JOBUID   DS    CL8             USER IDENTIFICATION
         DS    XL2             RESERVED
JOBPGNM  DS    CL20            PROGRAMMER'S NAME
JOBNACCT DS    CL1             NO. ACCOUNTING FIELDS
JOBACCTG DS    CL1      VBL    ACCOUNTING FIELDS FROM JOB CARD
         SPACE 3
         ORG   SMFIPL
SMFESV   DS    0CL30     *** ESV RECORD - TYPE 21 ***
ESVLEN   DS    XL2        LENGTH OF RECORD
ESVVOLS  DS    CL6        VOLUME SERIAL NO
ESVCUU   DS    XL2        CHANNEL-UNIT ADDRESS
ESVUCB   DS    XL4        UCB TYPE
ESVTRDE  DS    XL1        TEMPORARY READ ERRORS
ESVTWTE  DS    XL1        TEMPORARY WRTIE ERRORS
ESVSIO   DS    XL2        NO SIO'S
ESVPRDE  DS    XL1        PERMENENT READ ERRORS
ESVPWTE  DS    XL1        PERMANENT WRITE ERRORS
ESVNDIS  DS    XL1        NOISE REOCRDS
ESVERAS  DS    XL2        ERASE GAPS
ESVCLEAN DS    XL2        CLEANER ACTIONS
ESVTPDEN DS    XL1        TAPE DENSITY
ESVBKLEN DS    XL2        BLOCK SIZE
         DS    XL2        RESERVED
*
         EJECT
         ORG   SMFIPL
ASPACCNT DS   CL8            *** ASP ACCOUNTING NUMBER              ***
ASPJOBNR DS   CL4            *** ASP  JOB NUMBER                    ***
ASPJOBNM DS   CL8            ***  JOB NAME                          ***
ASPCDATE DS   CL5            ***   COMPLETION DATE                  ***
ASPPRGMR DS   CL11           *** PROGRAMMER NAME                    ***
ASPLINES  DS   XL4           *** LINES PRINTED
ASPPUNCH  DS    XL4          ***CARDS PUNCHED
ASPCARDS DS   XL2 4          ***CACARDS READ
ASPFILLR DS   XL2            ***   FILLER                           ***
ASPPRTY  DS   XL2            ***   JOB PRIORITY                     ***
ASPSYSID  DS   CL8           ***   MIAN PROCESSOR NAME              ***
ASPSETUP DS   XL2            ***   NUMBER OF SETUPS                 ***
ASPSWTCH DS   XL1            ***   DEADLINE SWITCH                  ***
ASPSTIME DS   CL6            ***   STARTING TIME HH MM SS           ***
ASPCTIME DS   CL6            ***   COMPLETION DATE                  ***
ASPMTIME DS   XL6              ***   TIME ON MAIN                   ***
ASPORIG  DS   XL1              ***    ORIGION INDICATOR             ***
         MEND
./ ADD NAME=ISAMCORE 0100-02135-02135-1228-00019-00019-00000-VBCMACS
         MACRO
         ISAMCORE &DCB,&REG
         AIF (T'&DCB EQ 'O').NODCB
         AIF (T'&REG EQ 'O').NOREG
*        GET CORE FOR INCORE ISAM INDEXES
         SR    &REG,&REG .                  CLEAR
         ICM   &REG,3,&DCB+150 .        GET DCBNCRHI
         CLOSE &DCB .                CLOSE TO SET SMSI & MSHI
         STH   &REG,&DCB+68 .           SET SMSI
         LA    0,0(&REG) .               SET REQUIREMENT FOR GETMAIN
         GETMAIN R,LV=(0)
         ST    1,&DCB+72 .             SET MSHI
         OPEN  &DCB .                REOPEN DATA SET
         MEXIT
.NODCB   ANOP
         MNOTE 8,'***** NO DCB SPECIFIED. NO CODE GENERATED ******'
         MEXIT
.NOREG   MNOTE 8,'***** NO WORK REG SPECIFIED. NO CODE GENERATED *****'
         MEND
./ ADD NAME=ISAMFREE 0100-02135-02135-1228-00016-00016-00000-VBCMACS
         MACRO
         ISAMFREE &DCB
         AIF (T'&DCB EQ 'O').NODCB
         L     1,&DCB+72 .           GET ADDRESS OF INDEX AREA
         LA    1,0(1) .                CLEAR HIGH ORDER BYTE
         LTR   1,1 .                 ANY ADDRESS FOUND
         BZ    IF&SYSNDX             NO
         SR    0,0 .                   CLEAR
         ICM   0,3,&DCB+68 .            REQUIREMENT FOR FREEMAIN
         LTR   0,0 .                 ANY BYTES TO FREE
         BNP   IF&SYSNDX             NO
         FREEMAIN R,LV=(0),A=(1)
IF&SYSNDX EQU *
         MEXIT
.NODCB   MNOTE 8,'***** NO DCB SPECIFIED. NO CODE GENERATED *****'
         MEND
./ ADD NAME=JOBCARD  0100-02135-02135-1228-00011-00011-00000-VBCMACS
         MACRO
         JOBCARD &CNT,&CLASS,&LEVEL
         LCLC  &B
         AIF   (T'&LEVEL EQ 'O').JOB1
         PUNCH '         REPRO'
.JOB1    PUNCH '//JOB&CNT  JOB  ,'
         AIF   (T'&LEVEL EQ 'O').JOB2
         PUNCH '         REPRO'
&B       SETC  ',TYPRUN=HOLD'
.JOB2    PUNCH '//   MSGCLASS=&CLASS&B.'
         MEND
./ ADD NAME=JVDENTER 0100-02135-02135-1228-00074-00074-00000-VBCMACS
         MACRO , JVDENTER - V1M00 - 01/28/74
&LABEL   JVDENTER                                                      +
               &BASE=(11),                                             +
               &REGS=(14,12),                                          +
               &ID=,                                                   +
               &VERSION=,                                              +
               &DSA=72,                                                +
               &ORIGIN=*,                                              +
               &CFL=YES
.*
         LCLC  &EPID,&BASR,&START
.*
.BEGIN   AIF   ('&LABEL' EQ '').IDT
.*
         SPACE
&LABEL   DS    0H
         ENTRY &LABEL
         SPACE
.*
.IDT     AIF   (T'&ID EQ 'O').IDD
&EPID    SETC  '&ID'
         AGO   .VER
.IDD     AIF   ('&LABEL' EQ '').IDC
&EPID    SETC  '&LABEL'
         AGO   .VER
.IDC     ANOP
&EPID    SETC  '&SYSECT'
.VER     AIF   (T'&VERSION EQ 'O').GEN
&EPID    SETC  '&EPID-&VERSION-&SYSDATE-&SYSTIME'
         MNOTE *,'       &EPID'
.*
.GEN     ANOP
&BASR    SETC  '&BASE(1)'
.*
&START   SETC  '&ORIGIN'
         AIF   ('&ORIGIN' NE '@').START
&START   SETC  '&SYSECT'
.START   AIF   ('&ORIGIN' EQ '*').HERE
.*
         USING &START,&BASR
         SAVE  &REGS,,&EPID
         BALR  &BASR,0
         LA    14,*-&ORIGIN
         SLR   &BASR,14
         LR    2,13
         SPACE
.*
         AGO   .GETDSA
.HERE    ANOP
.*
         USING &START,&BASR
         SAVE  &REGS,,&EPID
         LR    &BASR,15
         LR    2,13
         SPACE
.*
.GETDSA  AIF   ('&DSA' EQ '0').NOCFL
.*
         LA    3,&DSA
         GETMAIN R,LV=(3)
         ST    3,0(1)
         ST    13,4(1)
         LR    13,1
.*
         AIF   ('&CFL' EQ 'NO').NOCFL
.*
         ST    1,8(2)
.*
.NOCFL   ANOP
.*
         LM    14,04,12(2)
         SPACE
.*
         MEND
./ ADD NAME=JVDLEAVE 0100-02135-02135-1228-00055-00055-00000-VBCMACS
         MACRO , JVDLEAVE - V1M00 - 01/28/74
&LABEL   JVDLEAVE                                                      +
               &REGS=(14,12),                                          +
               &RC=,                                                   +
               &DSA=
.*
         LCLC  &L
.*
         AIF   ('&DSA' EQ '0').NODSA
.*
&LABEL   LH    0,2(13)
         LR    1,13
         L     13,4(13)
.*
         AIF   ('&RC' NE '(15)').FREE
.*
         LR    2,15
.*
.FREE    ANOP
.*
         FREEMAIN R,LV=(0),A=(1)
.*
.RCCHK   AIF   ('&RC' EQ '').NORC
         AIF   ('&RC' NE '(15)').RTRN
.*
         LR    15,2
.*
         AGO   .RTRNN
.RTRN    AIF   ('&RC'(1,1) NE '(').RTRNC
.*
         LR    15,&RC(1)
.*
.RTRNN   ANOP
.*
&L       RETURN &REGS,RC=(15)
         SPACE
.*
         MEXIT
.RTRNC   ANOP
.*
&L       RETURN &REGS,RC=&RC
         SPACE
.*
         MEXIT
.NORC    ANOP
.*
&L       RETURN &REGS
         SPACE
.*
         MEXIT
.NODSA   ANOP
&L       SETC  '&LABEL'
         AGO   .RCCHK
.*
         MEND
./ ADD NAME=KEEPDBD  0100-02135-02135-1228-00009-00009-00000-VBCMACS
         PRINT  NOGEN
         DBD    NAME=KEEPDBD,ACCESS=(HIDAM,VSAM)
         DATASET DD1=KEEPIT,DEVICE=3380,SIZE=8192
         SEGM   NAME=KEEP,PARENT=0,BYTES=(5000,19),FREQ=10
         FIELD  NAME=(KEEPKEY,SEQ,U),BYTES=9,START=3,TYPE=C
         LCHILD NAME=(KEEPINS,KEEPXXX),PTR=INDX
         DBDGEN
         FINISH
         END
./ ADD NAME=KEEPXXX  0100-02135-02135-1228-00009-00009-00000-VBCMACS
         PRINT  NOGEN
         DBD    NAME=KEEPXXX,ACCESS=(INDEX,VSAM,NOPROT)
         DATASET DD1=KEEPIND,DEVICE=3380
         SEGM   NAME=KEEPINS,PARENT=0,BYTES=9
         FIELD  NAME=(KEEPINF,SEQ,U),BYTES=9,START=1,TYPE=C
         LCHILD NAME=(KEEP,KEEPDBD),INDEX=KEEPKEY
         DBDGEN
         FINISH
         END
./ ADD NAME=LOOKESTI 0100-02135-02135-1228-00054-00054-00000-VBCMACS
         MACRO
         LOOKESTI
         PRINT GEN
         DROP  ,                  DROP ALL BASE REGS
         USING *,R15              R15 AS BASE
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*    THIS ROUTINE IS USED TO RECOVER FROM LOOK USER INTERFACE         *
*    ABENDS DURING INITIALIZATION.WHEN THE USE ATTACHES THE LUI       *
*    HE WAITS ON AN ECB CALLED 'ECBREADY'.THIS ECB IS NOT THE         *
*    ONE USED IN THE ATTACH,BUT ONE INTERNAL TO THE USER AND          *
*    THE LUI.THUS WHEN THE LUI TAKES AN ABEND DURING THE INIT.        *
*    PHASE,IT DOES NOT POST 'ECBREADY'.THIS LEAVES THE USER           *
*    WAITING ON THIS ECB TO BE POSTED.LOOKESTI WILL POST              *
*    'ECBREADY WITH A '777' THIS TAKES THE USER OUT OF THE            *
*    WAIT AND HE CAN CHECK ECBREADY FOR THIS COMPLETION CODE.         *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
LOOKESTI C     R0,=F'12'          SDWA PROVIDED
         BNE   GOTSDWA            BR IF YES
         LA    R1,0               SET FLAG
         LA    R13,DUMMYSV       DUMMY SAVE AREA
         ST    R2,PARMLIST       ADDRESS OF PARMLIST
         B     GOTSDWA
DUMMYSV  DS    9D
         DROP  R15
         USING LOOKESTI,R4       SET R4 AS BASE
GOTSDWA  LR    R4,R15
         ST    R1,SDWAPTR        SAVE SDWA POINTER
         STM   R14,R12,12(R13)   SAVE REGISTERS
         MVC   8(4,R13),=A(SAVEE) OUR SAVEAREA PTR
         LA    R13,SAVEE          NOW SET OUR SAVEAREA ADDRESS
         L     R1,SDWAPTR         LOAD POINTER
         LTR   R1,R1              IF ZERO,NO SDWA WAS OBTAINED
         BZ    SETPOST            AND PARMLIST WAS STORED FROM R2
         L     R7,0(R1)           IF NON-ZERO,FIRST WORD OF SDWA
         B     POST               CONTAINS PARMLIST ADDRESS
SETPOST  L     R7,PARMLIST        LOAD ADDRESS OF ECBREADY
POST     WTO   'LOOKESTI ENTERED FOR LUI ABEND,ATTEMPTING POST OF ECBREX
               ADY',DESC=(2,7),ROUTCDE=1
         POST  (7),777
         L     R13,SAVEE+4        SET R13 FOR RETURN
         L     R1,SDWAPTR         NOW SEE AGAIN IF SDWA PRESENT
         LTR   R1,R1              IF NOT ZEROS,IT IS PRESENT
         BNZ   SETRP              USE SETRP,CANCELL ANY FUTHER ESTAI
         LM    R14,R12,12(R13)    IF ZEROS,IT IS NOT PRESENT
         LA    R15,16             WE MUST SET CODE OURSEVES
         BR    R14
SETRP    SETRP WKAREA=(1),REGS=(14,12),RC=16
SAVEE    DS    9D                 SAVEAREA
SDWAPTR  DS    A                  SDWA POINTER
PARMLIST DS    A       PASSED PARM LIST(IF SDWA NOT PRESENT)
         PRINT NOGEN
         IHASDWA
&SYSECT  CSECT
         MEND
./ ADD NAME=MAP      0101-82157-83035-1249-00191-00187-00004-VBCMACS
         MACRO TO DEFINE 3270 IMAGE SCREENS - DRB - 03/15/79
&LBL     MAP   &CMD,&OPT,&CHAR
         GBLA  &SYNC,&EWSW
         GBLC  &NAME
         LCLA  &IND
         LCLA  &H1
         LCLC  &H2
         LCLB  &B0,&B1,&B2,&B3,&B4,&B5,&B6,&B7
         AIF   (0 NE K'&CMD).CMDOK
         MNOTE 12,'COMMAND CODE NOT SPECIFIED, EXPANSION TERMINATED'
         MEXIT
.CMDOK   AIF   ('&CMD' NE 'START').NOSTART
         AIF   (0 EQ K'&LBL).LBLERR
         AIF   (0 EQ &SYNC).STROK
         MNOTE 8,'MAP END MUST PRECEED MAP START'
         MEXIT
.STROK   ANOP
&SYNC    SETA  1
&NAME    SETC  '&LBL'
&LBL DS 0F       DEFINE START OF 3270 SCREEN DEFINITION.
         MEXIT
.NOSTART AIF   ('&CMD' NE 'END').NOEND
         AIF   (0 EQ K'&LBL).LBLERR
         AIF   (1 EQ &SYNC).ENDOK
         MNOTE 8,'START COMMAND MUST PRECEED "MAP END"'
         MEXIT
.ENDOK   ANOP
&SYNC    SETA  0
&LBL     EQU   *-&NAME   LENGTH OF 3270 SCREEN DEFINITION.
         MEXIT
.LBLERR  MNOTE 8,'NAME MUST BE PROVIDED FOR START/END COMMAND'
         MEXIT
.NOEND   AIF   (0 EQ K'&LBL).NOLBL
&LBL  EQU  *
.NOLBL   ANOP
         AIF   ('EW' EQ '&CMD').CMEW     ERASE/WRITE
         AIF   ('SF' EQ '&CMD').CMSF     START FIELD
         AIF   ('SBA' EQ '&CMD').CMSBA   SET BUFFER ADDRESS
         AIF   ('IC' EQ '&CMD').CMIC     INSERT CURSOR
         AIF   ('RA' EQ '&CMD').CMRA     REPEAT TO ADDRESS
         AIF   ('EUA' EQ '&CMD').CMEUA   ERASE UNPROTECTED TO ADDRESS
         AIF   ('WCC' EQ '&CMD').CMWCC   WRITE CONTROL CHARACTER
         AIF   ('EAU' EQ '&CMD').CMEAU   ERASE ALL UNPROTECTED
         AIF   ('PT' EQ '&CMD').CMPT     PROGRAM TAB
         AIF   ('W' EQ '&CMD').CMW       WRITE
         AIF   ('ESC' EQ '&CMD').CMESC   ESCAPE
         AIF   ('NL' EQ '&CMD').CMNL     NEW LINE
         MNOTE 12,'INVALID COMMAND CODE, EXPANSION IMPOSSIBLE'
         MEXIT
.CMEW    ANOP
&EWSW    SETA  1
         DC    X'F5'               ERASE/WRITE COMMAND CODE.
         MEXIT
.CMSF    ANOP
&IND     SETA  0
.CMSFNX  ANOP
&IND     SETA  1+&IND
         AIF   (&IND GT N'&OPT).CMSFEND
         AIF   ('PROT' NE '&OPT(&IND)').CMSF1
&B2      SETB  1
         AGO   .CMSFNX
.CMSF1   AIF   ('SKIP' NE '&OPT(&IND)').CMSF2
&B2      SETB  1
&B3      SETB  1
         AGO   .CMSFNX
.CMSF2   AIF   ('NUM' NE '&OPT(&IND)').CMSF3
&B3      SETB  1
         AGO   .CMSFNX
.CMSF3   AIF   ('MDT' NE '&OPT(&IND)').CMSF4
&B7      SETB  1
         AGO   .CMSFNX
.CMSF4   AIF   ('HI' NE '&OPT(&IND)').CMSF5
&B4      SETB  1
         AGO   .CMSFNX
.CMSF5   AIF   ('DET' NE '&OPT(&IND)').CMSF6
&B5      SETB  1
         AGO   .CMSFNX
.CMSF6   AIF   ('NODISP' NE '&OPT(&IND)').CMSF7
&B4      SETB  1
&B5      SETB  1
         AGO   .CMSFNX
.CMSF7   MNOTE 4,'INVALID OPTION - &OPT(&IND) - IGNORED'
         AGO   .CMSFNX
.CMSFEND ANOP
&H1      SETA  (&B2*32+&B3*16+&B4*8+&B5*4+&B6*2+&B7)
&H1      SETA  &H1+X'C0'
         AIF   (&H1 GE C'A' AND &H1 LT C'I').CMSFH1
         AIF   (&H1 GE C'J' AND &H1 LT C'R').CMSFH1
         AIF   (&H1 GE C'S' AND &H1 LT C'Z').CMSFH1
         AIF   (&H1 GE C'0' AND &H1 LT C'9').CMSFH1
&H1      SETA  &H1-X'80'
.CMSFH1  ANOP
&H2      SETC  '0123456789ABCDEF'(&H1/16+1,1)
&H2      SETC  '&H2'.'0123456789ABCDEF'(&H1+1-&H1/16*16,1)
         DC    X'1D',X'&H2'
         MEXIT
.CMSBA   ANOP
         AIF   (2 EQ N'&OPT).CMSBA0
         MNOTE 8,'SBA MUST HAVE ADDRESS SPECIFICATION'
         MEXIT
.CMSBA0  ANOP
         DC    X'11'               SET BUFFER ADDRESS.
         ADDR  &OPT(1),&OPT(2)
         MEXIT
.CMIC    ANOP
         DC    X'13'               INSERT CURSOR.
         MEXIT
.CMRA    ANOP
         AIF   (2 EQ N'&OPT).CMRA0
         MNOTE 8,'REPEAT TO ADDRESS MUST INCLUDE ADDRESS'
         MEXIT
.CMRA0   AIF   (0 NE K'&CHAR).CMRA1
         MNOTE 4,'INVALID CHARACTER FOR REPEAT TO ADDRESS'
         MEXIT
.CMRA1   ANOP
         DC    X'3C'               REPEAT TO ADDRESS.
         ADDR  &OPT(1),&OPT(2)
         DC    &CHAR               CHAR TO BE REPEATED.
         MEXIT
.CMEUA   ANOP
         AIF   (2 EQ N'&OPT).CMEUA1
         MNOTE 8,'ADDR NOT SPECIFIED FOR EUA'
         MEXIT
.CMEUA1  ANOP
         DC    X'12'               ERASE UNPROTECTED TO ADDRESS.
         ADDR  &OPT(1),&OPT(2)
         MEXIT
.CMWCC   ANOP
&IND     SETA  0
.CMWCCNX ANOP
&IND     SETA  &IND+1
         AIF   (&IND GT N'&OPT).CMWCCND
         AIF   ('RESET' NE '&OPT(&IND)').CMWCC1
&B7      SETB  1
         AGO   .CMWCCNX
.CMWCC1  AIF   ('RESTORE' NE '&OPT(&IND)').CMWCC2
&B6      SETB  1
         AGO   .CMWCCNX
.CMWCC2  AIF   ('ALARM' NE '&OPT(&IND)').CMWCC3
&B5      SETB  1
         AGO   .CMWCCNX
.CMWCC3  AIF   ('PRINT' NE '&OPT(&IND)').CMWCC4
&B4      SETB  1
         AGO   .CMWCCNX
.CMWCC4  AIF   ('C40' NE '&OPT(&IND)').CMWCC5
&B2      SETB  0
&B3      SETB  1
         AGO   .CMWCCNX
.CMWCC5  AIF   ('C64' NE '&OPT(&IND)').CMWCC6
&B2      SETB  1
&B3      SETB  0
         AGO   .CMWCCNX
.CMWCC6  AIF   ('C80' NE '&OPT(&IND)').CMWCC7
&B2      SETB  1
&B3      SETB  1
         AGO   .CMWCCNX
.CMWCC7  AIF   ('NLEM' NE '&OPT(&IND)').CMWCC8
&B2      SETB  0
&B3      SETB  0
         AGO   .CMWCCNX
.CMWCC8  MNOTE 4,'INVALID WCC OPTION - &OPT(&IND) - IGNORED'
         AGO   .CMWCCNX
.CMWCCND ANOP
&H1      SETA  (&B2*32+&B3*16+&B4*8+&B5*4+&B6*2+&B7)
&H1      SETA  &H1+X'C0'
         AIF   (&H1 GE C'A' AND &H1 LT C'I').CMWCCH1
         AIF   (&H1 GE C'J' AND &H1 LT C'R').CMWCCH1
         AIF   (&H1 GE C'S' AND &H1 LT C'Z').CMWCCH1
         AIF   (&H1 GE C'0' AND &H1 LT C'9').CMWCCH1
&H1      SETA  &H1-X'80'
.CMWCCH1 ANOP
&H2      SETC  '0123456789ABCDEF'(&H1/16+1,1)
&H2      SETC  '&H2'.'0123456789ABCDEF'(&H1+1-&H1/16*16,1)
         DC    X'&H2'
         MEXIT
.CMEAU   ANOP
         DC    X'6F'               ERASE ALL UNPROTECTED.
         MEXIT
.CMPT    ANOP
         DC    X'05'               PROGRAM TAB.
         MEXIT
.CMW     ANOP
         DC    X'F1'               WRITE COMMAND.
         MEXIT
.CMESC   ANOP
         DC    X'27'               TSO/3270 ESCAPE CHARACTER.
         MEXIT
.CMNL    ANOP
         DC    X'15'               SCS NEW LINE CHARACTER.
         MEXIT
         MEND
./ ADD NAME=MCINFO   0100-02135-02135-1228-00082-00082-00000-VBCMACS
         MACRO
         MCINFO   &DSECT=
*****
*****
*****
         AIF   ('&DSECT' EQ 'YES').DSECT
INFOTBL  DS    0C       *** MEDICARE T.P. INFORMATION TABLE ***
*****
         AGO   .GENREC
.DSECT   ANOP
INFOTBL  DSECT ,        *** MEDICARE T.P. INFORMATION TABLE ***
*****
.GENREC  ANOP
*
*
***********************************************************************
*        INFORMATION TABLE USED BY VARIOUS MODULES
*
*        COBOL PROGRAMS SHOULD USE COPY MONITABL
***********************************************************************
*
RELBLK   DS    XL4                     LAST RELATIVE BLOCK NUMBER USED
MSGFROM  DS    CL1                     MESSAGE SOURCE: O=OFFLINE
*                                                      M=IMS/3270
*                                                      2=IMS 2740
*                                                      R=NETMACS
*                                                      T=NON-IMS
DATEMDY  DS    CL6                     DATE: MMDDYY
ORIGIN   DS    CL8                     ORIGINATING TERMINAL (LTERM)
CLMSYSTM DS    CL1                     CLAIM SYSTEM: I=INPATIENT
*                                      M=MEDICARE OTHER
REENTRY  DS    CL1                     2=REJECT REENTRY
TRANSMSN DS    CL1                     TRANSMISSION CODE:
*                                           1=FREE-FORMAT INPUT
*                                           2=SAME DAY REJECT REENTRY
*                                           3=FIXED FORMAT INPUT
HOSPIND  DS    CL1                     HOSPITAL NUMBER INDICATOR
HOSNTRD  EQU   C'1'                    HOSPITAL NUMBER ENTERED
HOSPNO   DS    CL9                     HOSPITAL/PROVIDER NUMBER
SECDEST  DS    CL6                     SECONDARY DESTINATION
TRANDATE DS    CL5                     MESSAGE DATE, YYDDD
TRANTIME DS    CL6                     MESSAGE TIME, HHMMSS
PROGRAM  DS    CL8                     PROCESSING PROGRAM NAME
ERRBYTE  DS    CL1                     ERROR BYTE
MONREJ   EQU   C'1'                    1=MONITOR REJECT
EDITERRS EQU   C'R'                    R=EDIT ERRORS
NOERRS   EQU   C'A'                    A=NO ERRORS
BACK2    DS    CL160                   ERROR DELIMITERS, IF ANY FOUND
SYSTMCLM DS    CL9                     SYSTEM CLAIM NUMBER
*
LOGHDR   DS    0CL32                   LOG HEADER FOR MDCRLOG
LOGRECTY DS    CL2                     "10", "50", OR "60"
LOGTRNCD DS    CL5                     TRANSACTION CODE
LOGORGIN DS    CL4                     ORIGIN LTERM NAME
LOGTSEQ  DC    CL4'0001'               TERMINAL SEQUENCE NUMBER
LOGSSEQ  DC    PL5'1'                  SYSTEM SEQUENCE NUMBER
LOGREFNO DC    PL3'10'                 REFERENCE NUMBER
LOGCLM   DC    CL9'JJJ060001'          LAST CLAIM NUMBER
LOGEND   EQU   *                       END OF LOG HEADER
*
BACTRCD  DS    CL8                     TRANSACTION CODE EXTERNAL BMP
NOOFDEST DS    CL1                     INDICATOR RETURNED BY ADJUD.
*
RMTHDR   DS    0CL30                   NETMACS MESSAGE HEADER
RMTTERM  DS    CL8                     NETMACS TERMINAL NAME
RMTLOB   DS    CL2                     NETMACS LOB CODE
RMTID    DS    CL8                     NETMACS LOGON ID
RMTDATE  DS    PL4                     NETMACS TRANSACTION DATE YYMMDD
RMTCOUNT DS    PL2                     NETMACS TRANSACTION COUNT
RMTINSEQ DS    PL3                     NETMACS INPUT SEQUENCE NUMBER
RMTOTSEQ DS    PL3                     NETMACS OUTPUT SEQUENCE NUMBER
RMTEND   EQU   *                       END OF NETMACS HEADER
ENDINFO  EQU   *
*****
*****
*****
         AIF   ('&DSECT' EQ 'YES').CSCT
         MEXIT
.CSCT    ANOP
&SYSECT  CSECT
         MEXIT
         MEND
./ ADD NAME=MCPFSE1  0100-02135-02135-1228-00074-00074-00000-VBCMACS
         MACRO
&NAME    MCPFSE1
         LCLA    &X
&X       SETA    &SYSNDX
***********************************************************************
*        INSERT THIS MACRO BETWEEN CARRIAGE AND SIMATTN MACROS        *
***********************************************************************
RD&X     EQU X'08'                     REDISPLAY FLAG BIT.
BC&X     EQU X'04'                     BROADCAST FLAG BIT.
FS&X     EQU X'02'                     FULLSCREEN FLAG BIT.
*
&NAME    L     R2,IEDADBUF             ADDR OF THE BUFFER.
         TM    20(R2),X'10'            TS MESSAGE?
         BNO   FSEZ&X                  NO, EXIT.
         TM    20(R2),X'01'            HEADER BUFFER?
         BO    FSEZ&X                  NO, EXIT.
         LH    R9,18(R2)               DATA LENGTH
         CH    R9,=H'30'               IS DATA PRESENT IN BUFFER?
         BNH   FSEZ&X                  NO, EXIT.
         L     R3,12(R2)               ADDR OF LCB.
         LH    R1,90(R3)               INDEX TO TERM NAME TABLE ENTRY.
         LTR   R1,R1                   IS TTCIN ZERO?
         BZ    FSEZ&X                  YES, EXIT.
         L     R15,IEDRNMPT            TERM NAME TABLE ROUTINE.
         BALR  R14,R15                 EXECUTE IT.
         L     R2,IEDADBUF             ADDR OF THE BUFFER.
         L     R3,12(R2)               ADDR OF LCB.
         LR    R4,R1                   ADDR OF TERM NAME TABLE ENTRY.
         L     R5,0(R4)                ADDR OF QCB.
         LH    R6,30(R5)               TJID/ASID
         LA    R6,TJIDMTRX(R6)         ADDR OF OPTION BYTE.
         LH    R9,18(R2)               DATA LENGTH
         SH    R9,=H'30'               MINUS 30 BYTES OF HEADER.
         SLR   R1,R1
         IC    R1,28(R3)               NUMBER OF RESERVE (PAD) BYTES.
         LA    R7,42(R1,R2)            POINT TO START OF DATA.
         CLI   0(R7),X'02'             STX (X'02') CHARACTER?
         BE    FSE3&X                  YES, SKIP STX, CU, AND DVC.
         CH    R9,=H'4'                MINIMUM POSSIBLE INPUT?
         BNH   FSE0&X                  YES, MUST BE AID,CSR,CSR,(NL)
         CLI   3(R7),X'11'             SBA (X'11') CHARACTER?
         BE    FSE0&X                  YES, AID MUST BE 1ST CHAR.
         B     FSE2&X                  NO, SKIP CU, AND DVC CHARS.
FSE3&X   LA    R7,1(R7)                SKIP 3 BYTES (STX,ESC,CMD).
FSE2&X   LA    R7,1(R7)                SKIP 2 BYTES (ESC,CMD).
FSE1&X   LA    R7,1(R7)                SKIP ONE BYTE (NOT REQUIRED).
FSE0&X   DS    0H
         CLI   0(R7),X'6C'             AID = PA1 ?
         BNE   FSEC&X                  NO, CHECK PREV OUTPUT.
         NI    0(R6),X'FF'-(FS&X+BC&X+RD&X)  TURN OFF FLAGS.
         B     FSEZ&X                  EXIT.
FSEC&X   DS    0H
         TM    0(R6),BC&X              BROADCAST AFTER FULLSCR?
         BZ    FSEE&X                  NO, CHECK FOR PREV FULLSCR.
         NI    0(R6),X'FF'-BC&X        TURN OFF BROADCAST FLAG.
         NI    23(R5),X'F7'            TURN OFF QCB SIM ATTN.
         XI    0(R6),RD&X              FLIP FULLSCR INTERCEPT FLAG.
         MVI   0(R7),X'6B'             ENSURE AID = PA3(SIM. RESHOW).
         B     FSEF&X                  GO RESET LINE/CARRAGE COUNTS.
FSEE&X   DS    0H
         TM    0(R6),FS&X              PREVIOUS OUTPUT FULL SCREEN?
         BZ    FSEZ&X                  NO, EXIT
FSEF&X   DS    0H
         MVI   21(R5),2                RESET LINE COUNT IN QCB.
         MVI   29(R5),0                RESET CARRIAGE COUNT IN QCB.
         B     FSEZ&X
*
*
TJIDMTRX DC    XL150'00'               OPTION BYTES FOR EACH TERMINAL
*                                      THIS TABLE MUST BE AT LEAST
*                                      MAX USERS + 1 FOR MVT AND SVS
*                                      AND SYSTEM USERS + 1 FOR MVS
FSEZ&X   DS    0H                      EXIT.
         MEND
./ ADD NAME=MCPFSE2  0100-02135-02135-1228-00117-00117-00000-VBCMACS
         MACRO
&NAME    MCPFSE2
         LCLA   &X
&X       SETA   &SYSNDX
***********************************************************************
*        INSERT THIS MACRO BETWEEN THE OUTBUF AND CODE MACROS         *
***********************************************************************
LK&X     EQU   X'20'                   KEEP KEYBOARD LOCKED BIT.
RD&X     EQU   X'08'                   REDISPLAY FLAG BIT.
BC&X     EQU   X'04'                   BROADCAST FLAG BIT.
FS&X     EQU   X'02'                   FULLSCREEN FLAG BIT.
*
&NAME    L     R2,IEDADBUF             ADDR OF THE BUFFER.
         L     R3,12(R2)               ADDR OF LCB.
         L     R4,92(R3)               ADDR OF SCB
         L     R5,0(R4)                ADDR OF QCB.
         LH    R6,30(R5)               TJID/ASID
         LA    R6,TJIDMTRX(R6)         OPTION BYTE ADDRESS
         LH    R1,90(R3)               INDEX TO TERM NAME TABLE ENTRY.
         LTR   R1,R1                   IS TTCIN ZERO?
         BZ    FSEZ&X                  YES, EXIT FROM MACRO.
         TM    20(R2),X'01'            HEADER BUFFER?
         BO    FSEX&X                  NO, CHECK FOR TEXT BUFFER SCAN
         NI    0(R6),X'FF'-LK&X        TURN OFF KEYBOARD LOCK FLAG BIT
         TM    20(R2),X'10'            TS MESSAGE?
         BNO   FSEJ&X                  NO, NOT TIME SHARING MSG.
         LH    R9,18(R2)               DATA LENGTH.
         SH    R9,=H'30'               MINUS 30 BYTE PREFIX
         BNH   FSEZ&X                  EXIT IF NO DATA
         SLR   R1,R1                   CLEAR REGISTER
         IC    R1,28(R3)               NUMBER OF RESERVE (PAD) BYTES.
         LA    R7,42(R1,R2)            POINT TO START OF DATA.
         CLI   0(R7),X'02'             STX (X'02') CHARACTER?
         BE    FSE3&X                  YES, SKIP STX, ESC, CMD.
         CLI   0(R7),X'27'             ESC (X'27') CHARACTER?
         BE    FSE2&X                  YES, SKIP ESC,CMD.
         B     FSE0&X                  NO, DONT SKIP ANY BYTES.
FSE3&X   LA    R7,1(R7)                SKIP 3 BYTES (STX,ESC,CMD).
         BCTR  R9,0                    DECREMENT DATA LENGTH
FSE2&X   LA    R7,1(R7)                SKIP 2 BYTES (ESC,CMD).
         BCTR  R9,0                    DECREMENT DATA LENGTH
FSE1&X   LA    R7,1(R7)                SKIP ONE BYTE (NOT REQUIRED).
         BCTR  R9,0                    DECREMENT DATA LENGTH
FSE0&X   DS    0H
         SH    R9,=H'6'                ADJUST LENGTH FOR WCC, SBA'S.
         LR    R8,R7                   ADDR OF WCC.
FSED&X   DS    0H
         LA    R8,1(R8)                STEP TO NEXT CHARACTER.
         CLI   0(R8),X'32'             IDLE (X'32') CHARACTER?
         BNE   FSEF&X                  NO, MUST BE FIRST SBA.
         BCT   R9,FSED&X               YES, LOOP TO SKIP IDLE CHARS.
         B     FSEJ&X                  NOT LONG ENOUGH FOR FULLSCR.
FSEF&X   DS    0H                      STEP TO NEXT CHARACTER.
         CLC   0(4,R8),=X'115D7F11'    FSE 5.0/SPF/IPCS/ETC HEADER?
         BE    FSEG&X
         CLC   0(4,R8),=X'11C14F3C'    FSE 4.0 HEADER?
         BE    FSEG&X
         CLC   0(4,R8),=X'1140403C'    FSE 4.0 HEADER?
         BNE   FSEH&X                  NO, SEE IF LAST FULLSCR.
FSEG&X   DS    0H
         OI    0(R6),FS&X              TURN ON FULL SCREEN FLAG.
         MVI   21(R5),2                RESET LINE COUNT IN QCB.
         MVI   29(R5),0                RESET CARRIAGE COUNT IN QCB.
         TM    0(R6),RD&X+BC&X         REDISPLAY OR BROADCAST?
         BZ    FSEZ&X                  NO, EXIT FROM MACRO
         XI    0(R6),RD&X              FLIP REDISPLAY FLAG.
         OI    0(R6),LK&X              TURN ON KEYBOARD LOCK BIT.
         TM    0(R7),X'02'             IS WCC INHIBIT KEYBOARD BIT ON
         BZ    FSEZ&X                  NO, EXIT FROM MACRO
         NI    22(R5),X'EF'            TURN OFF QCBSSSMI BIT
         NI    0(R7),X'FD'             SET WCC - INHIBIT KEYBOARD.
         CLI   0(R7),X'C0'             ARE ALL WCC CONTROL BITS OFF.
         BNE   FSEZ&X                  NO, EXIT FROM MACRO
         MVI   0(R7),X'40'             YES, CHANGE X'C0' TO X'40'.
         B     FSEZ&X                  EXIT FROM MACRO
FSEH&X   DS    0H
         CLC   0(4,R8),=X'115D7E11'    LAST FULLSCR'N MSG.?
         BNE   FSEJ&X                  NO, SEE IF BROADCAST.
         NI    0(R6),X'FF'-(FS&X+BC&X+RD&X) TURN OFF FLAGS.
         MVI   29(R5),0                RESET CARRIAGE COUNT IN QCB.
         LH    R1,4(R8)                COMPUTE VALUE TO WHICH LINE
         SLDL  R0,24                   COUNT IS TO BE RESET AS
         SLL   R1,2                    REQUESTED IN SECOND SBA
         SRDL  R0,6                    ADDRESS OF FSE FULL SCREEN
         SRL   R1,20                   MESSAGE.
         SLR   R0,0
         LA    R15,80
         DR    R0,R15
         STC   R1,21(R5)               RESET LINE COUNT IN QCB.
         B     FSEZ&X                  EXIT.
FSEJ&X   DS    0H
         TM    0(R6),FS&X              PREVIOUS MSG. FULL SCREEN?
         BNO   FSEZ&X                  NO, EXIT.
         NI    0(R6),X'FF'-FS&X        TURN OFF FULL SCREEN FLAG.
         OI    0(R6),BC&X              TURN ON BROADCAST FLAG.
         MVI   21(R5),23               SET LINE COUNT IN QCB.
         MVI   29(R5),0                SET CARRIAGE COUNT IN QCB.
         OI    23(R5),X'08'            TURN ON SIM ATTN READ REQUEST.
         OI    0(R7),X'C4'             SET 'SOUND ALARM' IN WCC.
         B     FSEZ&X
FSEX&X   DS    0H
         TM    0(R6),LK&X              IS KEYBOARD TO BE KEEP LOCKED
         BZ    FSEZ&X                  NO, EXIT FROM MACRO
         TM    20(R2),X'02'            IS THIS THE LAST BUFFER
         BO    FSEZ&X                  NO, EXIT FROM MACRO
         CLC   35(3,R2),=X'27F1C2'     UNLOCK SEQUENCE FOR NCP?
         BNE   FSEY&X                  NO, CHECK FOR EP SEQUENCE
         NI    22(R5),X'EF'            TURN OFF QCBSSSMI BIT
         MVI   37(R2),X'40'            SET WCC TO LEAVE LOCKED
         B     FSEZ&X                  EXIT FROM MACRO
FSEY&X   DS    0H
         CLC   35(4,R2),=X'0227F1C2'   UNLOCK SEQUENCE FOR EP?
         BNE   FSEZ&X                  NO, EXIT FROM MACRO
         NI    22(R5),X'EF'            TURN OFF QCBSSSMI BIT
         MVI   38(R2),X'40'            YES, SET WCC TO LEAVE LOCKED
FSEZ&X   DS    0H
         MEND
./ ADD NAME=MONREC   0100-02135-02135-1228-00041-00041-00000-VBCMACS
         MACRO
&NAME    MONREC &DSECT=YES
         LCLC  &CSECT,&D
&D       SETC  'DC'
         AIF   ('&DSECT' EQ 'NO').NOD
&CSECT   SETC  '&SYSECT'
&D       SETC  'DS'
&NAME.D  DSECT
.NOD     ANOP
&NAME    DS    0XL135
MONUSE   &D    XL1'0'                  NOUSE=X'00', INUSE=X'01'
MONYR    &D    XL1'00'                 YEAR
MONMON   &D    XL1'00'                 MONTH
MONS1    DS    0XL18                   SHIFT1
S1PP     &D    PL3'0'                  PRIVATE/PUBLIC
S1TP     &D    PL3'0'                  TP
S1TEST   &D    PL3'0'                  TESTING
S1TSO    &D    PL3'0'                  TSO
S1OTHER  &D    PL3'0'                  OTHER
S1TOTAL  &D    PL3'0'                  TOTAL
MONS2    DS    0XL18                   SHIFT1
S2PP     &D    PL3'0'                  PRIVATE/PUBLIC
S2TP     &D    PL3'0'                  TP
S2TEST   &D    PL3'0'                  TESTING
S2TSO    &D    PL3'0'                  TSO
S2OTHER  &D    PL3'0'                  OTHER
S2TOTAL  &D    PL3'0'                  TOTAL
MONS3    DS    0XL18                   SHIFT1
S3PP     &D    PL3'0'                  PRIVATE/PUBLIC
S3TP     &D    PL3'0'                  TP
S3TEST   &D    PL3'0'                  TESTING
S3TSO    &D    PL3'0'                  TSO
S3OTHER  &D    PL3'0'                  OTHER
S3TOTAL  &D    PL3'0'                  TOTAL
MONEND   &D    PL3'0'                  UPDATE END TIME MMMM
         &D    XL75'00'                FILLER
         AIF   ('&DSECT' EQ 'NO').END
*
&CSECT   CSECT
.END     ANOP
         MEND
./ ADD NAME=MPACTEST 0100-02135-02135-1228-00036-00036-00000-VBCMACS
MPACTEST DSECT
*
*        DESCRIBES RECORD EXPANDED FROM MPRAW DATA.
*        THERE IS ONE RECORD FOR EACH TP TRANSACTION.
*
*        BINARY FIELDS ARE CONVERTED TO PACKED,
*         TOD'S ARE CONVERTED FROM SEC/10000 TO MIN/1000,
*         AND CERTAIN SUMMATIONS AND CALCULATIONS
*         HAVE BEEN PERFORMED
*
MPRECORD DS    0CL185
MPDATE   DS    PL3                     MACHINE DATE FROM CONVERSION PRO
MPTMIN   DS    PL4                     TOD INTO MPP MIN/1000
MPTMOUT  DS    PL4                     TOD OUT OF MPP MIN/1000
MPELAPS  DS    PL5                     TOTAL PROCESSING TIME SEC/10000
MPOVTIME DS    PL5                     OVLY PROCESS TIME SEC/10000
MPMTIME  DS    PL5                     MONITOR PROCESS TIME SEC/10000
MPTERM   DS    CL6                     TERMINAL NAME
MPSUBRT  DS    PL2                     I-O SUBR USED
MPACCESS DS    PL3                     TOTAL LOGICAL I-O'S
MPSUBTME DS    PL5                     TOTAL TIME IN SUBROUTINES
MPTLEN   DS    XL2       TRANSACTION LENGTH
MPSCRTY  DS    0CL61                    SECURITY ERROR MESSAGE
MPUSRNAM DS    CL8         SECURITY USER NAME
MPMSG    DS    CL40           SECURITY MESSAGE
MPMASK   DS    CL8           SECURITY TRM/USR MASK
MPTRAN   DS    CL5           TRANSACTION TYPE
MPSUBS   DS    CL80                    1 8 BYTE ENTRY FOR EACH SUBR.
*
*
MPSUBRTN DSECT ,                       1 MPSUBS
*
MPSUB    DS    0XL8                   ONE SUBROUTINE ENTRY
SUBACC   DS    PL3                     LOGICAL I-O'S THIS SUBR
SUBTIME  DS    PL5                     TIME IN THIS SUBR SEC/10000
*
./ ADD NAME=MPACTIVE 0100-02135-02135-1228-00047-00047-00000-VBCMACS
MPACTIVE DSECT
*
*        DESCRIBES RECORD EXPANDED FROM MPRAW DATA.
*        THERE IS ONE RECORD FOR EACH TP TRANSACTION.
*
*        BINARY FIELDS ARE CONVERTED TO PACKED,
*         TOD'S ARE CONVERTED FROM SEC/10000 TO MIN/1000,
*         AND CERTAIN SUMMATIONS AND CALCULATIONS
*         HAVE BEEN PERFORMED
*
MPRECORD DS    0CL280
MPDATE   DS    PL3                     MACHINE DATE FROM CONVERSION PRO
MPTMIN   DS    PL4                     TOD INTO MPP MIN/1000
MPTMOUT  DS    PL4                     TOD OUT OF MPP MIN/1000
MPQTIME  DS    PL5                     TIME ON INPUT Q SEC/10000
MPELAPS  DS    PL5                     TOTAL PROCESSING TIME SEC/10000
MPOVLD   DS    PL5                     OVLY LOAD TIME SEC/10000
MPOVTIME DS    PL5                     OVLY PROCESS TIME SEC/10000
MPMTIME  DS    PL5                     MONITOR PROCESS TIME SEC/10000
MPTRAN   DS    CL6                     TRANSACTION CODE
MPTERM   DS    CL4                     TERMINAL NAME
MPQMESIN DS    PL3                     MESSAGES ON INPUT Q
MPQMESOT DS    PL3                     MESSAGES ON OUTPUT Q
MPJSTCB  DS    PL2                     ACTIVE JS TCBS
MPJSTCBL DS    PL2                     ACTIVE JS TCBS LOWER PRIORITY
MPSUBRT  DS    PL2                     I-O SUBR USED
MPACCESS DS    PL3                     TOTAL LOGICAL I-O'S
MPCHAN   DS    PL2                     TOTAL CONFLICTING CHANNEL PGMS
MPSUBTME DS    PL5                     TOTAL TIME IN SUBROUTINES
MPARM    DS    PL4                     TOTAL CYL MOVED BY MPP
MPARMCON DS    PL3                     TOTAL TIMES OTHER MOVED ARM
MPSUBS   DS    CL200                   1 20 BYTE ENTRY FOR EACH SUBR.
         DS    CL5                     FILLER
*
*
MPSUBRTN DSECT ,                       1 MPSUBS
*
MPSUB    DS    0XL20                   ONE SUBROUTINE ENTRY
SUBACC   DS    PL3                     LOGICAL I-O'S THIS SUBR
SUBCHAPG DS    PL2                     CONFLICTING CHAN PGMS
SUBTIME  DS    PL5                     TIME IN THIS SUBR SEC/10000
SUBARM   DS    PL3                     CYL MOVED BY SUBR
SUBARMCN DS    PL3                     TIMES OTHER MOVED ARM
         DS    XL4                     FILLER
*
*
*
./ ADD NAME=MPACTIVT 0100-02135-02135-1228-00033-00033-00000-VBCMACS
MPACTIVE DSECT
*
*        DESCRIBES RECORD EXPANDED FROM MPRAW DATA.
*        THERE IS ONE RECORD FOR EACH TP TRANSACTION.
*
*        BINARY FIELDS ARE CONVERTED TO PACKED,
*         TOD'S ARE CONVERTED FROM SEC/10000 TO MIN/1000,
*         AND CERTAIN SUMMATIONS AND CALCULATIONS
*         HAVE BEEN PERFORMED
*
MPRECORD DS    0CL134
MPDATE   DS    PL3                     MACHINE DATE FROM CONVERSION PRO
MPTMIN   DS    PL4                     TOD INTO MPP MIN/1000
MPTMOUT  DS    PL4                     TOD OUT OF MPP MIN/1000
MPELAPS  DS    PL5                     TOTAL PROCESSING TIME SEC/10000
MPOVTIME DS    PL5                     OVLY PROCESS TIME SEC/10000
MPMTIME  DS    PL5                     MONITOR PROCESS TIME SEC/10000
MPTRAN   DS    CL6                     TRANSACTION CODE
MPTERM   DS    CL6                     TERMINAL NAME
MPLNTHIN DS    PL3                     MESSAGES   INPUT LENGTH
MPLNTHOT DS    PL3                     MESSAGES   OUTPUT LENGTH
MPSUBRT  DS    PL2                     I-O SUBR USED
MPACCESS DS    PL3
MPSUBTME DS    PL5                     TOTAL TIME IN SUBROUTINES
MPSUBS   DS    CL80                   1 20 BYTE ENTRY FOR EACH SUBR.
*
*
MPSUBRTN DSECT ,                       1 MPSUBS
*
MPSUB    DS    0XL8                   ONE SUBROUTINE ENTRY
SUBACC   DS    PL3                     LOGICAL I-O'S THIS SUBR
SUBTIME  DS    PL5                     TIME IN THIS SUBR SEC/10000
*
./ ADD NAME=MPRAW    0100-02135-02135-1228-00032-00032-00000-VBCMACS
MPRAW    DSECT
*
*        DESCRIBS RECORD CREATED BY THE MPP.
*        RECORD DESCRIBES DATA FOR A TP TRANSACTION.
*
MPRAWREC DS    0XL156
RIN      DS    F                       TOD MESSAGE INTO MP SEC/10000
ROUT     DS    F                       TOD MESSAGE OUT OF MP SEC/10000
ROVLOAD  DS    F                       TOD OVLY LOAD BEGAN SEC/10000
ROVPROC  DS    F                       TOD OVLY BEGAN PROC SEC/10000
ROVEND   DS    F                       TOD OVLY ENDED SEC/10000
RQMESIN  DS    H                       NO. MESSAGES ON INPUT Q
RQMESOUT DS    H                       NO. MESSAGES ON OUTPUT Q
RMESCD   DS    CL6                     MESSAGE CODE OF TRANSACTION
RTERMNM  DS    CL4                     TERMINAL ID OF SOURCE
RJSTCB   DS    XL1                     NO. JSTCBS IN SYSTEM
RJSTCBL  DS    XL1                     JSTCBS LOWER PRIORITY
RSUBS    DS    XL120                   TEN 12 BYTE FIELDS - 1 FOR EACH
*                                      I-O SUBROUTINE
*
*
RSUBRNT  DSECT ,                       DESCRIBES 1 RSUBS
RSUB     DS    0XL12
RSUBTME  DS    XL4                     TIME IN SUBR. SEC/10000
RACCESS  DS    XL1                     TOTAL LOGICAL READS THIS SUBR.
RCHNPGM  DS    XL1                     NO. CHAN PGM INPROGRESS ON CHANN
RARM     DS    XL2                     NO. CYL MOVED BY LIST SUBR.
RARMCON  DS    XL1                     TIMES OTHER JOB MOVED ARM
         DS    XL3                     FILLER
*
*
*
./ ADD NAME=MPRAWT   0100-02135-02135-1228-00025-00025-00000-VBCMACS
MPRAW    DSECT
*
*        DESCRIBS RECORD CREATED BY THE MPP.
*        RECORD DESCRIBES DATA FOR A TP TRANSACTION.
*
MPRAWREC DS    0XL82
RIN      DS    F                       TOD MESSAGE INTO MP SEC/10000
ROUT     DS    F                       TOD MESSAGE OUT OF MP SEC/10000
ROVPROC  DS    F                       TOD OVLY BEGAN PROC SEC/10000
ROVEND   DS    F                       TOD OVLY ENDED SEC/10000
RLENIN   DS    H              INPUT MESSAGE LEN
RLENOUT  DS    H              OUTPUT MESSAGE LEN
RMESCD   DS    CL6                     MESSAGE CODE OF TRANSACTION
RTERMNM  DS    CL6                     TERMINAL ID OF SOURCE
RSUBS    DS    XL50                   TEN 12 BYTE FIELDS - 1 FOR EACH
*                                      I-O SUBROUTINE
*
*
RSUBRNT  DSECT ,                       DESCRIBES 1 RSUBS
RSUB     DS    0XL5
RSUBTME  DS    XL4                     TIME IN SUBR. SEC/10000
RACCESS  DS    XL1                     TOTAL LOGICAL READS THIS SUBR.
*
*
*
./ ADD NAME=MPRAWTST 0100-02135-02135-1228-00025-00025-00000-VBCMACS
MPRAWTST DSECT
*
*        DESCRIBS RECORD CREATED BY THE MPP.
*        RECORD DESCRIBES DATA FOR A TP TRANSACTION.
*
MPRAWREC DS    0XL135
RIN      DS    F                       TOD MESSAGE INTO MP SEC/10000
ROUT     DS    F                       TOD MESSAGE OUT OF MP SEC/10000
ROVPROC  DS    F                       TOD OVLY BEGAN PROC SEC/10000
ROVEND   DS    F                       TOD OVLY ENDED SEC/10000
RTERMNM  DS    CL6                     TERMINAL ID OF SOURCE
MSGLEN   DS    H
SCRTYMSG DS    0CL61       SECURITY ERROR MESSAGE
USRNAME  DS    CL8       SECURITY USER NAME
MSG      DS    CL40      SECURITY ERR MSG
MASK     DS    CL8      TERMINAL/USER MASK
RMESCD   DS    CL5    TRANS TYPE
RSUBS    DS    XL50                   TEN 12 BYTE FIELDS - 1 FOR EACH
*                                      I-O SUBROUTINE
*
*
RSUBRNT  DSECT ,                       DESCRIBES 1 RSUBS
RSUB     DS    0XL5
RSUBTME  DS    XL4                     TIME IN SUBR. SEC/10000
RACCESS  DS    XL1                     TOTAL LOGICAL READS THIS SUBR.
./ ADD NAME=MYSECT   0100-02135-02135-1228-00005-00005-00000-VBCMACS
         MACRO
         MYSECT
         GBLC  &MYCSECT
&MYCSECT SETC  '&SYSECT'
         MEND
./ ADD NAME=NTHING   0100-02135-02135-1228-00011-00011-00000-VBCMACS
         PRINT  NOGEN
         DBD    NAME=NTHINGDB,ACCESS=(HIDAM,VSAM)
         DATASET DD1=NTHINGS,DEVICE=3380,SIZE=4096
         SEGM   NAME=NTHINGS,PARENT=0,BYTES=(498,16),FREQ=100
         FIELD  NAME=(NTHNGKEY,SEQ,U),BYTES=10,START=3,TYPE=X
         LCHILD NAME=(NTHNGINS,NTHINGXX),PTR=INDX
         SEGM   NAME=NNOTES,PARENT=NTHINGS,BYTES=(382,18),FREQ=20
         FIELD  NAME=(NNOTEKEY,SEQ,U),BYTES=14,START=3,TYPE=X
         DBDGEN
         FINISH
         END
./ ADD NAME=OTHER    0100-02135-02135-1228-00009-00009-00000-VBCMACS
         PRINT  NOGEN
         DBD    NAME=OTHERDBD,ACCESS=(HIDAM,VSAM)
         DATASET DD1=OTHER,DEVICE=3380,SIZE=4096
         SEGM   NAME=OTHER,PARENT=0,BYTES=(510,53),FREQ=100
         FIELD  NAME=(OTHERKEY,SEQ,U),BYTES=50,START=3,TYPE=X
         LCHILD NAME=(OTHERINS,OTHERXXX),PTR=INDX
         DBDGEN
         FINISH
         END
./ ADD NAME=OTHERXXX 0100-02135-02135-1228-00009-00009-00000-VBCMACS
         PRINT  NOGEN
         DBD    NAME=OTHERXXX,ACCESS=(INDEX,VSAM,NOPROT)
         DATASET DD1=OTHERIND,DEVICE=3380
         SEGM   NAME=OTHERINS,PARENT=0,BYTES=50
         FIELD  NAME=(OTHERINF,SEQ,U),BYTES=50,START=1,TYPE=C
         LCHILD NAME=(OTHER,OTHERDBD),INDEX=OTHERKEY
         DBDGEN
         FINISH
         END
./ ADD NAME=PCBDEF   0100-02135-02135-1228-00017-00017-00000-VBCMACS
         MACRO
&NAME    PCBDEF &DSECT=YES
         LCLC  &NAM,&DTYPE
&NAM     SETC  'PCBDSECT'              DEFAULT NAME
         AIF   (T'&NAME EQ 'O').NONAME
&NAM     SETC  '&NAME'                 USE NAME GIVEN
.NONAME  ANOP
&DTYPE   SETC  'DSECT'                 DEFAULT TO DSECT DEFINITION
         AIF   ('&DSECT' EQ 'YES').DODSECT   DSECT DESIRED
&DTYPE   SETC  'DS   0XL28'           DEFINE AS DATA AREA
.DODSECT ANOP
&NAME    &DTYPE                        PCB DEFINITION
PCBDBNAM DS    CL8                     PCB DB NAME
         DS    CL2
PCBSTAT  DS    CL2                     STATUS CODE
         DS    XL16
         MEND
./ ADD NAME=PERCENT  0100-02135-02135-1228-00008-00008-00000-VBCMACS
         MACRO
&NAME    PERCENT    &DIVEND,&DIVISOR
&NAME    L   WORK2,&DIVEND  . GET DIVIDEND
         M   WORK,=FE2'1'   . MULT BY 100
         L   0,&DIVISOR   . GET DIVISOR
         SR   WORK,WORK    CLEAR REG
         DR   WORK,0   . DIVIDE
         MEND
./ ADD NAME=PGMREC   0100-02135-02135-1228-00042-00042-00000-VBCMACS
         MACRO
         PGMREC &IND
         LCLC  &CSECT
&CSECT   SETC  '&SYSECT'
         AIF   (T'&IND NE 'O').NOD1
PGMREC   DSECT
.NOD1    ANOP
         DS    0F
PREC     DS    0XL70 - 11035
PRECHEAD DS    0XL27
LENGTH   DS    XL2                     RDW
         DS    XL2
PGMLOG   DS    0CL21
PGMNAME  DS    CL7                     PROGRAM NAME
STEPNAME DS    CL7                     STEP NAME
JOBNAME  DS    CL7                     JOB NAME
PGMTYPE  DS    XL1                     0=PROD, 1=TP, 2=TEST, 3=TSO, 4=O
MONTHOC  DS    XL1                     NUMBER OF MONTH SECTIONS
*
MONTHS   DS    0XL43 - 11008
MONTH    DS    0XL43
DATE     DS    XL3                     CCYYMM DECIMAL DIGITS
RUNS     DS    PL3                     TOTAL RUNS FOR MONTH
CPU      DS    PL5                     TOTAL CPU MINUTES FOR MONTH
*
SHIFTS   DS    0XL32
*       S1=0800-1700, S2=1700-2400, S3=0000-0800, S4=SAT/SUN/HOL
SHIFT    DS    0XL8
SRUNS    DS    PL3                     TOTAL RUNS IN SHIFT
SCPU     DS    PL5                     TOTAL CPU IN SHIFT
*
*
*
         ORG   MONTHS
MONDAYS  DS    0XL5 - 1280
MONDAY   DS    0XL5
MONDATE  DS    XL3                     CCYYMM
MONTHDAY DS    PL2                     DAYS IN MONTH
         ORG
         AIF   (T'&IND NE 'O').NOD2
&CSECT   CSECT
.NOD2    MEND
./ ADD NAME=PRINTTTR 0100-02135-02135-1228-00021-00021-00000-VBCMACS
         MACRO
&NAME    PRINTTTR   &ADDR1,&ADDR2,&ADDR3,&ADDR4
*    &ADDR1 IS A RELATIVE TRACK ADDRESS ON A FULLWORD BOUNDARY
*    &ADD2 IS THE RECIEVING FIELD FOR THE TRACK #
*    &ADDR3 IS THE RECIEVING FIELD FOR THE RECORN #
*    &ADDR4 IS THE PRINTED MSG ADDR
         LH   12,&ADDR1    GET TRACK NUMBER
         MVC   MSG2(7),MASK&SYSNDX  INIT EDIT MASK
         CVD   12,DWD&SYSNDX  CONVERT  TO PACKED
         ED   MSG2(7),DWD&SYSNDX+5   MOVE TRK # TO MSG
         SR   12,12
         IC   12,&ADDR1+2   GET RECORD
         MVC   MSG3(7),MASK&SYSNDX   INIT EDIT MASK
         CVD   12,DWD&SYSNDX  CONVERT TO PACKED
         ED   MSG3(7),DWD&SYSNDX+5   EDIT DATA TO MSG
         PUT   PRINT,&ADDR4
         B   MEND&SYSNDX
MASK&SYSNDX DC   XL7'4020206B202021'  EDIT MASK
DWD&SYSNDX   DS  D
MEND&SYSNDX   EQU   *
         MEND
./ ADD NAME=PSROREC  0100-02135-02135-1228-00068-00068-00000-VBCMACS
         MACRO
&LABEL   PSROREC &DSECT=YES
         LCLC  &D,&CSECT,&LAB,&L
&D       SETC  'DC'                    DEFAULT TO NODSECT TYPE
         AIF   ('&DSECT' EQ 'NO').NODSECT
&D       SETC  'DS'                    SET TO DSECT DATA TYPE
&CSECT   SETC  '&SYSECT'
         DSECT
.NODSECT ANOP
&LAB     SETC  'PSROREC'
         AIF   (T'&LABEL EQ 'O').NOLAB                               */
&LAB     SETC  '&LABEL'
.NOLAB   ANOP
&L       SETC  '&LAB'(1,4)
&LAB     DS    0XL88                   PSRO RECORD - COUNT/KEY/DATA
*
&L.CNT   DS    0XL8                    COUNT
&L.CCHH  &D    XL4'00'                 CCHH OF RECORD
&L.RECN  &D    XL1'00'                 RECORD NUMBER
&L.KLDL  DS    0XL3                    KL/DL
&L.KL    &D    XL1'8'                  KL
&L.DL    DS    0XL2                    DL
         &D    HL2'72'
*
&L.KD    DS    0XL80                   KEY AND DATA
*
&L.KEY   &D    CL8' '                  KEY
*
&L.DATA  DS    0XL72                   DATA RECORD
&L.USER  &D    CL8' '                  USERID
&L.ALL   &D    HL3'180000'             ALLOCATED CPU SEC/100
&L.ADSP  DS    0CL4                    ALLOCATED CPU MMSS
&L.AMIN  &D    CL2'30'                 ALLOCATED MINUTES
&L.ASEC  &D    CL2'00'                 ALLOCATED SECONDS
&L.DAT   &D    PL3'0'                  DATE ALLOCATION GIVEN
*
&L.USED  &D    HL3'0'                  USED CPU SEC/100
&L.UDSP  DS    0CL4                    USED CPU MMSS
&L.UMIN  &D    CL2'00'                 USED MINUTES
&L.USEC  &D    CL2'00'                 USED SECONDS
&L.UDAT  DS    0CL8                    DATE USED UPDATED
&L.UMON  &D    CL2' '                  MONTH USED UPDATED
         &D    CL1'/'
&L.UDAY  &D    CL2' '                  DAY USED UPDATED
         &D    CL1'/'
&L.UYR   &D    CL2' '                  YEAR USED UPDATED
&L.UTME  &D    CL8'00.00.00'           TIME USED UPDATED
*
&L.TU    &D    HL3'00'                 USED TOTAL CPU SEC/100
&L.TUM   &D    CL2'00'                 USED TOTAL MINUTES
&L.TUS   &D    CL2'00'                 USED TOTAL SECONDS
&L.DATE  DS    0CL8                    DATE TOTAL UPDATED
&L.MON   &D    CL2' '                  MONTH
         &D    CL1'/'
&L.DAY   &D    CL2' '                  DAY
         &D    CL1'/'
&L.YR    &D    CL2' '                  YEAR
&L.TIME  &D    CL8'00.00.00'           TIME TOTAL UPDATED
*
&L.ULM   &D    PL3'0'                  USED CPU SEC/100 LAST MONTH
         &D    CL5' '                  FILLER
*
*
         AIF   ('&DSECT' EQ 'NO').NOCSECT
&CSECT   CSECT
.NOCSECT ANOP
*
         MEND
./ ADD NAME=PSROWORK 0100-02135-02135-1228-00052-00052-00000-VBCMACS
         MACRO
         PSROWORK
PSROWORK DSECT
WORKAREA DS    0XL768
*
SAVE     DS    18F                     REGISTER SAVE AREA
SAVE1    DS    18F                     REG SAVE AREA
SAVE2    DS    18F                     REG SAVE AREA
*
WORKD    DS    D                       CVD WORK AREA
WORK1    DS    D                       WORK AREA
WORK2    DS    D                       WORK AREA
*
ECB      DS    F                       IO ECB
RETCDE   DS    F                       RETURN CODE SAVE AREA
*
IOB      DS    XL48                    IOB
*
DCB      DS    XL96                    ACCOUNT FILE DCB
*
CHAIN    DS    0XL40                   CCW READ CHAIN
CCW1     DS    XL1
CCWSRCH  DS    XL3                     SEARCH ADDRESS
         DS    XL4
CCW2     DS    XL1                     TIC
TIC1     DS    XL3                     TIC ADDRESS
         DS    XL4
CCW3     DS    XL1
CCWKEY   DS    XL3                     KEY ADDRESS
         DS    XL4
CCW4     DS    XL1                     TIC
TIC2     DS    XL3                     TIC ADDRESS
         DS    XL4
CCW5     DS    XL1
CCWREC   DS    XL3                     BUFFER ADDRESS
         DS    XL4
*
OPEN1    DS    XL24                    OPEN PARM LIST
*
RECORD   PSROREC DSECT=NO
*
KEY      DS    CL8                     KEY
*
*
*
MESSAGE1 DS    CL96                    TPUT BUFFER
MESSAGE2 DS    CL96                    TPUT BUFFER
*
*
*
         DS    XL178                   FILLER
         MEND
./ ADD NAME=QBLKRCDD 0100-02135-02135-1228-00029-00029-00000-VBCMACS
         MACRO ,
         QBLKRCDD &DSECT=QBLKRCDD                              @BM02036
         AIF   ('&DSECT' EQ '').A                              @BM02036
&DSECT   DSECT ,                   MAP QUEUE-BLOCK RECORD.     @BM02036
.A       ANOP  ,                                               @BM02036
*
*        FIELDS MARKED   ***   ARE ONLY FOR QBLKS ON A
*                                  TEMPORARY DESTINATION'S CHAIN.
*
QBLKRCD  DS    0D                  START OF QBLK.              @BM02036
QBLKNXT  DS    F         ***       POINTER TO NEXT QBLK ON CHAI@BM02036
QBLKDSTO DS    F         ***       FULLWORD OFFSET OF FINAL DES@BM02036
QBLKDEQ1 DS    F              LOGICAL Q 1   DEQ PTR            @BM02036
QBLKENQ1 DS    F                            ENQ PTR            @BM02036
QBLKDEQ2 DS    F              LOGICAL Q 2   DEQ PTR            @BM02036
QBLKENQ2 DS    F                            ENQ PTR            @BM02036
QBLKDEQ3 DS    F              LOGICAL Q 3   DEQ PTR            @BM02036
QBLKENQ3 DS    F                            ENQ PTR            @BM02036
QBLKDEQ4 DS    F              LOGICAL Q 4   DEQ PTR            @BM02036
QBLKENQ4 DS    F                            ENQ PTR            @BM02036
QBLKDEQ5 DS    F              LOGICAL Q 5   DEQ PTR            @BM02036
QBLKMSGS DS    H         ***       COUNT OF MESSAGES           @BM02036
QBLKFLG1 DS    X         ***       BITS FOR QDFLG1, TELL WHICH @BM02036
*                        ***       QUEUES HAVE CONTENTS.
QBLKFLG2 DS    X         ***       BITS FROM QDFLG2.QDF2BTYP   @BM02036
QBF2CCB  EQU   X'04'               QBLKDEQ5 HAS CCBID          @BM02036
QBLKEND  DS    0X                                              @BM02036
QBLKLEN  EQU   QBLKEND-QBLKRCD     LENGTH OF QBLK.             @BM02036
         MEND  ,
./ ADD NAME=REGS     0100-93146-93146-0933-00015-00015-00000-VBCMACS
         MACRO
&LABEL   REGS
.* MACRO TO GENERATE EQUATES FOR REGISTERS: 0(R0) TO 15(R15).
&NUM     SETA  0
&MAX     SETA  15
.GEN     ANOP
*****   EQUATES FOR REGISTERS   *****
.LOOP    ANOP
R&NUM    EQU   &NUM
         AIF   ('&NUM' EQ '&MAX').END
&NUM     SETA  &NUM+1
         AGO   .LOOP
.END     ANOP
         MEXIT
         MEND
./ ADD NAME=SBAINIT  0100-02135-02135-1228-00071-00071-00000-VBCMACS
         MACRO
         SBAINIT
         GBLC   &ADR(64)
         GBLA   &SBAMAX
*        SBA ARRAY DEFINED
&SBAMAX  SETA   64
&ADR(1)  SETC   '40'
&ADR(2)  SETC   'C1'
&ADR(3)  SETC   'C2'
&ADR(4)  SETC   'C3'
&ADR(5)  SETC   'C4'
&ADR(6)  SETC   'C5'
&ADR(7)  SETC   'C6'
&ADR(8)  SETC   'C7'
&ADR(9)  SETC   'C8'
&ADR(10) SETC   'C9'
&ADR(11) SETC   '4A'
&ADR(12) SETC   '4B'
&ADR(13) SETC   '4C'
&ADR(14) SETC   '4D'
&ADR(15) SETC   '4E'
&ADR(16) SETC   '4F'
&ADR(17) SETC   '50'
&ADR(18) SETC   'D1'
&ADR(19) SETC   'D2'
&ADR(20) SETC   'D3'
&ADR(21) SETC   'D4'
&ADR(22) SETC   'D5'
&ADR(23) SETC   'D6'
&ADR(24) SETC   'D7'
&ADR(25) SETC   'D8'
&ADR(26) SETC   'D9'
&ADR(27) SETC   '5A'
&ADR(28) SETC   '5B'
&ADR(29) SETC   '5C'
&ADR(30) SETC   '5D'
&ADR(31) SETC   '5E'
&ADR(32) SETC   '5F'
&ADR(33) SETC   '60'
&ADR(34) SETC   '61'
&ADR(35) SETC   'E2'
&ADR(36) SETC   'E3'
&ADR(37) SETC   'E4'
&ADR(38) SETC   'E5'
&ADR(39) SETC   'E6'
&ADR(40) SETC   'E7'
&ADR(41) SETC   'E8'
&ADR(42) SETC   'E9'
&ADR(43) SETC   '6A'
&ADR(44) SETC   '6B'
&ADR(45) SETC   '6C'
&ADR(46) SETC   '6D'
&ADR(47) SETC   '6E'
&ADR(48) SETC   '6F'
&ADR(49) SETC   'F0'
&ADR(50) SETC   'F1'
&ADR(51) SETC   'F2'
&ADR(52) SETC   'F3'
&ADR(53) SETC   'F4'
&ADR(54) SETC   'F5'
&ADR(55) SETC   'F6'
&ADR(56) SETC   'F7'
&ADR(57) SETC   'F8'
&ADR(58) SETC   'F9'
&ADR(59) SETC   '7A'
&ADR(60) SETC   '7B'
&ADR(61) SETC   '7C'
&ADR(62) SETC   '7D'
&ADR(63) SETC   '7E'
&ADR(64) SETC   '7F'
         MEND
./ ADD NAME=SEGMAPS  0100-02135-02135-1228-00210-00210-00000-VBCMACS
         MACRO
         SEGMAPS &DSECT=YES,&SEG=ALL
         LCLC  &TMP
         AIF   ('&DSECT' EQ 'YES').GENERAT
         AIF   ('&DSECT' EQ 'NO').GENERAT
         MNOTE 2,'** INVALID DSECT/BASE PARMS, DSECT=YES ASSUMED'
.GENERAT ANOP
&TMP     SETC  '&SEG'
         AIF   ('&TMP' EQ 'ALL').TP10R
         AIF   ('&TMP' EQ 'TP10R').TP10R
         AIF   ('&TMP' EQ 'TP10D10').TP10D10
         AIF   ('&TMP' EQ 'TP10D20').TP10D20
         AIF   ('&TMP' EQ 'TP20R').TP20R
         AIF   ('&TMP' EQ 'TP20D10').TP20D10
         AIF   ('&TMP' EQ 'TP30R').TP30R
         MNOTE 2,'** SEG PARM INVALID. SEG=ALL ASSUMED'
&TMP     SETC  'ALL'
.TP10R   ANOP
         TITLE 'TP10R: DATA BASE CONTROL SEGMENT'
         AIF   ('&DSECT' EQ 'NO').GENDS
MDRTROOT DSECT ,            TP10R:DATA BASE CONTROL SEGMENT
         AGO  .FORMREC
.GENDS   ANOP
MDRTROOT DS    0F           TP10R:DATA BASE CONTROL SEGMENT
.FORMREC ANOP
*
MDRTKEY  DS    0XL10        NULLRTTK: SEGMENT KEY
MDRTTNAM DS    CL8          ROOTTRLM: TERMINAL NAME
MDRTLOB  DS    CL2          NULLLOBC: LOB CODE
*
MDRTIDNT DS   0CL8          SAME AS BELOW: 7/22/82 JAQ
MRDTIDNT DS    CL8          SECNACMI: 2NDARY ACCESS METHOD TERMINAL ID
*
MDRTACCM DS    XL1          ACCSMHDI: ACCESS METHOD FLAGS
MDRTIRJE EQU   X'80'                  INPUT FROM RJE
MDRTIIMS EQU   X'40'                  INPUT FROM IMS/DC
MDRTITCM EQU   X'20'                  INPUT FROM TCAM/VTAM
MDRTITAP EQU   X'10'                  INPUT FROM TAPE
MDRTORJE EQU   X'08'                  OUTPUT TO RJE
MDRTOIMS EQU   X'04'                  OUTPUT TO IMS/DC
MDRTOTCM EQU   X'02'                  OUTPUT TO TCAM/VTAM
MDRTOTAP EQU   X'01'                  OUTPUT TO TAPE
*
MDRTFLR1 DS    XL1          NULLRSV1: RESERVED
*
MDRTIODI DS    XL1          ROOTIOUI: MESSAGE TRAFFIC FLAGS
MDRTUNPI EQU   X'80'                  UNPROCESSED INPUTS EXIST
MDRTUNPO EQU   X'40'                  UNPROCESSED OUTPUTS EXIST
MDRTUNPR EQU   X'20'                  UNPROCESSED REPLIES EXIST
MDRTRES1 EQU   X'10'                  RESERVED
MDRTIGNI EQU   X'08'                  DO NOT PROCESS INPUTS
MDRTIGNO EQU   X'04'                  DO NOT PROCESS OUTPUTS
MDRTIGNR EQU   X'02'                  NO NOT PROCESS REPLIES
MDRTRES2 EQU   X'01'                  RESERVED
*
MDLBRSVF DS    XL1          NULLRSV2: RESERVED FLAG BYTES
*
MDRTDATE DS    PL4          ROOTTMLD: TRANSMISSION DATE, YYMMDD
*
MDRTTCI  DS    XL2          ROOTTMLQ: TRANSMISSION COUNT INDICATOR
*
MDRTIPKY DS    XL19         ROOTINPK:KEY OF LAST INPUT SEGMENT WRITTEN
*                                    AND PROCESSED BY ADJUDICATION
*
MDRTRPLY DS    0XL17        ROOTWRTK: KEY OF LAST REPLY SEGMENT WRITTEN
*                                     TO THE REPLY DATA BASE.
         DS    CL8          LASTTRLM: TERMINAL NAME
         DS    CL2          LASTLINC: LOB CODE
         DS    PL4          LASTCLMD: LAST CLAIM DATE
         DS    PL3          LASTSEQN: LAST SEQUENCE NUMBER
*
MDRTOKEY DS    0XL12        ROOTOUTK: KEY OF LAST OUTPUT SEGMENT SENT
*                                     BACK BY OUTPUT REPLY PROCESSING
         DS    PL4          ROOTOUTD: ROOT OUT DATE
         DS    XL2          ROOTTMLQ: TRANSMISSION COUNT INDIC
         DS    PL3          ROOTINPN: INPUT SEQUENCE NUMBER
         DS    PL3          ROOTOUTN: OUTPUT SEQUENCE NUMBER
*
MDRTRKEY DS    XL17         ROOTRPYK: KEY OF LAST REPLY SEGMENT SENT
*                                     BACK BY OUTPUT REPLY PROCESSING
ROOTLEN  EQU   *-MDRTROOT   LENGTH OF TP10R SEGMENT
         AIF   ('&TMP' EQ 'ALL').TP10D10
         AGO   .GENEND
.TP10D10 ANOP
         TITLE 'TP10D10: TERMINAL STATISTICS SEGMENT'
         AIF   ('&DSECT' EQ 'NO').GENDS1
MDSTSTAT DSECT ,            TP10D10: DEVICE STATISTICS SEGMENT
         AGO  .FRMREC1
.GENDS1  ANOP
MDSTSTAT DS    0F           TP10D10: DEVICE STATISTICS SEGMENT
.FRMREC1 ANOP
*
*
MDSTKEY  DS    0XL16        TMNLSTLK: STAT KEY
MDSTDATE DS    PL4          NULLAPND: APPENDING DATE
MDSTPGID DS    CL8          APPNPRGD: APPENDING PROGRAM NAME
MDSTTIME DS    PL4          PRGMSRTT: PROGRAM START TIME
*
MDSTIPCT DS    PL5          INPTTRNQ: INPUT TRANSACTIONS ADDED BY DCT10
*
MDSTOPCT DS    PL5          OUTPLINQ: OUTPUT LINES ADDED TO DB BY DCT12
*
MDSTRPCT DS    PL5          RPLYADDQ: REPLIES ADDED TO DB BY XXXX
*
MDSTOCNT DS    PL5          OUTPSNDQ: OUTPUT LINES PROCESSED BY DCT14
*
MDSTRCNT DS    PL5          RPLYSNDQ: REPLIES PROCESSED BY DCT14
*
MDSTEND  DS    PL4          PRGMSTOT: PROGRAM STOP TIME
         AIF   ('&TMP' EQ 'ALL').TP10D20
         AGO   .GENEND
.TP10D20 ANOP
         TITLE 'TP10D20: DEVICE INFORMATION SEGMENT'
         AIF   ('&DSECT' EQ 'NO').GENDS2
MDININFO DSECT ,            TP10D20: DEVICE INFORMATION SEGMENT
         AGO  .FRMREC2
.GENDS2  ANOP
MDININFO DS    0F           TP10D20: DEVICE INFORMATION SEGMENT
.FRMREC2 ANOP
*
MDINTLOC DS    CL25         TMNLLOCM: NAME OF TERMINAL LOCATION
*
MDINADDR DS    CL25         TMNLLO1R: ADDRESS OF TERMINAL LOCATION
*
MDINCITY DS    CL25         TMNLLO2R: CITY, STATE OF TERMINAL LOCATION
*
MDINZIP  DS    PL3          TMNLLO3R: PACKED ZIP CODE
*
MDINATTN DS    CL25         ATTTLNCM: ATTENTION LINE CONTACT NAME
*
MDINPHON DS    PL6          TMNLPHNN: PACKED PHONE NUMBER
*
MDINBLIN DS    CL3          USERLOBC: LINE OF BUSINESS
*
MDINDEVT DS    CL15         NULLDVIS: DEVICE TYPE
*
MDINLINE DS    PL3          TMNLLIN5: LINE SPEED USED
*
MDINMODM DS    CL15         TMNLMDMS: MODEM TYPE
*
MDINENTR DS    CL2          TMNLMODC: ENTRY MODE
*
MDINWHER DS    CL25         TMNLLOCC: TERM LOCATION
*
MDINSERL DS    PL6          TMNLSRLN: DEVICE SERIAL NUMBER
*
MDINVEND DS    CL25         TMNLVENM: VENDOR CONTACT
*
MDINVNUM DS    PL6          TMNLVENN: VENDOR PHONE NUMBER
         AIF   ('&TMP' EQ 'ALL').TP20R
         AGO   .GENEND
.TP20R   ANOP
         TITLE 'TP20R: CLAIM IN SEGMENT'
         AIF   ('&DSECT' EQ 'NO').GENDS3
MDCICLAM DSECT ,            TP20R: CLAIMS INPUT SEGMENT
         AGO  .FRMREC3
.GENDS3  ANOP
MDCICLAM DS    0F           TP20R: CLAIMS INPUT SEGMENT
.FRMREC3 ANOP
*
MDCILGTH DS    XL2          VARILGN0: TOTAL SEGMENT LENGTH
*
MDCIKEY  DS    0XL19        INPTCLMK: CLAIMS INPUT SEGMENT KEY
MDCITRMN DS    CL8          RECDTRLM: INCOMING TERMINAL NAME
MDCILOB  DS    CL2          NULLLOBC: LINE-OF-BUSINESS CODE (02=BS)
MDCIDATE DS    PL4          INPTCLMD: DATE CLAIM WAS ENTERED INTO DB
MDCIDTCI DS    XL2          INPTTMLQ: DAILY TRANSMISSION COUNT INDIC
MDCISEQI DS    PL3          INPTSEQN: INPUT SEQUENCE NUMBER
MDCITEXT DS    0C           INPTMSGX: INPUT XACTION TEXT, VARIABLE LEN
         AIF   ('&TMP' EQ 'ALL').TP20D10
         AGO   .GENEND
.TP20D10 ANOP
         TITLE 'TP20D10: CLAIM OUT SEGMENT'
         AIF   ('&DSECT' EQ 'NO').GENDS4
MDCOCLAM DSECT ,            TP20D10: CLAIMS OUTPUT SEGMENT
         AGO  .FRMREC4
.GENDS4  ANOP
MDCOCLAM DS    0F           TP20D10: CLAIMS OUTPUT SEGMENT
.FRMREC4 ANOP
*
MDCOLGTH DS    XL2          VARILGN0: TOTAL SEGMENT LENGTH
*
MDCOKEY  DS    0XL12        OUTPCLMK: CLAIMS OUTPUT SEGMENT KEY
MDCODATE DS    PL4          OUTPCLMD: DATE OUTPUT SEGMENT WAS GENERATED
MDCODTCI DS    H            OUTPTMLQ: DAILY TRANSMISSION COUNT INDIC
MDCOSEQI DS    PL3          IPOPSEQN: INPUT SEQUENCE NUMBER
MDCOSEQO DS    PL3          OUTPSEQN: OUTPUT SEQUENCE NUMBER
MDCOTEXT DS    0C           OUTPMSGX: OUTPUT XACTION RESPONSE
         AIF   ('&TMP' EQ 'ALL').TP30R
         AGO   .GENEND
.TP30R   ANOP
         TITLE 'TP30R: REPLY SEGMENT'
         AIF   ('&DSECT' EQ 'NO').GENDS5
MDRPRPLY DSECT ,            TP30R: REPLY SEGMENT
         AGO  .FRMREC5
.GENDS5  ANOP
MDRPRPLY DS    0F           TP30R: REPLY SEGMENT
.FRMREC5 ANOP
*
MDRPLGTH DS    H            VARILGN0: REPLY SEGMENT LENGTH
*
MDRPKEY  DS    0XL17        RPLYSGNK: REPLY SEGMENT KEY
MDRPTRMN DS    CL8          DSTNTRLM: DESTINATION TERMINAL NAME
MDRPLOB  DS    CL2          NULLLOBC: LINE-OF-BUSINESS CODE (02=BS)
MDRPDATE DS    PL4          RPLYCLMD: DATE REPLY GENERATED
MDRPSEQO DS    PL3          RPLYSEQN: OUTPUT SEQUENCE NUMBER
MDRPTEXT DS    0C           RPLYMSGX: TEXT OF REPLY
.GENEND  ANOP
&SYSECT  CSECT
         MEND
./ ADD NAME=SETAMODE 0100-85276-85276-1018-00019-00019-00000-VBCMACS
         MACRO
&LBL     SETAMODE &TYPE
         AIF (T'&TYPE EQ 'O').S24
         AIF ('&TYPE' EQ '24).S24
         AIF ('&TYPE' NE '31').ERR
.S31     ANOP
&LBL     LA    0,1
         SLL   0,31
         LA    1,*+4+2+2
         OR    1,0
         BSM   0,1
         MEXIT
.S24     ANOP
&LBL     LA    R1,*+4+2
         BSM   0,1
         MEXIT
.ERR     MNOTE 2,'INVALID AMODE, 24 ASSUMED'
         AGO   .S24
         MEND
./ ADD NAME=SETCSECT 0100-02135-02135-1228-00005-00005-00000-VBCMACS
         MACRO
         SETCSECT
         GBLC  &CSECT
&CSECT   SETC  '&SYSECT'
         MEND
./ ADD NAME=SMFRESC  0100-02135-02135-1228-00358-00358-00000-VBCMACS
         MACRO
&NAME    SMFRECS
         LCLC  &DNAME,&CSECT
&CSECT   SETC  '&SYSECT'
&DNAME   SETC  'SMFDSECT'
         AIF   (T'&NAME EQ 'O').NONAME
&DNAME   SETC  '&NAME'
.NONAME  ANOP
*
*
*
*    BCSB SMF RECORD DESCRIPTION DSECT(S)
*
*    EACH RECORD CONTAINS A 13 BYTE HEADER WITH
*     DATE, TIME, DAY OF WEEK CODE, AND RECORD TYPE
*
*    THE SOURCE FOR HEADER DATE/TIME VARIES FOR EACH RECORD
*     TYPE, BUT IS LOGICALLY THE START DATE/TIME OF THE EVENT
*     THAT CAUSED THE RECORD TO BE WRITTEN BY SMF
*
*
*    THERE IS 1 DSECT THAT INCLUDES ALL RECORD TYPES. EACH
*     RECORD DESCRIPTION ORGS TO 'SMFREST' AND DOES NOT
*     DESCRIBE THE RECORD HEADER.
*
*    IN ADDITION, THERE OR DSECTS FOR VARIOUS PORTIONS OF
*    SEVERAL RECORD TYPES
*
*
*
&DNAME   DSECT
*
SMFHEAD  DS    0XL13                   STANDARD RECORD HEADER
SMFRDW   DS    XL4                     VARIABLE RECORD DESCRIPTOR WORD
SMFDATE  DS    PL3                     START DATE, YYDDD
SMFTIME  DS    PL4                     START TIME, SEC/100
SMFDOW   DS    XL1                     DAY OF WEEK, 0=SUN THRU 6=SAT
SMFTYPE  DS    XL1                     RECORD TYPE
*
SMFREST  DS    0X                      START OF RECORD TYPE DESCRIPTION
*
*
*
*      IPL RECORD, TYPE 0
*
*      SMFDATE = CALCULATED DATE SYSTEM WENT DOWN
*      SMFTIME = CALCULATED TIME SYSTEM WENT DOWN
*      SMFTYPE = X'00'
*
*
*
         ORG   SMFREST
T00DOWN  DS    PL5                     TIME OFFSET TO IPL, SEC/100
         EJECT
*
*
*
*     JOB LOG NUMBER HEADER FOR RECORD TYPES
*       JOB-TYPE04/05, STEP-TYPE06/07, DS-TYPE14, AND VS-TYPE64
*
*
*
         ORG   SMFREST
SMFJLOG  DS    0XL15                   JOB LOG ID
SMFJOBNM DS    CL8                     JOB NAME
SMFJRSD  DS    PL3                     READER START DATE, YYDDD
SMFJRST  DS    PL4                     READER START TIME, SEC/100
         EJECT
*
*
*
*     BATCH JOB RECORD, TYPE 4 AND TSO LOGON RECORD, TYPE 5
*
*     SMFDATE = INITIATOR SELECT DATE OR TSO LOGON DATE
*     SMFTIME = INITIATOR SELECT TIME OR TSO LOGON TIME
*     SMFTYPE = X'04' OR X'05'
*
*
*
         ORG   SMFREST
         DS    XL15                    SMFJLOG
T04STEPS DS    XL1                     NUMBER OF STEPS IN JOB
T04TOJTM DS    PL5                     TIME OFFSET TO JOB END, SEC/100
T04COMPL DS    XL2                     JOB COMPLETION CODE
*                                      0NNN = SYSTEM ABEND CODE
*                                      8NNN = USER ABEND CODE
*                                      0000 = NORMAL COMPLETION
*                                      FFFF = FLUSHED
*                                      F000 = SYSTEM DIED
T04PRTY  DS    XL1                     JOB SELECTION PRIORITY
T04SRB   DS    PL4                     SRB CPU TIME, SEC/100
T04TCB   DS    PL4                     TCB CPU TIME, SEC/100
T04PGNO  DS    XL1                     PERFORMANCE GROUP NBR
T04SERV  DS    XL3                     SERVICE UNITS USED
T04TACT  DS    PL4                     TOTAL TRANS ACTIVE TIME, SEC/100
T04TRES  DS    PL4                     TOTAL TRANS RESIDENT TIME, SEC/1
T04CLASS DS    CL1                     JOB CLASS FROM JOBCARD
T04IND1  DS    XL1                     INDICATOR
*                                      80 = PRIORITY USED
*                                      04 = ENTERED VIA INTERNAL READER
*                                      02 = JOB RERUN BY JES2
*                                      01 = JOB CANCELED BY OPERATOR
T04JOBNO DS    CL4                     JES2 ASSIGNED JOB NUMBER
T04OUTS  DS    XL4                     NBR OUTPUT LINES & CARDS
T04OFF   DS    XL2                     OFFSET TO RELOCATE, OR ZERO
*
*    SEE T04SEG DSECT FOR RELOACTE SEG DESCRIPTION
         EJECT
*
*
*
*     STEP RECORD, TYPE 6 OR TS STEP RECORD, TYPE 7
*
*      SMFDATE = STEP INITIATION DATE
*      SMFTIME = STEP INITIATION TIME
*      SMFTYPE = X'06' OR X'07'
*
*
*
         ORG   SMFREST
         DS    XL17                    SMFJLOG
T06STPNO DS    XL1                     STEP NUMBER
T06STPNM DS    CL8                     STEP NAME
T06PGMNM DS    CL8                     PROGRAM NAME
T06TODAL DS    PL5                     TIME OFFSET TO DEV ALLOC, SEC/10
T06TOPPS DS    PL5                     TIME OFFSET TO PP START, SEC/100
T06TOSTM DS    PL5                     TIME OFFSET TO STEP END, SEC/100
T06COMPL DS    XL2                     STEP COMPLETION CODE
*                                      0NNN = SYSTEM COMPLETION CODE
*                                      8NNN = USER COMPLETION CODE
*                                      0000 = NORMAL COMPLETION
*                                      FFFF = FLUSHED
*                                      F000 = SYSTEM DIED
T06DPRTY DS    XL1                     DISPATCHING PRIORITY
T06SRB   DS    PL4                     STEP SRB CPU TIME, SEC/100
T06TCB   DS    PL4                     STEP TCB CPU TIME, SEC/100
T06IND   DS    XL1                     INDICATOR
*                                      02 = EXCP COUNT MAY BE WRONG
*                                      01 = STORAGE IS REAL
T06PAS   DS    XL2                     PRIVATE AREA SIZE K-BYTES
T06PAST  DS    XL2                     PAS FROM TOP, K-BYTES
T06PASB  DS    XL2                     PAS FROM BOTTOM, K-BYTES
T06PGIN  DS    XL3                     NONVIO/NONSWAP PAGE INS
T06PGOUT DS    XL3                     NONVIO/NONSWAP PAGE OUTS
T06PGV   DS    XL3                     VIO PAGE INS AND OUTS
T06SAIN  DS    XL3                     CSA PAGEINS
T06SWAPS DS    XL2                     NBR OF SWAPS
T06SPIN  DS    XL2                     NBR PAGES SWAPPED IN
T06SPOUT DS    XL2                     NBR PAGES SWAPPED OUT
T06PGNO  DS    XL1                     PERFORMANCE GROUP NUMBER
T06SERV  DS    XL3                     SERVICE UNITS USED
T06TACT  DS    PL4                     TRANS ACTIVE TIME, SEC/100
T06TRES  DS    PL4                     TRANS RESIDENT TIME, SEC/100
T06OFDEV DS    XL2                     OFFSET TO 1ST DEVICE SEG
T06DEVNO DS    XL1                     NUMBER OF DEVICE SEGS
*
*    SEE T06DEV DSECT FOR DEVICE SEG DESCRIPTION
 EJECT
*
*
*
*    MF1/RMF CPU ACTIVITY RECORD, TYPE 70
*
*    SMFDATE = DATE MEASUREMENT STARTED
*    SMFTIME = TIME MEASUREMENT STARTED
*    SMFTYPE = X'46'
*
*
*
         ORG   SMFREST
RMFDUR   DS    PL4                     MEASUREMENT DURATION, SEC/100
T70OCPU  DS    XL2                     OFFSET TO 1ST CPU SEG
T70CPUNO DS    XL1                     NBR CPU SEGMENTS
*
*   SEE T70CPU DSECT FOR CPU SEGMENT DESCRIPTION
         EJECT
*
*
*
*    MF1/RMF PAGING ACTIVITY RECORD, TYPE 71
*
*    SMFDATE = DATE MEASUREMENT STARTED
*    SMFTIME = TIME MEASUREMENT STARTED
*    SMFTYPE = X'47'
*
*
*
         ORG   SMFREST
         DS    PL4                     RMFDUR
T71SAMPS DS    PL4                     NBR OF SAMPLES
T71PGIN  DS    PL4                     NONVIO/NONSWAP PAGEINS
T71PGOUT DS    PL4                     NONVIO/NONSWAP PAGE OUTS
T71SWAPS DS    PL3                     SWAPS
T71SPIN  DS    PL4                     PAGES SWAPPED IN
T71SPOUT DS    PL4                     PAGES SWAPPED OUT
T71VPIN  DS    PL4                     VIO PAGES IN
T71VPOUT DS    PL4                     VIO PAGES OUT
T71CSAIN DS    PL4                     CSA PAGES IN
T71CSAOT DS    PL4                     CSA PAGES OUT
         EJECT
*
*
*
*    MF1/RMF WORKLOAD ACTIVITY RECORD, TYPE 72
*
*    SMFDATE = DATE MEASUREMENT STARTED
*    SMFTIME = TIME MEASUREMENT STARTED
*    SMFTYPE = X'48'
*
*
*
         ORG   SMFREST
         DS    PL4                     RMFDUR
T72PGNO  DS    XL1                     PERFORMANCE GROUP NUMBER
T72OPS   DS    XL2                     OFFSET TO PERIOD SEGMENT
T72PSNO  DS    XL1                     NBR PERIOD SEGMENTS
*
*    SEE T72PERSG DSECT FOR PERIOD SEGMENT DESCRIPTION
         EJECT
*
*
*
*    MF1/RMF CHANNEL ACTIVITY RECORD, TYPE 73
*
*    SMFDATE = DATE MEASUREMENT STARTED
*    SMFTIME = TIME MEASUREMENT STARTED
*    SMFTYPE = X'49'
*
*
*
         ORG   SMFREST
         DS    PL4                     RMFDUR
T73SAMPS DS    PL3                     NBR SAMPLES TAKEN
T730CHS  DS    XL2                     OFFSET TO 1ST CHANNEL SEG
T73CHSNO DS    XL1                     NUMBER OF CHANNEL SEGS
*
*    SEE T73CHAN DSECT FOR CHANNEL SEG DESCRIPTION
         EJECT
*
*
*
*    MF1/RMF DEVICE ACTIVITY RECORD, TYPE 74
*
*    SMFDATE = DATE MEASUREMENT STARTED
*    SMFTIME = TIME MEASUREMENT STARTED
*    SMFTYPE = X'4A'
*
*
*
         ORG   SMFREST
         DS    PL4                     RMFDUR
T74SAMPS DS    PL3                     SAMPLES TAKEN
T74DEVCL DS    XL1                     DEVICE CLASS (UCBTYPE BYTE 3)
T74ODEVS DS    XL2                     OFFSET TO 1ST DEVICE SEG
T74DEVNO DS    XL1                     NUMBER DEVICE SEGS
*
*    SEE T74DEV DSECT FOR DEVICE SEGMENT DESCRIPTION
         EJECT
*
*
*
*     TYPE 4 AND 5 RELOCATE SEGMENT DSECT
*
*      FOR TYPE 5 CONTAINS TPUTS AND TGETS
*
*
*
T04SEG   DSECT
T05TGETS DS    XL2                     NUMBER TGETS
T05TPUTS DS    XL2                     NUMBER TPUTS
         EJECT
*
*
*
*     TYPE 6 AND 7 DEVICE SEGMENT DSECT
*
*
*
T06DEV   DSECT
T06DEVTP DS    XL2                     DEVICE CLASS & TYPE (UCBTYPE BYT
T06DEVAD DS    XL2                     DEVICE ADDRESS, 0CUU
T06EXCPS DS    PL5                     EXCP COUNT
         EJECT
*
*
*
*    TYPE 70 CPU SEGMENT DSECT
*
*
*
T70CPU   DSECT
T70CPUID DS    XL1                     CPU ID, X'00' OR X'01'
T70IND   DS    XL1                     INDICATOR
*                                      00 = ONLINE
*                                      01 = VARIED ON OR OFF DURING INTE
T70WAIT  DS    PL4                     CPU WAIT TIME, SEC/100
         EJECT
*
*
*
*   TYPE 72 PERFORMANCE PERIOD SEGMENT DSECT
*
*
*
T72PERSG DSECT
T72TTNO  DS    PL3                     NUMBER TRANS TERMINATED
T72TACT  DS    PL5                     TRANSACTION ACTIVE TIME, SEC/100
T72SERV  DS    PL5                     NBR SERVICE UNITS
T72ELPS  DS    PL5                     ELAPSED TIME ALL TRANS, SEC/100
T72WKLV  DS    PL5                     WORKLOAD LEVEL ALL TRANS
T72MSSV  DS    PL5                     MAIN STORAGE SERVICE UNITS
T72IOSV  DS    PL5                     IO SERVICE UNITS
T72CPUSV DS    PL5                     CPU SERVICE UNITS
T72TRES  DS    PL5                     TRANSACTION RESIDENCE TIME, SEC/
T72SWAPS DS    PL3                     NBR OF SWAPS
T72DOMN  DS    XL1                     DOMAIN NUMBER
         EJECT
*
*
*
*    TYPE 73 CHANNEL ACTIVITY SEGMENT DSECT
*
*
*
T73CHAN  DSECT
T73CPUID DS    XL1                     CPU ID (00 OR 01)
T73CHNO  DS    XL1                     CHANNEL ADDRESS
T73IND   DS    XL1                     INDICATOR
*                                      20 = BLOCK MUX
*                                      10 = BYTE MUX
*                                      04 = INVALID CHANNEL ID
*                                      02 = VARIED ON OR OFF
*                                      01 = ONLINE
T73SIO   DS    PL5                     NBR SIOS
T73SBUS  DS    PL3                     NBR SAMPLES CHANNEL BUSY
T73SBUSW DS    PL3                     NBR SAMPLES CHAN BUSY/CPU WAIT
         EJECT
*
*
*
*    TYPE 74 DEVICE SEGMENT DSECT
*
*
*
T74DEV   DSECT
T74TYPE  DS    XL1                     DEVICETYPE (UCBTYPE BYTE 4)
T74ADDR  DS    XL2                     DEVICE ADDRESS 0CUU
T74VOL   DS    CL6                     VOL SER
T74IND   DS    XL1                     INDICATOR
*                                      02 = VARIED DURING MEASUREMENT
*                                      01 = ONLINE
T74SIO   DS    PL5                     NBR SIOS
T74SBUS  DS    PL3                     NBR SAMPLES DEVICE BUSY
T74QUE   DS    PL3                     NBR REQUESTS QUED AT SAMPLES
*
*
*
&CSECT   CSECT
./ ADD NAME=SMFTSO   0100-02135-02135-1228-00026-00026-00000-VBCMACS
         MACRO
         SMFTSO &DSECT=YES
         AIF   ('&DSECT' EQ 'NO').NODSECT
TSOSMF   DSECT ,                       JOB ACCOUNTTING TSO RECORD
.NODSECT ANOP
*
TSOREC   DS    0CL80                   TSO ACCOUNTING RECORD
USERID   DS    CL6
LOGONDTE DS    PL3
LOGONTME DS    PL4
LOGOFFDT DS    PL3
LOGOFFTM DS    PL4
CPUMIN   DS    PL4
COREMIN  DS    PL4
DISKIO   DS    PL5
DAYWEEK  DS    CL1
         DS    CL46
*
*
         AIF   ('&DSECT' EQ 'NO').EXIT
&SYSECT  CSECT
.EXIT    ANOP
*
*
         MEXIT
         MEND
./ ADD NAME=SMFTYPES 0100-02135-02135-1228-00265-00265-00000-VBCMACS
*        THIS TABLE CONTAINS A BRANCH INDEX VALUE FOR
*         EACH SMF RECORD TYPE. INDEX 0 IS FOR RECORDS TO BE
*         PASSED AS IS TO BE WRITTEN BY SMF. INDEX 4
*         IS FOR RECORD TYPES TO BE NOT WRITTEN BY SMF.
*         INDEX GT 4 MAY BE USED IN THE FUTURE FOR MODIFYING
*         SMF RECORDS BEFORE BEING WRITTEN. RECORD TYPES
*         0 - 255 ARE IN THE TABLE.
*
SMFTYPES DS    0XL256                  ONE BYTE FOR EACH RECORD TYPE
TYPE0    DC    HL1'0'                  WRITE
TYPE1    DC    HL1'0'                  WRITE
TYPE2    DC    HL1'0'                  WRITE
TYPE3    DC    HL1'0'                  WRITE
TYPE4    DC    HL1'0'                  WRITE
TYPE5    DC    HL1'0'                  WRITE
TYPE6    DC    HL1'0'                  WRITE
TYPE7    DC    HL1'0'                  WRITE
TYPE8    DC    HL1'0'                  WRITE
TYPE9    DC    HL1'0'                  WRITE
TYPE10   DC    HL1'0'                  WRITE
TYPE11   DC    HL1'0'                  WRITE
TYPE12   DC    HL1'0'                  WRITE
TYPE13   DC    HL1'0'                  WRITE
TYPE14   DC    HL1'0'                  WRITE
TYPE15   DC    HL1'0'                  WRITE
TYPE16   DC    HL1'0'                  WRITE
TYPE17   DC    HL1'4'                  NOWRITE
TYPE18   DC    HL1'4'                  NOWRITE
TYPE19   DC    HL1'0'                  WRITE
TYPE20   DC    HL1'0'                  WRITE
TYPE21   DC    HL1'0'                  WRITE
TYPE22   DC    HL1'0'                  WRITE
TYPE23   DC    HL1'0'                  WRITE
TYPE24   DC    HL1'0'                  WRITE
TYPE25   DC    HL1'0'                  WRITE
TYPE26   DC    HL1'0'                  WRITE
TYPE27   DC    HL1'0'                  WRITE
TYPE28   DC    HL1'0'                  WRITE
TYPE29   DC    HL1'0'                  WRITE
TYPE30   DC    HL1'0'                  WRITE
TYPE31   DC    HL1'0'                  WRITE
TYPE32   DC    HL1'0'                  WRITE
TYPE33   DC    HL1'0'                  WRITE
TYPE34   DC    HL1'0'                  WRITE
TYPE35   DC    HL1'0'                  WRITE
TYPE36   DC    HL1'0'                  WRITE
TYPE37   DC    HL1'0'                  WRITE
TYPE38   DC    HL1'0'                  WRITE
TYPE39   DC    HL1'0'                  WRITE
TYPE40   DC    HL1'4'                  NOWRITE
TYPE41   DC    HL1'0'                  WRITE
TYPE42   DC    HL1'0'                  WRITE
TYPE43   DC    HL1'0'                  WRITE
TYPE44   DC    HL1'0'                  WRITE
TYPE45   DC    HL1'0'                  WRITE
TYPE46   DC    HL1'0'                  WRITE
TYPE47   DC    HL1'0'                  WRITE
TYPE48   DC    HL1'0'                  WRITE
TYPE49   DC    HL1'0'                  WRITE
TYPE50   DC    HL1'0'                  WRITE
TYPE51   DC    HL1'0'                  WRITE
TYPE52   DC    HL1'0'                  WRITE
TYPE53   DC    HL1'0'                  WRITE
TYPE54   DC    HL1'0'                  WRITE
TYPE55   DC    HL1'0'                  WRITE
TYPE56   DC    HL1'0'                  WRITE
TYPE57   DC    HL1'0'                  WRITE
TYPE58   DC    HL1'0'                  WRITE
TYPE59   DC    HL1'0'                  WRITE
TYPE60   DC    HL1'0'                  WRITE
TYPE61   DC    HL1'0'                  WRITE
TYPE62   DC    HL1'4'                  NOWRITE
TYPE63   DC    HL1'4'                  NOWRITE
TYPE64   DC    HL1'0'                  WRITE
TYPE65   DC    HL1'0'                  WRITE
TYPE66   DC    HL1'0'                  WRITE
TYPE67   DC    HL1'4'                  NOWRITE
TYPE68   DC    HL1'4'                  NOWRITE
TYPE69   DC    HL1'4'                  NOWRITE
TYPE70   DC    HL1'0'                  WRITE
TYPE71   DC    HL1'0'                  WRITE
TYPE72   DC    HL1'0'                  WRITE
TYPE73   DC    HL1'0'                  WRITE
TYPE74   DC    HL1'0'                  WRITE
TYPE75   DC    HL1'0'                  WRITE
TYPE76   DC    HL1'0'                  WRITE
TYPE77   DC    HL1'0'                  WRITE
TYPE78   DC    HL1'0'                  WRITE
TYPE79   DC    HL1'0'                  WRITE
TYPE80   DC    HL1'0'                  WRITE
TYPE81   DC    HL1'0'                  WRITE
TYPE82   DC    HL1'0'                  WRITE
TYPE83   DC    HL1'0'                  WRITE
TYPE84   DC    HL1'0'                  WRITE
TYPE85   DC    HL1'0'                  WRITE
TYPE86   DC    HL1'0'                  WRITE
TYPE87   DC    HL1'0'                  WRITE
TYPE88   DC    HL1'0'                  WRITE
TYPE89   DC    HL1'0'                  WRITE
TYPE90   DC    HL1'0'                  WRITE
TYPE91   DC    HL1'0'                  WRITE
TYPE92   DC    HL1'0'                  WRITE
TYPE93   DC    HL1'0'                  WRITE
TYPE94   DC    HL1'0'                  WRITE
TYPE95   DC    HL1'0'                  WRITE
TYPE96   DC    HL1'0'                  WRITE
TYPE97   DC    HL1'0'                  WRITE
TYPE98   DC    HL1'0'                  WRITE
TYPE99   DC    HL1'0'                  WRITE
TYPE100  DC    HL1'0'                  WRITE
TYPE101  DC    HL1'0'                  WRITE
TYPE102  DC    HL1'0'                  WRITE
TYPE103  DC    HL1'0'                  WRITE
TYPE104  DC    HL1'0'                  WRITE
TYPE105  DC    HL1'0'                  WRITE
TYPE106  DC    HL1'0'                  WRITE
TYPE107  DC    HL1'0'                  WRITE
TYPE108  DC    HL1'0'                  WRITE
TYPE109  DC    HL1'0'                  WRITE
TYPE110  DC    HL1'0'                  WRITE
TYPE111  DC    HL1'0'                  WRITE
TYPE112  DC    HL1'0'                  WRITE
TYPE113  DC    HL1'0'                  WRITE
TYPE114  DC    HL1'0'                  WRITE
TYPE115  DC    HL1'0'                  WRITE
TYPE116  DC    HL1'0'                  WRITE
TYPE117  DC    HL1'0'                  WRITE
TYPE118  DC    HL1'0'                  WRITE
TYPE119  DC    HL1'0'                  WRITE
TYPE120  DC    HL1'0'                  WRITE
TYPE121  DC    HL1'0'                  WRITE
TYPE122  DC    HL1'0'                  WRITE
TYPE123  DC    HL1'0'                  WRITE
TYPE124  DC    HL1'0'                  WRITE
TYPE125  DC    HL1'0'                  WRITE
TYPE126  DC    HL1'0'                  WRITE
TYPE127  DC    HL1'0'                  WRITE
TYPE128  DC    HL1'0'                  WRITE
TYPE129  DC    HL1'0'                  WRITE
TYPE130  DC    HL1'0'                  WRITE
TYPE131  DC    HL1'0'                  WRITE
TYPE132  DC    HL1'0'                  WRITE
TYPE133  DC    HL1'0'                  WRITE
TYPE134  DC    HL1'0'                  WRITE
TYPE135  DC    HL1'0'                  WRITE
TYPE136  DC    HL1'0'                  WRITE
TYPE137  DC    HL1'0'                  WRITE
TYPE138  DC    HL1'0'                  WRITE
TYPE139  DC    HL1'0'                  WRITE
TYPE140  DC    HL1'0'                  WRITE
TYPE141  DC    HL1'0'                  WRITE
TYPE142  DC    HL1'0'                  WRITE
TYPE143  DC    HL1'0'                  WRITE
TYPE144  DC    HL1'0'                  WRITE
TYPE145  DC    HL1'0'                  WRITE
TYPE146  DC    HL1'0'                  WRITE
TYPE147  DC    HL1'0'                  WRITE
TYPE148  DC    HL1'0'                  WRITE
TYPE149  DC    HL1'0'                  WRITE
TYPE150  DC    HL1'0'                  WRITE
TYPE151  DC    HL1'0'                  WRITE
TYPE152  DC    HL1'0'                  WRITE
TYPE153  DC    HL1'0'                  WRITE
TYPE154  DC    HL1'0'                  WRITE
TYPE155  DC    HL1'0'                  WRITE
TYPE156  DC    HL1'0'                  WRITE
TYPE157  DC    HL1'0'                  WRITE
TYPE158  DC    HL1'0'                  WRITE
TYPE159  DC    HL1'0'                  WRITE
TYPE160  DC    HL1'0'                  WRITE
TYPE161  DC    HL1'0'                  WRITE
TYPE162  DC    HL1'0'                  WRITE
TYPE163  DC    HL1'0'                  WRITE
TYPE164  DC    HL1'0'                  WRITE
TYPE165  DC    HL1'0'                  WRITE
TYPE166  DC    HL1'0'                  WRITE
TYPE167  DC    HL1'0'                  WRITE
TYPE168  DC    HL1'0'                  WRITE
TYPE169  DC    HL1'0'                  WRITE
TYPE170  DC    HL1'0'                  WRITE
TYPE171  DC    HL1'0'                  WRITE
TYPE172  DC    HL1'0'                  WRITE
TYPE173  DC    HL1'0'                  WRITE
TYPE174  DC    HL1'0'                  WRITE
TYPE175  DC    HL1'0'                  WRITE
TYPE176  DC    HL1'0'                  WRITE
TYPE177  DC    HL1'0'                  WRITE
TYPE178  DC    HL1'0'                  WRITE
TYPE179  DC    HL1'0'                  WRITE
TYPE180  DC    HL1'0'                  WRITE
TYPE181  DC    HL1'0'                  WRITE
TYPE182  DC    HL1'0'                  WRITE
TYPE183  DC    HL1'0'                  WRITE
TYPE184  DC    HL1'0'                  WRITE
TYPE185  DC    HL1'0'                  WRITE
TYPE186  DC    HL1'0'                  WRITE
TYPE187  DC    HL1'0'                  WRITE
TYPE188  DC    HL1'0'                  WRITE
TYPE189  DC    HL1'0'                  WRITE
TYPE190  DC    HL1'0'                  WRITE
TYPE191  DC    HL1'0'                  WRITE
TYPE192  DC    HL1'0'                  WRITE
TYPE193  DC    HL1'0'                  WRITE
TYPE194  DC    HL1'0'                  WRITE
TYPE195  DC    HL1'0'                  WRITE
TYPE196  DC    HL1'0'                  WRITE
TYPE197  DC    HL1'0'                  WRITE
TYPE198  DC    HL1'0'                  WRITE
TYPE199  DC    HL1'0'                  WRITE
TYPE200  DC    HL1'0'                  WRITE
TYPE201  DC    HL1'0'                  WRITE
TYPE202  DC    HL1'0'                  WRITE
TYPE203  DC    HL1'0'                  WRITE
TYPE204  DC    HL1'0'                  WRITE
TYPE205  DC    HL1'0'                  WRITE
TYPE206  DC    HL1'0'                  WRITE
TYPE207  DC    HL1'0'                  WRITE
TYPE208  DC    HL1'0'                  WRITE
TYPE209  DC    HL1'0'                  WRITE
TYPE210  DC    HL1'0'                  WRITE
TYPE211  DC    HL1'0'                  WRITE
TYPE212  DC    HL1'0'                  WRITE
TYPE213  DC    HL1'0'                  WRITE
TYPE214  DC    HL1'0'                  WRITE
TYPE215  DC    HL1'0'                  WRITE
TYPE216  DC    HL1'0'                  WRITE
TYPE217  DC    HL1'0'                  WRITE
TYPE218  DC    HL1'0'                  WRITE
TYPE219  DC    HL1'0'                  WRITE
TYPE220  DC    HL1'0'                  WRITE
TYPE221  DC    HL1'0'                  WRITE
TYPE222  DC    HL1'0'                  WRITE
TYPE223  DC    HL1'0'                  WRITE
TYPE224  DC    HL1'0'                  WRITE
TYPE225  DC    HL1'0'                  WRITE
TYPE226  DC    HL1'0'                  WRITE
TYPE227  DC    HL1'0'                  WRITE
TYPE228  DC    HL1'0'                  WRITE
TYPE229  DC    HL1'0'                  WRITE
TYPE230  DC    HL1'0'                  WRITE
TYPE231  DC    HL1'0'                  WRITE
TYPE232  DC    HL1'0'                  WRITE
TYPE233  DC    HL1'0'                  WRITE
TYPE234  DC    HL1'0'                  WRITE
TYPE235  DC    HL1'0'                  WRITE
TYPE236  DC    HL1'0'                  WRITE
TYPE237  DC    HL1'0'                  WRITE
TYPE238  DC    HL1'0'                  WRITE
TYPE239  DC    HL1'0'                  WRITE
TYPE240  DC    HL1'0'                  WRITE
TYPE241  DC    HL1'0'                  WRITE
TYPE242  DC    HL1'0'                  WRITE
TYPE243  DC    HL1'0'                  WRITE
TYPE244  DC    HL1'0'                  WRITE
TYPE245  DC    HL1'0'                  WRITE
TYPE246  DC    HL1'0'                  WRITE
TYPE247  DC    HL1'0'                  WRITE
TYPE248  DC    HL1'0'                  WRITE
TYPE249  DC    HL1'0'                  WRITE
TYPE250  DC    HL1'0'                  WRITE
TYPE251  DC    HL1'0'                  WRITE
TYPE252  DC    HL1'0'                  WRITE
TYPE253  DC    HL1'0'                  WRITE
TYPE254  DC    HL1'0'                  WRITE
TYPE255  DC    HL1'0'                  WRITE
./ ADD NAME=SMFTYPS  0100-02135-02135-1228-00265-00265-00000-VBCMACS
*        THIS TABLE CONTAINS A BRANCH INDEX VALUE FOR
*         EACH SMF RECORD TYPE. INDEX 0 IS FOR RECORDS TO BE
*         PASSED AS IS TO BE WRITTEN BY SMF. INDEX 4
*         IS FOR RECORD TYPES TO BE NOT WRITTEN BY SMF.
*         INDEX GT 4 MAY BE USED IN THE FUTURE FOR MODIFYING
*         SMF RECORDS BEFORE BEING WRITTEN. RECORD TYPES
*         0 - 255 ARE IN THE TABLE.
*
SMFTYPES DS    0XL256                  ONE BYTE FOR EACH RECORD TYPE
TYPE0    DC    HL1'8'                  PROCESS IPL RECORD
TYPE1    DC    HL1'0'                  WRITE
TYPE2    DC    HL1'0'                  WRITE
TYPE3    DC    HL1'0'                  WRITE
TYPE4    DC    HL1'0'                  WRITE
TYPE5    DC    HL1'0'                  WRITE
TYPE6    DC    HL1'0'                  WRITE
TYPE7    DC    HL1'0'                  WRITE
TYPE8    DC    HL1'0'                  WRITE
TYPE9    DC    HL1'0'                  WRITE
TYPE10   DC    HL1'0'                  WRITE
TYPE11   DC    HL1'0'                  WRITE
TYPE12   DC    HL1'0'                  WRITE
TYPE13   DC    HL1'0'                  WRITE
TYPE14   DC    HL1'0'                  WRITE
TYPE15   DC    HL1'0'                  WRITE
TYPE16   DC    HL1'0'                  WRITE
TYPE17   DC    HL1'4'                  NOWRITE
TYPE18   DC    HL1'4'                  NOWRITE
TYPE19   DC    HL1'0'                  WRITE
TYPE20   DC    HL1'0'                  WRITE
TYPE21   DC    HL1'0'                  WRITE
TYPE22   DC    HL1'0'                  WRITE
TYPE23   DC    HL1'0'                  WRITE
TYPE24   DC    HL1'0'                  WRITE
TYPE25   DC    HL1'0'                  WRITE
TYPE26   DC    HL1'0'                  WRITE
TYPE27   DC    HL1'0'                  WRITE
TYPE28   DC    HL1'0'                  WRITE
TYPE29   DC    HL1'0'                  WRITE
TYPE30   DC    HL1'0'                  WRITE
TYPE31   DC    HL1'0'                  WRITE
TYPE32   DC    HL1'0'                  WRITE
TYPE33   DC    HL1'0'                  WRITE
TYPE34   DC    HL1'0'                  WRITE
TYPE35   DC    HL1'0'                  WRITE
TYPE36   DC    HL1'0'                  WRITE
TYPE37   DC    HL1'0'                  WRITE
TYPE38   DC    HL1'0'                  WRITE
TYPE39   DC    HL1'0'                  WRITE
TYPE40   DC    HL1'4'                  NOWRITE
TYPE41   DC    HL1'0'                  WRITE
TYPE42   DC    HL1'0'                  WRITE
TYPE43   DC    HL1'0'                  WRITE
TYPE44   DC    HL1'0'                  WRITE
TYPE45   DC    HL1'0'                  WRITE
TYPE46   DC    HL1'0'                  WRITE
TYPE47   DC    HL1'0'                  WRITE
TYPE48   DC    HL1'0'                  WRITE
TYPE49   DC    HL1'0'                  WRITE
TYPE50   DC    HL1'0'                  WRITE
TYPE51   DC    HL1'0'                  WRITE
TYPE52   DC    HL1'0'                  WRITE
TYPE53   DC    HL1'0'                  WRITE
TYPE54   DC    HL1'0'                  WRITE
TYPE55   DC    HL1'0'                  WRITE
TYPE56   DC    HL1'0'                  WRITE
TYPE57   DC    HL1'0'                  WRITE
TYPE58   DC    HL1'0'                  WRITE
TYPE59   DC    HL1'0'                  WRITE
TYPE60   DC    HL1'0'                  WRITE
TYPE61   DC    HL1'0'                  WRITE
TYPE62   DC    HL1'4'                  NOWRITE
TYPE63   DC    HL1'4'                  NOWRITE
TYPE64   DC    HL1'0'                  WRITE
TYPE65   DC    HL1'0'                  WRITE
TYPE66   DC    HL1'0'                  WRITE
TYPE67   DC    HL1'4'                  NOWRITE
TYPE68   DC    HL1'4'                  NOWRITE
TYPE69   DC    HL1'4'                  NOWRITE
TYPE70   DC    HL1'0'                  WRITE
TYPE71   DC    HL1'0'                  WRITE
TYPE72   DC    HL1'0'                  WRITE
TYPE73   DC    HL1'0'                  WRITE
TYPE74   DC    HL1'0'                  WRITE
TYPE75   DC    HL1'0'                  WRITE
TYPE76   DC    HL1'0'                  WRITE
TYPE77   DC    HL1'0'                  WRITE
TYPE78   DC    HL1'0'                  WRITE
TYPE79   DC    HL1'0'                  WRITE
TYPE80   DC    HL1'0'                  WRITE
TYPE81   DC    HL1'0'                  WRITE
TYPE82   DC    HL1'0'                  WRITE
TYPE83   DC    HL1'0'                  WRITE
TYPE84   DC    HL1'0'                  WRITE
TYPE85   DC    HL1'0'                  WRITE
TYPE86   DC    HL1'0'                  WRITE
TYPE87   DC    HL1'0'                  WRITE
TYPE88   DC    HL1'0'                  WRITE
TYPE89   DC    HL1'0'                  WRITE
TYPE90   DC    HL1'0'                  WRITE
TYPE91   DC    HL1'0'                  WRITE
TYPE92   DC    HL1'0'                  WRITE
TYPE93   DC    HL1'0'                  WRITE
TYPE94   DC    HL1'0'                  WRITE
TYPE95   DC    HL1'0'                  WRITE
TYPE96   DC    HL1'0'                  WRITE
TYPE97   DC    HL1'0'                  WRITE
TYPE98   DC    HL1'0'                  WRITE
TYPE99   DC    HL1'0'                  WRITE
TYPE100  DC    HL1'0'                  WRITE
TYPE101  DC    HL1'0'                  WRITE
TYPE102  DC    HL1'0'                  WRITE
TYPE103  DC    HL1'0'                  WRITE
TYPE104  DC    HL1'0'                  WRITE
TYPE105  DC    HL1'0'                  WRITE
TYPE106  DC    HL1'0'                  WRITE
TYPE107  DC    HL1'0'                  WRITE
TYPE108  DC    HL1'0'                  WRITE
TYPE109  DC    HL1'0'                  WRITE
TYPE110  DC    HL1'0'                  WRITE
TYPE111  DC    HL1'0'                  WRITE
TYPE112  DC    HL1'0'                  WRITE
TYPE113  DC    HL1'0'                  WRITE
TYPE114  DC    HL1'0'                  WRITE
TYPE115  DC    HL1'0'                  WRITE
TYPE116  DC    HL1'0'                  WRITE
TYPE117  DC    HL1'0'                  WRITE
TYPE118  DC    HL1'0'                  WRITE
TYPE119  DC    HL1'0'                  WRITE
TYPE120  DC    HL1'0'                  WRITE
TYPE121  DC    HL1'0'                  WRITE
TYPE122  DC    HL1'0'                  WRITE
TYPE123  DC    HL1'0'                  WRITE
TYPE124  DC    HL1'0'                  WRITE
TYPE125  DC    HL1'0'                  WRITE
TYPE126  DC    HL1'0'                  WRITE
TYPE127  DC    HL1'0'                  WRITE
TYPE128  DC    HL1'0'                  WRITE
TYPE129  DC    HL1'0'                  WRITE
TYPE130  DC    HL1'0'                  WRITE
TYPE131  DC    HL1'0'                  WRITE
TYPE132  DC    HL1'0'                  WRITE
TYPE133  DC    HL1'0'                  WRITE
TYPE134  DC    HL1'0'                  WRITE
TYPE135  DC    HL1'0'                  WRITE
TYPE136  DC    HL1'0'                  WRITE
TYPE137  DC    HL1'0'                  WRITE
TYPE138  DC    HL1'0'                  WRITE
TYPE139  DC    HL1'0'                  WRITE
TYPE140  DC    HL1'0'                  WRITE
TYPE141  DC    HL1'0'                  WRITE
TYPE142  DC    HL1'0'                  WRITE
TYPE143  DC    HL1'0'                  WRITE
TYPE144  DC    HL1'0'                  WRITE
TYPE145  DC    HL1'0'                  WRITE
TYPE146  DC    HL1'0'                  WRITE
TYPE147  DC    HL1'0'                  WRITE
TYPE148  DC    HL1'0'                  WRITE
TYPE149  DC    HL1'0'                  WRITE
TYPE150  DC    HL1'0'                  WRITE
TYPE151  DC    HL1'0'                  WRITE
TYPE152  DC    HL1'0'                  WRITE
TYPE153  DC    HL1'0'                  WRITE
TYPE154  DC    HL1'0'                  WRITE
TYPE155  DC    HL1'0'                  WRITE
TYPE156  DC    HL1'0'                  WRITE
TYPE157  DC    HL1'0'                  WRITE
TYPE158  DC    HL1'0'                  WRITE
TYPE159  DC    HL1'0'                  WRITE
TYPE160  DC    HL1'0'                  WRITE
TYPE161  DC    HL1'0'                  WRITE
TYPE162  DC    HL1'0'                  WRITE
TYPE163  DC    HL1'0'                  WRITE
TYPE164  DC    HL1'0'                  WRITE
TYPE165  DC    HL1'0'                  WRITE
TYPE166  DC    HL1'0'                  WRITE
TYPE167  DC    HL1'0'                  WRITE
TYPE168  DC    HL1'0'                  WRITE
TYPE169  DC    HL1'0'                  WRITE
TYPE170  DC    HL1'0'                  WRITE
TYPE171  DC    HL1'0'                  WRITE
TYPE172  DC    HL1'0'                  WRITE
TYPE173  DC    HL1'0'                  WRITE
TYPE174  DC    HL1'0'                  WRITE
TYPE175  DC    HL1'0'                  WRITE
TYPE176  DC    HL1'0'                  WRITE
TYPE177  DC    HL1'0'                  WRITE
TYPE178  DC    HL1'0'                  WRITE
TYPE179  DC    HL1'0'                  WRITE
TYPE180  DC    HL1'0'                  WRITE
TYPE181  DC    HL1'0'                  WRITE
TYPE182  DC    HL1'0'                  WRITE
TYPE183  DC    HL1'0'                  WRITE
TYPE184  DC    HL1'0'                  WRITE
TYPE185  DC    HL1'0'                  WRITE
TYPE186  DC    HL1'0'                  WRITE
TYPE187  DC    HL1'0'                  WRITE
TYPE188  DC    HL1'0'                  WRITE
TYPE189  DC    HL1'0'                  WRITE
TYPE190  DC    HL1'0'                  WRITE
TYPE191  DC    HL1'0'                  WRITE
TYPE192  DC    HL1'0'                  WRITE
TYPE193  DC    HL1'0'                  WRITE
TYPE194  DC    HL1'0'                  WRITE
TYPE195  DC    HL1'0'                  WRITE
TYPE196  DC    HL1'0'                  WRITE
TYPE197  DC    HL1'0'                  WRITE
TYPE198  DC    HL1'0'                  WRITE
TYPE199  DC    HL1'0'                  WRITE
TYPE200  DC    HL1'0'                  WRITE
TYPE201  DC    HL1'0'                  WRITE
TYPE202  DC    HL1'0'                  WRITE
TYPE203  DC    HL1'0'                  WRITE
TYPE204  DC    HL1'0'                  WRITE
TYPE205  DC    HL1'0'                  WRITE
TYPE206  DC    HL1'0'                  WRITE
TYPE207  DC    HL1'0'                  WRITE
TYPE208  DC    HL1'0'                  WRITE
TYPE209  DC    HL1'0'                  WRITE
TYPE210  DC    HL1'0'                  WRITE
TYPE211  DC    HL1'0'                  WRITE
TYPE212  DC    HL1'0'                  WRITE
TYPE213  DC    HL1'0'                  WRITE
TYPE214  DC    HL1'0'                  WRITE
TYPE215  DC    HL1'0'                  WRITE
TYPE216  DC    HL1'0'                  WRITE
TYPE217  DC    HL1'0'                  WRITE
TYPE218  DC    HL1'0'                  WRITE
TYPE219  DC    HL1'0'                  WRITE
TYPE220  DC    HL1'0'                  WRITE
TYPE221  DC    HL1'0'                  WRITE
TYPE222  DC    HL1'0'                  WRITE
TYPE223  DC    HL1'0'                  WRITE
TYPE224  DC    HL1'0'                  WRITE
TYPE225  DC    HL1'0'                  WRITE
TYPE226  DC    HL1'0'                  WRITE
TYPE227  DC    HL1'0'                  WRITE
TYPE228  DC    HL1'0'                  WRITE
TYPE229  DC    HL1'0'                  WRITE
TYPE230  DC    HL1'0'                  WRITE
TYPE231  DC    HL1'0'                  WRITE
TYPE232  DC    HL1'0'                  WRITE
TYPE233  DC    HL1'0'                  WRITE
TYPE234  DC    HL1'0'                  WRITE
TYPE235  DC    HL1'0'                  WRITE
TYPE236  DC    HL1'0'                  WRITE
TYPE237  DC    HL1'0'                  WRITE
TYPE238  DC    HL1'0'                  WRITE
TYPE239  DC    HL1'0'                  WRITE
TYPE240  DC    HL1'0'                  WRITE
TYPE241  DC    HL1'0'                  WRITE
TYPE242  DC    HL1'0'                  WRITE
TYPE243  DC    HL1'0'                  WRITE
TYPE244  DC    HL1'0'                  WRITE
TYPE245  DC    HL1'0'                  WRITE
TYPE246  DC    HL1'0'                  WRITE
TYPE247  DC    HL1'0'                  WRITE
TYPE248  DC    HL1'0'                  WRITE
TYPE249  DC    HL1'0'                  WRITE
TYPE250  DC    HL1'0'                  WRITE
TYPE251  DC    HL1'0'                  WRITE
TYPE252  DC    HL1'0'                  WRITE
TYPE253  DC    HL1'0'                  WRITE
TYPE254  DC    HL1'0'                  WRITE
TYPE255  DC    HL1'0'                  WRITE
./ ADD NAME=SMF3435  0100-02135-02135-1228-00074-00074-00000-VBCMACS
         MACRO
&NAME SMF3435 &DSECT=YES
.*
.* --- --- --- --- MACRO DOCUMENTATION --- --- --- --- --- ---
.*
.*   THIS MACRO GENERATES THE RECORD DESCRIPTION FOR THE
.*   OUTPUT OF RUX1730 WHICH STRIPS AND REFORMATS TYPE 34 AND
.*   TYPE 35 SMF RECORDS FROM SMF.DKI0002.RAWDATA OR SMF.SMFACCUM.
.*   G0000V00 FILES.
.*
.*   &NAME IS A USER SUPPLIED LABEL FOR THE RECORD DESCRIPTION
.*
.*   MACRO NAME=SMF3435
.*
.*   &DSECT IS A KEYWORD PARAMETER BY WHICH TO ASK FOR A 'DS' OR
.*              A 'DSECT' TYPE DEFINITION.  THE DEFAULT IS 'DSECT'
.*
.*   FORMAT:
.*         'NAME' SMF3435 DSECT=NO
.*              WHERE 'NAME' IS A USER SUPPLIED LABEL
.*              SMF3435 IS THE MACRO NAME AND
.*              DSECT=NO IS AN OPTIONAL KEYWORD
.*
.*   EXAMPLE:
.*        SMFREC  SMF3435
.*               OR
.*        SMFREC  SMF3435 DSECT=NO
.*
.* --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --
.*
*
* --- --- MAP FOR REFORMATTED SMF TYPE 34 AND 35 --- --- --- ---
*
         AIF   ('&DSECT' EQ 'YES').DFDSECT
&NAME    DS    0CL125
         AGO   .START
.DFDSECT ANOP
&NAME    DSECT
.START   ANOP
RRTYPE   DS    CL2                     RECORD TYPE
RRUSER   DS    CL6                     USER ID
RRLGTMDT DS    0CL10                   LOGON TIME/DT
RRLGONTM DS    PL6                     LOGON TIME SEC/100
RRLGONDT DS    PL4                     LOGON DATE 00YYDDDF
RRLGOFTM DS    PL6                     LOGOFF TIME(35) OR MSG(34)
RRLGOFDT DS    PL4                     LOGOFF DT(35) OR MSG(34)
RRTPUTS  DS    PL6                     NR OF TPUTS ISSUED
RRTGETS  DS    PL6                     NR OF TGETS SATISFIED
RRPRTY   DS    XL1                     DPRTY(34) OR LOGON PRTY(35)
RRPGRP   DS    XL2                     PERFORMANCE GRP NR
RRSTKEY  DS    XL1                     STORAGE PROTECT KEY
RRSRB    DS    PL5                     CPU TIME UNDER SRB'S SEC/100
RRTCB    DS    PL5                     CPU TIME UNDER TCB'S SEC/100
RRTERMCD DS    XL1                     TERMINATION CODE
RRCOMPCD DS    XL2                     COMPLETION CODE
RRSERUTS DS    PL6                     SERVICE UNITS
RRTRANTM DS    PL6                     TRANSACTION ACTIVE TIME
RRRESTM  DS    PL6                     TRANS RESIDENCY TIME
RREC34   DS    0XL50                   VARIABLE PORTION OF RECORD-34
RRCMAND  DS    CL8                     COMMAND
RRSCMAND DS    CL8                     SUBCOMMAND
RRINITM  DS    PL6                     INIT SELECT TM SEC/100
RRTERMTM DS    PL6                     TERM TIME SEC/100
RRTERMDT DS    PL4                     TERM DT 00YYDDDF
RRALOCTM DS    PL6                     DEV ALOC START TM SEC/100
RRPGMST  DS    PL6                     PROBLEM PGM START TM SEC/100
RRSWAPS  DS    PL6                     NR OF SWAP SEQUENCES
RREC35   ORG   RREC34                  VARIABLE PORTION OF RECORD-35
RRNRTRAN DS    PL6                     NR OF TRANSACTIONS
RRENQTM  DS    PL6                     LOGON ENQUEUE TIME SEC/100
RRENQDT  DS    PL4                     LOGON ENQUEUE ST 00YYDDDF
RRACCTFD DS    CL10                    ACCTING FIELDS
         DS    XL24                    FILLER
         MEND
./ ADD NAME=SNAPBUF  0100-02135-02135-1228-00004-00004-00000-VBCMACS
         MACRO
&NAME    SNAPBUF  &ID=
&NAME    SNAPZZZZ ID=&ID,TYPE=BUF
         MEND
./ ADD NAME=SNAPOPEN 0100-02135-02135-1228-00188-00188-00000-VBCMACS
         MACRO
&NAME    SNAPOPEN &COMMENT
         GBLB  &SNAPGBL
         AIF   (&SNAPGBL).ERRX
&SNAPGBL SETB  1
***                                                                 ***
**       AVT EQUATES USED BY SNAPOPEN TO SET SNAPDATA                **
***                                                                 ***
AVTBFRFB EQU   IEDQAVT+X'30C' .         FIRST UNIT POINTER
AVTKEYLE EQU   IEDQAVT+X'408' .         KEY LENGTH
AVTLNCNT EQU   IEDQAVT+X'40A' .         NUMBER OF OPEN LINES
AVTAVFCT EQU   IEDQAVT+X'410' .         TOTAL LNUNITS+MSUNITS
AVTDISKN EQU   IEDQAVT+X'41A'       X'01' IF DISK=YES IN INTRO
AVTCPBNO EQU   IEDQAVT+X'4C8' .         TOTAL CPB'S
AVTCPBPT EQU   IEDQAVT+X'470' .         FIRST CPB POINTER
.*    SNAPOPEN   VERSION   01/02/71                             *
.*  WRITTEN IN EDUCATION DEVELOPMENT, RALEIGH, NORTH CAROLINA   *
.*                                                              *
.* GENERATES AND OPENS A SNAP DCB FOR TCAM DEBUGGING MACROS     *
.* AND PROVIDES THE ROUTINES FOR THESE MACROS.                  *
&NAME    STM   14,12,SNAPSAVE .         SAVE REGISTERS
         LH    3,AVTLNCNT .             COUNT OF OPENED LINES
         LTR   3,3 .                    ANY OPEN LINES
         BE    SNAPOPEN .               NO, SO CONTINUE
** NOTE. IF ANY LINES HAVE BEEN OPENED THEN THE UNIT POOL POINTERS   **
**       IN THE AVT WILL BE INCORRECT.                               **
         WTO   'TPSNAPERR  SNAPOPEN MUST PRECEDE LINE OPENS'
         B     SNAPENDO .               ABNORMAL END SO EXIT
*SNAPOPEN OPEN (SNAPDCB,OUTPUT)
SNAPOPEN OPEN  (SNAPDCB,OUTPUT)
***                                                                 ***
**       SET UNIT INFORMATION IN 'SNAPDATA' FOR 'SNAPPOOL & SNAPBUF' **
***                                                                 ***
         LM    3,11,SNAPDATA .          ZEROISE R3-11 FROM INITIAL VALS
         L     3,AVTBFRFB .             FIND START OF UNIT POOL
         LA    3,0(3) .                 ZEROISE TOP BYTE
         L     4,4(3) .                 FIND SECOND UNIT ADDRESS
         LA    4,0(4) .                 ZEROISE TOP BYTE
         SR    4,3 .                    CALC CORE LENGTH OF UNIT
         LR    7,4                      SAVE UNIT LENGTH
         MH    4,AVTAVFCT .             CALC SIZE OF UNIT POOL
         AR    4,3 .                    CALC END OF UNIT POOL
         LH    9,AVTAVFCT .             SAVE NUMBER OF UNITS
         LH    11,AVTKEYLE .            SAVE UNIT KEY LENGTH
         TM    AVTDISKN,X'01'     BIT ON IF DISK=YES IN INTRO
         BZ    SNAPSETC .               YES, SO NO CPB POOL
         L     6,40(5) .                FIND SECOND CPB ADDRESS
         LA    6,0(6) .                 ZEROISE TOP BYTE
         SR    6,5 .                    CALC CORE SIZE OF CPB AND UNIT
         LR    8,6                      SAVE SIZE
         MH    6,AVTCPBNO .             CALC SIZE OF CPB POOL
         AR    6,5 .                    CALC END OF CPB POOL
         LH    10,AVTCPBNO .            SAVE NUMBER OF CPB'S
SNAPSETC STM   3,11,SNAPDATA .          SET CPB AND UNIT VALUES FOR
*                                       FUTURE USE.
         B     SNAPENDO .
         EJECT
***   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *     ***
***                                                                 ***
***            SNAPBUF ROUTINE                                      ***
***                                                                 ***
***   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *     ***
**                                                                   **
**   THIS ROUTINE IS DESIGNED TO SNAP THE CONTENTS OF THE-           **
**                                                                   **
**             1.   ERROR WORD IN THE SCB                            **
**             2.   THE SENSE BYTES IN THE LCB                       **
**             3.   THE BUFFER CONTENTS                              **
**                                                                   **
**       THE FIRST SNAP LISTS THE ERROR WORD, THE SENSE BYTES (1 & 2)**
**       AND THE FIRST THREE UNITS OF THE BUFFER.  IF THE BUFFER     **
**       CONTAINS MORE THAN THREE UNITS, THE REMAINING UNITS ARE     **
**       SNAPPED 5 AT A TIME UNTIL ALL BUFFER UNITS HAVE BEEN        **
**       SNAPPED.                                                    **
**                                                                   **
***   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *     ***
         ENTRY SNAPBUF .      FROM SNAPBUF MACRO IN MESSAGE HANDLER
         USING *,15 .                   ESTABLISH TEMPORARY BASE
SNAPBUF  STM   14,12,SNAPSAVE .         SAVE REGISTERS
         DROP  15
         BALR  12,0 .                   SET ROUTINE BASE REGISTER
         USING *,12 .                   ESTABLISH ROUTINE BASE
         L     3,SNAPDATA+36 .          SET IEDADBUF POINTER
         L     3,0(3) .                 SET BUFFER ADDRESS
         L     4,12(3) .                GET LCB ADDRESS
         L     5,92(4) .                GET SCB ADDRESS
         LA    5,16(5) .                SET ERROR WORD ADDRESS
         LA    6,3(5) .                 SET END OF ERROR WORD ADDRESS
         LA    7,34(4) .                GET SENSE BYTE ADDRESS
         LA    8,5(7) .                 FIND END OF SENSE BYTES & ECB
         STM   5,8,SNAPLIST .           SET SNAP ADDRESSES
         LR    11,1 .                   SAVE SNAP ID=
         LA    6,SNAPLIST+16-8 .        SET NEXT POINT IN SNAPLIST - 8
         L     5,SNAPDATA+16 .          FIND CORE LENGTH OF ONE UNIT
         BCTR  5,0 .                    MINUS ONE
         L     10,SNAPDATA+32 .         FIND KEY LENGTH OF UNIT
         LH    2,18(3) .                LOAD DATA COUNT FOR THIS BUFFER
         LA    7,3 .                    SET BCT COUNT LIMIT (3 UNITS)
         B     SNAPBUF2 .               TO SNAP UP TO 3 UNITS
SNAPBUF1 LA    6,SNAPLIST-8 .           RESET SNAPLIST START - 8
         LA    7,5 .                    SET BCT COUNT LIMIT (5 UNITS)
SNAPBUF2 LA    3,0(3) .                 CLEAR HIGH ORDER BYTE
         LR    4,3 .                    SAVE UNIT ADDRESS
         AR    4,5 .                    CALC END OF UNIT
         LA    6,8(6) .                 SET NEXT POINT IN SNAPLIST
         STM   3,4,0(6) .               PUT UNIT ADDRESSES IN SNAPLIST
         SR    2,10 .                   CALCULATE DATA REMAINING
         BNP   SNAPBUF3 .               IF ALL UNITS PROCESSED
         L     3,8(3) .                 FIND NEXT UNIT ADDRESS
         BCT   7,SNAPBUF2 .             CONTINUE FOR 3 OR 5 UNITS
SNAPBUF3 OI    4(6),X'80' .             SET END OF SNAPLIST INDICATOR
*        SNAP  DCB=SNAPDCB,PDATA=REGS,ID=(11),LIST=SNAPLIST
         SNAP  DCB=SNAPDCB,PDATA=REGS,ID=(11),LIST=SNAPLIST
         LTR   2,2 .                    CHECK FOR LAST UNIT
         BP    SNAPBUF1 .               MORE UNITS SO CONTINUE
         LM    14,12,SNAPSAVE .         RESTORE REGISTERS
         BR    14 .                     RETURN
         EJECT
***   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *     ***
***                                                                 ***
***                 SNAPPOOL ROUTINE                                ***
***                                                                 ***
***   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *     ***
**                                                                   **
**       THIS ROUTINE IS DESIGNED TO SNAP THE AVT, THE UNIT POOL     **
**       AND THE CPB UNIT POOL.                                      **
**                                                                   **
**             ONLY USED UNITS ARE SNAPPED                           **
**                                                                   **
***   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *     ***
         ENTRY SNAPPOOL .     FROM SNAPPOOL MACRO IN MESSAGE HANDLER
         USING *,15 .                   ESTABLISH TEMPORARY BASE
SNAPPOOL STM   14,12,SNAPSAVE .         SAVE REGISTERS
         DROP  15
         BALR  12,0 .                   SET ROUTINE BASE REGISTER
         USING *,12 .                   ESTABLISH ROUTINE BASE
         LM    3,10,SNAPDATA .          LOAD SNAP ADDRESSES
         SR    2,2 .                    ZEROISE TEST REGISTER
SNAPOOL1 SR    4,7 .                    FIND START OF LAST UNIT
         C     2,8(4) .                 CHECK IF USED
         BNE   SNAPOOL2 .               YES, SO CHECK CPB POOL
         BCT   9,SNAPOOL1 .             DECREMENT COUNTER AND CONTINUE
SNAPOOL2 LTR   5,5 .                    CHECK IF ANY CPB'S. R5=A(CPB)
         BZ    SNAPOOL5 .               NO, SO SET SNAPLIST
SNAPOOL3 SR    6,8 .                    FIND START OF LAST CPB
         C     2,0(6) .                 CHECK IF USED
         BNE   SNAPOOL4 .               YES, SO SET SNAPLIST
         BCT   10,SNAPOOL3 .            DECREMENT COUNTER AND CONTINUE
SNAPOOL4 LA    2,8 .                    SET OFFSET FOR END OF SNAPLIST
SNAPOOL5 LA    2,SNAPLIST+4(2) .        FIND END OF SNAPLIST
         STM   3,6,SNAPLIST .           SET SNAP ADDRESSES
         OI    0(2),X'80' .             SET END OF SNAPLIST
         LR    11,1 .                   SET SNAP ID VALUE
*        SNAP  DCB=SNAPDCB,PDATA=REGS,ID=(11),LIST=SNAPLIST-8
         SNAP  DCB=SNAPDCB,PDATA=REGS,ID=(11),LIST=SNAPLIST-8
         LM    14,12,SNAPSAVE .         RESTORE REGISTERS
         BR    14 .                     RETURN
         EJECT
**                                                                   **
***            CONSTANTS USED BY SNAP ROUTINES                      ***
**                                                                   **
**                      ** WORKREG **      ** VALUES ***             **
SNAPDATA DC    F'0' .         3         START OF UNIT POOL
         DC    F'0' .         4         END OF UNIT POOL
         DC    F'0' .         5         START OF CPB POOL
         DC    F'0' .         6         END OF CPB POOL
         DC    F'0' .         7         CORE LENGTH OF ONE UNIT
         DC    F'0' .         8         CORE LENGTH OF ONE UNIT+CPB
         DC    F'0' .         9         NUMBER OF LINE AND MS UNITS
         DC    F'0' .        10         NUMBER OF CPB'S
         DC    F'0' .        11         KEY LENGTH OF UNIT
         DC    A(IEDADBUF) .            ADDRESS OF BUFFER POINTER
         DC    A(IEDQAVT) .             ADDRESS OF AVT
         DC    A(IEDQAVT+X'4D2') .      ADDRESS OF END OF AVT
SNAPLIST DC    10F'0'
SNAPSAVE DC    15F'0' .                 SNAP ROUTINE SAVE AREA
*SNAPDCB DCB   DSORG=PS,MACRF=W,BLKSIZE=882,LRECL=125,
*              RECFM=VBA,DDNAME=SNAP
         ENTRY SNAPDCB                  PROVIDE ENTRY FOR USER'S USE
SNAPDCB  DCB   DSORG=PS,MACRF=W,BLKSIZE=882,LRECL=125,                 *
               RECFM=VBA,DDNAME=SNAP
         DROP  12
SNAPENDO LM    14,12,SNAPSAVE .         RESTORE REGISTERS
         MNOTE *,'* CAUTION. USER MUST RESET BASEREG 12 IF REQUIRED *'
         EJECT
         MEXIT
.ERRX    MNOTE *,'*** SNAPOPEN ALREADY GENERATED ***'
         MEND
./ ADD NAME=SNAPZZZZ 0100-02135-02135-1228-00062-00062-00000-VBCMACS
         MACRO
&NAME    SNAPZZZZ &ID=,&TYPE=
         GBLA  &SNAPIDN                 SNAP ID COUNTER
         GBLC  &SNAPIDC                 FOR REMEMBERING OLD SNAP ID
         GBLB  &SNAPGBL                 CHECK BIT FOR PREVIOUS SNAPOPEN
         GBLB  &IEDQZA(64)              USED BY TCAM - SEE BELOW
.*****************************
.*     &IEDQZA(64)           *
.*                           *
.*     00000...   STARTMH    *
.*     10100...   INHDR      *
.*     10000...   INBUF      *
.*     10001...   INMSG      *
.*     01010...   OUTHDR     *
.*     01000...   OUTBUF     *
.*     01001...   OUTMSG     *
.*                           *
.*****************************
.*                                                                    *
.*                  SNAPZZZZ VERSION 12/01/71                         *
.*       WRITTEN IN EDUCATION DEVELOPEMENT, RALEIGH. NORTH CAROLINA   *
.*       NOTE.  THIS MACRO IS INVOKED BY 'SNAPBUF' AND 'SNAPPOOL'     *
.*                                                                    *
.*       CHECK FOR ERRORS IN POSITIONING OF SNAPBUF OR SNAPPOOL       *
.*                                                                    *
         AIF   (&IEDQZA(1) OR &IEDQZA(2) OR &IEDQZA(3)).L1
         AIF   (&IEDQZA(4) OR &IEDQZA(5)).L1
         AGO   .ERR1
.L1      AIF   (&IEDQZA(5)).ERR2
         AIF   (&SNAPGBL EQ 0).NOTE1    AND RETURN TO NEXT STMT
.L2      AIF   (&IEDQZA(3) OR &IEDQZA(4)).SCAN
&NAME    SR    0,0 .              INBUF OR OUTBUF, ZEROISE SCAN REG
         AGO   .L3
.SCAN    ANOP
*        SETSCAN 0                      SCAN POINTER ADDRESS TO REG 15
&NAME    SETSCAN 0
         LR    0,15 .                   SCAN POINTER TO REG 0
.*       CHECK FOR ID= SPECIFICATION
.L3      AIF   ('&SNAPIDC' NE '').L4
&SNAPIDC SETC '0'                       SET FIRST TIME TO 0
         MNOTE *,'NO PREVIOUS ID= SPECIFIED. ZERO ASSUMED'
.L4      AIF   ('&ID' EQ '').L5
&SNAPIDC SETC  '&ID'                    REMEMBER ID=
&SNAPIDN SETA  0                        ZEROISE ID COUNTER
         AGO   .L6
.L5      ANOP
&SNAPIDN SETA  &SNAPIDN+1               INCREMENT ID COUNTER
         MNOTE *,'NO ID= SPECIFIED. ID=LAST''ID''+&SNAPIDN'
         LA    1,&SNAPIDC+&SNAPIDN .              SET SNAP ID=
         AGO   .L7
.L6      LA    1,&SNAPIDC .              SET SNAP ID=
.L7      L     15,=V(SNAP&TYPE)
         BALR  14,15 .                  LINK TO SNAP ROUTINE
         MEXIT
.NOTE1   MNOTE *,'SNAPOPEN MUST EXECUTE BEFORE SNAP&TYPE'
         AGO   .L2
.ERR1    MNOTE 4,'*** SNAP&TYPE NOT IN VALID MSG HANDLER SUBGROUP ***'
         AGO   .ERRX
.ERR2    MNOTE 4,'*** SNAP&TYPE IN INMSG OR OUTMSG SUBGROUP ***'
         AGO   .ERRX
.ERRX    ANOP
         MEND
./ ADD NAME=SUBEND   0100-02135-02135-1228-00008-00008-00000-VBCMACS
         MACRO
&LABEL   SUBEND &NAME
         AIF   ('&NAME' EQ '').ERR1
&LABEL   L     14,&NAME-4
         BR    14
         MEXIT
.ERR1    MNOTE 8,'SUBROUTINE NAME MUST BE SPECIFIED'
         MEND
./ ADD NAME=SUSER    0100-02135-02135-1228-00019-00019-00000-VBCMACS
         MACRO
&NAME    SUSER
         LCLC &CSECT
         LCLC &DNAME
&CSECT   SETC '&SYSECT'
&DNAME   SETC '&NAME'
         AIF  (T'&NAME NE 'O').NAME
&DNAME   SETC 'USERSECT'
.NAME    ANOP
&DNAME   DSECT
USERENT  DS   0XL36                    USER TABLE ENTRY
USERID   DS   CL8                      USER NAME
USERMASK DS   XL28                     ALLOWABLE USER ENTRIES
*
&CSECT   CSECT
*
*
*
         MEND
./ ADD NAME=SUSEROLD 0100-02135-02135-1228-00019-00019-00000-VBCMACS
         MACRO
&NAME    SUSER
         LCLC &CSECT
         LCLC &DNAME
&CSECT   SETC '&SYSECT'
&DNAME   SETC '&NAME'
         AIF  (T'&NAME NE 'O').NAME
&DNAME   SETC 'USERSECT'
.NAME    ANOP
&DNAME   DSECT
USERENT  DS   0XL20                    USER TABLE ENTRY
USERID   DS   CL8                      USER NAME
USERMASK DS   XL12                     ALLOWABLE USER ENTRIES
*
&CSECT   CSECT
*
*
*
         MEND
./ ADD NAME=TABENT   0100-02135-02135-1228-00005-00005-00000-VBCMACS
         MACRO
&NAME    TABENT &CODE,&ADDR
&NAME    DC    AL1(&CODE),AL3(&ADDR)
TOTAL&CODE DC  F'0'
         MEND
./ ADD NAME=TABLE    0100-02135-02135-1228-00013-00013-00000-VBCMACS
         MACRO
&NAME    TABLE
&NAME    DS    0CL256
         DC    193X'FF'
         DC    X'00020406080A0C0E10'
         DC    7X'FF'
         DC    X'121416181A1C1E2022'
         DC    8X'FF'
         DC    X'2426282A2C2E3032'
         DC    6X'FF'
         DC    X'3436383A3C3E40424446'
         DC    6X'FF'
         MEND
./ ADD NAME=TAPEMAC  0100-02135-02135-1228-00532-00532-00000-VBCMACS
         TITLE 'TAPEMAP $CALL MACRO - INVOKE A SUBROUTINE'
         MACRO
&NAME    $CALL &EP=,&EPLOC=,&PARAM=,&PARMLOC=
         MNOTE *,'       $CALL     VERSION 001 06/06/75  06/06/75  GPW'
.**********************************************************************
.*                                                                    *
.* $CALL                                                              *
.*                                                                    *
.* FUNCTION       GENERATE CODE REQUIRED TO PASS CONTROL TO ANOTHER   *
.*                CSECT AND PASS PARAMETERS IF REQUIRED.              *
.*                                                                    *
.* DESCRIPTION    STANDARD IBM LINKAGE CODE IS GENERATED BY THE MACRO *
.*                TO PASS CONTROL TO A SPECIFIED LOAD MODULE.  A LIST *
.*                OF PARAMETERS MAY ALSO BE CONSTRUCTED.              *
.*                                                                    *
.*                A FULLWORD NO-OP CONTAINING AN IDENTIFICATION       *
.*                NUMBER WILL BE PLACED AFTER THE BALR USED TO        *
.*                TRANSFER CONTROL.  THIS VALUE WILL BE DISPLAYED IN  *
.*                DUMPS.  THE STARTING VALUE IS 10 AND IS INCREMENTED *
.*                BY 10 FOR EACH CALL.  THE VALUE IS DEFINED BY THE   *
.*                GLOBAL SYMBOL $CALLID.                              *
.*                                                                    *
.* SYNTAX         NAME     $CALL     EP=SYM1                          *
.*                                   EPLOC=SYM2                       *
.*                                                                    *
.*                                   PARAM=(SYM-LIST)                 *
.*                                   PARMLOC=SYM3                     *
.*                                                                    *
.*                                                                    *
.*                NAME   - A SYMBOLIC TAG ASSIGNED TO THE FIRST       *
.*                         INSTRUCTION GENERATED.                     *
.*                                                                    *
.*                EP     - THE NAME OF THE CSECT TO WHICH CONTROL IS  *
.*                         TO BE TRANSFERRED.  A V TYPE ADDRESS       *
.*                         CONSTANT WILL BE GENERATED.                *
.*                                                                    *
.*                EPLOC  - THE NAME OF A FULLWORD CONTAINING THE      *
.*                         ADDRESS OF THE CSECT TO WHICH CONTROL IS   *
.*                         TO BE TRANSFERRED.                         *
.*                                                                    *
.*                         NOTE - IF EP IS SPECIFIED, EPLOC IS        *
.*                                IGNORED.                            *
.*                                                                    *
.*                PARAM  - A LIST OF SYMBOLIC NAMES OF PARAMETERS TO  *
.*                         BE PASSED TO THE CALLED ROUTINE.  AN       *
.*                         IN-LINE PARAMETER LIST WILL BE GENERATED.  *
.*                         THE ADDRESS OF THE LIST WILL BE PLACED IN  *
.*                         REGISTER 1.  THE HIGH ORDER BIT OF THE     *
.*                         LAST WORD IN THE LIST WILL BE SET TO 1.    *
.*                                                                    *
.*                PARMLOC- THE NAME OF THE FIRST WORD OF A USER       *
.*                         SUPPLIED PARAMETER LIST.                   *
.*                                                                    *
.*                         NOTE - IF PARAM IS SPECIFIED, PARMLOC IS   *
.*                                IGNORED.                            *
.*                                                                    *
.* ERRORS         EP OR EPLOC MUST BE SPECIFIED.  IF NEITHER VALUE    *
.*                IS PROVIDED, AN ERROR MESSAGE WILL BE GENERATED.    *
.*                THE ERROR IS SEVERITY CODE 8.                       *
.*                                                                    *
.* EXAMPLE        EX1      $CALL EP=GDATE,PARAM=DATE                  *
.*                              .                                     *
.*                              .                                     *
.*                              .                                     *
.*                DATE     DC    CL12' '                              *
.*                                                                    *
.*                                                                    *
.*                EX2      $CALL EPLOC=SUBRADR,PARMLOC=PARMLIST       *
.*                              .                                     *
.*                              .                                     *
.*                              .                                     *
.*                SUBRADR  DC    V(GDATE)                             *
.*                PARMLIST DC    A(DATE)                              *
.*                              .                                     *
.*                              .                                     *
.*                              .                                     *
.*                DATE     DC    CL12' '                              *
.*                                                                    *
.* GLOBAL SYMBOLS                                                     *
.*                                                                    *
.*                NAME     TYPE  USE                                  *
.*                                                                    *
.*                &$CALLID   A   USED TO GENERATE AN IDENTIFICATION   *
.*                               NUMBER IN A NO-OP FOLLOWING THE BALR *
.*                               USED TO TRANSFER CONTROL.  THE VALUE *
.*                               IS INCREMENTED BY 10 FOLLOWING EACH  *
.*                               CALL.  THIS VALUE WILL BE DISPLAYED  *
.*                               IN THE TRACEBACK PROVIDED WITH       *
.*                               DUMPS.                               *
.* MACROS CALLED                                                      *
.*                                                                    *
.*                NONE                                                *
.*                                                                    *
.**********************************************************************
.*
         GBLA  &$CALLID
.*
         LCLA  &COUNT
         LCLC  &ID
.*
&ID      SETC  '&NAME'
.*-------DO I SET UP PARM LIST?
         AIF   ('&PARAM' EQ '').PARMADR
         AIF   ('&PARAM' EQ '(R1)').PARMADR
         CNOP  0,4                      ALIGN TO FULL WORD
&COUNT   SETA  4*N'&PARAM+4
&ID      BAL   R1,*+&COUNT              BRANCH AROUND LIST
&ID      SETC  ''
&COUNT   SETA  1
.LOOP    ANOP
         AIF   (&COUNT EQ N'&PARAM).LAST
         DC    A(&PARAM(&COUNT))        PARAMETER &COUNT
&COUNT   SETA  &COUNT+1
         AGO   .LOOP
.LAST    DC    X'80',AL3(&PARAM(&COUNT)) LAST PARAMETER
         AGO   .ENTRY
.*-------SET UP PARM ADDR
.PARMADR AIF   ('&PARMLOC' EQ '').ENTRY
&ID      LA    R1,&PARMLOC              LOAD PARM LIST ADDRESS
&ID      SETC  ''
.*-------SET UP ENTRY POINT
.ENTRY   AIF   ('&EP' EQ '').EPLOC
&ID      L     R15,=V(&EP)              LOAD ENTRY ADDRESS    120475SH
         AGO   .BALR
.*-------SET UP ENTRY POINT
.EPLOC   AIF   ('&EPLOC' EQ '').BAD
&ID      L     R15,&EPLOC               LOAD ENTRY POINT ADDRESS
.*-------BRANCH TO SUBROUTINE
.BALR    BALR  R14,R15                  BRANCH TO SUBROUTINE
&$CALLID SETA  &$CALLID+10
         DC    X'4700',AL2(&$CALLID)    NO-OP, ID
         MEXIT
.*-------NO ENTRY POINT
.BAD     MNOTE 8,'*** ERROR - NO ENTRY POINT SPECIFIED'
         MEND
         TITLE 'TAPEMAP $ENTER MACRO - ENTRY LINKAGE'
         MACRO
&NAME    $ENTER &BASE=R3,&CSECT=YES,&SAVE=,&RENT=,&SP=1,&SPM=YES,      +
               &CHAIN=YES
         MNOTE *,'       $ENTER    VERSION 003 05/07/75  04/29/76  GPW'
.**********************************************************************
.*                                                                    *
.* $ENTER                                                             *
.*                                                                    *
.* FUNCTION       PROVIDE ENTRY CODING TO ESTABLISH BASE REGISTERS,   *
.*                ALLOCATE AND CHAIN SAVE AREAS, SET PROGRAM MASK,    *
.*                AND OBTAIN WORK AREA FOR RE-ENTRANT PROGRAMS.       *
.*                                                                    *
.* DESCRIPTION    THE MACRO WILL GENERATE CODE TO ESTABLISH ONE OR    *
.*                MORE BASE REGISTERS.  IT IS ASSUMED THAT STANDARD   *
.*                IBM LINKAGE CONVENTIONS HAVE BEEN FOLLOWED AND THAT *
.*                REGISTER 15 CONTAINS THE ADDRESS OF THE ENTRY       *
.*                POINT.  USER SPECIFIED OR DEFAULT BASE REGISTERS    *
.*                ARE INITIALIZED.  THE FIRST BASE REGISTER CONTAINS  *
.*                THE ADDRESS OF THE ENTRY POINT, AND SUCCESSIVE BASE *
.*                REGISTER ADDRESSES ARE INCREMENTED BY 4096.  THE    *
.*                DEFAULT BASE REGISTER IS REGISTER 3.  IF REGISTER 2 *
.*                IS SPECIFIED AS A BASE REGISTER, IT WILL BE         *
.*                ALLOWED, BUT A WARNING MESSAGE WILL BE DISPLAYED.   *
.*                REGISTERS 0, 1, 13, 14, AND 15 MAY NOT BE           *
.*                SPECIFIED AS BASE REGISTERS.  ALL REGISTER          *
.*                SPECIFICATIONS MUST BE MADE AS MNEMONICS (EG,       *
.*                REGISTER 3 IS R3).                                  *
.*                                                                    *
.*                IDENTIFICATION CONSTANTS SPECIFYING THE DATE AND    *
.*                TIME OF ASSEMBLY ARE CONSTRUCTED IN THE ENTRY       *
.*                CODING.  THESE VALUES ARE DISPLAYED IN DUMPS AND    *
.*                MAY BE USED TO VERIFY THAT THE PROPER VERSION OF    *
.*                THE ROUTINE HAS BEEN USED.                          *
.*                                                                    *
.*                ALL BITS OF THE PROGRAM MASK ARE SET.  IBM          *
.*                TRANSFERS CONTROL TO THE USER PROGRAM WITH ALL      *
.*                PROGRAM MASK BITS OFF.  IF SPM=NO IS SPECIFIED,     *
.*                THE PROGRAM MASK WILL BE UNALTERED.                 *
.*                                                                    *
.*                THE USER MAY SPECIFY THE NAME OF A WORK AREA OF 18  *
.*                FULLWORDS TO BE USED AS A SAVE AREA.  IF A USER     *
.*                AREA IS NOT SUPPLIED, AN 18 FULLWORD AREA IS        *
.*                ALLOCATED AND INITIALIZED TO ZERO.  THE ADDRESS OF  *
.*                THE SAVE AREA IS LOADED INTO REGISTER 13 AND IT IS  *
.*                CHAINED TO THE SAVE AREA OF THE CALLING PROGRAM.    *
.*                                                                    *
.*                THE USER MAY SPECIFY THAT THE MACRO IS NOT TO       *
.*                OBTAIN A SAVE AREA OR CHAIN SAVE AREAS BY           *
.*                SPECIFYING CHAIN=NO.  THE USER IS THEN              *
.*                RESPONSIBLE FOR SAVE AREA CHAINING.                 *
.*                                                                    *
.*                REGISTER EQUIVALENCES (R0  EQU  0, ETC.) ARE        *
.*                GENERATED FOR THE FIRST USAGE OF THE MACRO.         *
.*                                                                    *
.*                A CSECT DEFINITION WILL BE GENERATED UNLESS         *
.*                CSECT=NO IS SPECIFIED.  IF CSECT=NO IS SPECIFIED,   *
.*                AN ENTRY STATEMENT WILL BE GENERATED.               *
.*                                                                    *
.*                RE-ENTRANT CODING IS SUPPORTED.  FOR RE-ENTRANT     *
.*                CODING, THE USER MUST SPECIFY THE LENGTH OF A       *
.*                WORK AREA.  THE WORK AREA IS OBTAINED FROM SUBPOOL  *
.*                1 UNLESS OTHERWISE SPECIFIED.  THE FIRST 18 WORDS   *
.*                OF THE WORK AREA ARE USED FOR THE SAVE AREA.        *
.*                                                                    *
.* SYNTAX         NAME     $ENTER    BASE=(REG1,...,REGN)             *
.*                                   CSECT=NO                         *
.*                                   SAVE=SYM                         *
.*                                   RENT=LEN                         *
.*                                   SP=NUMBER                        *
.*                                   SPM=NO                           *
.*                                   CHAIN=NO                         *
.*                                                                    *
.*                NAME   - A SYMBOLIC TAG ASSIGNED TO THE FIRST       *
.*                         INSTRUCTION GENERATED.                     *
.*                                                                    *
.*                BASE   - THE REGISTERS TO BE USED AS BASE           *
.*                         REGISTERS.  THE DEFAULT IS R3.  THE FIRST  *
.*                         REGISTER SPECIFIED WILL CONTAIN THE        *
.*                         ADDRESS OF THE ENTRY POINT, AND SUCCEEDING *
.*                         BASE VALUES WILL BE INCREMENTED BY 4096.   *
.*                         REGISTERS 0, 1, 13, 14, AND 15 MAY NOT BE  *
.*                         SPECIFIED AS BASE REGISTERS.  REGISTERS    *
.*                         MUST BE SPECIFIED IN MNEMONIC FORM (EG,    *
.*                         R3 FOR REGISTER 3).                        *
.*                                                                    *
.*                CSECT  - CSECT=NO SPECIFIES THAT CODING FOR AN      *
.*                         ENTRY POINT RATHER THAN A CSECT IS TO BE   *
.*                         GENERATED.                                 *
.*                                                                    *
.*                SAVE   - SPECIFIES THE NAME OF A USER DEFINED 18    *
.*                         WORD SAVE AREA TO BE USED INSTEAD OF       *
.*                         GENERATING AN IN-LINE SAVE AREA.  IF RENT  *
.*                         IS SPECIFIED, SAVE MUST SPECIFY THE NAME   *
.*                         ASSIGNED TO THE FIRST 18 WORDS IN THE      *
.*                         WORK AREA.                                 *
.*                                                                    *
.*                RENT   - SPECIFIES THAT RE-ENTRANT CODE IS TO BE    *
.*                         GENERATED.  LEN IS THE LENGTH OF A WORK    *
.*                         AREA TO BE OBTAINED BY A GETMAIN.          *
.*                                                                    *
.*                SP     - SPECIFIES THE SUBPOOL FROM WHICH THE WORK  *
.*                         AREA FOR RE-ENTRANT CODING IS TO BE        *
.*                         OBTAINED.  DEFAULT IS SUBPOOL 1.           *
.*                                                                    *
.*                SPM    - SPM=NO SPECIFIES THAT THE PROGRAM MASK IS  *
.*                         NO TO BE ALTERED.                          *
.*                                                                    *
.*                CHAIN  - CHAIN=NO SPECIFIES THAT SAVE AREA ARE NOT  *
.*                         TO BE CHAINED.  THIS OPTION IS INTENDED    *
.*                         FOR USE ONLY BY HIGH ACTIVITY RE-ENTRANT   *
.*                         MODULES WHERE THE OVERHEAD OF              *
.*                         GETMAIN/FREEMAIN IS TO BE AVOIDED.         *
.*                                                                    *
.* ERRORS         THE NAME FIELD MUST BE SPECIFIED.  IF IT IS NOT, A  *
.*                GENERATED NAME, $ENTNNNN WILL BE GENERATED AND A    *
.*                SEVERITY 8 MNOTE IS GENERATED.  IF NO CODE WERE     *
.*                GENERATED AND NO BASE REGISTER DEFINED, THE ERROR   *
.*                LISTING WOULD BE LARGE.  TO REDUCE THE SIZE OF THE  *
.*                ERROR LISTING AND ALLOW OTHER ERRORS TO BE FOUND,   *
.*                THE MACRO WILL EXPAND.                              *
.*                                                                    *
.*                                                                    *
.* EXAMPLE        EX1      $ENTER                                     *
.*                                                                    *
.*                EX2      $ENTER CSECT=NO                            *
.*                                                                    *
.*                EX3      $ENTER BASE=(R3,R4,R5)                     *
.*                                                                    *
.*                EX4      $ENTER BASE=R12,RENT=DSECTLEN,SAVE=SAVEAREA*
.*                                                                    *
.* GLOBAL SYMBOLS                                                     *
.*                                                                    *
.*                NAME     TYPE  USE                                  *
.*                                                                    *
.*                &ENCOUNT   A   SET TO 1 AFTER REGISTER EQUIVALENCES *
.*                               GENERATED TO PREVENT EQUIVALENCES    *
.*                               FROM BEING GENERATED FOR LATER USES. *
.*                                                                    *
.* MACROS USED                                                        *
.*                                                                    *
.*                GETMAIN                                             *
.*                                                                    *
.* UPDATE SUMMARY                                                     *
.*                                                                    *
.*      VERSION   DATE     CHANGE                                     *
.*                                                                    *
.*        003   04/29/76   CHAIN KEYWORD ADDED                        *
.*                                                                    *
.*                                                                    *
.**********************************************************************
.*
         GBLA  &ENCOUNT
.*
         LCLA  &PARMNO,&REGNO
         LCLC  &REG,&CHAR,&LAST,&USING,&TEMP,&ID,&FIRST
.*
&ID      SETC  '&NAME'
         AIF   ('&NAME' NE '').CKCSECT
&ID      SETC  '$ENT&SYSNDX'
         MNOTE 8,'NAME OPERAND REQUIRED, NOT SPECIFIED. &ID WILL BE USE+
               D.'
.CKCSECT AIF   ('&CSECT' NE 'NO').CSECT
         AIF   ('&SYSECT' NE '').CKEQU
         MNOTE 8,'ENTRY POINT SPECIFIED, BUT NO CSECT DEFINED'
.CSECT   ANOP
         SPACE
&ID      CSECT
.CKEQU   AIF   (&ENCOUNT EQ 1).SKIPEQU
         SPACE
***********************************************************************
*                                                                     *
*                      REGISTER EQUIVALENCES                          *
*                                                                     *
***********************************************************************
         SPACE
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
.*
&ENCOUNT SETA  1
         SPACE
.SKIPEQU AIF   ('&CSECT' NE 'NO').CSECT2
         AIF   ('&SYSECT' EQ '').CSECT2
.*-------ENTRY POINT
         ENTRY &ID
         USING &ID,R15                  DEFINE BASE REGISTER
&ID      B     14(R15)                  BRANCH AROUND ID
         DC    AL1(8)                   IDENTIFIER LENGTH
         DC    CL8'&ID'                 ENTRY POINT NAME
         DC    CL1' '                   SPACER
         AGO   .STREGS
.*-------CSECT
.CSECT2  USING &ID,R15                  DEFINE BASE REGISTER
         B     28(0,R15)                BRANCH AROUND ID
         DC    AL1(23)                  IDENTIFIER LENGTH
         DC    CL8'&ID'                 CSECT NAME
         DC    CL1' '                   SPACER
         DC    CL8'&SYSDATE'            DATE OF ASSEMBLY
         DC    CL1' '                   SPACER
         DC    CL5'&SYSTIME'            TIME OF ASSEMBLY
.STREGS  STM   R14,R12,12(R13)          SAVE REGISTERS
&PARMNO  SETA  1                        INITIALIZE COUNTER
.CKBASE  ANOP
&REG     SETC  '&BASE(&PARMNO)'(1,3)
         AIF   ('&REG'(1,1) NE 'R').SKIPBAS
&TEMP    SETC  '&REG'(2,2)
&REGNO   SETA  &TEMP
         AIF   (&REGNO LT 2).BADBASE
         AIF   (&REGNO GT 12).BADBASE
         AIF   (&REGNO NE 2).SETBASE
         MNOTE 0,'*** WARNING - R2 IS A BASE REGISTER. TRANSLATE AND TE+
               ST INSTRUCTION WILL DESTROY CONTENTS.'
.SETBASE ANOP
         AIF   ('&FIRST' NE '').SETBAS2
         LR    &REG,R15                 LOAD BASE ADDRESS
&FIRST   SETC  '&REG'                   SAVE REGISTER
         AGO   .SETLAST
.SETBAS2 LA    &REG,4095(&LAST)         ADD 4095 TO LAST BASE
         LA    &REG,1(&REG)             ADD 1 MORE
.SETLAST ANOP
&LAST    SETC  '&REG'
&USING   SETC  '&USING.,&REG'
         AGO   .NEXTBAS
.SKIPBAS MNOTE 8,'*&REG* IS AN INVALID REGISTER FORM, IGNORED'
         AGO   .NEXTBAS
.BADBASE MNOTE 8,'*&REG* IS AN INVALID BASE REGISTER, IGNORED'
.NEXTBAS ANOP
&PARMNO  SETA  &PARMNO+1
         AIF   (&PARMNO LE N'&BASE).CKBASE
         DROP  R15                      DISCONTINUE R15 BASE
         USING &ID.&USING               DEFINE BASE REGISTERS
.*-------SEE IF PROGRAM MASK IS TO BE SET
         AIF   ('&SPM' EQ 'NO').NOSPM
         LA    R15,15                   LOAD PGM MASK SETTING
         SLA   R15,24                   SHIFT TO BITS 4-7
         SPM   R15                      SET PGM MASK AND COND
.NOSPM   AIF   ('&CHAIN' EQ 'NO').DONE
         AIF   ('&RENT' NE '').GETMAIN
         LR    R15,R13                  SAVE OLD SAVEAREA ADDR
         AIF   ('&SAVE' NE '').LOADSAV
         CNOP  0,4                      FULL WORD ALIGNMENT
         BAL   R13,*+76                 LOAD SAVEAREA ADDR
         DC    18F'0'                   SAVE AREA
         AGO   .CHAIN
.LOADSAV LA    R13,&SAVE                LOAD NEW SAVEAREA ADDR
         AGO   .CHAIN
.GETMAIN MNOTE *,' GETMAIN R,LV=&RENT,SP=&SP'
         GETMAIN R,LV=&RENT,SP=&SP      GET STORAGE
* END OF GETMAIN - $ENTER
         LR    R15,R13                  SAVE OLD SAVEAREA ADDR
         LR    R13,R1                   LOAD STORAGE ADDRESS
         USING &SAVE,R13                DEFINE BASE REGISTER
         L     R1,24(R15)               RESTORE REG 1 CONTENTS
.CHAIN   ST    R15,4(R13)               CHAIN SAVE AREAS
         ST    R13,8(R15)
.DONE    ANOP
         MEND
         TITLE 'TAPEMAP $RTRN MACRO- RETURN LINKAGE'
         MACRO
&NAME    $RTRN &RC=0,&RENT=,&SP=1,&SPM=YES,&REST01=YES
         MNOTE *,'       $RTRN     VERSION 002 05/07/75  04/29/76  GPW'
.**********************************************************************
.*                                                                    *
.* $RTRN                                                              *
.*                                                                    *
.* FUNCTION       GENERATE CODE REQUIRED TO RETURN CONTROL TO THE     *
.*                CALLING PROGRAM.                                    *
.*                                                                    *
.* DESCRIPTION    STANDARD IBM LINKAGE CODE IS GENERATED BY THE MACRO *
.*                TO RETURN CONTROL TO THE CALLING PROGRAM.  THE USER *
.*                MAY SPECIFY THE RETURN CODE TO BE RETURNED.         *
.*                RE-ENTRANT CODE IS SUPPORTED.                       *
.*                                                                    *
.*                REGISTERS 0 THROUGH 14 (OR OPTIONALLY, REGISTERS    *
.*                2 THROUGH 14) WILL BE RESTORED TO THEIR STATUS      *
.*                UPON ENTRY TO THE ROUTINE.  REGISTER 15 WILL BE     *
.*                USED FOR A DEFAULT OR USER SPECIFIED RETURN CODE.   *
.*                AN X'FF' WILL BE PLACED IN THE HIGH ORDER BYTE OF   *
.*                WORD 4 OF THE OLD SAVE AREA TO INDICATE THAT        *
.*                CONTROL HAS BEEN RETURNED TO THE CALLING PROGRAM    *
.*                                                                    *
.*                CODE IS ALSO GENERATED TO RESTORE THE PROGRAM MASK  *
.*                TO ITS STATUS UPON ENTRY TO THE ROUTINE.  THE       *
.*                VALUE OF THE MASK IS OBTAINED FROM THE HIGH ORDER   *
.*                BYTE OF REGISTER 14.  THE ASSUMPTION IS MADE THAT   *
.*                STANDARD LINKAGE WAS USED TO INVOKE THE ROUTINE,    *
.*                THAT IS, THAT ENTRY WAS MADE BY A  BALR  R14,R15.   *
.*                IF THIS IS NOT TRUE, THE PROGRAM MASK WILL BE       *
.*                RESTORED INCORRECTLY.  IF SPM=NO IS SPECIFIED, THE  *
.*                PROGRAM MASK WILL NOT BE ALTERED.                   *
.*                                                                    *
.*                IF RE-ENTRANT CODE IS BEING GENERATED, A DROP R2    *
.*                STATEMENT IS GENERATED, SO THE USER SHOULD NOT USE  *
.*                REGISTER 2 AS A BASE REGISTER.                      *
.*                                                                    *
.* SYNTAX         NAME     $RTRN     RC=NUM1                          *
.*                                      (R15)                         *
.*                                   RENT=LEN                         *
.*                                   SP=NUM2                          *
.*                                   SPM=NO                           *
.*                                   REST01=NO                        *
.*                                                                    *
.*                NAME   - A SYMBOLIC TAG ASSIGNED TO THE FIRST       *
.*                         INSTRUCTION GENERATED.                     *
.*                                                                    *
.*                RC     - SPECIFIES THE RETURN CODE TO BE PLACED IN  *
.*                         REGISTER 15.  A NUMBER MAY BE SPECIFIED,   *
.*                         OR (R15) INDICATES THAT THE RETURN CODE    *
.*                         HAS ALREADY BEEN PLACED IN REGISTER 15 BY  *
.*                         THE USER.  THE DEFAULT RETURN CODE IS 0.   *
.*                                                                    *
.*                RENT   - INDICATES THAT THE WORK AREA OBTAINED BY   *
.*                         $ENTER IS TO BE FREED.  LEN SPECIFIES THE  *
.*                         LENGTH OF THE AREA.  THE ADDRESS IS        *
.*                         OBTAINED FROM REGISTER 13.                 *
.*                                                                    *
.*                SP     - SPECIFIES THE SUBPOOL OF THE WORK AREA.    *
.*                         IT MUST AGREE WITH THE SUBPOOL SPECIFIED   *
.*                         IN $ENTER.  THE DEFAULT IS 1.              *
.*                                                                    *
.*                SPM    - SPM=NO SPECIFIES THAT THE PROGRAM MASK     *
.*                         IS NOT TO BE ALTERED.                      *
.*                                                                    *
.*                REST01 - REST01=NO SPECIFIES THAT THE CONTENTS      *
.*                         OF REGISTERS 0 AND 1 ARE NOT TO BE         *
.*                         RESTORED.  THIS OPTION SHOULD BE           *
.*                         SPECIFIED WHEN DATA IS TO BE PASSED        *
.*                         BACK TO THE CALLING PROGRAM IN             *
.*                         REGISTERS 0 AND 1.                         *
.*                                                                    *
.* ERRORS         NO ERROR MESSAGES ARE GENERATED                     *
.*                                                                    *
.* EXAMPLE        EX1      $RTRN                                      *
.*                                                                    *
.*                EX2      $RTRN  RC=4                                *
.*                                                                    *
.*                EX3      $RTRN  RC=(R15),RENT=DSECTLEN              *
.*                                                                    *
.* GLOBAL SYMBOLS                                                     *
.*                                                                    *
.*                NONE                                                *
.*                                                                    *
.* MACROS CALLED                                                      *
.*                                                                    *
.*                FREEMAIN                                            *
.*                                                                    *
.* UPDATE SUMMARY                                                     *
.*                                                                    *
.*      VERSION   DATE     CHANGE                                     *
.*                                                                    *
.*        002   04/29/76   REST01 KEYWORD ADDED                       *
.*                                                                    *
.**********************************************************************
.*
         AIF   ('&RENT' EQ '').REGULAR
&NAME    LR    R1,R13                   LOAD STORAGE ADDRESS
         BALR  R2,0                     ESTABLISH BASE REG
         USING *,R2                     DEFINE BASE REGISTER
         L     R3,4(R13)                SAVE OLD SAVEAREA ADDR
         LR    R4,R15                   SAVE RETURN CODE
.FREE    MNOTE *,' FREEMAIN R,LV=&RENT,A=(1),SP=&SP'
         FREEMAIN R,LV=&RENT,A=(1),SP=&SP FREE STORAGE
* END FREEMAIN - $RTRN
         AIF   ('&RC' NE '(R15)').RESSAV
         LR    R15,R4                   RESTORE RETURN CODE
.RESSAV  LR    R13,R3                   RESTORE OLD SAVEAREA
         DROP  R2
         AGO   .COMMON
.REGULAR ANOP
&NAME    L     R13,4(R13)               RESTORE OLD SAVEAREA
.COMMON  AIF   ('&RC' EQ '(R15)').RES14
         LA    R15,&RC                  SET RETURN CODE
.RES14   L     R14,12(R13)              RESTORE RETURN ADDRESS
         AIF   ('&REST01' EQ 'NO').REST2
         LM    R0,R12,20(R13)           RESTORE REGS 0 - 12
         AGO   .SETFLAG
.REST2   LM    R2,R12,28(R13)           RESTORE REGS 2 - 12
.SETFLAG MVI   12(R13),X'FF'            SET RETURNED FLAG
.*-------TEST FOR SPM RESET
         AIF   ('&SPM' EQ 'NO').NOSPM
         SPM   R14                      RESTORE PROGRAM MASK
.NOSPM   BR    R14                      RETURN
         MEND
./ ADD NAME=TERMNEW  0100-02135-02135-1228-00023-00023-00000-VBCMACS
         MACRO
&NAME    TERMSECT
         LCLC &CSECT
         LCLC &DNAME
&CSECT   SETC '&SYSECT'
&DNAME   SETC '&NAME'
         AIF  (T'&NAME NE 'O').NAME
&DNAME   SETC 'TERMSECT'
.NAME    ANOP
&DNAME   DSECT
TERMENT  DS    0XL80 .                 TERMINAL TABLE ENTRY
TERMNAME DS    CL8 .                   TERMINAL NAME
USERNAME DS    CL8 .                   CURRENT USER
LONTIME  DS    CL4 .                   LOGON TIME
LOFFTIME DS    CL4 .                   LOGOFF TIME
TMASK    DS    XL28 .                  ALLOW. TRANS FOR THIS TERMINAL
LMASK    DS    XL28 .                  ALLOW. TRANS FOR THIS LOGON
*
&CSECT   CSECT
*
*
*
         MEND
./ ADD NAME=TERMSECT 0100-02135-02135-1228-00023-00023-00000-VBCMACS
         MACRO
&NAME    TERMSECT
         LCLC &CSECT
         LCLC &DNAME
&CSECT   SETC '&SYSECT'
&DNAME   SETC '&NAME'
         AIF  (T'&NAME NE 'O').NAME
&DNAME   SETC 'TERMSECT'
.NAME    ANOP
&DNAME   DSECT
TERMENT  DS    0XL80 .                 TERMINAL TABLE ENTRY
TERMNAME DS    CL8 .                   TERMINAL NAME
USERNAME DS    CL8 .                   CURRENT USER
LONTIME  DS    CL4 .                   LOGON TIME
LOFFTIME DS    CL4 .                   LOGOFF TIME
TMASK    DS    XL28 .                  ALLOW. TRANS FOR THIS TERMINAL
LMASK    DS    XL28 .                  ALLOW. TRANS FOR THIS LOGON
*
&CSECT   CSECT
*
*
*
         MEND
./ ADD NAME=TEST     0100-02135-02135-1228-00040-00040-00000-VBCMACS
         MACRO
&NAME    TEST
&NAME    MVC   TSTEPNM(8),STEPNM   . MOVE NAME TO MSG
         C   WORK,=F'30'   . IS COUNT UP TO 30
         BE  CRASH    . YES, ABEND
         CVD   WORK,DWORK   . CONVERT COUNTER
         MVC   TCOUNTER(12),TMASK   . INIT EDIT MASK IN MDSG
         ED   TCOUNTER(12),DWORK+3   . EDIT COUNTER TO MSG
*   CONVERT REG CONTENTS TO PRINTABLE FORN
         LR   R15,WORK3    .  LOADWORK   REG
TTOP     LA   R14,7     .  INIT COUNTER AND OFFSET
TLOOP    STC   R15,DWORK(R14)   . STORE HEX CHARACTER
         SRL   R15,4   . SHIFT 1 HEX CHAR
         BCT   R14,TLOOP    . LOOP
         STC   R15,DWORK
         MVZ   DWORK(8),XZROS     . INIT ZONES FOR TRANSLATE
         TR   DWORK(8),TRLPHA   . TRANSLATE TO PRINTABLE CHARS
TNOP     NOP   TEND
         OI   TNOP+1,X'F0'  . RESET NOP TO BRANCH
          LR   R15,R5   . LOAD WORK REG
         MVC   TWORK3(8),DWORK      . MOVE TO MSG LINE
         B   TTOP   . LOOP
CRASH   ABEND   04,DUMP
TMSG     DS  0CL133
         DC   CL11' '
TSTEPNM  DS   CL8
         DC   C'   COUNTER = '
TCOUNTER DS   CL12
         DC   C'  WORK3 = '
TWORK3   DS   CL8
         DC   C'     R5 = '
TR5      DS   CL8
          DC   CL66' '
TMASK     DC   XL12'402020206B2020206B202021'   EDIT MASK
         CNOP  0,4
TEND     EQU   *
         NI   TNOP+1,X'0F' . RESET NOP
         MVC   TR5(8),DWORK    . MOVE TO MSG LINE
         PUT    OUTPUT,TMSG     . PRINT MSG
         MEND
./ ADD NAME=THINGS   0100-02135-02135-1228-00011-00011-00000-VBCMACS
         PRINT  NOGEN
         DBD    NAME=THINGDBD,ACCESS=(HIDAM,VSAM)
         DATASET DD1=THINGS,DEVICE=3380,SIZE=4096
         SEGM   NAME=THINGS,PARENT=0,BYTES=(498,16),FREQ=100
         FIELD  NAME=(THINGKEY,SEQ,U),BYTES=10,START=3,TYPE=X
         LCHILD NAME=(THINGINS,THINGXXX),PTR=INDX
         SEGM   NAME=NOTES,PARENT=THINGS,BYTES=(382,18),FREQ=20
         FIELD  NAME=(NOTESKEY,SEQ,U),BYTES=14,START=3,TYPE=X
         DBDGEN
         FINISH
         END
./ ADD NAME=THINGXXX 0100-02135-02135-1228-00009-00009-00000-VBCMACS
         PRINT  NOGEN
         DBD    NAME=THINGXXX,ACCESS=(INDEX,VSAM,NOPROT)
         DATASET DD1=THINGIND,DEVICE=3380
         SEGM   NAME=THINGINS,PARENT=0,BYTES=10
         FIELD  NAME=(THINGINF,SEQ,U),BYTES=10,START=1,TYPE=C
         LCHILD NAME=(THINGS,THINGDBD),INDEX=THINGKEY
         DBDGEN
         FINISH
         END
./ ADD NAME=TLOAD    0100-87029-87029-1041-00210-00210-00000-VBCMACS
         MACRO
&NAME    TLOAD &E,&TYPE
*              THIS ROUTINE WILL INSERT AN ENTRY (I.E., A MAP) INTO
*              THE TABLE (I.E., A MAPPING). THE RANGE OF THE MAPPING
*              ALWAYS SPANS ITS UNIVERSE. ADDITIONALLY, THE TABLE'S
*              ORDER (IN ASCENDING SEQUENCE BY RANGE VALUE) IS
*              ALWAYS MAINTAINED. THE ROUTINE USES R9 AS A LINK
*              REGISTER TO RETURN TO THE CALLER.
         SPACE
&NAME    DS    0H
         SPACE
         LCLC  &L
&L       SETC  'L''&E'
.*
         STM   R0,R15,$&SYSNDX.SO      SAVE REGISTERS
         MVC   $&SYSNDX.A(2*&L),&E     LOAD ARG WORK AREA
         AIF   ('&TYPE' EQ 'P').TL114
         SR    R15,R15
         IC    R15,$&SYSNDX.A+2*&L-1   SET ARG(U) TO ARG(U)+1
         LA    R15,1(R15)
         STC   R15,$&SYSNDX.A+2*&L-1
         AGO   .TL116
.TL114   ANOP
         AP    $&SYSNDX.A+&L.(&L),=PL1'1' SET ARG(U) TO ARG(U)+1
.TL116   ANOP
         L     R15,HARECBTB            R15 -> CURR TABLE ENTRY
         SPACE
$&SYSNDX EQU   *                       SEARCH TBL(I) UNTIL ...
*                                        ARG(L) .GE. TBL(I,L)
         SPACE
         AIF   ('&TYPE' EQ 'P').TL200
         CLC   $&SYSNDX.A(&L),0(R15)       AND
         AGO   .TL202
.TL200   ANOP
         CP    $&SYSNDX.A(&L),0(&L,R15)    AND
.TL202   ANOP
         BL    $&SYSNDX.0                ARG(L) .LT. TBL(I,U)
         AIF   ('&TYPE' EQ 'P').TL210
         CLC   $&SYSNDX.A(&L),&L.(R15)
         AGO   .TL212
.TL210   ANOP
         CP    $&SYSNDX.A(&L),&L.(&L,R15)
.TL212   ANOP
         BNL   $&SYSNDX.0
         B     $&SYSNDX.1              THEN EXIT
$&SYSNDX.0 EQU *                       OTHERWISE, ...
         LA    R15,2*&L+LMASK(R15)       INCREMENT I
         B     $&SYSNDX                  LOOP AGAIN
         SPACE
$&SYSNDX.1 EQU *                       ARG(L) .EQ. TBL(I,L)
         AIF   ('&TYPE' EQ 'P').TL220
         CLC   $&SYSNDX.A(&L),0(R15)       AND
         AGO   .TL222
.TL220   ANOP
         CP    $&SYSNDX.A(&L),0(&L,R15)    AND
.TL222   ANOP
         BNE   $&SYSNDX.3              ARG(U) .GE. TBL(I,U)
         AIF   ('&TYPE' EQ 'P').TL230
         CLC   $&SYSNDX.A+&L.(&L),&L.(R15)
         AGO   .TL232
.TL230   ANOP
         CP    $&SYSNDX.A+&L.(&L),&L.(&L,R15)
.TL232   ANOP
         BL    $&SYSNDX.2
*                                      .OR. ARG MASK ONTO TBL(I) MASK
         L     R14,8(R1)               -> MASKDSPL|ROWMASK|FLAGS
         A     R15,0(R14)              -> ENTRY(I)+MASKDSPL
         OC    2*&L.(1,R15),IMOFFSET(R14)
         S     R15,0(R14)              -> ENTRY(I)
         MVC   $&SYSNDX.A(&L),&L.(R15) SET ARG(L) TO TBL(I,U)
*                                      IF ARG(L) .EQ. ARG(U)
         AIF   ('&TYPE' EQ 'P').TL240
         CLC   $&SYSNDX.A(&L),$&SYSNDX.A+&L
         AGO   .TL242
.TL240   ANOP
         CP    $&SYSNDX.A(&L),$&SYSNDX.A+&L.(&L)
.TL242   ANOP
         BNL   $&SYSNDX.4                EXIT
         LA    R15,2*&L+LMASK(R15)     ELSE, INCREMENT I AND ...
         B     $&SYSNDX.1                LOOP AGAIN
         EJECT
$&SYSNDX.2 EQU *                       ARG(L) .EQ. TBL(I,L) AND
*                                      ARG(U) .LT. TBL(I,U)
*                                      INSERT ARG(U)|TBL(I,U)|MASK(I)
*                                      SET TBL(I,U) TO ARG(U)
         SPACE
         MVC   $&SYSNDX.I(&L),$&SYSNDX.A+&L
         MVC   $&SYSNDX.I+&L.(&L),&L.(R15)
         MVC   $&SYSNDX.I+2*&L.(LMASK),2*&L.(R15)
         MVC   &L.(&L,R15),$&SYSNDX.A+&L
         BAL   R9,$&SYSNDX.5           EXEC INSERT RTN
         B     $&SYSNDX.1              LOOP AGAIN
         SPACE
$&SYSNDX.3 EQU *                       ARG(L) .GT. TBL(I,L)
*                                      INSERT ARG(L)|TBL(I,U)|MASK(I)
*                                      SET TBL(I,U) TO ARG(L)
*                                      INCREMENT I
         SPACE
         MVC   $&SYSNDX.I(&L),$&SYSNDX.A
         MVC   $&SYSNDX.I+&L.(&L),&L.(R15)
         MVC   $&SYSNDX.I+2*&L.(LMASK),2*&L.(R15)
         MVC   &L.(&L,R15),$&SYSNDX.A
         BAL   R9,$&SYSNDX.5           EXEC INSERT RTN
         LA    R15,2*&L+LMASK(R15)     INCREMENT "I"
         B     $&SYSNDX.1              LOOP AGAIN
         SPACE
$&SYSNDX.4 EQU *                       EXIT
         LM    R0,R15,$&SYSNDX.SO      RESTORE REGISTERS
         BR    R9                      RETURN
         SPACE
$&SYSNDX.SO DS 16F                     OUTER LOOP REGISTER SAVE AREA
$&SYSNDX.A DS  2CL(&L)                 ARGUMENT PAIR (WORK)
$&SYSNDX.I DS  2CL(&L),CL(LMASK)       ENTRY TO BE INSERTED
.*
.*
.*
         EJECT
*              THIS ROUTINE WILL INSERT A NEW ENTRY INTO A TABLE. ALL
*              REGISTERS ARE PRESERVED EXCEPT FOR R15. R15 IS RE-
*              POSITIONED SUCH THAT IT POINTS TO THE SAME ARGUMENT
*              IN THE NEW TABLE AS IT DID IN THE OLD TABLE.
         SPACE
$&SYSNDX.5 DS  0H                      INSERT ROUTINE
         MVC   $&SYSNDX.F,0(R15)       SAVE "I" ARGS
         STM   R0,R14,$&SYSNDX.SI      SAVE REGISTERS
         MVC   $&SYSNDX.J,=H'0'        SET "J" TO 0
         SPACE
$&SYSNDX.6 EQU *
         LH    R14,$&SYSNDX.J          -> "J"
         MH    R14,=Y(2*&L+LMASK)
         A     R14,HARECBTB
         LH    R5,HARECB#              -> "N"
         BCTR  R5,R0
         MH    R5,=Y(2*&L+LMASK)
         A     R5,HARECBTB
         CR    R14,R5                  J .LE. N?
         BNH   $&SYSNDX.7                NO, BYPASS EXTEND PROC
         L     R4,HARECBTB             -> OLD TABLE
         S     R5,HARECBTB             = L'OLD TABLE
         LA    R5,2*&L+LMASK(R5)
         HAREALLC R4,R5,2*&L+LMASK     ALLOCATE NEW TABLE
         ST    R4,HARECBTB             -> NEW TABLE
         LH    R1,HARECB#              INCREMENT HARECB#
         LA    R1,1(R1)
         STH   R1,HARECB#              = # ENTRIES (NEW TABLE)
         SH    R5,=Y(2*&L+LMASK)       = DISPL. TO ENTRY(N)
         AR    R5,R4                   -> ENTRY(N)
         MVC   0(2*&L+LMASK,R5),$&SYSNDX.I MOVE IN NEW ENTRY
         B     $&SYSNDX.Q              RETURN
         SPACE
$&SYSNDX.7 EQU *
         AIF   ('&TYPE' EQ 'P').TL500
         CLC   $&SYSNDX.I(&L),0(R14)   INS(L) < TBL(I,L)
         AGO   .TL502
.TL500   ANOP
         CP    $&SYSNDX.I(&L),0(&L,R14) INS(L) < TBL(L)
.TL502   ANOP
         BL    $&SYSNDX.8                NO, BYPASS
         LH    R14,$&SYSNDX.J          INCREMENT "J"
         LA    R14,1(R14)
         STH   R14,$&SYSNDX.J
         B     $&SYSNDX.6              LOOP AGAIN
         SPACE
$&SYSNDX.8 EQU *
         L     R4,HARECBTB             ALLOCATE NEW TABLE
         LH    R5,HARECB#
         MH    R5,=Y(2*&L+LMASK)
         HAREALLC R4,R5,2*&L+LMASK
         ST    R4,HARECBTB             UPDATE TABLE ADDRESS
         LH    R4,HARECB#              UPDATE TABLE ENTRY COUNT
         LA    R4,1(R4)
         STH   R4,HARECB#
         EJECT
*                                      INSERT EXIT
         SPACE
         LH    R4,$&SYSNDX.J           R4 -> T(J)
         MH    R4,=Y(2*&L+LMASK)
         A     R4,HARECBTB
         SH    R5,=Y(2*&L+LMASK)       R5 -> T(K)
         LR    R6,R5                   R6 -> T(K-1)
         A     R5,HARECBTB
         SH    R6,=Y(2*&L+LMASK)
         A     R6,HARECBTB
         SPACE
*                                      DO 10 K=N,-1,J
$&SYSNDX.8A EQU *                   10 T(K-1)=T(K)
         CR    R4,R5                   IS K = J?
         BE    $&SYSNDX.8B               YES, EXIT LOOP
         MVC   0(2*&L+LMASK,R5),0(R6)  MOVE T(K-1) TO T(K)
         S     R5,=A(2*&L+LMASK)       DECREMENT K
         S     R6,=A(2*&L+LMASK)       DECREMENT (K-1)
         B     $&SYSNDX.8A             CONTINUE LOOPING
$&SYSNDX.8B EQU *                      MOVE ENTRY TO T(J)
         MVC   0(2*&L+LMASK,R4),$&SYSNDX.I
         SPACE
$&SYSNDX.Q EQU *                       INSERT ROUTINE EXIT
         L     R15,HARECBTB            REPOSITION "I" TO NEW TABLE
$&SYSNDX.QA EQU *                      IS T(I) IN OLD TABLE
         CLC   $&SYSNDX.F,0(R15)         = T(I) IN NEW TABLE?
         BE    $&SYSNDX.QB                 YES, EXIT LOOP
         LA    R15,2*&L+LMASK(R15)         NO
         B     $&SYSNDX.QA             CONTINUE LOOPING
$&SYSNDX.QB EQU *
         LM    R0,R14,$&SYSNDX.SI      RESTORE REGISTERS
         BR    R9                      RETURN
         SPACE
$&SYSNDX.SI DS 15F                     INNER LOOP REGISTER SAVE AREA
$&SYSNDX.J DS  H                       INDEX J (ORG. 0)
$&SYSNDX.F DS  CL(&L)                  T(I,L) BEFORE INSERTION
         MEND
./ ADD NAME=TRACE    0100-02135-02135-1228-00017-00017-00000-VBCMACS
         MACRO
&NAME    TRACE &DATA=NONE
.*             IF DATA =(R1) DATA  ALREADY IN REGISTER 1
.*             IF DATA = ADDRESS R 1 IS LOADED WITH DATA ADDRESS
.*             IF DATA NOT SPECIFIED MACRO CALLED BY OSGO MACRO
&NAME    LTR   COMMREG,COMMREG     TEST IF COMMON LOADED
         BZ    NTRC&SYSNDX         IF NOT BYPAS TRACE
         AIF   ('&DATA' EQ 'NONE').BYPAS
         AIF   ('&DATA'(1,1) EQ '(').REG1
         LA    1,&DATA             LOAD POINTER TO TRACE DATA
.REG1    ANOP
         OI    CATRACSW,CATRDATA   INDICATE NOT INITIAL ENTRY
.BYPAS   ANOP
         L     15,CATRACE          LOAD ADDRESS OF TRACE ROUTINE
         BALR  14,15               GO TO IT
NTRC&SYSNDX  DS 0H
         MEND
./ ADD NAME=TRANOLD  0100-02135-02135-1228-00020-00020-00000-VBCMACS
         MACRO
&NAME    TRANSECT
         LCLC &CSECT
         LCLC &DNAME
&CSECT   SETC '&SYSECT'
&DNAME   SETC '&NAME'
         AIF  (T'&NAME NE 'O').NAME
&DNAME   SETC 'TRANSECT'
.NAME    ANOP
&DNAME   DSECT
TRANENT  DS   0XL10
TRANCODE DS   CL8 .                    TRANSACTION NAME
TRANBYTE DS   XL1 .                    BYTE OFFSET MASK APPLIES TO
TRANMASK DS   XL1 .                    MASK BYTE
*
&CSECT   CSECT
*
*
*
         MEND
./ ADD NAME=TRANSECT 0100-02135-02135-1228-00020-00020-00000-VBCMACS
         MACRO
&NAME    TRANSECT
         LCLC &CSECT
         LCLC &DNAME
&CSECT   SETC '&SYSECT'
&DNAME   SETC '&NAME'
         AIF  (T'&NAME NE 'O').NAME
&DNAME   SETC 'TRANSECT'
.NAME    ANOP
&DNAME   DSECT
TRANENT  DS   0XL10
TRANCODE DS   CL8 .                    TRANSACTION NAME
TRANBYTE DS   XL1 .                    BYTE OFFSET MASK APPLIES TO
TRANMASK DS   XL1 .                    MASK BYTE
*
&CSECT   CSECT
*
*
*
         MEND
./ ADD NAME=TRAS     0100-02135-02135-1228-00058-00058-00000-VBCMACS
         MACRO
&N       TRAS  &TYPE,&ASCB=,&ASID=,&WORK=
.* TRAS SET ESTABLISHES ADDRESSABILITY TO THE MEMORY INDICATED
.*    BY THE ASID OR ASCB SPECIFIED.
.* TRAS RESET RE ESTABLISHES ADDRESSABILITY TO THE MEMORY INDICATED
.*    BY THE ASCB POINTER IN PSAAOLD, IE THE ORIGINAL MEMORY
.*
.* TYPE = SET OR RESET.
.* ASCB = REGISTER CONTAINING ASCB PTR FOR SET. OMIT FOR RESET.
.* ASID = REGISTER CONTAINING ASID NUMBER FOR SET. OMIT FOR RESET.
.* WORK = SINGLE WORK REG FOR RESET.
.*        LIST OF TWO WORK REGS FOR SET AND ASID
.*        OMIT FOR SET AND ASCB.
.*
         AIF   ('&SYSECT' NE 'IECIOSCN').ER6   CHECK FOR AUTHORIZATION
         AIF   ('&TYPE' EQ 'RESET').RESET   RESET REQUEST
         AIF   ('&TYPE' NE 'SET').ER2  TYPE NOT SET OR RESET
         AIF   ('&ASCB' EQ '' AND '&ASID' EQ '').ER3 NEITHER ASCB
.*                                     NOR ASID WAS GIVEN
         AIF   ('&ASCB' NE '' AND '&ASID' NE '').ER4  BOTH GIVEN
         AIF   ('&ASCB' EQ '').ASID    TRANSFER IF ASID WAS GIVEN
         USING ASCB,&ASCB
&N       LCTL  1,1,ASCBSTOR            LOAD STOR FOR NEW MEMORY
         MEXIT
.ASID    AIF   (N'&WORK LT 2).ER1
&N       L     &WORK(1),16             -> CVT
         USING CVTMAP,&WORK(1)
         L     &WORK(1),CVTASVT        -> ASVT
         USING ASVT,&WORK(1)
         LR    &WORK(2),&ASID          ASID NUMBER
         SLA   &WORK(2),2              TIMES 4 IS OFFSET IN ASVT
         L     &WORK(1),ASVTENTY-4(&WORK(2))  -> ASCB
         USING ASCB,&WORK(1)
         LCTL  1,1,ASCBSTOR            LOAD STOR FOR NEW MEMORY
         DROP  &WORK(1)
         MEXIT
.RESET   AIF   (N'&WORK LT 1).ER1      NEED ONE WORK REG
         AIF   ('&ASCB' NE '' OR '&ASID' NE '').ER5 NEITHER MAY BE
.*                                     SPECIFIED FOR THE RESET OPTION
         USING PSA,0
&N       L     &WORK(1),PSAAOLD        -> ASCB IN CONTROL BEFORE SET
         USING ASCB,&WORK(1)
         LCTL  1,1,ASCBSTOR            RESTORE STOR TO ORIGINAL MEMORY
         DROP  &WORK(1)
         MEXIT
.ER1     MNOTE 8,'INSUFFICIENT WORK REGISTERS'
         MEXIT
.ER2     MNOTE 8,'TYPE NOT SET OR RESET'
         MEXIT
.ER3     MNOTE 8,'TYPE=SET && NEITHER ASCB NOR ASID GIVEN'
         MEXIT
.ER4     MNOTE 8,'BOTH ASCB && ASID GIVEN'
         MEXIT
.ER5     MNOTE 8,'TYPE=RESET && ASID OR ASCB GIVEN'
         MEXIT
.ER6     MNOTE 8,'NOT AUTHORIZED TO USE THIS MACRO'
         MEXIT
         MEND
./ ADD NAME=TRUPCASE 0100-02135-02135-1228-00014-00014-00000-VBCMACS
         MACRO
&LBL     TRUPCASE
         AIF  (T'&LBL EQ 'O').NOLAB
&LBL     DC   256AL1(*-&LBL)     GENERATE IDENTITY TABLE
         ORG  &LBL+X'81'         ORG TO LOWERCASE A
         DC   C'ABCDEFGHI'       81 - 89 TO UPPERCASE
         ORG  &LBL+X'91'         ORG TO LOWERCASE J
         DC   C'JKLMNOPQR'       91 - 99 TO UPPERCASE
         ORG  &LBL+X'A2'         ORG TO LOWERCASE S
         DC   C'STUVWXYZ'        A2 - A9 TO UPPERCASE
         ORG      ,              RESET ORGIN
         MEXIT
.NOLAB   MNOTE 2,'ERROR - NO LABEL ON MACRO INVOCATION STMT'
         MEND
./ ADD NAME=TSABEND  0100-02135-02135-1228-00046-00046-00000-VBCMACS
         MACRO
&LABEL   TSABEND  &A
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *.
.*                                                                   *.
.*                                                                   *.
.*                                                                   *.
.*RELEASE 23 DELETIONS                                               *.
.*                                                                   *.
.*RELEASE 22 DELETIONS                                               *.
.*                                                                   *.
.*RELEASE 21 DELETIONS                                               *.
.*                                                                   *.
.*STATUS - CHANGE LEVEL 000                                          *.
.*                                                                   *.
.*NAME - TSABEND                                                     *.
.*                                                                   *.
.*FUNCTION - THE TSABEND MACRO IS AN SVC CALL THAT ALLOWS THE TIOC   *.
.*   'ALERT TCAM' ROUTINE TO SEARCH FOR TSO USERS.  ONCE A TSO USER  *.
.*   IS FOUND (VIA TCAM CONTROL BLOCKS ONLY) A CANNED MESSAGE IS SENT*.
.*   TO THE USER AND TERMINAL USER WILL BE DISCONNECTED FROM THE     *.
.*   SYSTEM.                                                         *.
.*                                                                   *.
.*                                                                   *.
.*       THE STANDARD FORM OF THE EXPANSION IS BELOW...              *.
.*                                                                   *.
.*       CNOP  0,4                                                   *.
.*&LABEL LA    0,15                     LOAD ENTRY CODE              *.
.*       SLL   0,24                     PUT ENT CODE IN HI-ORDER BYTE*.
.*       SR    1,1                      ZERO PARAMETER REG           *.
.*       SVC   94                       ISSUE SVC                    *.
.*                                                                   *.
.*                                                                   *.
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *.
         AIF   ('&A' NE '').ERROR
         CNOP  0,4
*
&LABEL   LA    0,15 .                   LOAD ENTRY CODE
         SLL   0,24 .                   PUT ENT CODE IN HI-ORDER BYTE
         SR    1,1 .                    ZERO PARAMETER REG
         SVC   94 .                     ISSUE SVC
*
         MEXIT
.ERROR   ANOP
         MNOTE 'INVALID OPERAND'
         MEXIT
         MEND
./ ADD NAME=TSEXTRA  0100-02135-02135-1228-00029-00029-00000-VBCMACS
         MACRO
         TSEXTRA
EXRECS   DSECT                         EXTRACT RECORD DESCIPTIONS
*
EXHEAD   DS    0CL14                   EXTRACT RECORD HEADER
RECTYPE  DS    CL1                     TYPE OF RECORD
STEP     EQU   C'S'                    STEP RECORD
LOGOFF   EQU   C'L'                    LOGOFF RECORD
IPL      EQU   C'I'                    IPL RECORD
START    EQU   C'A'                    TS START RECORD
STOP     EQU   C'B'                    TS STOP RECORD
*
         DS    CL1                     SPACE
USERID   DS    CL6
LOGOFFDT DS    PL3                     YYDDDF
LOGOFFTM DS    PL3                     MMM.MF
*
*
EXLOGOFF DS    0CL86                   LOGOFF RECORD
LOGONDT  DS    PL3                     YYDDDF
LOGONTM  DS    PL3                     MMMM.MF
TPUTS    DS    PL5
TGETS    DS    PL5
SESSCPU  DS    PL3                     MMM.MMF
SYSOUT   DS    XL5                     SYSOUT CLASSES
ACCTLEN  DS    XL1                     ACCOUNTING FIELD LENGTH
ACCOUNT  DS    CL20                    ACCOUNTING FIELD
         DS    CL41                    FILLER
         MEND
./ ADD NAME=TSOLOG   0100-02135-02135-1228-00033-00033-00000-VBCMACS
         MACRO
&NAME    TSOLOG   &BLK
         GBLA  &IEDQZE(64)
         GBLB  &IEDQZA(64)
.*               BC/BS VERSION OF LOG -- MARCH 30, 1975
         SPACE
         AIF   (&IEDQZA(1) OR &IEDQZA(2)).OP
         MNOTE 12,'***  IHB070  SEQUENCE ERROR-MUST FOLLOW INHDR, INBUF*
               , INMSG, OUTHDR, OUTBUF OR OUTMSG MACRO'
         AGO   .MEND
.OP      AIF   ('&BLK' NE '').CHECK
         MNOTE 12,'***  IHB004  REQUIRED OPERAND NOT SPECIFIED'
         AGO   .MEND
.CHECK   AIF   (NOT &IEDQZA(5)).SEG
         IEDQVCON 5,IEDQBY
.PARM    AIF   (&IEDQZA(19)).SKP
         ORG   IEDBZ
         DC    V(IEDQBZ)
         ORG
&IEDQZA(19)  SETB  1
.SKP     ANOP
&NAME    DC    AL1(&IEDQZE(5)+3),AL1(8),AL2(0),A(&BLK)
         AIF   (NOT &IEDQZA(1)).MEND
&IEDQZA(18) SETB 1
         AGO   .MEND
.SEG     IEDQVCON 39,TSOLOG
         CNOP  0,4
&NAME    BAL   1,*+8
         DC    AL1(&IEDQZE(39)),AL3(&BLK)
         L     15,IEDUI .               TO LOG SEGMENT RTN
         BALR  14,15
.MEND    SPACE 2
         MEND
./ ADD NAME=TYPES    0100-02135-02135-1228-00012-00012-00000-VBCMACS
         PRINT  NOGEN
         DBD    NAME=TYPESDBD,ACCESS=(HIDAM,VSAM)
         DATASET DD1=TYPES,DEVICE=3380,SIZE=4096
         SEGM   NAME=TYPES,PARENT=0,BYTES=(86,41),FREQ=30
         FIELD  NAME=(DNAME,SEQ,U),BYTES=15,START=3,TYPE=C
         FIELD  NAME=DABBRE,BYTES=3,START=18,TYPE=C
         LCHILD NAME=(TYPESINS,TYPESXXX),PTR=INDX
         LCHILD NAME=(XABBRE,ABBREDBD),PTR=INDX
         XDFLD  NAME=ABBRE,SRCH=DABBRE
         DBDGEN
         FINISH
         END
./ ADD NAME=TYPESXXX 0100-02135-02135-1228-00009-00009-00000-VBCMACS
         PRINT  NOGEN
         DBD    NAME=TYPESXXX,ACCESS=(INDEX,VSAM,NOPROT)
         DATASET DD1=TYPESIND,DEVICE=3380
         SEGM   NAME=TYPESINS,PARENT=0,BYTES=15
         FIELD  NAME=(TYPESINF,SEQ,U),BYTES=15,START=1,TYPE=C
         LCHILD NAME=(TYPES,TYPESDBD),INDEX=DNAME
         DBDGEN
         FINISH
         END
./ ADD NAME=UADSREC  0100-02135-02135-1228-00104-00104-00000-VBCMACS
         MACRO
&NAME    UADSREC &DSECT=YES
         LCLC  &NAM,&CSECT
&NAM     SETC  'UADSREC'               DEFAULT RECORD NAME
&CSECT   SETC  '&SYSECT'               SAVE CSECT NAME
         AIF   (T'&NAME EQ 'O').NONAME
&NAM     SETC  '&NAME'                 USE NAME ENTERED
.NONAME  ANOP
         AIF   ('&DSECT' EQ 'YES').SECT
&NAM     DS    0XL800                  UADS USER RECORD
         AGO   .NOSECT
.SECT    ANOP
*
*    SYS1.UADS RECORD DEFINITION
*
&NAM     DSECT ,                       UADS USER RECORD
.NOSECT  ANOP
RECLEN   DS    XL2                     RECORD LENGTH
         DS    XL2                     UNKNOWN
MEMNAME  DS    0CL8                    UADS MEMBER NME
USERID   DS    CL6                     USERID
         DS    CL2
         DS    XL4                     UNKNOWN
SPECIALS DS    XL1                     MOUNT/JCL/ACCT/OPER
*
MOUNT    EQU   X'10'
JCL      EQU   X'20'
ACCT     EQU   X'40'
OPER     EQU   X'80'
*
         DS    XL1                     UNKNOWN
USERDATA DS    0XL2                    PCF ACCOUNTING FIELDS
PCFCMD   DS    XL1                     COMMAND & DSN AUTHORITY
PCFSMF   DS    XL1                     PCF SMF INDICATOR (X'80')
$PROFILE DS    XL4                     OFFSET TO USER PROFILE
$1POB    DS    XL4                     OFFSET 1ST PASSWORD OFFSET BLOCK
         DS    XL772                   REST OF RECORD
*
*    DEFINITION OF THE PASSWORD OFFSET BLOCK
*
POBDEF   DSECT
$NPOB    DS    0XL4                    OFFSET TO NEXT POB
POBFLG   DS    XL1
         DS    XL3
$AOB     DS    XL4                     OFFSET TO ASSOCIATED ACCOUNT OB
$PDB     DS    XL4                     OFFSET TO PASSWORD DATA BLOCK
*
*    DEFINITION OF PASSWORD DATA BLOCK
*
PDBDEF   DSECT
PDBDATA  DS    0XL4                    PASSWORD ACCOUNTING INFO
PDBREF   DS    XL1                     # REFERENCES TO THIS BLOCK
         DS    XL3
PASSWORD DS    CL8                     PASSWORD
*
*     DEFINITION OF ACCOUNT OFFSET BLOCK
*
AOBDEF   DSECT
$NAOB    DS    0XL4                    OFFSET TO NEXT AOB
AFLG     DS    XL1
         DS    XL3
$PROB    DS    XL4                     OFFSET TO ASSOCIATED PROC OB
$ADB     DS    XL4                     OFFSET TO ACCOUNT DATA BLOCK
*
*    DEFINITION OF ACCOUNT DATA BLOCK
*
ADBDEF   DSECT
ADBDATA  DS    0XL4                    ACCOUNT ACCOUNTING INFO
ADBREF   DS    XL1                     # REFERENCES TO THIS BLOCK
         DS    XL3
ADBDDATA DS    XL40                    DRIVER DATA FIELD
ADBALEN  DS    XL1                     LENGTH OF ACCOUNTING FIELD
ACCOUNT  DS    CL40                    ACCOUNTING FIELD
*
*        DEFINITION OF PROC OFFSET BLOCK
*
PROBDEF  DSECT
$NPROB   DS    0XL4                    OFFSET TO NEXT PROB
PROBFLG  DS    XL1
         DS    XL3
         DS    XL4                     RESERVED
$PRDB    DS    XL4                     OFFSET TO PROC DATA BLOCK
*
*    DEFINITION OF PROC DATA BLOCK
*
PRDBDEF  DSECT
PRDBDATA DS    0XL4                    PROC ACCOUNTING INFO
PRDBREF  DS    XL1                     # REFERENCES TO THIS BLOCK
         DS    XL3
PROCNAME DS    CL8                     PROC NAME
         DS    XL2                     RESERVED
REGION   DS    XL2                     REGION SIZE 1K BLOCKS
UNITNAME DS    CL8                     UNIT NAME
*
*     PROFILE DATA DEFINITION
*
PROFDEF  DSECT
PROFDATA DS    XL16                    USER PROFILE DATA
PREFIX   DS    CL7                     DSN PREFIX NAME
*
*
*
&CSECT   CSECT
         MEND
./ ADD NAME=UNLNK    0100-02135-02135-1228-00022-00022-00000-VBCMACS
         MACRO
&NAME    UNLNK &RETCDE
         GBLC  &GM
         AIF   ('&GM' EQ '0').NOFREE
&NAME    LR    1,13                   ADDRESS OF GOTTEN STORAGE
         L     13,4(13)               HIGH SAVE AREA
         LA    0,&GM                  LENGTH OF GOTTEN AREA
         FREEMAIN R,LV=(0),A=(1)
         AGO   .END
.NOFREE  ANOP
&NAME    L     13,4(13)                GET HIGH SAVE AREA ADDRESS
.END     ANOP
         LM    14,12,12(13)           RESTORE REGS
         AIF   (T'&RETCDE EQ 'O').NORET
         AIF   ('&RETCDE' NE '0').NZERO
         SR    15,15                  CLEAR REG 15
         AGO   .NORET
.NZERO   ANOP
         LA    15,&RETCDE             RETURN CODE
.NORET   ANOP
         BR    14                      RETURN TO CALLER
         MEND
./ ADD NAME=VTOCREC  0100-02135-02135-1228-00035-00035-00000-VBCMACS
         MACRO
&NAME    VTOCREC &DSECT=YES
         LCLC  &CSECT,&N,&D
&D       SETC  'DC'                    DC DATA DEFINITIONS
&N       SETC  'VREC'                  DEFAULT NAME
         AIF   (T'&NAME EQ 'O').NONAME
&N       SETC  '&NAME'
.NONAME  ANOP
         AIF   ('&DSECT' EQ 'NO').NODSECT
&CSECT   SETC  '&SYSECT'
&D       SETC  'DS'                    DS DATA DEFINITIONS
&N.D     DSECT
.NODSECT ANOP
&N       DS    0XL80
DSN      &D    CL44' '                 DATA SET NAME
VOL      &D    CL6' '                  VOLSER
HAS      &D    XL2'00'                 TRKS ALLOCATED
USED     &D    XL2'00'                 TRKS USED
UNUSED   &D    XL2'00'                 TRKS UNUSED
DSORG    &D    CL2' '                  DATA SET ORG
ALLOCTYP &D    XL1'00'                 ALLOCATION TYPE
EXTS     &D    XL1'00'                 NUMBER OF EXTENTS
BLKSIZE  &D    XL2'00'                 BLKSIZE
LRECL    &D    XL2'00'                 LRECL
RECFM    &D    XL1'00'                 RECFM
INDIC    &D    XL1'00'                 DS INDIC. X'10' FOR PASSSWORD
         &D    XL1'00'                 FILLER
CDATE    &D    XL3'00'                 CREATION DATE YDD BIN
         &D    XL12'00'                FILLER
         AIF   ('&DSECT' EQ 'NO').NOD1
*
*
&CSECT   CSECT
.NOD1    ANOP
         MEND
./ ADD NAME=YX000001 0100-02135-02135-1228-00165-00165-00000-VBCMACS
         MACRO
&TAG     YX000001 &ENTRY,&PCTYPE=STACKING,&DSECT=NO
.*   R13 must point to a savearea if &PCTYPE=BASIC
.*   R14, R15, R0, R1 will be corrupted by the macro
         GBLB  &LISTDEF
         AIF   ('&DSECT' EQ 'YES').DS0001
         LCLA  &IX
&IX      SETA  &SYSNDX
         PUSH  USING
.DS0001  AIF   (&LISTDEF).LISTOK
@YX00DS  DSECT
@YX0P1   DS    A                       control word
@YX0CS   DS    CL8                     CSECT name
@YX0ASI  DS    XL2                     local ASID
@YX0VER  DS    X                       macro version
@YX0TYP  DS    C                       call type
@YX0JPSN DS   0CL24                    job & step names
@YX0JN   DS    CL8                     job name
@YX0PSN  DS   0XL8                     procstep name
@YX0CIR  DS    X                       CICS release
         DS    XL3                    *reserved*
@YX0TRN  DS    CL4                     transaction id
@YX0SN   DS    CL8                     step name
@YX0PGN  DS    CL8                     program name
         DS    0F                     *force fw alignment*
@YX0P2L  EQU   *-@YX0CS
@YX0RSA  DS    16F
@YX0P1L  EQU   *-@YX0P1
.*
.* 00000000  00000000 E8E7F0F5 D7F0D4F0 002C00D6  *....YX05P0M0...O*
.* 00000010  E8C4F1F2 C4E3E340 E8C4F1F2 E2E3F0F1  *YD12DTT YD12ST01*
.* 00000020  E8C4F1F2 E2E3F0F3 C4C6C8E2 C9D74040  *YD12ST03DFHSIP  *
.*
.* 00000000  00000000 E8E7F0F5 D7F0D4F0 002C00D6  *....YX05P0M0...O*
.* 00000010  E8C4F1F2 C4E3E340 41000000 C6D2C4C3  *YD12DTT ....FKDC*
.* 00000020  E8C4F1F2 E2E3F0F3 C6D2F0F1 D7F1D4F5  *YD12ST03FK01P1M5*
.*
.*   It would also be nice to have the name of the load module
.*    containing the call to the YX utility - but finding that
.*    would certainly involve too much overhead to do as part of
.*    this macro ...
.*   we also need some way to know whether the call is a new-style
.*    one or an old-style one
&LISTDEF SETB  1
         AIF   ('&DSECT' NE 'YES').NOTDS2
         MEXIT
.NOTDS2  ANOP
&SYSECT  CSECT
.LISTOK  ANOP
         L     14,16(0,0)              R14 -> CVT
         ICM   14,15,204(14)           R14 = CVTUSER
         BZ    @YX&IX.9
         ICM   14,15,4(14)             R14 -> CSADS3
         BZ    @YX&IX.9
         ICM   14,15,0(14)             R14 -> YX00 parm slots
         BZ    @YX&IX.9
@YX&IX.2 L     1,0(,14)                R1 -> first slot
         XR    0,0
@YX&IX.3 LR    15,1
         CS    1,0,0(1)
         BE    @YX&IX.5                branch if slot not in use
         LA    1,@YX0P1L(,15)          R1 -> next slot
         C     1,4(,14)                R1 -> last slot?
         BNL   @YX&IX.2                yes - start over
         B     @YX&IX.3                no - continue
         USING @YX00DS,1
@YX&IX.5 DS    0H
         AIF   ('&PCTYPE' NE 'BASIC').ST100
         STM   14,12,12(13)            save caller's regs
.ST100   ANOP
         MVC   @YX0CS,=CL8'&ENTRY'     set ENTRY name
         L     15,544                  R15 -> ASCB
         MVC   @YX0ASI,36(15)          set ASID
         L     15,540                  R15 -> TCB
         L     14,12(,15)              R14 -> TIOT
         MVC   @YX0JPSN,0(14)          set job & step names
         L     14,208(,15)             R14 -> TCB extn        CICS
         L     15,180(,15)             R15 -> JSCB
         MVC   @YX0PGN,360(15)         set program name JSCBPGMN
.*
         CLC   =C'DFHSIP',@YX0PGN      CICS?
         BNE   @YX&IX.8
         L     14,20(,14)              R14 -> AFCB            CICS
         L     14,8(,14)               R14 -> CICS CSA        CICS
.*  CSA  +X'9F' = CSACIREL
         MVC   @YX0CIR,159(14)         set CICS release
.*
.*  CSA  +X'4C' -> UTCA (V21 V33 V41)
.*                 UTCA +X'00' -> STCA (V21 V33 V41)
.*
         L     15,76(,14)              R15 -> UTCA
         L     15,0(,15)               R15 -> STCA
.*
         CLI   159(14),X'33'           CICS 3.3?
         BE    @YX033&IX
         CLI   159(14),X'41'           CICS 4.1?
         BE    @YX041&IX
         CLI   159(14),X'21'           CICS 2.1?
         BE    @YX021&IX
.*  if we fall thru here, maybe we should just treat it as if it's V41
.*   so we could just let this run unless we need to change it
         B     @YX&IX.8
@YX021&IX DS   0H
         LR    14,15                   R14 -> V21 STCA
.*  STCA +X'14' -> PCT entry (V21)
.*  STCA +X'34' -> PPT entry (V21)
         L     15,20(,14)
         MVC   @YX0TRN,0(15)           PCTTI transaction id from PCTE
         L     15,52(,14)
         MVC   @YX0PGN,0(15)           PPTPI program id from PPTE
         B     @YX&IX.8
@YX033&IX DS   0H
         LR    14,15                   R14 -> V33 STCA
.*  STCA +X'1C' -> PCT entry (V33)
.*  STCA +X'3C' -> PPT entry (V33)
         L     15,28(,14)
         MVC   @YX0TRN,0(15)           PCTTI transaction id from PCTE
         L     15,60(,14)
         MVC   @YX0PGN,0(15)           PPTPI program id from PPTE
         B     @YX&IX.8
@YX041&IX DS   0H
         LR    14,15                   R14 -> V41 STCA
.*  STCA +X'1C' -> PCT entry (V41) }  according to the doc but it's
.*                                      not there in a dump
.*  STCA +X'B0' = TCAKCTTI "Assigned transaction id"
.*  STCA +X'C4' = TCAKCOID "ID which originated task"
         MVC   @YX0TRN,176(14)         transaction id from TCAKCTTI
.*       MVC   @YX0PGN,???             program id from ???
.*
.*  STCA +X'??' -> PPT entry (V41)
.*
         B     @YX&IX.8
.*
.*
.*
@YX&IX.8 DS    0H
         POP   USING
         AIF   ('&PCTYPE' NE 'BASIC').ST200
         ESAR  2                       get secondary ASID
         ST    2,16(,13)               save secondary ASID
         L     2,16(,0)                R2 -> CVT
         ICM   2,15,204(2)             R2 = CVTUSER
         BZ    @YX&IX.9                No CVTUSER area
         ICM   2,15,0(2)               R2 -> GHIVXSFT
         BZ    @YX&IX.9                No GHIVXSFT
         ICM   2,15,0(2)               get LX/EX for tracking routine
         BZ    @YX&IX.9                tracking routine unavailable
         PC    0(2)                    PC to tracking routine
@YX&IX.9 L     2,16(,13)               get secondary ASID
         SSAR  2                       restore secondary ASID
         LM    2,12,28(13)             restore caller's R2 - R12
         L     14,12(,13)              restore caller's R14
         MEXIT
.ST200   ANOP
         L     14,16(,0)               R14 -> CVT
         ICM   14,15,204(14)           R14 = CVTUSER
         BZ    @YX&IX.9                No CVTUSER area
         ICM   14,15,0(14)             R14 -> GHIVXSFT
         BZ    @YX&IX.9                No GHIVXSFT
         ICM   14,15,0(14)             get LX/EX for tracking routine
         BZ    @YX&IX.9                tracking routine unavailable
         PC    0(14)                   PC to tracking routine
@YX&IX.9 DS    0H
         MEND
         END
