         TITLE '***** LOAD MODULE VERIFICATION *****'
LDMDVER  SVLNK R3,R4
         PRINT NOGEN
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*              LOAD MODULE VERIFICATION PROGRAM
*
*  THIS PROGRAM CREATES A MODULE CROSS-REFERENCE FILE WHICH CAN BE
* USED TO DETECT CHANGES IN A LOAD MODULE INCLUDING BOTH SIZE AND
* REFERENCE CHANGES. THE OUTPUT FILE CONTAINS ONE RECORD PER CSECT
* WITH ITS LENGTH, ONE RECORD FOR EACH LABEL REFERENCE WITHIN THE CSECT
* AND ONE RECORD FOR EACH EXTERNAL SYMBOL REFERENCE. THE FILE IS
* SORTED IN RECORD TYPE, CSECT NAME, LABEL/EXTERNAL REFERENCE ORDER
* BEFORE COMPARING IT TO THE FORMER LOAD MODULE. PURPOSE IS TO PERMIT
* QUICK DETECTION OF CHANGES MADE TO COMPLICATED MODULES SUCH AS
* THOSE USED IN THE TELEPROCESSING SYSTEM.
*
*
*  DD CARDS USED:  SYSLIB   - ALLOCATES THE PDS CONTAINING THE MODULES
*                             TO BE CROSS-REFERENCED.RECFM=U IS HARD-
*                             CODED.
*                   OUTPUT1 - CROSS-REFERENCE OUTPUT FILE. RECFM=FB,
*                             LRECL=80 IS HARD-CODED.
*
*   PARM FIELD OF EXEC STATEMENT MUST CONTAIN THE NAME OF THE LOAD
*                  MODULE TO BE PROCESSED.
*
* AUTHOR R THORNTON - DEC 1981
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*
****************************************************************
* GET MEMBER NAME FROM PARM FIELD, GET STORAGE FOR SYMBOL      *
* TABLE AND RLD TABLE, OPEN FILES, ISSUE BLDL FOR MODULE.      *
****************************************************************
*
         L     R1,0(R1)                GET PARM ADDRESS
         CLC   0(2,R1),=H'1'           ANY PARM?
         BL    MISSPARM                NO
         CLC   0(2,R1),=H'8'           OVER 8 BYTES?
         BH    BADPARM                 YES
         IC    R2,1(R1)                GET PARM LENGTH
         BCTR  R2,0                    COMPUTE LENGTH CODE
         EX    R2,MOVPARM              MOVE TO BLDL LIST
         B     OPENS                   BRANCH AROUND EXECECUTED MOVE
MOVPARM  MVC   MEMBER(1),2(R1)         EXECUTED MOVE
OPENS    OPEN  (OUTPUT1,OUTPUT,SYSLIB) OPEN FILES
         GETMAIN R,LV=32768            GET BUFFER STORAGE
         ST    R1,BUFAD                SAVE BUFFER ADDRESS
         GETMAIN R,LV=38000            GET SYMBOL TABLE STORAGE
         ST    R1,SYMTBAD              SAVE SYMBOL TABLE ADDRESS
         A     R1,=F'38000'            COMPUTE END ADDR
         ST    R1,ENDSYM               STORE TBL END ADDR
         GETMAIN R,LV=320000           GET RLD TABLE STORAGE
         ST    R1,RLDTBL               SAVE RLD TABLE ADDRESS
         A     R1,=F'320000'           COMPUTE END ADDR
         ST    R1,ENDRLD               STORE TBL END ADDR
         L     R1,SYMTBAD              GET SYMBOL TABLE ADDRESS
         ST    R1,CURRSYM              SET CURRENT TABLE ADDRESS
         L     R1,RLDTBL               GET CURRENT RLD TABLE ADDRESS
         ST    R1,CURRLD               SET CURRENT ADDRESS
         BLDL  SYSLIB,BLDLIST          ISSUE BLDL FOR MEMBER
         ST    R15,BLDL15              SAVE RETURN CODE
         LTR   R15,R15                 WAS IT FOUND?
         BNZ   MISSMEM                 NO
         MVI   CCAT,0                  INSURE TTR0
         POINT SYSLIB,TTRMOD           POINT TO 1ST BLOCK OF MODULE
         ST    R15,POINT15             SAVE RETURN CODE
*
****************************************************************
* MAINLINE PROCESSING FOR THE LOAD MODULE. THE DIRECTORY ENTRY *
* AND TEXT ARE PROCESSED.                                      *
****************************************************************
*
MAINLINE L     R6,BUFAD                GET BUFFER ADDRESS
         READ  DECB,SF,SYSLIB,(6),'S'  READ BLOCK FROM MEMBER
         CHECK DECB                    AWAIT COMPLETION
         CLI   0(R6),X'20'             CESD RECORD
         BNE   TESTOTHR                NO
         BAL   R9,CESDREC              PROCESS CESD RECORDS
         B     MAINLINE                GO READ AGAIN
TESTOTHR LA    R9,CNTLRECS             ASSUME CONTROL RECORD
         CLI   0(R6),1                 IT IS CONTROL
         BE    PERFORM                 YES
         CLI   0(R6),5                 IS IT CONTROL
         BE    PERFORM                 YES
         CLI   0(R6),13                IS IT CONTROL
         BE    PERFORM                 YES
         LA    R9,RLDRECS              ASSUME RLD RECORD
         CLI   0(R6),2                 IS IT RLD
         BE    PERFORM                 YES
         CLI   0(R6),6                 IS IT RLD
         BE    PERFORM                 YES
         CLI   0(R6),14                IS IT RLD
         BE    PERFORM                 YES
         LA    R9,CTRLRECS             ASSUME CONTROL AND RLD
         CLI   0(R6),3                 IS IT CTL AND RLD
         BE    PERFORM                 YES
         CLI   0(R6),7                 IS IT CTL AND RLD
         BE    PERFORM                 YES
         CLI   0(R6),15                IS IT CTL AND RLD
         BE    PERFORM                 YES
         B     MAINLINE                NONE OF THESE, SKIP
PERFORM  BALR  R9,R9                   PERFORM APPROPRIATE ROUTINE
         TM    PROCESS,X'40'           MODULE PROCESSING DONE
         BZ    MAINLINE                NO, GO READ AGAIN
         B     PRNTFMT                 FORMAT AND WRITE OUTPUT
*
****************************************************************
* PROCESS LOAD MODULE CONTROL RECORDS. THESE RECORDS PRECEDE   *
* TEXT RECORDS, WHICH ARE READ AND BYPASSED.                   *
****************************************************************
*
CNTLRECS TM    0(R6),X'08'             RECORD PRECEDES LAST RECORD OF M
         BZ    CTRDPAST                NO
         OI    PROCESS,X'40'           YES, SHOW PROCESSING COMPLETE
         B     CTXIT                   AND EXIT
CTRDPAST L     R6,BUFAD                POINT TO BUFFER
         READ  DECB,SF,,(6),MF=E       READ FOLLOWING TEXT RECORD
         CHECK DECB                    AWAIT COMPLETION
CTXIT    BR    R9                      EXIT
*
****************************************************************
* PROCESS RLD RECORDS. A TABLE OF RLD DATA IS BUILT.
****************************************************************
*
RLDRECS  TM    0(R6),X'08'             LAST RECORD OF MODULE
         BZ    RLSV9                   NO
         OI    PROCESS,X'40'           SHOW PROCESSING COMPLETE
RLSV9    ST    R9,RL9                  SAVE RETURN ADDR
         LH    R8,6(R6)                NBR BYTES OF RLD DATA
         LA    R6,16(R6)               @ 1ST BYTE OF RLD DATA
         AR    R8,R6                   END OF RLD DATA ADDR
         L     R7,CURRLD               @ NEXT RLD TBL ENTRY
         USING RLDTBLD,R7
         LH    R10,0(R6)               RELOCATION POINTER
         LH    R11,2(R6)               POSITION POINTER
         LA    R6,4(R6)                PASS POINTERS
RLDNXT   C     R7,ENDRLD               END OF RLD TBL
         BE    RLDFULL                 YES, ERROR
         STH   R10,RLDRP               SAVE RELOC PTR
         STH   R11,RLDPP               POS PTR
         PACK  RLDTYPE,0(1,R6)         INVERT FLAG BYTE
         NI    RLDTYPE,X'0F'           CLEAR HI-ORDER
         CLI   RLDTYPE,9               UNRESOLVED
         BNE   RLADMV                  NO
         MVI   RLDTYPE,8               YES, USE PREFERRED VALUE
RLADMV   SR    R1,R1                   CLEAR WORK REG
         ICM   R1,7,1(R6)              PICK UP ADDRESS
         STCM  R1,7,RLDADDR            AND SAVE IT
         XC    RLDTONAM(9),RLDTONAM    CLEAR
         LH    R15,RLDRP               GET RELOCATION POINTER
         BCTR  R15,R0                  DEDUCT 1
         LTR   R15,R15                 TEST DIFFERENCE
         BM    RLNXT                   NEG, ERROR
         MH    R15,SYMLEN              TIMES SYM TBL ENTRY LENG
         A     R15,SYMTBAD             @ ESD SYMBOL TBL ENTRY
         C     R15,CURRSYM             PAST END OF TABLE
         BH    RLNXT                   YES, ERROR
         USING SYMTBL,R15
         MVC   RLDTONAM,EXTSYM         ESD SYMBOL TO RLD TBL ENTRY
         CLC   RLDPP,RLDRP             A-TYPE ADCON?
         BE    RLCKUNR                 YES, NOT EXTERNALLY REF'D
         OI    SYMIND,X'80'            SHOW SYMBOL REFERENCED
RLCKUNR  CLI   RLDTYPE,8               IS IT UNRESOLVED?
         BNE   RLGFM                   NO, RESOLVED
         OI    SYMIND,X'01'            YES, SHOW UNRESOLVED
RLGFM    XC    RLDFMNAM,RLDFMNAM       CLEAR REFERENCED FROM NAME
         LH    R15,RLDPP               GET POSITION POINTER
         BCTR  R15,0                   RELATIVIZE POINTER
         LTR   R15,R15                 VALID POINTER?
         BM    RLNXT                   NO, SKIP IT
         MH    R15,SYMLEN              TIMES SYMTBL ENTRY SIZE
         A     R15,SYMTBAD             PLUS TABLE START ADDRESS
         C     R15,CURRSYM             PAST END OF SYMTBL?
         BNL   RLNXT                   YES, SKIP IT
         MVC   RLDFMNAM,EXTSYM         SET REFERENCED FROM NAME
         DROP  R15
RLNXT    LA    R7,L'RLDENT(R7)         TO NEXT TBL ENTRY
         TM    0(R6),1                 NEXT ITEM HAS REL AND POS PTRS
         BO    RLSAME                  NO
         LH    R10,4(R6)               PICK UP NEW REL PTR
         LH    R11,6(R6)               PICK UP NEW POS PTR
         LA    R6,4(R6)                STEP OVER 4 BYTES
RLSAME   LA    R6,4(R6)                TO NEXT RLD ITEM
         CR    R6,R8                   END OF RLD DATA
         BL    RLDNXT                  NO
         ST    R7,CURRLD               SET NEW CURRENT ADDRESS
         L     R9,RL9                  GET RETURN ADDR
         BR    R9                      EXIT
         DROP  R7
*
****************************************************************
* PROCESS CONTROL AND RLD RECORDS. THESE RECORDS CONTAIN BOTH  *
* RLD AND CONTROL INFORMATION, AND ARE PROCESSED BY BOTH       *
* THE RLDRECS AND CNTLRECS ROUTINES.                           *
****************************************************************
*
CTRLRECS ST    R9,CR9                  SAVE RETURN ADDR
         BAL   R9,RLDRECS              PROCESS RLD DATA
         L     R6,BUFAD                RESET BUFFER ADDRESS
         BAL   R9,CNTLRECS             PROCESS CONTROL DATA
         L     R9,CR9                  GET RETURN ADDR
         BR    R9                      EXIT
*
****************************************************************
* PROCESS COMPOSITE ESD RECORDS. DATA FROM THESE RECORDS IS    *
* PLACED IN THE SYMBOL TABLE.
****************************************************************
*
CESDREC  L     R7,CURRSYM              GET SYMBOL TBL ADDR
         USING SYMTBL,R7
         LH    R10,4(R6)               GET ESD ID OF 1ST ITEM
         LH    R8,6(R6)                NBR BYTES OF ESD DATA
         SRL   R8,4                    COMPUTE NBR ENTRIES
         LA    R6,8(R6)                STEP TO 1ST RECORD ESD ITEM
CESDNXT  C     R7,ENDSYM               END OF TABLE
         BNL   SYMFULL                 YES, ERROR
         MVC   EXTSYM,0(R6)            SYMBOL NAME
         MVC   TYPSYM,8(R6)            TYPE
         NI    TYPSYM,X'0F'            CLEAR BITS 0-3
         MVI   SYMIND,0                CLEAR INDICATOR
         TM    8(R6),X'14'             POSSIBLE ENTAB/SEGTAB
         BNO   CEMVAD                  NO
         TM    8(R6),X'03'             IS IT ENTAB/SEGTAB
         BNZ   CEMVAD                  NO
         MVC   TYPSYM(2),=X'0F00'      SHOW ENTAB/SEGTAB
CEMVAD   MVC   SYMADDR,9(R6)           ADDRESS OF SYMBOL
         MVC   SYMLENG,13(R6)          LENGTH OR LR ESD ID
         STCM  R10,3,SYMESDID          ESD ID
         LA    R10,1(R10)              ADD 1 TO ESD COUNTER
         LA    R6,16(R6)               TO NEXT ESD ITEM IN INPUT
         LA    R7,L'SYMENT(R7)         STEP TO NEXT ENTRY
         ST    R7,CURRSYM              SAVE NEXT TABLE ADDR
CESNXT   BCT   R8,CESDNXT              LOOP THRU INPUT RECORD
         BR    R9                      EXIT
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*  FIRST, SORT THE SYMTBL AND RLDTBL IN ASCENDING ORDER BY ADDRESS
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
PRNTFMT  L     R7,SYMTBAD              @ SYMBOL TABLE
         USING SYMTBL,R7
         LA    R15,L'SYMENT(R7)        POINT TO 2ND ENTRY
PSCKLO   TM    SYMIND-SYMENT(R15),1    UNRESOLVED?
         BZ    PSCKL00                 NO, RESOLVED
         MVC   SYMADDR-SYMENT(L'SYMADDR,R15),=X'FFFFFF' UNRESOLVED
         MVI   TYPSYM-SYMENT(R15),0    SHOW IT AS CSECT
PSCKL00  TM    SYMIND,1                UNRESOLVED?
         BZ    PSCKLO0                 NO, RESOLVED
         MVC   SYMADDR,=X'FFFFFF'      UNRESOLVED
         MVI   TYPSYM,0                SHOW IT AS CSECT
PSCKLO0  CLC   SYMADDR,SYMADDR-SYMENT(R15) 1ST IS HIGH?
         BL    PSSTP2                  1ST LOW, NO SWITCH
         BH    PSSWCH                  1ST HIGH, SWITCH
         CLI   TYPSYM-SYMENT(R15),0    2ND IS SD?
         BE    PSSWCH                  YES, SWITCH
         CLI   TYPSYM-SYMENT,4         2ND IS PC?
         BNE   PSSTP2                  NO
PSSWCH   MVC   HOLDSYM,SYMENT          YES, SAVE FIRST
         MVC   SYMENT,0(R15)           MOVE 2ND TO 1ST LOCATION
         MVC   0(L'SYMENT,R15),HOLDSYM MOVE 1ST TO 2ND LOCATION
PSSTP2   LA    R15,L'SYMENT(R15)       2ND POINTER UP 1 ENTRY
         C     R15,CURRSYM             END OF TABLE?
         BL    PSCKLO                  NO, CONTINUE
         LA    R7,L'SYMENT(R7)         YES, STEP 1ST ENTRY
         LA    R15,L'SYMENT(R7)        2ND FOLLOWS 1ST
         C     R15,CURRSYM             2ND POINTER NOW AT END?
         BL    PSCKLO                  NO
         L     R7,SYMTBAD              POINT TO 1ST SYM ENTRY
         L     R8,RLDTBL               @ RLD TABLE
         USING RLDTBLD,R8
         LA    R15,L'RLDENT(R8)        POINT TO 2ND ENTRY
PSCKLOA  CLC   RLDADDR,RLDADDR-RLDENT(R15) 1ST IS HIGH?
         BNH   PSSTP2A                 NO
         MVC   HOLDRLD,RLDENT          YES, SAVE FIRST
         MVC   RLDENT,0(R15)           MOVE 2ND TO 1ST LOCATION
         MVC   0(L'RLDENT,R15),HOLDRLD MOVE 1ST TO 2ND LOCATION
PSSTP2A  LA    R15,L'RLDENT(R15)       2ND POINTER UP 1 ENTRY
         C     R15,CURRLD              END OF TABLE?
         BL    PSCKLOA                 NO, CONTINUE
         LA    R8,L'RLDENT(R8)         YES, STEP 1ST ENTRY
         LA    R15,L'RLDENT(R8)        2ND FOLLOWS 1ST
         C     R15,CURRLD              2ND POINTER NOW AT END?
         BL    PSCKLOA                 NO
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*  NEXT, SIFT OUT NULLS FROM SYMTBL AND CHANGE PC TO SD TYPE
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
         L     R7,SYMTBAD              @ SYMTBL
         LR    R15,R7                  COPY SYMTBL ADDRESS
CKGDSYM  CLI   TYPSYM,7                IS IT A NULL?
         BE    DROPSYM                 YES
         CR    R7,R15                  ANY NEED TO MOVE?
         BE    CSNOMOV                 NO
         CLI   TYPSYM,4                IS IT PC?
         BNE   CSMOVE                  NO
         MVI   TYPSYM,0                YES, CHANGE TO SD
CSMOVE   MVC   0(L'SYMENT,R15),0(R7)   MOVE SECOND TO FIRST LOC
CSNOMOV  LA    R15,L'SYMENT(R15)       MOVE FIRST POINTER
DROPSYM  LA    R7,L'SYMENT(R7)         MOVE SECOND POINTER
         C     R7,CURRSYM              END OF TABLE?
         BL    CKGDSYM                 NO
         ST    R15,CURRSYM             YES, SET NEW TABLE END
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* NEXT, SIFT OUT A-TYPE ADDRESS CONSTANTS ELIMINATE ANY ENTRIES WHICH
* HAVE NO CORRESPONDING SYMTBL ENTRIES.
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
         L     R8,RLDTBL               @ RLD TABLE
         LR    R15,R8                  COPY TABLE ADDRESS
CKGDRLD  CLC   RLDPP,RLDRP             A-TYPE ADCON?
         BE    DROPRLD                 YES
         L     R7,SYMTBAD              @ SYMTBL
CKVALESD C     R7,CURRSYM              END OF TABLE
         BE    DROPRLD                 YES
         CLC   RLDPP,SYMESDID          MATCHING SYMTBL ENTRY?
         BE    RLTAKE                  YES
         LA    R7,L'SYMENT(R7)         NO, STEP TO NEXT ENTRY
         B     CKVALESD                LOOP
RLTAKE   CR    R7,R15                  ANY NEED TO MOVE?
         BE    RLNOMOVE                NO
         MVC   0(L'RLDENT,R15),0(R8)   YES, MOVE 2ND TO 1ST
RLNOMOVE LA    R15,L'RLDENT(R15)       STEP 1ST POINTER
DROPRLD  LA    R8,L'RLDENT(R8)         STEP 2ND POINTER
         C     R8,CURRLD               END OF TABLE?
         BL    CKGDRLD                 NO
         ST    R15,CURRLD              YES, SET NEW TABLE END
         L     R7,SYMTBAD              @ SYMTBL
         L     R8,RLDTBL               @ RLDTBL
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*  NOW READY TO FORMAT THE OUTPUT RECORDS. THE SYMTBL AND RLDTBL ARE
*  PROCESSED TO PREPARE THE OUTPUT.
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
PRTSYM   CLI   TYPSYM,0                IS IT SD
         BNE   ENTPNT                  NO
         MVC   OUTREC,BLANX            CLEAR OUTPUT RECORD
         MVI   OUTID,CSECTID           SET RECORD TYPED?
         MVC   OUTCSECT,EXTSYM         SYMBOL NAME
         LA    R12,SYMLENG             @ LENGTH
         BAL   R9,HEXPRT3              CONVERT
         MVC   OUTLENG,PRTABL          SYMBOL LENGTH
         PUT   OUTPUT1,OUTREC          WRITE CSECT RECORD
         B     CHKRLD                  GO CHECK RLD'S
ENTPNT   MVI   OUTID,ENTPTID           SET RECORD TYPE
         MVC   OUTEPNM,EXTSYM          NAME TO ENTRY POINT FIELD
         PUT   OUTPUT1,OUTREC          GO WRITE THE RECORD
CHKRLD   CLI   TYPSYM+L'SYMENT,0       NEXT ENTRY IS SD?
         BE    CESTEP                  YES
         CLC   RLDPP,SYMESDID          NEXT RLD IS FOR THIS ESD?
         BNE   CESTEP                  NO
CEPRT    C     R8,CURRLD               END OF RLD TABLE?
         BNL   CESTEP                  YES
         MVI   OUTID,REFNMID           SET RECORD ID
NEXRLD   MVC   OUTREFNM,RLDTONAM       NAME REFERENCED TO WRITE
         PUT   OUTPUT1,OUTREC          WRITE THE RECORD
         LA    R8,L'RLDENT(R8)         STEP TO NEXT RLD ENTRY
         C     R8,CURRLD               END OF RLD TABLE?
         BNL   CESTEP                  YES
         CLC   RLDPP,SYMESDID          RLD IS FOR THIS ESD?
         BE    NEXRLD                  YES
CESTEP   LA    R7,L'SYMENT(R7)         TO NEXT TABLE LOCATION
         C     R7,CURRSYM              END OF TABLE ENTRIES
         BL    PRTSYM                  NO
         B     EOJ                     YES, END OF JOB
*
****************************************************************
* CREATE PRINTABLE HEX FROM HEX. ON ENTRY, REG 12 CONTAINS THE *
* ADDRESS OF THE DATA TO BE REFORMATTED. ENTRY POINT USED      *
* DETERMINES THE SIZE OF THE FIELD. OUTPUT DATA IS PLACED IN   *
* THE PRTABL FIELD, 2 CHARACTERS PER BYTE.                     *
****************************************************************
*
HEXPRT1  UNPK  PRTABL(3),0(2,R12)      UNPACK HEX
         B     HEXCLTR                 CONTINUE
HEXPRT2  UNPK  PRTABL(5),0(3,R12)      UNPACK HEX
         B     HEXCLTR                 CONTINUE
HEXPRT3  UNPK  PRTABL(7),0(4,R12)      UNPACK HEX
         B     HEXCLTR                 CONTINUE
HEXPRT4  UNPK  PRTABL(9),0(5,R12)      UNPACK HEX
HEXCLTR  MVZ   PRTABL(8),XZROS         CLEAR FOR TRANSLATE
         TR    PRTABL(8),TRTBL         MAKE PRINTABLE
         BR    R9                      EXIT
*
****************************************************************
* MISCELLANEOUS ERROR MESSAGES                                 *
****************************************************************
*
MISSPARM MVC   WTM(L'MISPARM),MISPARM  NO CONTROL INFO MESSAGE
         B     WTO                     GO PRINT
BADPARM  MVC   WTM(L'OVER8),OVER8      NAME OVER 8 MESSAGE
         B     WTO                     GO PRINT
MISSMEM  MVC   WTM(L'INVMEM),INVMEM    MEMBER NOT IN PDS MESSAGE
         B     WTO                     GO PRINT
SYMFULL  MVC   WTM(L'FULLSYM),FULLSYM  FULL SYM TBL MESSAGE
         B     WTO                     GO PRINT
RLDFULL  MVC   WTM(L'FULLRLD),FULLRLD  RLD TBL FULL MESSAGE
         CNOP  0,4
WTO      BAL   R1,WTOSVC               GO WRITE MESSAGE
         DC    AL2(DESCODE-*)          TEXT LENGTH
         DC    X'8000'                 MCS FLAGS
WTM      DC    CL45' '                 MESSAGE TEXT AREA
DESCODE  DC    X'0000'                 DESCRIPTOR CODES
         DC    X'0020'                 ROUTING CODES
WTOSVC   SVC   35                      ISSUE WTO SVC
         ABEND 777                     TERMINATE WITH U0777 ABEND
*
****************************************************************
* END OF JOB                                                   *
****************************************************************
*
EOJ      CLOSE (SYSLIB,,OUTPUT1)       CLOSE FILES
         L     R13,4(R13)              GET POINTER TO CALLER'S SAVE ARE
         LM    R14,R12,12(R13)         RESTORE CALLER'S REGS
         SR    R15,R15                 CLEAR RETURN CODE
         BR    R14                     RETURN TO CALLER
*
****************************************************************
*                 *** DATA AND WORK AREAS ***
****************************************************************
*
OUTREC   DS    0CL17                   OUTPUT RECORD
OUTID    DS    XL1                     RECORD ID
CSECTID  EQU   X'00'                     CSECT RECORD
ENTPTID  EQU   X'02'                     ENTRY POINT NAME RECORD
REFNMID  EQU   X'04'                     REFERENCE-TO NAME RECORD
OUTCSECT DS    CL8                     CSECT NAME
OUTEPNM  DS    0CL8                    ENTRY POINT NAME
OUTREFNM DS    0CL8                    REFERENCE-TO NAME
OUTLENG  DS    CL6                     CSECT LENGTH
         DS    CL2
*
*
*
BUFAD    DS    F                       SYSLIB BUFFER ADDR
SYMTBAD  DS    F                       SYMBOL TABLE ADDRESS
CURRSYM  DS    F                       CURRENT SYM TBL ADDR
ENDSYM   DS    F                       SYM TBL END ADDR
RLDTBL   DS    F                       ADDR OF RLD TABLE
CURRLD   DS    F                       CURR RLD TBL ADDR
ENDRLD   DS    F                       RLD TBL END ADDR
PROCESS  DC    XL1'00'                 PROCESS INDIC 80=SYM TBL BUILT
CR9      DS    F                       CTRLRECS RETURN ADDR
RL9      DS    F                       RLDRECS RETURN ADDR
SYMLEN   DC    AL2(L'SYMENT)           LENGTH OF SYMTBL ENTRY
PRTABL   DS    CL9                     HEX-PRINTABLE CONVERSION AREA
BLANX    DC    CL121' '                CONSTANT BLANKS
XZROS    DC    8X'00'                  CONSTANT ZEROS
TRTBL    DC    C'0123456789ABCDEF'     TRANSLATE TBL
MISPARM  DC    C'MEMBER MUST BE ENTERED VIA PARM FIELD'
OVER8    DC    C'MEMBER OR CSECT NAME OVER 8 CHARACTERS'
INVMEM   DC    C'SPECIFIED MEMBER NOT FOUND IN SYSLIB PDS'
FULLSYM  DC    C'SYMBOL TABLE FULL: OVER 2000 ENTRIES'
FULLRLD  DC    C'RLD TABLE FULL: OVER 10,000 ENTRIES'
*
*
*
         DS    0F
BLDLIST  DS    0CL62                   BLDL LIST
         DC    H'1'                    ONE ENTRY
         DC    H'58'                   LENGTH OF ENTRY
MEMBER   DC    CL8' '                  MEMBER NAME
TTRMOD   DC    XL3'000000'             TTR OF MODULE
CCAT     DC    XL1'00'                 CONCATENATION NUMBER
         DC    XL1'00'
ALIASIND DC    XL1'00'                 ALIAS AND MISC INDICATOR
TTR1TXT  DC    XL3'000000'             TTR OF 1ST TXT RECORD
         DC    XL1'00'
TTRNS    DC    XL3'000000'             TTR OF NOTE OR SCATTER LIST
NNOTE    DC    XL1'00'                 NBR ENTRIES IN NOTE LIST
ATTR1A   DC    XL1'00'                 MODULE ATTRIBUTES 1, BYTE 1
*                           80=RENT
*                           40=REUS
*                           20=OVERLAY
*                           10=UNDER TEST
*                           08=ONLY LOADABLE
*                           04=SCATTER FORMAT
*                           02=EXECUTABLE
*                           01=ONE TXT, NO RLD RECORDS
ATTR1B   DC    XL1'00'                 ATTRIBUTES 1, BYTE 2
*                           80=CANNOT BE REPROCESSED BY LKED E
*                           40=ORIGIN OF 1ST TXT RECORD IS ZERO
*                           20=ASSIGNED ENTRY POINT ADDR IS ZERO
*                           10=CONTAINS NO RLD RECORD
*                           08=CANNOT BE REPROCESSED BY LKED
*                           04=CONTAINS TESTRAN SYMBOLS
*                           02=CREATED BY LKED
*                           01=REFR
TOTVIRT  DC    XL3'000000'             TOTAL VIRTUAL STRG REQRD FOR MOD
LENG1    DC    XL2'0000'               LENGTH OF 1ST TEXT RECORD
LKEPA    DC    XL3'000000'             ASSIGNED ENTRY POINT ADDR
ATTR2    DC    XL1'00'                 ATTRIBUTES 2
*                           80=PROCESSED BY OS/VS LKED
*                           20=PAGE ALIGNMENT REQUIRED FOR MODULE
*                           10=SSI PRESENT
         DC    XL2'0000'
SCTRLEN  DC    XL2'0000'               SCATTER LIST LENGTH
TTLEN    DC    XL2'0000'               TRANSLATION TABLE LENGTH
SCESDID  DC    XL2'0000'               CESD NBR FOR 1ST TXT RECD
SCEPESD  DC    XL2'0000'               CESD NBR FOR ENTRY POINT
ALEPA    DC    XL3'000000'             ENTRY POINT OF THE MEMBER NAME
ALMEM    DC    CL8' '                  REAL MEMBER NAME FOR ALIAS
SSI      DS    XL4'00000000'           SSI BYTES
AUTHLEN  DC    XL1'00'                 AUTH CODE LENGTH
AUTHCOD  DC    XL1'00'                 AUTH CODE
*
*
*
RLDTBLD  DSECT ,                       RELOCATION DICTIONARY TABLE
RLDENT   DS    0CL24                   11 BYTE ENTRIES
RLDRP    DS    XL2                     RELOCATION POINTER
RLDPP    DS    XL2                     POS PTR (SYMBOL CESD NBR)
RLDTYPE  DS    XL1                     TYPE: 08=UNRESOLVED
RLDADDR  DS    XL3                     LKED ASSGND ADDR OF CONSTANT
RLDTONAM DS    CL8                     REFERENCE-TO NAME
RLDFMNAM DS    CL8                     REFERENCED-FROM NAME
*
*
*
SYMTBL   DSECT ,                       EXTERNAL SYMBOL TABLE ENTRY
SYMENT   DS    0CL18                   19 BYTE ENTRIES
EXTSYM   DS    CL8                     EXTERNAL SYMBOL NAME
TYPSYM   DS    XL1                     SYMBOL TYPE
*                                      00=SD (NAMED CSECT)
*                                      02=ER (EXTRN)
*                                      03=LR (ENTRY)
*                                      04=PC (UNNAMED CSECT)
*                                      05=CM (COM)
*                                      06=PR (PSEUDO REGISTER)
*                                      07=NULL
*                                      0A=WX (WXTRN)
*                                      0F=ENTAB OR SEGTAB
SYMIND   DS    XL1                     INDICATOR:
*                                      X'80'=REFERENCED
*                                      X'01'=UNRESOLVED
SYMADDR  DS    XL3                     SYMBOL ADDRESS (0 FOR ER, WX, NU
SYMLENG  DS    XL3                     LENGTH FOR SD, PC, CM, PR
SYMESDID DS    XL2                     ESD ID OF THIS ITEM
LDMDVER  CSECT
*
*
*
BLDL15   DS    XL4                     RETURN CODE FROM BLDL
POINT15  DS    XL4                     RETURN CODE FROM POINT
HOLDSYM  DS    CL(L'SYMENT)            HOLD AREA FOR SYM ENTRY
HOLDRLD  DS    CL(L'RLDENT)            HOLD AREA FOR RLD ENTRY
PRTCHAR  DC    256C'.'                 CHARACTER TRANSLATE TABLE
         ORG   PRTCHAR+C' '
         DC    C' '
         ORG   PRTCHAR+C'A'
         DC    C'ABCDEFGHI'
         ORG   PRTCHAR+C'J'
         DC    C'JKLMNOPQR'
         ORG   PRTCHAR+C'S'
         DC    C'STUVWXYZ'
         ORG   PRTCHAR+C'0'
         DC    C'0123456789'
         ORG
*
*
*
SYSLIB   DCB   DSORG=PO,MACRF=R,DDNAME=SYSLIB,                         X
               RECFM=U,NCP=1
OUTPUT1  DCB   DSORG=PS,MACRF=PM,DDNAME=OUTPUT1,                       X
               RECFM=FB,LRECL=17
         END
