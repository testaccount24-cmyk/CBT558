         TITLE '*** ENDVSTRP:                          ***'
ENDVSTRP CSECT
*********************************************************************
* STRIPS RECORDS FROM THE INPUT1 FILE AND WRITES OUTPUT TO THE      *
* OUTPUT1 FILE. SPECIALIZE FOR EACH USE.                            *
*                                                                   *
* AUTHOR R THORNTON JUN 2000                                        *
*********************************************************************
*
*********************************************************************
*        SAVE REGISTERS, SET UP BASE REGS, CHAIN SAVE AREAS         *
*********************************************************************
         USING ENDVSTRP,R3,R4
         STM   R14,R12,12(R13)         SAVE CALLER'S REGS
         LR    R3,R15                  SET UP BASE FIRST BASE REG
         LA    R4,4095(R3)             SET UP SECOND
         LA    R4,1(R4)                    BASE REGISTER
         LA    R15,MYSAVE              POINT TO MY REGISTER SAVE AREA
         ST    R15,8(R13)              SET LSA IN CALLER'S SAVE
         ST    R13,4(R15)              SET HSA IN MY SAVE AREA
         LR    R13,R15                 SET UP SAVE AREA POINTER
         B     START                   BRANCH AROUND CONSTANTS
         DC    CL8'ENDVSTRP'           PROGRAM NAME IDENTIFIER
         DC    CL8'&SYSDATE'           ASSEMBLY DATE
         DC    CL8'&SYSTIME'           ASSEMBLY TIME
MYSAVE   DS    18F                     MY REGISTER SAVE AREA
START    DS    0H                      BEGIN PROCESSING
*********************************************************************
*        OPEN FILE                                                  *
*********************************************************************
OPENS    OPEN  (OUTPUT1,OUTPUT,PRINT1,OUTPUT,INPUT1) OPEN FILES
*********************************************************************
*             MAINLINE ROUTINE                                      *
*********************************************************************
MAINLINE BAS   R14,GETDEFIN            GET NEXT DEFINE STATEMENT
         CLC   DEFTYPE,=CL6'GROUP'     IS IT DEFINE GROUP?
         BE    MLGROUP                 YES
         CLC   DEFTYPE,=CL6'SYMBOL'    IS IT DEFINE SYMBOL?
         BNE   MAINLINE                NO, DROP IT
         BAS   R14,DOSYMBL             GO PROCESS SYMBOLS
         B     MAINLINE                CONTINUE
MLGROUP  BAS   R14,DOGROUP             GO PROCESS GROUP
         B     MAINLINE                LOOP THROUGH INPUT FILE
*********************************************************************
* GET DEFINE STATEMENT: LOCATE THE NEXT DEFINE PROCESSOR ... STMT.  *
*********************************************************************
GETDEFIN ST    R14,GD14                SAVE RETURN ADDRESS
GDREAD1  BAS   R14,GETIN               READ NEXT INPUT RECORD
         CLC   INREC(20),=CL20'   DEFINE PROCESSOR ' DEFINE START?
         BNE   GDREAD1                 NO
         MVC   DEFTYPE,INREC+20        SAVE DEFINE TYPE
GDXIT    L     R14,GD14                GET RETURN ADDRESS
         BR    R14                     RETURN
GD14     DC    A(0)                    RETURN ADDRESS
*********************************************************************
* PROCESS THE DEFINE PROCESSOR GROUP STATEMENT                      *
*********************************************************************
DOGROUP  ST    R14,DG14                SAVE RETURN ADDRESS
         CLI   RDY,1                   PROCESSOR GRP READY TO WRITE?
         BNE   DGSET                   NO
         MVI   RDY,0                   RESET SWITCH
         BAS   R14,PUTOUT              YES, WRITE THE RECORD
DGSET    MVC   OUTREC,BLANKS           CLEAR OUTPUT LINE
         MVC   LASGRP,BLANKS           CLEAR LAST GROUP DATA
         MVC   PROCGRP,INREC+27        SAVE PROCESSOR GROUP NAME
         TR    PROCGRP,KILLTIC         REMOVE ENDING APOSTROPHE
DGREAD1  BAS   R14,GETIN               GO READ AGAIN
         CLC   INREC+9(15),=CL15'TO ENVIRONMENT ''' ENVIRONMENT LINE?
         BNE   DGXIT                   NO, SKIP THIS
         MVC   ENVIRON,INREC+25        SAVE ENVIRONMENT NAME
         TR    ENVIRON,KILLTIC         REMOVE ENDING APOSTROPHE
         BAS   R14,GETIN               READ NEXT
         CLC   INREC+12(8),=CL8'SYSTEM ''' IS IT SYSTEM LINE?
         BNE   DGXIT                   NO, SKIP THIS DEFINE
         MVC   SYSTEM,INREC+20         SAVE SYSTEM NAME
         TR    SYSTEM,KILLTIC          REMOVE ENDING APOSTROPHE
         BAS   R14,GETIN               READ NEXT
         CLC   INREC+12(6),=CL6'TYPE ''' IS IT TYPE LINE?
         BNE   DGXIT                   NO, SKIP THIS DEFINE
         MVC   TYPE,INREC+18           SAVE TYPE NAME
         TR    TYPE,KILLTIC            REMOVE ENDING APOSTROPHE
         CLC   TYPE,=CL8'COBOL'        THIS A COBOL PROCESSOR GROUP?
         BNE   DGXIT                   NO, SKIP IT
         BAS   R14,GETIN               READ NEXT
         CLC   INREC+12(13),=CL13'STAGE NUMBER ' STAGE NBR LINE?
         BNE   DGXIT                   NO, SKIP THIS DEFINE
         MVC   STAGE,INREC+25          SAVE STAGE NUMBER
DGREAD2  BAS   R14,GETIN               READ AGAIN
         CLI   INREC+3,C'.'            STATEMENT END?
         BE    DGXIT                   YES, INCOMPLETE
         CLC   INREC+9(28),=CL28'GENERATE PROCESSOR NAME IS ''' PROCNM?
         BNE   DGREAD2                 NO, READ AGAIN
         MVC   PROCESSR,INREC+37       SAVE GENERATE PROCESSOR NAME
         TR    PROCESSR,KILLTIC        REMOVE ENDING APOSTROPHE
         MVC   LASGRP,OUTREC           SAVE LAST GROUP DATA
         MVI   RDY,1                   SHOW PROC GRP RECORD READY
DGXIT    L     R14,DG14                GET RETURN ADDRESS
         BR    R14                     RETURN
DG14     DC    A(0)                    RETURN ADDRESS
*********************************************************************
* PROCESS THE DEFINE PROCESSOR SYMBOL STATEMENT                     *
*********************************************************************
DOSYMBL  ST    R14,DS14                SAVE RETURN ADDRESS
         MVC   OUTREC,BLANKS           CLEAR OUTPUT LINE
         BAS   R14,GETIN               READ NEXT INPUT RECORD
         CLC   INREC+9(16),=CL16'TO ENVIRONMENT ''' ENVIRONMENT LINE?
         BNE   DSXIT                   NO, SKIP IT
         MVC   ENVIRON,INREC+25        MOVE ENVIRONMENT
         TR    ENVIRON,KILLTIC         ERASE ENDING APOSTROPHE
         BAS   R14,GETIN               READ NEXT INPUT RECORD
         CLC   INREC+12(8),=CL8'SYSTEM ''' THIS THE SYSTEM LINE?
         BNE   DSXIT                   NO, SKIP IT
         MVC   SYSTEM,INREC+20         MOVE SYSTEM
         TR    SYSTEM,KILLTIC          ERASE ENDING APOSTROPHE
         BAS   R14,GETIN               READ NEXT INPUT RECORD
         CLC   INREC+12(6),=CL6'TYPE ''' THIS THE TYPE LINE?
         BNE   DSXIT                   NO, SKIP IT
         MVC   TYPE,INREC+18           MOVE TYPE
         TR    TYPE,KILLTIC            ERASE ENDING APOSTROPHE
         BAS   R14,GETIN               READ NEXT INPUT RECORD
         CLC   INREC+12(13),=CL13'STAGE NUMBER ' STAGE NBR LINE?
         BNE   DSXIT                   NO, SKIP IT
         MVC   STAGE,INREC+25          MOVE STAGE
         BAS   R14,GETIN               READ NEXT INPUT RECORD
         CLC   INREC+12(17),=CL17'PROCESSOR GROUP ''' PROC GRP LINE?
         BNE   DSXIT                   NO, SKIP IT
         MVC   PROCGRP,INREC+29        SAME PROCESSOR GROUP?
         TR    PROCGRP,KILLTIC         ERASE ENDING APOSTROPHE
         BAS   R14,GETIN               READ NEXT INPUT RECORD
         CLC   INREC+12(25),=CL25'PROCESSOR TYPE = GENERATE' GENERATE?
         BNE   DSXIT                   NO, SKIP IT
DSRDSYM  BAS   R14,GETIN               READ NEXT INPUT RECORD
         CLI   INREC+3,C'.'            END OF STATEMENT?
         BE    DSXIT                   YES, QUIT
         CLC   INREC+9(7),=CL7'SYMBOL' SYMBOL LINE?
         BNE   DSRDSYM                 NO, READ AGAIN
         MVC   OUTSYM(56),INREC+16     COPY INPUT REC TO OUTPUT
         MVI   SCAN+C'"',C'"'          SET SCAN FOR QUOTE
         TRT   OUTSYM,SCAN             IS THERE A QUOTE?
         MVI   SCAN+C'"',0             RESET SET SCAN FOR QUOTE
         BNZ   DSWRITE                 YES, QUOTE MEANS SYMBOL COMPLETE
         BAS   R14,GETIN               NO, READ CONTINUATION LINE
         CLI   INREC+3,C'.'            END OF STATEMENT?
         MVI   SCAN+C'=',C'='          SET SCAN FOR EQUAL
         TRT   OUTSYM,SCAN             IS THERE AN EQUAL?
         MVI   SCAN+C'=',0             RESET SET SCAN FOR EQUAL
         BZ    DSRDSYM                 NO, SOMETHING WRONG WITH SYMBOL
         MVC   1(69,R1),INREC+3        TACK ON CONTINUATION
DSWRITE  CLC   LASDATA,PROCGRP         SAME ENV,SYS,TYPE,STG AS LAST?
         BE    DSMVPRC                 YES
         CLI   RDY,1                   PROCESSOR GRP READY TO WRITE?
         BNE   DSPUTIT                 NO
         MVI   RDY,0                   RESET SWITCH
         BAS   R14,PUTOUT              YES, WRITE SYMBOL RECORD
         MVC   OUTREC(L'LASGRP),LASGRP MOVE IN LAST PROC GRP DATA
         BAS   R14,PUTOUT              WRITE PROC GRP RECORD
         B     DSXIT                   AND EXIT
DSMVPRC  MVC   PROCESSR,LASPROC        YES, COPY LAST PROCESSOR NAME
         MVI   RDY,0                   CLEAR PROC GRP RDY SWITCH
DSPUTIT  BAS   R14,PUTOUT              WRITE SYMBOL TO OUTPUT
         B     DSRDSYM                 GO GET NEXT SYMBOL
DSXIT    L     R14,DS14                GET RETURN ADDRESS
         BR    R14                     RETURN
DS14     DC    A(0)                    RETURN ADDRESS
*********************************************************************
*             READ INPUT FILE SUBROUTINE                            *
*********************************************************************
GETIN    ST    R14,GI14                SAVE RETURN ADDRESS
         GET   INPUT1,INREC            READ NEXT RECORD
         AP    INPCOUNT,P1             INCREMENT COUNTER
GIXIT    L     R14,GI14                GET RETURN ADDRESS
         BR    R14                     NO, RETURN
GI14     DC    A(0)                    RETURN ADDRESS
*********************************************************************
*             WRITE OUTPUT RECORD SUBROUTINE                        *
*********************************************************************
PUTOUT   ST    R14,PO14                SAVE RETURN ADDRESS
         CLC   PROCESSR+1(6),=CL6'NOPROC' VALID GENERATE PROCESSOR?
         BE    POBLANX                 NO
         CLC   PROCESSR,BLANKS         IS PROCESSOR NAME BLANK?
         BNE   POWRITE                 NO
         CLC   OUTSYM,BLANKS           ANY SYMBOLIC DATA?
         BE    POXIT                   NO
         MVC   PROCESSR,=X'4020202020202020' EDIT WORD
         ED    PROCESSR,INPCOUNT+1     PROVIDE INPUT RECORD COUNT
POWRITE  PUT   OUTPUT1,OUTREC          WRITE OUTPUT RECORD
         AP    OUTCOUNT,P1             INCREMENT COUNTER
POBLANX  MVC   OUTSYM,BLANKS           CLEAR OUTPUT LINE
POXIT    L     R14,PO14                GET RETURN ADDRESS
         BR    R14                     NO, RETURN
PO14     DC    A(0)                    RETURN ADDRESS
*********************************************************************
*             PRINT SUBROUTINE                                      *
*********************************************************************
PRINT    ST    R14,PR14                SAVE RETURN ADDRESS
         PUT   PRINT1,PRTLINE          WRITE PRINT LINE
         MVC   PRTLINE,BLANKS          CLEAR PRINT LINE
PRXIT    L     R14,PR14                GET RETURN ADDRESS
         BR    R14                     NO, RETURN
PR14     DC    A(0)                    RETURN ADDRESS
EOJ      CLOSE (OUTPUT1,,PRINT1,,INPUT1) CLOSE FILES
         L     R13,4(R13)              POINT TO CALLER'S SAVE AREA
         L     R14,12(R13)             RESTORE RETURN REG: R14
         L     R15,RETCODE             SET RETURN CODE
         LM    R0,R12,20(R13)          RESTORE CALLER'S REGS 0-12
         BR    R14                     RETURN
*********************************************************************
*        STORAGE AND FILE AREAS                                     *
*********************************************************************
DBLWD    DS    D                       DOUBLEWORD WORK AREA
RETCODE  DS    F                       RETURN CODE
DEFTYPE  DC    CL6' '                  TYPE FOR DEFINE PROCESSOR
INPCOUNT DC    PL5'0'                  INPUT RECORD COUNTER
OUTCOUNT DC    PL5'0'                  OUTPUT RECORD COUNTER
BLANKS   DC    CL256' '                BLANKS
P1       DC    P'1'                    CONSTANT 1
RDY      DC    X'00'                   1 = PROC GRP RECORD READY
SCAN     DC    256X'00'                TRT SCAN TABLE
*
LASGRP   DS    0CL46                    LAST GROUP DATA
LASPROC  DC    CL8' '                   PROCESSOR NAME
         DC    CL1' '
LASDATA  DS    0CL37
LASPGRP  DC    CL8' '                   PROCESSOR GROUP NAME
         DC    CL1' '
LASENV   DC    CL8' '                   ENVIRONMENT NAME
         DC    CL1' '
LASSYS   DC    CL8' '                   SYSTEM NAME
         DC    CL1' '
LASTYP   DC    CL8' '                   TYPE NAME
         DC    CL1' '
LASSTG   DC    CL1' '                   STAGE NUMBER
*
PRTLINE  DS    0CL133                  PRINT LINE
PCC      DS    CL1                     CARRIAGE CONTROL
PRT      DS    0CL132                  PRINT DATA
         DS    CL132
*
INREC    DS    0CL80                    INPUT RECORD
         DS    CL80
*
OUTREC   DS    0CL132                   OUTPUT RECORD
PROCESSR DC    CL8' '                   PROCESSOR NAME
         DC    CL1' '
PROCGRP  DC    CL8' '                   PROCESSOR GROUP NAME
         DC    CL1' '
ENVIRON  DC    CL8' '                   ENVIRONMENT NAME
         DC    CL1' '
SYSTEM   DC    CL8' '                   SYSTEM NAME
         DC    CL1' '
TYPE     DC    CL8' '                   TYPE NAME
         DC    CL1' '
STAGE    DC    CL1' '                   STAGE NUMBER
         DC    CL1' '
OUTSYM   DC    CL86' '                  SYMBOL DATA
         DS    CL256                    OVERFLOW BUFFER
*
KILLTIC  DC    CL256' '                TRANSLATE TABLE
         ORG   KILLTIC+C'@'
         DC    C'@'
         ORG   KILLTIC+C'#'
         DC    C'#'
         ORG   KILLTIC+C'$'
         DC    C'$'
         ORG   KILLTIC+C'A'
         DC    C'ABCDEFGHI'
         ORG   KILLTIC+C'J'
         DC    C'JKLMNOPQR'
         ORG   KILLTIC+C'S'
         DC    C'STUVWXYZ'
         ORG   KILLTIC+C'0'
         DC    C'0123456789'
         ORG
*********************************************************************
*             DCB'S                                                 *
*********************************************************************
OUTPUT1  DCB   DSORG=PS,MACRF=PM,DDNAME=OUTPUT1,                       X
               RECFM=FB,LRECL=132
PRINT1   DCB   DSORG=PS,MACRF=PM,DDNAME=PRINT1,                        X
               RECFM=FBA,LRECL=133
INPUT1   DCB   DSORG=PS,MACRF=GM,DDNAME=INPUT1,EODAD=EOJ,              X
               RECFM=FB,LRECL=80
         LTORG
ENDVSTRP CSECT
*********************************************************************
*             REGISTER EQUATES                                      *
*********************************************************************
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
