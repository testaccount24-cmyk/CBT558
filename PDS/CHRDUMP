         TITLE '***** CHRDUMP: DISK ACCESS UTILITY *****'
*        PRINT NOGEN
CHRDUMP  SVLNK R3,R4
         LA    R5,4095(R4)             3RD BASE
         LA    R5,1(R5)                FINISH SETUP
         USING CHRDUMP+8192,R5
         LA    R6,4095(R5)             4TH BASE
         LA    R6,1(R6)                FINISH SETUP
         USING CHRDUMP+12288,R6
         LA    R7,4095(R6)             5TH BASE
         LA    R7,1(R7)                FINISH SETUP
         USING CHRDUMP+16384,R7
         LA    R8,4095(R7)             6TH BASE
         LA    R8,1(R8)                FINISH SETUP
         USING CHRDUMP+20480,R8
*
**********************************************************************
*  GENERALIZED DISK ACCESS UTILITY. PERMITS ACCESS AND DISPLAY OF    *
*  DISK RECORDS AT ANY LOCATION ON ANY ONLINE DRIVE. RECORDS MAY     *
*  BE PRINTED IN ENTIRETY, OR SELECTED PORTIONS MAY BE PRINTED BY    *
*  USE OF A FORMAT. SEARCHES MAY BE DONE BY SPECIFYING THE DATA      *
*  TO BE COMPARED, COMPARISON TYPE (=, >=, ETC), AND ARGUMENT FIELD  *
*  LOCATION IN THE KEY OR DATA RECORD. CHANGES MAY BE MADE TO THE    *
*  LOGICAL RECORD OR BLOCK, AND THE RESULTING RECORD CAN BE REWRITTEN*
*                                                                    *
*  THE PROGRAM MAY BE USED IN BATCH, WITH SYSIN CONTAINING THE       *
*  COMMANDS TO BE EXECUTED. RESULTING OUTPUT WILL BE WRITTEN TO      *
*  SYSPRINT, WHICH MUST HAVE RECFM=FB,LRECL=80.                      *
*                                                                    *
*  FILE SYSLST MAY BE ALLOCATED TO PROVIDE A FILE OF THE PRINTED     *
*  OUTPUT, IF DESIRED. IF A SYSLST DD STATEMENT IS FOUND, ALL PRINTED*
*  OUTPUT WILL BE WRITTEN TO THE FILE ALLOCATED. THIS FILE MUST HAVE *
*  RECFM=F OR FB. LRECL SHOULD BE 80, BUT CAN VARY IF THE USER IS    *
*  WILLING TO ACCEPT TRUNCATION OR GARBAGE AT THE RIGHT RELATIVE TO  *
*  AN 80-BYTE RECORD. ONLY DSORG=PS IS VALID FOR THIS FILE.          *
*                                                                    *
*  FILE SYSOUT MAY BE ALLOCATED TO PROVIDE A FILE OF THE ACTUAL DISK *
*  RECORDS SELECTED FOR OUTPUT. THIS OUTPUT WILL CONTAIN THE KEY AND *
*  DATA PORTIONS OF THE RECORD. IF A VARIABLE FILE IS DEFINED, THE   *
*  OUTPUT RECORDS WILL BE WRITTEN AT THE SUM OF THE LENGTHS OF THE   *
*  KEY AND DATA, OR DCBLRECL, WHICHEVER IS SHORTER. FOR FIXED LENGTH *
*  RECORDS, THE SPECIFIED LRECL WILL BE USED, WHICH MAY CAUSE        *
*  TRUNCATION OR TRASH AT THE RIGHT. ONLY DSORG=PS IS VALID FOR THIS *
*  FILE.                                                             *
*                                                                    *
*                                                                    *
*                                                                    *
*  AUTHOR R. THORNTON JUN 1984                                       *
**********************************************************************
*
***********************************************************************
* OPEN SYSPRINT FOR PRINTING AND SYSIN FOR CONTROL INPUT.             *
* ISSUE OPENS ALSO FOR SYSLST AND SYSOUT FOR AUXILIARY OUTPUTS.       *
* ALLOCATE A DD STATEMENT FOR USE BY EXCP AND OPEN THE DCB USED FOR   *
* EXCP. IF EITHER THE ALLOCATE OR OPEN FAILS, A U0333 ABEND WILL BE   *
* PRODUCED WITH AN EXPLANATORY MESSAGE.                               *
***********************************************************************
*
OPENS    OPEN  (SYSPRINT,OUTPUT,SYSIN) OPEN PRINT AND CONTROL FILES
         L     R11,16                  POINT TO CVT
         L     R11,0(R11)              POINT TO NEW-OLD WORDS
         L     R11,0(R11)              POINT TO MY TCB
         L     R11,12(R11)             POINT TO MY TIOT
         LA    R11,24(R11)             POINT TO 1ST TIOT DD ENTRY
LASTDD   CLI   0(R11),0                ANY MORE TIOT DD ENTRIES?
         BE    RETDYN                  NO, GO ALLOCATE WORK FILE
         CLC   4(8,R11),SYSLST+40      DD FOR SYSLST
         BE    OPNLST                  YES, GO OPEN IT
         CLC   4(8,R11),SYSOUT+40      DD FOR SYSOUT?
         BE    OPNOUT                  YES, GO OPEN IT
NEXDD    SR    R1,R1                   CLEAR FOR INSERT
         IC    R1,0(R11)               GET THIS DD ENTRY LENGTH
         AR    R11,R1                  POINT TO NEXT TIOT DD ENTRY
         B     LASTDD                  CONTINUE TIOT SCAN
OPNOUT   OPEN  (SYSOUT,OUTPUT)         OPEN SYSOUT OUTPUT
         B     NEXDD                   CONTINUE TIOT SCAN
OPNLST   OPEN  (SYSLST,OUTPUT)         OPEN SYSLST OUTPUT
         B     NEXDD                   CONTINUE TIOT SCAN
RETDYN   CALL  DYNALLOC,(DAPARM1,DAPARM2) ALLOCATE A TEMPORARY DATASET
         CLC   RETRNCD,=C'00'          ANY ERROR?
         BE    OPENEXCP                NO
         CLC   ERRRET,=C'0410'         DSNAME IN USE?
         BNE   PRTBADA                 NO
         CLI   DDN+5,C'9'              ALREADY TRIED 9 TIMES?
         BE    PRTBADA                 YES
         IC    R9,DDN+5                NO, GET LAST BYTE OF DDNAME
         LA    R9,1(R9)                ADD 1
         STC   R9,DDN+5                UPDATE DDNAME
         B     RETDYN                  GO TRY AGAIN
PRTBADA  MVC   PRT,UNALOC              MESSAGE TO PRINT
         BAL   R9,PRINT                PRINT MESSAGE
         MVC   DYNRTCD,ERRRET          ERROR RETURN CODE TO MESSAGE
         MVC   DYNINFO,INFORET         INFO RETURN CODE TO MESSAGE
         MVC   PRT,DYNERR              MESSAGE TO PRINT
         BAL   R9,PRINT                PRINT ERROR MESSAGE
         ABEND 333,DUMP                TERMINATE WITH ERROR
OPENEXCP OPEN  (DADCB,OUTPUT)          OPEN FILE FOR EXCP
         TM    DADCB+48,X'10'          WAS OPEN SUCCESSFUL?
         BO    STRTMSGS                YES
         MVC   PRT,UNOPEN              MESSAGE TO PRINT
         BAL   R9,PRINT                PRINT ERROR MESSAGE
         ABEND 333,DUMP                TERMINATE WITH ERROR
STRTMSGS BAL   R9,LEGEND               GO PRINT MENU LEGEND
*
***********************************************************************
*   MAINLINE ROUTINE. READ SYSIN TO GET REQUESTS AND PERFORM THE      *
*   APPROPRIATE ROUTINE.                                              *
***********************************************************************
*
MAINLINE MVC   LASTCMND,COMMAND        SAVE LAST COMMAND
         MVC   COMMAND,BLANX           CLEAR COMMAND AREA
         GET   SYSIN,COMMAND           READ NEXT COMMAND
         CLC   COMMAND,BLANX           ANYTHING ENTERED?
         BNE   TRYQ                    YES, CONTINUE
         MVC   COMMAND,LASTCMND        NO, USE LAST COMMAND
TRYQ     CLC   COMMAND(2),=C'Q '       READ LOOP REQUEST?
         BNE   TRYREAD                 NO
TRYLOOP  BAL   R9,EXCPREAD             YES, GO READ A BLOCK
         CLI   EXCPIND,C'X'            HARD I/O ERROR?
         BE    MAINLINE                YES
         CLI   EXCPIND,C'E'            END OF EXTENT?
         BE    MAINLINE                YES
         BAL   R9,PRNTCTL              FORMAT AND PRINT
         B     TRYLOOP                 LOOP THRU ENTIRE EXTENT
TRYREAD  CLC   COMMAND(2),=C'R '       READ/PRINT REQUEST?
         BNE   TRYPRT                  NO
         BAL   R9,EXCPREAD             YES, GO READ A BLOCK
         CLI   EXCPIND,C'X'            HARD I/O ERROR?
         BE    MAINLINE                YES
         BAL   R9,PRNTCTL              FORMAT AND PRINT
         B     MAINLINE                CONTINUE
TRYPRT   CLC   COMMAND(2),=C'P '       RE-DISPLAY REQUEST?
         BNE   TRYVOL                  NO
         BAL   R9,PRNTCTL              YES
         B     MAINLINE                CONTINUE
TRYVOL   MVI   EXCPMTCH,0              INSURE EXCP FOR ALL OTHERS
         CLC   COMMAND(3),=C'VOL'      VOLUME REQUEST?
         BNE   TRYDSN                  NO
         CLI   COMMAND+3,C'='          SPECIFIC VOLUME REQUEST?
         BE    ISVOLUM                 YES
         CLI   COMMAND+3,C' '          BLANK AFTER VOL?
         BNE   TRYGVOL                 NO
         TM    COMMAND+4,X'C0'         ALFANUMERIC AFTER BLANK?
         BNO   TRYGVOL                 NO
ISVOLUM  BAL   R9,VOLUME               YES, HANDLE VOLUME REQUEST
         B     MAINLINE                CONTINUE
TRYGVOL  CLI   COMMAND+3,C' '          VOLUME LIST REQUEST?
         BNE   BADREQ                  NO, BAD REQUEST
         BAL   R9,VOLLIST              GO PRINT VOLUME LIST
         B     MAINLINE                CONTINUE
TRYDSN   CLC   COMMAND(3),=C'DSN'      DSNAME REQUEST?
         BNE   TRYMEM                  NO
         CLI   COMMAND+3,C'='          SPECIFIC DSNAME REQUEST?
         BE    ISDSNA                  YES
         CLI   COMMAND+3,C' '          BLANK AFTER DSN?
         BNE   TRYGDSN                 NO
         TM    COMMAND+4,X'C0'         ALFANUMERIC AFTER BLANK?
         BNO   TRYGDSN                 NO
ISDSNA   BAL   R9,DSNAMEA              YES, GO "ALLOCATE" IT
         B     MAINLINE                CONTINUE
TRYGDSN  CLI   COMMAND+3,C' '          DSNAME LIST REQUEST?
         BNE   BADREQ                  NO
         BAL   R9,DSNLIST              YES, GO LIST VTOC
         B     MAINLINE                CONTINUE
TRYMEM   CLC   COMMAND(4),=C'MEM='     MEMBER NAME REQUEST?
         BNE   TRYTTR                  NO
         BAL   R9,MEMBRNM              GO HANDLE MEMBER NAME
         B     MAINLINE                CONTINUE
TRYTTR   CLC   COMMAND(4),=C'TTR='     TTR REQUEST?
         BNE   TRYCHR                  NO
         BAL   R9,TTR                  GO HANDLE TTR
         B     MAINLINE                CONTINUE
TRYCHR   CLC   COMMAND(3),=C'CHR'      CHR REQUEST?
         BNE   TRYCAT                  NO
         CLI   COMMAND+3,C'='          PROPER DELIMITER AFTER CHR?
         BE    ISCHR                   YES
         CLI   COMMAND+3,C' '          BLANK AFTER CHR?
         BNE   TRYCHG                  NO
         TM    COMMAND+4,X'F0'         NUMERIC FOLLOWS BLANK?
         BNO   TRYCHG                  NO
ISCHR    BAL   R9,GETCHR               YES, HANDLE CCHHR REQUEST
         B     MAINLINE                CONTINUE
TRYCAT   CLC   COMMAND(3),=C'CAT'      CATALOG VOLSER  REQUEST?
         BNE   TRYCHG                  NO
         CLI   COMMAND+3,C'='          = FOLLOWS CAT?
         BE    ISCAT                   YES
         CLI   COMMAND+3,C' '          BLANK AFTER CAT?
         BNE   TRYREW                  NO
         TM    COMMAND+4,X'C0'         ALFANUMERIC FOLLOWS BLANK?
         BNO   TRYREW                  NO
ISCAT    BAL   R9,CATALOG              YES, GO READ CATALOG
         B     MAINLINE                CONTINUE
TRYCHG   CLI   COMMAND,C'C'            CHANGE REQUEST?
         BNE   TRYFMT                  NO
         CLC   COMMAND(4),=C'CHG>'     IS IT CHANGE DATA?
         BE    CALCHNG                 YES
         MVC   PRT,CHGLINE             NO, MOVE CHANGE LINE
         BAL   R9,PRINT                PRINT IT
         B     MAINLINE                AND CONTINUE
CALCHNG  BAL   R9,CHANGE               YES, GO CHANGE KEY/DATA
         B     MAINLINE                CONTINUE
TRYFMT   CLI   COMMAND,C'F'            FORMAT SPECIFICATION REQUEST?
         BNE   TRYDCB                  NO
         CLC   COMMAND(4),=C'FMT>'     IS IT FORMAT DATA?
         BE    CALFRMT                 YES
         MVC   PRT,FMTLINE             NO, MOVE FORMAT LINE
         BAL   R9,PRINT                PRINT IT
         B     MAINLINE                AND CONTINUE
CALFRMT  BAL   R9,FORMAT               YES, GO SET FORMAT SPECS
         B     MAINLINE                CONTINUE
TRYDCB   CLC   COMMAND(3),=C'DCB'      DCB SPECIFICATION REQUEST?
         BNE   TRYSCH                  NO
         CLI   COMMAND+3,C'>'          IS IT DCB DATA?
         BE    CALDCB                  YES
         MVC   PRT,DCBLINE             NO, MOVE DCB LINE
         BAL   R9,PRINT                PRINT IT
         B     MAINLINE                AND CONTINUE
CALDCB   BAL   R9,SETDCB               YES, GO SET FORMAT SPECS
         B     MAINLINE                CONTINUE
TRYSCH   CLI   COMMAND,C'S'            SEARCH SPECIFICATION REQUEST?
         BNE   TRYREW                  NO
         CLC   COMMAND(4),=C'SCH>'     IS IT SEARCH DATA?
         BE    CALSRCH                 YES
         MVC   PRT,SCHLINH             NO, MOVE SEARCH LINE HEADER
         BAL   R9,PRINT                PRINT IT
         MVC   PRT,SCHLINE             NO, MOVE SEARCH LINE
         BAL   R9,PRINT                PRINT IT
         B     MAINLINE                CONTINUE
CALSRCH  BAL   R9,SEARCH               YES, GO SET SEARCH SPECS
         B     MAINLINE                CONTINUE
TRYREW   CLC   COMMAND(7),=C'REWRITE'  REWRITE REQUEST?
         BNE   TRYEND                  NO
         BAL   R9,REWRITE              GO REWRITE LAST RECORD
         B     MAINLINE                CONTINUE
TRYEND   CLC   COMMAND(4),=C'END '     END REQUESTED?
         BE    EOJ                     YES
BADREQ   BAL   R9,LEGEND               SHOW USER VALID COMMANDS
         B     MAINLINE                CONTINUE
*
***********************************************************************
*             ***** LEGEND *****                                      *
*        PRINT LIST OF VALID COMMANDS                                 *
***********************************************************************
*
LEGEND   ST    R9,LEG9                 SAVE RETURN ADDRESS
         LA    R12,LEGLINES            POINT TO 1ST LEGEND LINE
CKLGEND  CLI   0(R12),X'FF'            END OF LEGEND LINES?
         BE    LEGXIT                  YES
         MVC   PRT,0(R12)              NO, MOVE A LINE TO PRINT
         BAL   R9,PRINT                PRINT THE LINE
         LA    R12,80(R12)             ADVANCE TO NEXT LINE
         B     CKLGEND                 CONTINUE
LEGXIT   L     R9,LEG9                 GET RETURN ADDRESS
         BR    R9                      EXIT
*
***********************************************************************
*                       ***** VOL COMMAND *****                       *
*       LOOK THROUGH THE UCB TABLE IN O/S FOR ONLINE DASD DEVICE UCBS.*
*       WHEN FOUND, PRINT A LINE USING UCB DATA.                      *
***********************************************************************
*
VOLLIST  ST    R9,VLL9                 SAVE RETURN ADDRESS
         XC    WORK100,WORK100         CLEAR FOR EACH NEW INVOCATION
VOLLOOP  SMODE KEY=0,STATE=S
         UCBSCAN ADDRESS,WORKAREA=WORK100,UCBPTR=ADDRUCB,              X
               NOPIN,DYNAMIC=YES,RANGE=ALL,DEVCLASS=DASD
         ST    R15,SAV15               SAVE RETURN CODE
         SMODE KEY=NZERO,STATE=P
         CLC   SAV15,FZERO             FOUND UCB?
         BNE   VLLEND                  NO
         L     R2,ADDRUCB              YES, GET THE UCB ADDRESS
         USING UCBOB,R2
         TM    UCBSTAT,UCBONLI         IS IT ONLINE?
         BZ    VOLLOOP                 NO, SKIP IT
         MVC   VOLVOL,UCBVOLI          VOLUME SERIAL TO PRINT
         MVC   VOLCUU,UCBNAME          CHANNEL-UNIT ADDRESS TO PRINT
         CLI   UCBUNTYP,X'0B'          IS IT A 3350?
         BE    GOT3350L                YES
         CLI   UCBUNTYP,X'0E'          IS IT A 3380?
         BE    GOT3380L                YES
         CLI   UCBUNTYP,X'0F'          IS IT A 3390?
         BE    GOT3390L                YES
         DROP  R2
         MVC   VOLDVC,=C'????'         NO, UNKNOWN DEVICE
         B     PRTVTOC                 CONTINUE
GOT3350L MVC   VOLDVC,=C'3350'         DEVICE=3350
         B     PRTVTOC                 CONTINUE
GOT3380L MVC   VOLDVC,=C'3380'         DEVICE=3380
         B     PRTVTOC                 CONTINUE
GOT3390L MVC   VOLDVC,=C'3390'         DEVICE=3390
PRTVTOC  ICM   R15,15,24(R2)           GET VTOC TTR0 TO R15
         BAL   R9,HEXPRNT              CONVERT TO PRINTABLE
         MVC   VOLVTOC,WORK            VTOC TTR TO PRINT
         MVC   PRT,VOLMSG              O.K. MSG TO PRINT
         BAL   R9,PRINT                WRITE VOLUME DATA MESSAGE
         B     VOLLOOP                 CONTINUE
VLLEND   L     R9,VLL9                 GET RETURN ADDRESS
         BR    R9                      RETURN
*
***********************************************************************
*                        ***** VOL= COMMAND *****                     *
*        LOOK THROUGH THE UCB TABLE IN O/S FOR THE REQUESTED VOLUME.  *
*        IF A UCB IS FOUND, SET THE EXCP FILE DEB UCB ADDRESS TO THIS *
*        UCB, AND CONVERT THE UCB VTOC ADDRESS FROM TTR TO CCHHR FORM.*
*        READ THE  FORMAT 4 DSCB AND SET THE DEB EXTENTS FOR THE VTOC *
*        DATASET. DCB INFORMATION IS SET FOR THE VTOC, ALSO:          *
*          RECFM=F,LRECL=96,BLKSIZE=96,KEYLEN=44.                     *
***********************************************************************
*
VOLUME   ST    R9,VOL9                 SAVE RETURN ADDRESS
         XC    WORK100,WORK100         CLEAR FOR EACH NEW INVOCATION
VLSLOOP  SMODE KEY=0,STATE=S
         UCBSCAN ADDRESS,WORKAREA=WORK100,UCBPTR=ADDRUCB,              X
               NOPIN,DYNAMIC=YES,RANGE=ALL,DEVCLASS=DASD
         ST    R15,SAV15               SAVE RETURN CODE
         SMODE KEY=NZERO,STATE=P
         CLC   SAV15,FZERO             FOUND UCB?
         BNE   NOVOL                   NO
         L     R2,ADDRUCB              YES, GET THE UCB ADDRESS
         USING UCBOB,R2
         TM    UCBSTAT,UCBONLI         IS IT ONLINE?
         BZ    VLSLOOP                 NO
         CLC   UCBVOLI,COMMAND+4       FOUND UCB FOR THIS VOLSER?
         BNE   VLSLOOP                 NO, CONTINUE SEARCH
         B     GOTUCB                  GO PROCESS UCB
NOVOL    MVC   PRT,BADVOL              ERROR MESSAGE
         BAL   R9,PRINT                TELL USER NO SUCH VOL
         B     VOLXIT                  AND EXIT
GOTUCB   MVC   VOLVOL,UCBVOLI          VOLUME SERIAL TO PRINT
         MVC   VOLCUU,UCBNAME          CHANNEL-UNIT ADDRESS TO PRINT
         L     R12,DADCB+44            @ DEB FOR EXCP FILE
         SMODE KEY=0,STATE=P
         STCM  R2,7,33(R12)            CHANGE DEB UCB ADDRESS
         SMODE KEY=NZERO,STATE=P
         SR    R10,R10                 CLEAR FOR DIVIDE
         SR    R11,R11                 CLEAR FOR INSERT
         ICM   R11,3,UCBVTOC           PICK UP VTOC START TRACK
         CLI   UCBUNTYP,X'0B'          IS IT A 3350?
         BE    GOT3350                 YES
         CLI   UCBUNTYP,X'0E'          IS IT A 3380?
         BE    GOT3380                 YES
         CLI   UCBUNTYP,X'0F'          IS IT A 3390?
         BE    GOT3390                 YES
         MVC   PRT,INVDVC              NO, MOVE MESSAGE
         BAL   R9,PRINT                SEND INVALID DEVICE TYPE MSG
         B     VOLXIT                  GO GET ANOTHER VOLSER
GOT3350  D     R10,=F'30'              COMPUTE CYL-HD
         MVC   VLADVC,=C'3350'         DEVICE=3350
         B     SETVTOC                 CONTINUE
GOT3380  D     R10,=F'15'              COMPUTE CYL-HD
         MVC   VLADVC,=C'3380'         DEVICE=3380
         B     SETVTOC                 CONTINUE
GOT3390  D     R10,=F'15'              COMPUTE CYL-HD
         MVC   VLADVC,=C'3390'         DEVICE=3390
SETVTOC  STH   R11,VTOCCYL             SAVE VTOC CYLINDER NBR
         STH   R10,VTOCHD              SAVE VTOC HEAD NUMBER
         MVC   VTOCREC,UCBVTOC+2       VTOC BEGIN RECORD NBR
         ICM   R15,15,UCBVTOC          GET VTOC TTR0 TO R15
         DROP  R2
         BAL   R9,HEXPRNT              CONVERT TO PRINTABLE
         MVC   VOLVTOC,WORK            VTOC TTR TO PRINT
         MVC   BGNXTNT,VTOCADR         SET EXTENT BEGIN TO VTOC START
         MVC   ENDXTNT,VTOCADR         SET EXTENT END TO VTOC START
         MVI   XTNTS,1                 INDICATE SINGLE EXTENT
         BAL   R9,SETXTNT              GO SET DEB EXTENT
         MVI   EXCPMTCH,0              INSURE EXCP
         BAL   R9,EXCPREAD             GO READ FORMAT 4 DSCB
         CLI   EXCPIND,C' '            ANY ERROR?
         BE    VOLCKID                 NO
BADVREC  MVC   PRT,INVFMT4             MESSAGE TO PRINT
         BAL   R9,PRINT                TELL USER UNABLE TO READ FMT4
         B     VOLXIT                  AND EXIT
VOLCKID  LA    R1,RKEYDATA             POINT TO INPUT AREA
         CLI   DS4IDFMT-DSCBFMT4(R1),C'4' POSSIBLE FORMAT 4 DSCB?
         BNE   BADVREC                 NO
         CLI   RKEYDATA,X'04'          POSSIBLE FORMAT 4 DSCB?
         BNE   BADVREC                 NO
         CLC   RKEYDATA+1(43),RKEYDATA IS IT THE FORMAT 4 DSCB?
         BNE   BADVREC                 NO
         MVC   DSCBFMT4,RKEYDATA       YES, SAVE FORMAT 4 DSCB
         MVC   EXTENTS,DS4VTOCE        SET EXTENTS TO VTOC EXTENTS
         MVI   XTNTS,1                 INDICATE SINGLE EXTENT
         BAL   R9,SETXTNT              SET DEB EXTENTS FOR VTOC
         ICM   R15,15,RCOUNT           GET FORMAT 4 CCHH
         BAL   R9,HEXPRNT              MAKE PRINTABLE
         MVC   VLACHR(8),WORK          MOVE TO PRINT
         ICM   R15,8,RCOUNT+4          GET FORMAT 4 REC NBR
         BAL   R9,HEXPRNT              MAKE IT PRINTABLE
         MVC   VLACHR+8(2),WORK        MOVE TO PRINT
         ICM   R15,15,DS4HPCHR         GET HIGHEST USED CCHH
         BAL   R9,HEXPRNT              MAKE PRINTABLE
         MVC   VLAHI(8),WORK           MOVE TO PRINT
         ICM   R15,8,DS4HPCHR+4        GET HIGHEST USED REC NBR
         BAL   R9,HEXPRNT              MAKE IT PRINTABLE
         MVC   VLAHI+8(2),WORK         MOVE TO PRINT
         SR    R15,R15                 CLEAR FOR INSERT
         ICM   R15,3,DS4DSREC          GET NUMBER AVAILABLE DSCBS
         CVD   R15,DBLWD               CONVERT TO PACKED
         UNPK  VLANDSCB,DBLWD          MOVE TO PRINT
         OI    VLANDSCB+4,C'0'         CLEAR SIGN
         MVC   PRT,VLA1                VOLUME LINE 1 TO PRINT
         BAL   R9,PRINT                PRINT IT
         SR    R15,R15                 CLEAR FOR INSERT
         ICM   R15,3,DS4NOCYL          GET NBR CYL PER VOLUME
         CVD   R15,DBLWD               CONVERT TO PACKED
         UNPK  VLANCYL,DBLWD           UNPACK TO PRINT
         OI    VLANCYL+4,C'0'          CLEAR SIGN
         ICM   R15,3,DS4TKLC           GET NBR TRACKS PER CYLINDER
         CVD   R15,DBLWD               CONVERT TO PACKED
         UNPK  VLANTRK,DBLWD           UNPACK TO PRINT
         OI    VLANTRK+4,C'0'          CLEAR SIGN
         ICM   R15,3,DS4DEVTK          GET BYTES PER TRACK
         CVD   R15,DBLWD               CONVERT TO PACKED
         UNPK  VLABTRK,DBLWD           UNPACK TO PRINT
         OI    VLABTRK+4,C'0'          CLEAR SIGN
         SR    R15,R15                 CLEAR FOR INSERT
         IC    R15,DS4DEVDT            GET NBR DSCBS/TRACK
         CVD   R15,DBLWD               CONVERT TO PACKED
         UNPK  VLADSCT,DBLWD           UNPACK TO PRINT
         OI    VLADSCT+2,C'0'          CLEAR SIGN
         MVC   PRT,VLA2                VOLUME LINE 2 TO PRINT
         BAL   R9,PRINT                PRINT IT
         SR    R15,R15                 CLEAR FOR INSERT
         IC    R15,DS4DEVDB            GET NBR DIRECTORY BLOCKS/TRACK
         CVD   R15,DBLWD               CONVERT TO PACKED
         UNPK  VLADBTRK,DBLWD          UNPACK TO PRINT
         OI    VLADBTRK+2,C'0'         CLEAR SIGN
         ICM   R15,15,DS4AMTIM         1ST 4 BYTES OF VSAM TIME STAMP
         BAL   R9,HEXPRNT              MAKE PRINTABLE
         MVC   VLATMSTP(8),WORK        MOVE TO PRINT
         ICM   R15,15,DS4AMTIM+4       LAST 4 BYTES OF TIME STAMP
         BAL   R9,HEXPRNT              MAKE PRINTABLE
         MVC   VLATMSTP+8(8),WORK      MOVE TO PRINT
         MVC   VLAVSOWN,=C'NO '        ASSUME NOT VSAM OWNED
         TM    DS4VSIND,X'80'          IS IT OWNED BY VSAM?
         BZ    VLAPRT3                 NO
         MVC   VLAVSOWN,=C'YES'        YES
VLAPRT3  MVC   PRT,VLA3                VOLUME LINE 3 TO PRINT
         BAL   R9,PRINT                PRINT IT
         SR    R15,R15                 CLEAR FOR INSERT
         ICM   R15,3,DS4VSCRA          GET REL TRK OF CRA
         CVD   R15,DBLWD               CONVERT TO PACKED
         UNPK  VLACRA,DBLWD            UNPACK TO PRINT
         OI    VLACRA+4,C'0'           CLEAR SIGN
         ICM   R15,15,DS4R2TIM         GET CATALOG MATCH TIME STAMP
         BAL   R9,HEXPRNT              CONVERT TO PRINTABLE
         MVC   VLACMTS(8),WORK         MOVE TO PRINT
         ICM   R15,15,DS4R2TIM+4       LAST 4 BYTES
         BAL   R9,HEXPRNT              CONVERT TO PRINTABLE
         MVC   VLACMTS+8(8),WORK       MOVE TO PRINT
         MVC   PRT,VLA4                VOLUME LINE 4 TO PRINT
         BAL   R9,PRINT                PRINT IT
         SR    R15,R15                 CLEAR FOR INSERT
         ICM   R15,15,DS4VTOCE+2       GET BEGIN EXTENT CCHH
         BAL   R9,HEXPRNT              MAKE PRINTABLE
         MVC   VLABGN,WORK             MOVE TO PRINT
         ICM   R15,15,DS4VTOCE+6       GET END EXTENT CCHH
         BAL   R9,HEXPRNT              MAKE PRINTABLE
         MVC   VLAEND,WORK             MOVE TO PRINT
         MVC   PRT,VLA5                VOLUME LINE 5 TO PRINT
         BAL   R9,PRINT                PRINT IT
         MVC   RECFM,=C'F  '           RECFM=F
         MVC   LRECL,=H'96'            LRECL=96
         MVC   BLKSIZE,=H'96'          BLKSIZE=96
         MVC   KEYLEN,=H'44'           KEYLEN=44
VOLXIT   L     R9,VOL9                 GET RETURN ADDRESS
         BR    R9                      RETURN
*
***********************************************************************
*                      ***** DSN COMMAND *****                        *
*        READ THE VTOC AND PRINT DATA FOR EACH FORMAT 1 DSCB FOUND.   *
***********************************************************************
*
DSNLIST  ST    R9,DSL9                 SAVE RETURN ADDRESS
         MVI   XTNTS,1                 INDICATE SINGLE EXTENT
         CLI   DS4IDFMT,C'4'           IS A FORMAT 4 DSCB AVAILABLE?
         BE    DSNLSET                 YES
         MVC   PRT,NOFMT4              MESSAGE TO PRINT
         BAL   R9,PRINT                TELL USER NO FORMAT 4 HERE
         B     DSNLXIT                 EXIT
DSNLSET  MVC   EXTENTS(6),DS4VTOCE     BEGIN EXTENT FOR VTOC
         MVC   EXTENTS+6(4),DS4HPCHR   HIGHEST CCHHR USED FOR FMT1
         MVI   XTNTS,1                 INDICATE SINGLE EXTENT
         BAL   R9,SETXTNT              SET UP DEB EXTENTS FOR VTOC
         MVC   PRT,DSNHDR              DSNAME HEADER TO PRINT
         BAL   R9,PRINT                PRINT HEADER
READVTOC MVI   EXCPMTCH,0              INSURE EXCP
         BAL   R9,EXCPREAD             GO READ A DSCB
         CLI   EXCPIND,C' '            ANY EXCEPTIONAL CONDITION?
         BNE   DSNLXIT                 YES
         LA    R1,RKEYDATA             POINT TO INPUT DATA
         CLI   DS1FMTID-DSCBFMT1(R1),C'1' IS IT A FORMAT 1 DSCB?
         BNE   READVTOC                NO
         MVC   DSCBFMT1,RKEYDATA       YES, SAVE IN FORMAT 1 DSCB
         MVC   DSNDSNAM,DS1DSNAM       DSNAME TO PRINT
         MVC   DSNDSORG,=C'PS'         ASSUME PS
         TM    DS1DSORG,X'40'          IS IT PS?
         BO    RECFM1                  YES
         MVC   DSNDSORG,=C'PO'         ASSUME PO
         TM    DS1DSORG,X'02'          IS IT PO?
         BO    RECFM1                  YES
         MVC   DSNDSORG,=C'VS'         ASSUME VSAM
         TM    DS1DSORG+1,X'08'        IS IT VSAM?
         BO    RECFM1                  YES
         MVC   DSNDSORG,=C'IS'         ASSUME ISAM
         TM    DS1DSORG,X'80'          IS IT ISAM?
         BO    RECFM1                  YES
         MVC   DSNDSORG,=C'DA'         ASSUME DA
         TM    DS1DSORG,X'20'          IS IT DA?
         BO    RECFM1                  YES
         MVC   DSNDSORG,=C'??'         UNKNOWN TYPE
RECFM1   MVC   DSNRECFM,=C'U  '        ASSUME UNDEFINED
         TM    DS1RECFM,X'C0'          IS IT UNDEFINED?
         BO    RECFM2                  YES
         MVI   DSNRECFM,C'?'           ASSUME UNIDENTIFIABLE
         BZ    RECFM2                  BRANCH IF UNIDENTIFIABLE
         MVI   DSNRECFM,C'F'           ASSUME FIXED
         TM    DS1RECFM,X'80'          IS IT FIXED?
         BO    RECFM2                  YES
         MVI   DSNRECFM,C'V'           SHOW VARIABLE
RECFM2   TM    DS1RECFM,X'10'          IS IT BLOCKED?
         BZ    RECFM3                  NO
         MVI   DSNRECFM+1,C'B'         YES, SHOW BLOCKED
RECFM3   TM    DS1RECFM,X'06'          CONTROL CHARACTERS?
         BZ    LRECL1                  NO
         MVI   DSNRECFM+2,C'A'         ASSUME ASA CONTROL
         TM    DS1RECFM,X'04'          IS IT ASA CONTROL?
         BO    RECFM4                  YES
         MVI   DSNRECFM+2,C'M'         NO, MACHINE CONTROL
RECFM4   CLI   DSNRECFM+1,C' '         BLOCKED RECORDS?
         BE    LRECL1                  NO
         MVC   DSNRECFM+1(1),DSNRECFM+2 YES, MOVE CONTROL BACK
         MVI   DSNRECFM+2,C' '         CLEAR LAST BYTE
LRECL1   SR    R15,R15                 CLEAR FOR INSERT
         ICM   R15,3,DS1LRECL          GET LRECL
         CVD   R15,DBLWD               CONVERT TO PACKED
         MVC   DSNLRECL,=X'20206B202020' EDIT WORD
         ED    DSNLRECL-1(7),DBLWD+5   EDIT LRECL TO PRINT
         ICM   R15,3,DS1BLKL           GET BLKSIZE
         CVD   R15,DBLWD               CONVERT TO PACKED
         MVC   DSNBLKSI,=X'20206B202020' EDIT WORD
         ED    DSNBLKSI-1(7),DBLWD+5   EDIT BLKSIZE TO PRINT
         SR    R15,R15                 CLEAR FOR INSERT
         IC    R15,DS1KEYL             GET KEY LENGTH
         CVD   R15,DBLWD               CONVERT TO PACKED
         MVC   DSNKEYLN,=X'202020'     EDIT WORD
         ED    DSNKEYLN-1(4),DBLWD+6   EDIT KEY LENGTH TO PRINT
         MVC   PRT,DSNDATA             DSN DATA TO PRINT
         BAL   R9,PRINT                PRINT DSN DATA
         B     READVTOC                CONTINUE THROUGH VTOC
DSNLXIT  L     R9,DSL9                 GET RETURN ADDRESS
         BR    R9                      EXIT
*
***********************************************************************
*                    ***** DSN= COMMAND *****                         *
*        SEARCH THE VTOC FOR THE DSNAME SPECIFIED. WHEN FOUND,        *
*        ESTABLISH THE FILE EXTENTS USING THE FORMATS 1 AND 3 DSCB'S. *
*        SET  UP DCB DSORG, RECFM, LRECL, BLKSIZE, AND KEYLEN FOR USE *
*        BY THE R, FMT, AND SCH COMMANDS.                             *
***********************************************************************
*
DSNAMEA  ST    R9,DSN9                 SAVE RETURN ADDRESS
         MVI   EXCPMTCH,0              INSURE EXCP
         CLI   DS4IDFMT,C'4'           IS A FORMAT 4 DSCB AVAILABLE?
         BE    DSALSET                 YES
         MVC   PRT,NOFMT4              MESSAGE TO PRINT
         BAL   R9,PRINT                TELL USER NO FORMAT 4 HERE
         B     DSNXIT                  EXIT
DSALSET  MVC   EXTENTS,DS4VTOCE        SET EXTENTS FOR VTOC
         MVI   XTNTS,1                 INDICATE SINGLE EXTENT
         BAL   R9,SETXTNT              SET UP DEB EXTENTS FOR VTOC
         MVC   SCHKYLN,=H'44'          SET SEARCH KEY = LENGTH
         MVI   EXCPMTCH,0              INSURE EXCP
         BAL   R9,EXCPKEY              GO READ THE FORMAT 1 DSCB
         CLI   EXCPIND,C' '            ANY EXCEPTIONAL CONDITION?
         BE    GOTLABEL                NO
         MVC   PRT,BADDSN              MOVE MESSAGE
         BAL   R9,PRINT                TELL USER DSNAME INVALID
         B     DSNXIT                  EXIT
GOTLABEL MVC   DS1FMTID(96),RKEYDATA   MOVE DATA PORTION
         MVC   DS1DSNAM,COMMAND+4      MOVE DATASET NAME
         ICM   R15,15,RCOUNT           GET CCHH ADDRESS OF FORMAT 1
         BAL   R9,HEXPRNT              MAKE PRINTABLE
         MVC   DSADSCB1(8),WORK        MOVE TO PRINT
         ICM   R15,8,RCOUNT+4          GET R OF FORMAT 1
         BAL   R9,HEXPRNT              MAKE PRINTABLE
         MVC   DSADSCB1+8(2),WORK      MOVE TO PRINT
         MVC   DSADSN,DS1DSNAM         DSNAME TO PRINT
         MVC   PRT,DSA1                DATA LINE 1 TO PRINT
         BAL   R9,PRINT                PRINT IT
         MVC   DSADSORG,=C'PS  '       ASSUME PS
         MVC   DSORG,=C'PS'            ASSUME PS
         TM    DS1DSORG,X'40'          IS IT PS?
         BO    DORECFM                 YES
         MVC   DSADSORG,=C'PO  '       ASSUME PO
         MVC   DSORG,=C'PO'            ASSUME PO
         TM    DS1DSORG,X'02'          IS IT PO?
         BO    DORECFM                 YES
         MVC   DSADSORG,=C'VSAM'       ASSUME VSAM
         MVC   DSORG,=C'VS'            ASSUME VSAM
         TM    DS1DSORG+1,X'08'        IS IT VSAM?
         BO    DORECFM                 YES
         MVC   DSADSORG,=C'ISAM'       ASSUME ISAM
         MVC   DSORG,=C'IS'            ASSUME ISAM
         TM    DS1DSORG,X'80'          IS IT ISAM?
         BO    DORECFM                 YES
         MVC   DSADSORG,=C'DA  '       ASSUME DA
         MVC   DSORG,=C'DA'            ASSUME DA
         TM    DS1DSORG,X'20'          IS IT DA?
         BO    DORECFM                 YES
         MVC   DSADSORG,=C'????'       UNIDENTIFIABLE DSORG
         MVC   DSORG,=C'??'            UNIDENTIFIABLE DSORG
DORECFM  MVC   DCBDSORG,DSADSORG       SAVE DSORG IN DCBLINE
         MVC   DSARECFM,=C'U  '        ASSUME UNDEFINED
         TM    DS1RECFM,X'C0'          IS IT U?
         BO    DOBLKD                  YES
         MVC   DSARECFM,=C'F  '        ASSUME FIXED
         TM    DS1RECFM,X'80'          IS IT F?
         BO    DOBLKD                  YES
         MVC   DSARECFM,=C'V  '        ASSUME VARIABLE
         TM    DS1RECFM,X'40'          IS IT VARIABLE?
         BO    DOBLKD                  YES
         MVC   DSARECFM,=C'?  '        UNIDENTIFIABLE RECFM
DOBLKD   TM    DS1RECFM,X'10'          IS IT BLOCKED?
         BZ    DOCTLCH                 NO
         MVI   DSARECFM+1,C'B'         YES, BLOCKED
         TM    DS1RECFM,X'06'          CONTROL CHARACTERS?
         BZ    DOLRECL                 NO
         MVI   DSARECFM+2,C'A'         ASSUME ASA
         TM    DS1RECFM,X'04'          IS IT ASA?
         BO    DOLRECL                 YES
         MVI   DSARECFM+2,C'M'         NO, MACHINE CODE
         B     DOLRECL                 CONTINUE
DOCTLCH  TM    DS1RECFM,X'06'          CONTROL CHARACTERS?
         BZ    DOLRECL                 NO
         MVI   DSARECFM+1,C'A'         ASSUME ASA
         TM    DS1RECFM,X'04'          IS IT ASA?
         BO    DOLRECL                 YES
         MVI   DSARECFM+1,C'M'         NO, MACHINE CODE
DOLRECL  MVC   DCBRECFM,DSARECFM       SAVE RECFM IN DCBLINE
         SR    R15,R15                 CLEAR FOR INSERT
         ICM   R15,3,DS1LRECL          PICK UP LRECL
         STH   R15,LRECL               SET UP LRECL
         CVD   R15,DBLWD               CONVERT TO PACKED
         UNPK  DSALRECL,DBLWD          UNPACK TO PRINT
         OI    DSALRECL+4,C'0'         CLEAR SIGN
         MVC   DCBLRECL,DSALRECL       SAVE LRECL IN DCBLINE
         ICM   R15,3,DS1BLKL           PICK UP BLKSIZE
         STH   R15,BLKSIZE             SET UP BLKSIZE
         CVD   R15,DBLWD               CONVERT TO PACKED
         UNPK  DSABLKSI,DBLWD          UNPACK TO PRINT
         OI    DSABLKSI+4,C'0'         CLEAR SIGN
         MVC   DCBBLKSI,DSABLKSI       SAVE BLKSIZE IN DCBLINE
         SR    R15,R15                 CLEAR FOR INSERT
         IC    R15,DS1KEYL             PICK UP KEY LENGTH
         STH   R15,KEYLEN              SET UP KEY LENGTH
         CVD   R15,DBLWD               CONVERT TO PACKED
         UNPK  DSAKEYL,DBLWD           UNPACK TO PRINT
         OI    DSAKEYL+2,C'0'          CLEAR SIGN
         MVC   DCBKEYLE,DSAKEYL        SAVE KEYLEN IN DCBLINE
         ICM   R15,3,DS1RKP            PICK UP RELATIVE KEY POSITION
         CVD   R15,DBLWD               CONVERT TO PACKED
         UNPK  DSARKP,DBLWD            UNPACK TO PRINT
         OI    DSARKP+4,C'0'           CLEAR SIGN
         MVC   DCBRKP,DSARKP           SAVE RKP IN DCBLINE
         MVC   PRT,DSA2                DATASET INFO LINE 2 TO PRINT
         BAL   R9,PRINT                PRINT IT
         MVC   DSAVOL,DS1DSSN          VOLSER TO PRINT
         SR    R15,R15                 CLEAR FOR INSERT
         IC    R15,DS1NOEPV            GET NBR EXTENTS
         CVD   R15,DBLWD               CONVERT TO PACKED
         UNPK  DSANOEXT,DBLWD          UNPACK TO PRINT
         OI    DSANOEXT+1,C'0'         CLEAR SIGN
         ICM   R15,3,DS1VOLSQ          GET VOLUME SEQUENCE NUMBER
         CVD   R15,DBLWD               CONVERT TO PACKED
         UNPK  DSAVLSQ,DBLWD           UNPACK TO PRINT
         OI    DSAVLSQ+2,C'0'          CLEAR SIGN
         SR    R9,R9                   CLEAR FOR INSERT
         IC    R9,DS1CREDT             YEAR OF CREATION
         CVD   R9,DBLWD                CONVERT TO PACKED
         UNPK  DSACREAT(2),DBLWD       UNPACK TO PRINT
         OI    DSACREAT+1,C'0'         CLEAR SIGN
         ICM   R9,3,DS1CREDT+1         DAY OF CREATION
         CVD   R9,DBLWD                CONVERT TO PACKED
         UNPK  DSACREAT+3(3),DBLWD     UNPACK TO PRINT
         OI    DSACREAT+5,C'0'         CLEAR SIGN
         MVI   DSACREAT+2,C'/'         DELIMIT
         SR    R9,R9                   CLEAR FOR INSERT
         IC    R9,DS1EXPDT             YEAR OF EXPIRATION
         CVD   R9,DBLWD                CONVERT TO PACKED
         UNPK  DSAEXP(2),DBLWD         UNPACK TO PRINT
         OI    DSAEXP+1,C'0'           CLEAR SIGN
         ICM   R9,3,DS1EXPDT+1         DAY OF EXPIRATION
         CVD   R9,DBLWD                CONVERT TO PACKED
         UNPK  DSAEXP+3(3),DBLWD       UNPACK TO PRINT
         OI    DSAEXP+5,C'0'           CLEAR SIGN
         MVI   DSAEXP+2,C'/'           DELIMIT
         MVC   PRT,DSA3                DATASET INFO LINE 3 TO PRINT
         BAL   R9,PRINT                PRINT IT
         SR    R9,R9                   CLEAR FOR INSERT
         IC    R9,DS1REFD              YEAR OF LAST REFERENCE
         CVD   R9,DBLWD                CONVERT TO PACKED
         UNPK  DSAREF(2),DBLWD         UNPACK TO PRINT
         OI    DSAREF+1,C'0'           CLEAR SIGN
         ICM   R9,3,DS1REFD+1          DAY OF LAST REFERENCE
         CVD   R9,DBLWD                CONVERT TO PACKED
         UNPK  DSAREF+3(3),DBLWD       UNPACK TO PRINT
         OI    DSAREF+5,C'0'           CLEAR SIGN
         MVI   DSAREF+2,C'/'           DELIMIT
         MVC   DSAPSWD,=CL10'NONE'     ASSUME NO PASSWORD
         TM    DS1DSIND,X'14'          IS IT PASSWORD PROTECTED?
         BZ    DOALLOC                 NO
         MVC   DSAPSWD,=CL10'WRITE ONLY' ASSUME WRITE PROTECT ONLY
         BO    DOALLOC                 BRANCH IF BOTH READ AND WRITE
         MVC   DSAPSWD,=CL10'READ/WRITE' ASSUME READ AND WRITE PROT
DOALLOC  MVC   DSALLOC,=C'CYL   '      ASSUME CYLINDER ALLOC
         TM    DS1SCALO,X'C0'          IS IT CYLINDERS?
         BO    DOSECND                 YES
         MVC   DSALLOC,=C'ABSTRK'      ASSUME ABSOLUTE TRACK
         BZ    DOSECND                 BRANCH IF ABS TRK
         MVC   DSALLOC,=C'TRK   '      ASSUME TRACK ALLOCATION
         TM    DS1SCALO,X'80'          IS IT TRACK?
         BO    DOSECND                 YES
         MVC   DSALLOC,=C'BLOCKS'      ASSUME BLOCK ALLOCATION
DOSECND  SR    R15,R15                 CLEAR FOR INSERT
         ICM   R15,7,DS1SCAL           GET SECONDARY ALLOCATION SIZE
         CVD   R15,DBLWD               CONVERT TO PACKED
         UNPK  DSASEC,DBLWD            UNPACK TO PRINT
         OI    DSASEC+5,C'0'           CLEAR SIGN
         MVC   PRT,DSA4                DATASET INFO LINE 4 TO PRINT
         BAL   R9,PRINT                PRINT IT
         SR    R15,R15                 CLEAR FOR INSERT
         ICM   R15,14,DS1LSTAR         PICK UP TTR OF LAST BLOCK
         BAL   R9,HEXPRNT              MAKE PRINTABLE
         MVC   DSALBT,WORK             MOVE TO PRINT
         ICM   R15,15,DS1PTRDS         GET CCHH FOR FORMAT3
         BAL   R9,HEXPRNT              CONVERT TO PRINTABLE
         MVC   DSAFMT3(8),WORK         MOVE TO PRINT
         ICM   R15,8,DS1PTRDS+4        GET R FOR FORMAT3
         BAL   R9,HEXPRNT              CONVERT TO PRINTABLE
         MVC   DSAFMT3+8(2),WORK       MOVE TO PRINT
         MVC   PRT,DSA5                DATASET INFO LINE 5 TO PRINT
         BAL   R9,PRINT                PRINT IT
         MVC   DS1FMTID(96),RKEYDATA   SAVE FORMAT 1 DSCB DATA
         CLC   DS1PTRDS,=XL5'00'       IS THERE A FORMAT 3?
         BE    SET1EXT                 NO
         MVC   RCOUNT(5),DS1PTRDS      YES, SET UP TO READ FORMAT 3
         IC    R15,RCOUNT+4            GET RECORD NUMBER
         BCTR  R15,0                   BACK UP 1
         STC   R15,RCOUNT+4            SET SEARCH TO PRECEDING REC
         MVI   EXCPMTCH,0              INSURE EXCP
         BAL   R9,EXCPREAD             GO READ FORMAT 3 DSCB
         CLI   EXCPIND,C' '            ANY ERROR?
         BNE   ERRFMT3                 YES
         CLC   RKEYDATA(4),=X'03030303' IS IT A FORMAT 3?
         BE    MOVE3                   YES
ERRFMT3  MVC   PRT,FMT3ERR             MESSAGE TO PRINT
         BAL   R9,PRINT                PRINT FORMAT 3 ERROR
         B     SET1EXT                 CONTINUE
MOVE3    MVC   DSCBFMT3,RKEYDATA       SAVE FORMAT 3 LABEL
         MVC   EXTADNL+20(40),DS3EXT1  MOVE LAST 13 EXTENTS
         MVC   EXTADNL+60(90),DS3EXT5  MOVE LAST 13 EXTENTS
SET1EXT  MVC   EXTENTS(30),DS1EXT1     MOVE 1ST 3 EXTENTS
         MVC   XTNTS,DS1NOEPV          SET NUMBER EXTENTS
         BAL   R9,SETXTNT              SET UP EXTENTS FOR DATASET
         SR    R10,R10                 CLEAR FOR INSERT
         IC    R10,DS1NOEPV            GET NBR EXTENTS
         LA    R11,EXTENTS             POINT TO EXTENT SAVE AREA
         CLI   DS1NOEPV,0              ANY EXTENTS?
         BNE   NEXTXTNA                YES
         MVC   PRT(34),=CL34'    *** DATASET HAS NO EXTENTS ***'
         BAL   R9,PRINT                PRINT MESSAGE
         B     DSNXIT                  NO
NEXTXTNA MVC   DSAXTYP,=C'DATA'        ASSUME DATA EXTENT
         TM    0(R11),X'01'            IS IT DATA EXTENT?
         BO    DOXSEQ                  YES
         MVC   DSAXTYP,=C'OFLO'        ASSUME OVERFLOW EXTENT
         TM    0(R11),X'02'            IS IT OVERFLOW?
         BO    DOXSEQ                  YES
         MVC   DSAXTYP,=C'INDX'        ASSUME INDEX EXTENT
         TM    DSAXTYP,X'04'           IS IT INDEX?
         BO    DOXSEQ                  YES
         MVC   DSAXTYP,=C'ULBL'        ASSUME USER LABEL EXTENT
         TM    DSAXTYP,X'40'           IS IT USER LABEL EXTENT?
         BO    DOXSEQ                  YES
         MVC   DSAXTYP,=C'SHRD'        ASSUME SHARED EXTENT
         TM    0(R11),X'80'            IS IT A SHARED EXTENT?
         BO    DOXSEQ                  YES
         MVC   DSAXTYP,=C'????'        UNIDENTIFIABLE EXTENT
DOXSEQ   SR    R15,R15                 CLEAR FOR INSERT
         IC    R15,1(R11)              PICK UP EXTENT SEQUENCE NBR
         CVD   R15,DBLWD               CONVERT TO PACKED
         UNPK  DSAXSEQ,DBLWD           UNPACK TO PRINT
         OI    DSAXSEQ+2,C'0'          CLEAR SIGN
         ICM   R15,15,2(R11)           GET BEGIN EXTENT CCHH
         BAL   R9,HEXPRNT              MAKE PRINTABLE
         MVC   DSAXBGN,WORK            MOVE TO PRINT
         ICM   R15,15,6(R11)           GET END EXTENT CCHH
         BAL   R9,HEXPRNT              MAKE PRINTABLE
         MVC   DSAXEND,WORK            MOVE TO PRINT
         MVC   PRT,DSA6                EXTENT INFO LINE TO PRINT
         BAL   R9,PRINT                PRINT IT
         LA    R11,10(R11)             POINT TO NEXT EXTENT BLOCK
         BCT   R10,NEXTXTNA            LOOP THRU ALL EXTENTS
         MVI   VALIDPO,0               CLEAR VALID PDS SWITCH
         TM    DS1DSORG,X'02'          IS IT A PO DATASET?
         BZ    DSNXIT                  NO
         ZAP   NBRU,=P'0'              CLEAR USED COUNT
         ZAP   NBRA,=P'0'              CLEAR ALLOCATED COUNT
         MVI   GOTFF,0                 CLEAR END OF DIR SWITCH
POREAD   MVI   EXCPMTCH,0              INSURE EXCP
         BAL   R9,EXCPREAD             READ A DIRECTORY BLOCK
         CLI   EXCPIND,C'X'            HARD I/O ERROR?
         BE    DSNXIT                  YES, EXIT
         CLI   EXCPIND,C' '            ANY ERROR?
         BNE   PRTPO                   YES, OR EOF OR EOE
         CLI   RCOUNT+5,8              KEY=8 BYTES?
         BNE   PRTPO                   NO, NOT A DIRECTORY BLOCK
         AP    NBRA,=P'1'              INCREMENT NBR ALLOCATED
         CLI   GOTFF,1                 PAST LAST USED BLOCK?
         BE    POREAD                  YES
         CLI   RKEYDATA,X'00'          THIS BLOCK USED?
         BE    SETGOTFF                NO
         AP    NBRU,=P'1'              YES, INCREMENT USED COUNT
         CLI   RKEYDATA,X'FF'          THIS BLOCK THE LAST USED?
         BNE   POREAD                  NO
SETGOTFF MVI   GOTFF,1                 SHOW LAST USED BLK FOUND
         B     POREAD                  GO READ NEXT BLOCK
PRTPO    UNPK  PRTUSED,NBRU            UNPACK TO PRINT
         OI    PRTUSED+4,C'0'          CLEAR SIGN
         UNPK  PRTALOC,NBRA            UNPACK TO PRINT
         OI    PRTALOC+4,C'0'          CLEAR SIGN
         MVC   PRT,DSA7                LINE 7 TO PRINT
         BAL   R9,PRINT                PRINT IT
         SR    R9,R9                   CLEAR FOR INSERT
         IC    R9,XTNTS                GET NBR EXTENTS
         LA    R14,EXTENTS             POINT TO EXTENTS TABLE
         LA    R15,POXTNTS             POINT TO PDS EXTENT TABLE
         XC    PORELTT,PORELTT         STARTING REL TRK IS ZERO
NXTPOXT  LH    R2,BGNXTNT-EXTENTS(R14) EXTENT BEGIN CYLINDER
         MH    R2,DS4TKLC              MULTIPLY BY TRKS/CYL
         AH    R2,BGNXTNT+2-EXTENTS(R14) ADD BEGIN TRACK
         STH   R2,POACTTT-POXTNTS(R15) SAVE ACTUAL START
         LH    R2,ENDXTNT-EXTENTS(R14) EXTENT ENDING CYLINDER
         MH    R2,DS4TKLC              MULTIPLY BY TRKS/CYL
         AH    R2,ENDXTNT+2-EXTENTS(R14) ADD ENDING TRACK
         SH    R2,POACTTT-POXTNTS(R15) COMPUTE NBR TRKS IN XTNT
         LA    R2,1(R2)                ADD 1
         AH    R2,PORELTT-POXTNTS(R15) RELATIVE TRK FOR NEXT XTNT
         STH   R2,PORELTT-POXTNTS+L'POXTNTS(R15) SAVE NEXT XTNT REL TRK
         LA    R14,L'EXTENTS(R14)      ADVANCE TO NEXT ENTRY
         LA    R15,L'POXTNTS(R15)      ADVANCE TO NEXT ENTRY
         BCT   R9,NXTPOXT              LOOP THROUGH ALL EXTENTS
ENDPO    MVI   VALIDPO,1               INDICATE VALID PDS
         MVC   SAVEXT,EXTENTS          SAVE DATASET EXTENT TABLE
         MVC   SAVNBRX,XTNTS           SAVE NBR EXTENTS
         MVC   PORELTT-POXTNTS(2,R15),=X'FFFF' SET HIGH REL TRK
DSNXIT   MVC   RECFM,DSARECFM          SET UP RECFM
         MVC   DSORG,DSADSORG          SET UP DSORG
         L     R9,DSN9                 GET RETURN ADDRESS
         BR    R9                      EXIT
*
***********************************************************************
*                    ***** TTR= COMMAND *****                         *
*        IF A PDS IS CURRENTLY BEING ACCESSED, LOCATE THE GIVEN       *
*        RELATIVE TRACK AND RECORD (TTR) AND POSITION TO IT IN THE    *
*        BODY OF THE FILE.                                            *
***********************************************************************
*
TTR      ST    R9,TTR9                 SAVE RETURN ADDRESS
         LA    R14,COMMAND+4           POINT TO TTR VALUE IN INPUT
         LA    R15,3                   CONVERT 3 CHARACTER PAIRS
         BAL   R9,CHARHEX              GO CONVERT TO REAL HEX
         CLI   CHERR,0                 ANY ERROR?
         BNE   TTRNOTFD                YES
         MVC   DIRETTR,HEX             SAVE AS TTR FOR SEARCH
         SR    R9,R9                   CLEAR FOR INSERT
         IC    R9,SAVNBRX              GET NBR EXTENTS
         LA    R14,SAVEXT              POINT TO EXTENTS
         LA    R15,POXTNTS             POINT TO RELATIVE EXTENT TABLE
TTRCHK   CLC   PORELTT-POXTNTS+L'POXTNTS(2,R15),DIRETTR NEXT REL TRK >?
         BH    GOTTXTNT                YES, THIS IS EXTENT
         LA    R15,L'POXTNTS(R15)      NO, STEP TO NEXT REL ENTRY
         LA    R14,L'EXTENTS(R14)      NO, STEP TO NEXT ACTUAL ENTRY
         BCT   R9,TTRCHK               LOOP TO FIND EXTENT
         B     TTRNOTFD                BRANCH IF NOT FOUND
GOTTXTNT MVC   EXTENTS,0(R14)          MOVE THIS EXTENT
         LH    R1,DIRETTR              GET REL TRK FROM DIRECTORY ENTRY
         SH    R1,PORELTT-POXTNTS(R15) DEDUCT BEGINNING REL TRK
         AH    R1,POACTTT-POXTNTS(R15) COMPUTE ACTUAL START TRACK
         SR    R0,R0                   CLEAR FOR DIVIDE
         LH    R2,DS4TKLC              GET NBR TRKS/CYL
         DR    R0,R2                   COMPUTE START CYL, TRK
         STH   R0,BGNXTNT+2            SAVE START TRK
         STH   R1,BGNXTNT              SAVE START CYL
         STC   R9,XTNTS                SAVE NBR XTNTS REMAINING
         LA    R15,EXTENTS+L'EXTENTS   POINT TO SECOND EXTENT AREA
         LA    R14,L'EXTENTS(R14)      STEP TO NEXT SAVED EXTENT
TSTTCMP  BCT   R9,MVNTXBX              LOOP TO MOVE REST
         BAL   R9,SETXTNT              SET UP EXTENTS FOR READ
         SR    R1,R1                   CLEAR FOR INSERT
         IC    R1,DIRETTR+2            PICK UP RECORD NBR
         BCTR  R1,0                    BACK UP 1
         STC   R1,RCOUNT+4             SET BEGIN RECORD NBR
         B     TTRXIT                  AND EXIT
MVNTXBX  MVC   0(L'EXTENTS,R15),0(R14) MOVE NEXT EXTENT
         LA    R14,L'EXTENTS(R14)      POINT TO NEXT EXTENT
         LA    R15,L'EXTENTS(R15)      POINT TO NEXT EXTENT
         B     TSTTCMP                 CONTINUE
TTRNOTFD MVC   PRT+1(13),=C'TTR NOT FOUND' ERROR MESSAGE
         BAL   R9,PRINT                GO PRINT ERROR MESSAGE
TTRXIT   L     R9,TTR9                 GET RETURN ADDRESS
         BR    R9                      EXIT
*
***********************************************************************
*                    ***** MEM= COMMAND *****                         *
*        IF A PDS IS CURRENTLY BEING ACCESSED, LOCATE THE MEMBER      *
*        NAME IN THE DIRECTORY, POSITION TO THE FIRST RECORD OF THE   *
*        MEMBER, AND PRINT THE DIRECTORY ENTRY                        *
***********************************************************************
*
MEMBRNM  ST    R9,MEMR9                SAVE RETURN ADDRESS
         MVC   EXTENTS(150),SAVEXT     RESTORE DATASET EXTENT TABLE
         MVC   XTNTS,SAVNBRX           RESTORE NBR EXTENTS
         BAL   R9,SETXTNT              SET UP EXTENTS FOR DATASET
MEMDIRRD MVI   EXCPMTCH,0              INSURE EXCP
         BAL   R9,EXCPREAD             READ A DIRECTORY BLOCK
         CLI   EXCPIND,C'X'            HARD I/O ERROR?
         BE    MEMXIT                  YES, EXIT
         CLI   EXCPIND,C' '            ANY ERROR?
         BNE   MEMNOTFD                YES, OR EOF OR EOE
         CLI   RCOUNT+5,8              KEY=8 BYTES?
         BNE   MEMNOTFD                NO, NOT A DIRECTORY BLOCK
         CLI   RKEYDATA,X'00'          THIS BLOCK USED?
         BE    MEMNOTFD                NO
         LH    R9,RKEYDATA+8           GET LENGTH OF DIRECTORY DATA
         LA    R9,RKEYDATA+8(R9)       POINT TO END OF DIRECTORY DATA
         LA    R1,RKEYDATA+10          POINT TO FIRST ENTRY IN BLOCK
CHKDNAM  CLC   COMMAND+4(8),0(R1)      FOUND DIRECTORY ENTRY?
         BE    GOTMEMB                 YES
         BL    MEMNOTFD                QUIT IF PAST IT
         SR    R15,R15                 CLEAR FOR INSERT
         NI    11(R1),B'00011111'      CLEAR ALIAS, OTHER BITS
         IC    R15,11(R1)              PICK UP NBR HALFWORDS
         SLL   R15,1                   COMPUTE NBR BYTES
         LA    R1,12(R1,R15)           STEP TO NEXT ENTRY
         CR    R1,R9                   PAST END OF DATA?
         BL    CHKDNAM                 NO, CONTINUE SEARCH
         B     MEMDIRRD                YES, GO READ NEXT BLOCK
GOTMEMB  SR    R9,R9                   CLEAR FOR INSERT
         IC    R9,SAVNBRX              GET NBR EXTENTS
         LA    R14,SAVEXT              POINT TO EXTENTS
         LA    R15,POXTNTS             POINT TO RELATIVE EXTENT TABLE
CHKRELTT CLC   PORELTT-POXTNTS+L'POXTNTS(2,R15),8(R1) NEXT REL TRK >?
         BH    GOTMXTNT                YES, THIS IS EXTENT
         LA    R15,L'POXTNTS(R15)      NO, STEP TO NEXT REL ENTRY
         LA    R14,L'EXTENTS(R14)      NO, STEP TO NEXT ACTUAL ENTRY
         BCT   R9,CHKRELTT             LOOP TO FIND EXTENT
         B     MEMNOTFD                BRANCH IF NOT FOUND
GOTMXTNT MVC   DIRENTY,0(R1)           SAVE DIRECTORY ENTRY
         MVC   EXTENTS,0(R14)          MOVE THIS EXTENT
         LH    R1,DIRETTR              GET REL TRK FROM DIRECTORY ENTRY
         SH    R1,PORELTT-POXTNTS(R15) DEDUCT BEGINNING REL TRK
         AH    R1,POACTTT-POXTNTS(R15) COMPUTE ACTUAL START TRACK
         SR    R0,R0                   CLEAR FOR DIVIDE
         LH    R2,DS4TKLC              GET NBR TRKS/CYL
         DR    R0,R2                   COMPUTE START CYL, TRK
         STH   R0,BGNXTNT+2            SAVE START TRK
         STH   R1,BGNXTNT              SAVE START CYL
         STC   R9,XTNTS                SAVE NBR XTNTS REMAINING
         LA    R15,EXTENTS+L'EXTENTS   POINT TO SECOND EXTENT AREA
         LA    R14,L'EXTENTS(R14)      STEP TO NEXT SAVED EXTENT
TSTMCMP  BCT   R9,MVNXBX               LOOP TO MOVE REST
         BAL   R9,SETXTNT              SET UP EXTENTS FOR READ
         SR    R1,R1                   CLEAR FOR INSERT
         IC    R1,DIRETTR+2            PICK UP RECORD NBR
         BCTR  R1,0                    BACK UP 1
         STC   R1,RCOUNT+4             SET BEGIN RECORD NBR
         B     MEMXIT                  AND EXIT
MVNXBX   MVC   0(L'EXTENTS,R15),0(R14) MOVE NEXT EXTENT
         LA    R14,L'EXTENTS(R14)      POINT TO NEXT EXTENT
         LA    R15,L'EXTENTS(R15)      POINT TO NEXT EXTENT
         B     TSTMCMP                 CONTINUE
MEMNOTFD MVC   PRT+1(16),=C'MEMBER NOT FOUND' ERROR MESSAGE
         BAL   R9,PRINT                GO PRINT ERROR MESSAGE
MEMXIT   L     R9,MEMR9                GET RETURN ADDRESS
         BR    R9                      EXIT
*
***********************************************************************
*                    ***** CHR= COMMAND *****                         *
*        REFORMAT THE CCHHR OR CCHHR-CCHHR ADDRESS(ES) IN THE         *
*        COMMAND AND SET THE BEGIN CCHHR IN THE RCOUNT FIELD FOR      *
*        EXCPREAD.                                                    *
***********************************************************************
*
GETCHR   ST    R9,GCHR9                SAVE RETURN ADDRESS
         MVI   EXCPMTCH,0              INSURE EXCP
         LA    R14,COMMAND+4           POINT TO 1ST (ONLY) CCHHR
         LA    R15,5                   5 CHARACTER PAIRS TO CONVERT
         BAL   R9,CHARHEX              CONVERT TO HEX
         CLI   CHERR,0                 ANY ERROR?
         BE    MOVXTNT1                NO
CHRINVLD MVC   PRT,INVLDCHR            MOVE ERROR MESSAGE
CHRERRS  BAL   R9,PRINT                TELL USER CHR IS INVALID
         B     GCHXIT                  AND EXIT
MOVXTNT1 MVC   EXTENTS(2),=X'0000'     SET BIN NUMBER
         MVC   EXTENTS+2(4),HEX        SET BEGIN EXTENT
         MVC   EXTENTS+6(4),HEX        END EXTENT = BEGIN EXTENT
         MVC   RCOUNT(5),HEX           FIRST CCHHR TO RCOUNT
         MVC   RCOUNT+7(1),HEX+4       SAVE REQUESTED RECORD NUMBER
         CLI   COMMAND+14,C'-'         IS THERE AN END ADDRESS?
         BE    GETEND                  YES
         CLI   COMMAND+14,C' '         ANYTHING ELSE AT END?
         BE    CHRCHEX                 NO
         MVC   PRT,CHRERR3             INVALID FORMAT MESSAGE
         B     CHRERRS
GETEND   LA    R14,COMMAND+15          POINT TO 2ND CCHHR
         LA    R15,5                   5 CHARACTER PAIRS TO CONVERT
         BAL   R9,CHARHEX              CONVERT TO HEX
         CLI   CHERR,0                 ANY ERROR?
         BNE   CHRINVLD                YES
         MVC   EXTENTS+6(4),HEX        NO, MOVE END EXTENT
CHRCHEX  CLC   EXTENTS+2(2),DS4NOCYL   VALID BEGIN CYLINDER?
         BH    BADCYL                  NO
         CLC   EXTENTS+6(2),DS4NOCYL   VALID END CYLINDER?
         BH    BADCYL                  NO
         CLC   EXTENTS+4(2),DS4TKLC    VALID BEGIN TRACK?
         BH    BADTRAK                 NO
         CLC   EXTENTS+8(2),DS4TKLC    VALID END TRACK?
         BNH   CHRSETX                 YES
BADTRAK  MVC   PRT,CHRERR1             MOVE INVALID TRACK MSG
         B     CHRERRS                 GO PRINT MSG
BADCYL   MVC   PRT,CHRERR2             MOVE INVALID CYLINDER MSG
         B     CHRERRS                 GO PRINT MSG
CHRSETX  BAL   R9,SETXTNT              GO SET EXTENTS
         SR    R12,R12                 CLEAR FOR INSERT
         IC    R12,RCOUNT+7            GET REQUESTED 1ST REC NBR
         LTR   R12,R12                 IS IT ZERO?
         BZ    GCHXIT                  YES
         BCTR  R12,0                   NO, BACK UP TO PREVIOUS
         STC   R12,RCOUNT+4            SET SEARCH START
         MVC   PRT,CHROK               O.K. MESSAGE
         BAL   R9,PRINT                PRINT IT
GCHXIT   L     R9,GCHR9                GET EXIT ADDRESS
         BR    R9                      AND EXIT
*
***********************************************************************
*                    ***** CHG> COMMAND *****                         *
* CHANGE THE CONTENT OF THE KEY OR DATA RECORD AS SPECIFIED BY THE    *
* USER IN A CHG> COMMAND. IF A FMT OR SCH IS IN EFFECT AND THE LAST   *
* BLOCK READ MATCHES THE CURRENT DCB INFORMATION, THE CURRENT LOGICAL *
* RECORD IS CHANGED, OTHERWISE THE BLOCK IS CHANGED.                  *
***********************************************************************
*
CHANGE   ST    R9,CHG9                 SAVE RETURN ADDRESS
         CLI   COMMAND+CHGKD-CHGLINE,C'K' VALID KEY/DATA SPEC?
         BE    SETOFST                 YES
         CLI   COMMAND+CHGKD-CHGLINE,C'D' VALID KEY/DATA SPEC?
         BE    SETOFST                 YES
         MVC   PRT,CHGERR1             NO, MOVE ERROR MESSAGE
CHGPERR  BAL   R9,PRINT                PRINT ERROR MESSAGE
         B     CHGEXIT                 AND EXIT
SETOFST  LA    R1,COMMAND+CHGOFF-CHGLINE+4 @ RHE OFFSET
         MVC   DBLWD(5),ZEROS          CLEAR WORK AREA
         LA    R2,DBLWD+4              COPY RHE ADDRESS
         LA    R15,5                   NUMBER BYTES TO SCAN
SETOFS3  CLI   0(R1),C'A'              _ AT RHE?
         BNL   SETOFS4                 YES
         BCTR  R1,0                    NO, BACK UP 1
         BCT   R15,SETOFS3             LOOP TO FIND RHE
OFSTERR  MVC   PRT,CHGERR2             ERROR, NO DATA ENTERED
         B     CHGPERR                 GO PRINT ERROR MESSAGE
SETOFS4  CLI   0(R1),C'0'              VALID NUMBER?
         BL    OFSTERR                 NO
         CLI   0(R1),C'9'              VALID NUMBER?
         BH    OFSTERR                 NO
         MVC   0(1,R2),0(R1)           RIGHT JUSTIFY NUMBER
         BCTR  R1,0                    BACK UP 1 IN NUMBER
         BCTR  R2,0                    BACK UP 1 IN FIELD
         BCT   R15,SETOFS4             LOOP TO RIGHT JUSTIFY
SETOFS6  PACK  DBLWD,DBLWD(5)          PACK OFFSET
         CVB   R1,DBLWD                CONVERT TO BINARY
         LTR   R1,R1                   OFFSET IS ZERO?
         BZ    OFSTERR                 YES, ERROR
         BCTR  R1,0                    ELSE RELATIVIZE OFFSET
         ST    R1,BEGINAD              SAVE BEGIN OFFSET
         CLI   COMMAND+CHGXC-CHGLINE,C'X' VALID DATA TYPE?
         BE    SETCHAR                 YES
         CLI   COMMAND+CHGXC-CHGLINE,C'C' VALID DATA TYPE?
         BE    SETCHAR                 YES
         MVC   PRT,CHGERR4             NO, MOVE ERROR MSG
         B     CHGPERR                 PRINT MESSAGE AND EXIT
SETCHAR  LA    R1,COMMAND+CHGVAL-CHGLINE POINT TO CHANGE DATA
         SR    R2,R2                   CLEAR LENGTH COUNTER
         LA    R15,32                  MAX LENGTH COUNTER
SETCHAR2 CLI   0(R1),C'_'              END OF FIELD?
         BE    SETCHAR3                YES
         LA    R2,1(R2)                NO, INCREMENT LENGTH COUNT
         LA    R1,1(R1)                ADVANCE TO NEXT BYTE
         BCT   R15,SETCHAR2            LOOP TO GET LENGTH
         LTR   R2,R2                   ANYTHING FOUND?
         BNZ   SETCHAR3                YES
         MVC   PRT,CHGERR7             MOVE ERROR MESSAGE
         B     CHGPERR                 PRINT AND EXIT
SETCHAR3 BCTR  R2,0                    COMPUTE LENGTH CODE
         STC   R2,LENGCODE             AND SAVE IT
         CLI   COMMAND+CHGXC-CHGLINE,C'X' HEX DATA ENTERED?
         BNE   CHKSTRT                 NO
         TM    LENGCODE,1              EVEN NUMBER OF DIGITS?
         BO    SETCHAR4                YES
CHGPERR2 MVC   PRT,CHGERR6             NO, MOVE ERROR MESSAGE
         B     CHGPERR                 PRINT AND EXIT
SETCHAR4 SRL   R2,1                    DIVIDE BY 2 FOR HEX
         STC   R2,LENGCODE             AND SAVE LENGTH CODE
         LA    R15,1(R2)               NUMBER HEX PAIRS TO CONVERT
         LA    R14,COMMAND+CHGVAL-CHGLINE POINT TO CHANGE DATA
         BAL   R9,CHARHEX              GO CONVERT TO REAL HEX
         CLI   CHERR,0                 ANY ERROR?
         BNE   CHGPERR2                YES
         MVC   COMMAND+CHGVAL-CHGLINE(16),HEX MOVE REAL HEX DATA
CHKSTRT  LA    R15,RKEYDATA            POINT TO KEY AREA
         SR    R14,R14                 CLEAR FOR INSERT
         IC    R14,RCOUNT+5            PICK UP KEY LENGTH
         CLI   COMMAND+CHGKD-CHGLINE,C'K' CHANGE IS TO KEY?
         BE    SETENDAD                YES
         L     R15,CURRECD             NO, POINT TO DATA RECORD
         CLI   EXCPMTCH,0              RECORD MATCHES DCB INFO?
         BE    NOTLOGCL                NO
         LH    R14,LRECL               GET RECORD LENGTH
         CLI   RECFM,C'F'              FIXED LENGTH RECORDS?
         BE    SETENDAD                YES
         LH    R14,0(R15)              GET RECORD LENGTH (RDW)
         CLI   RECFM,C'V'              VARIABLE LENGTH RECORDS?
         BE    SETENDAD                YES
NOTLOGCL LH    R14,RCOUNT+6            GET DATA LENGTH
SETENDAD L     R1,BEGINAD              GET BEGIN OFFSET
         AR    R1,R15                  COMPUTE BEGIN CHG ADDRESS
         ST    R1,BEGINAD              AND SAVE IT
         SR    R1,R1                   CLEAR FOR INSERT
         IC    R1,LENGCODE             GET LENGTH CODE
         A     R1,BEGINAD              COMPUTE END CHG ADDRESS
         ST    R1,ENDAD                AND SAVE IT
         AR    R15,R14                 COMPUTE KEY/DATA END ADDRESS
         C     R15,BEGINAD             CHG BEGIN WITHIN AREA?
         BNL   CHKENDAD                YES
CHGPERR3 MVC   PRT,CHGERR3             NO, MOVE ERROR MESSAGE
         B     CHGPERR                 PRINT AND EXIT
CHKENDAD C     R15,ENDAD               CHG END WITHIN AREA?
         BL    CHGPERR3                NO, ERROR
         L     R14,BEGINAD             POINT TO CHANGE ADDRESS
         LA    R15,COMMAND+CHGVAL-CHGLINE POINT TO CHANGE DATA
         IC    R1,LENGCODE             GET LENGTH CODE
         EX    R1,CHGMOVE              MOVE CHANGE DATA TO AREA
         MVC   PRT,CHGOK               GOOD CHANGE MESSAGE
         BAL   R9,PRINT                PRINT O.K. MESSAGE
         BAL   R9,PRNTCTL              PRINT THE CHANGED RECORD
         B     CHGEXIT                 EXIT
CHGMOVE  MVC   0(1,R14),0(R15)         EXECUTED MOVE
CHGEXIT  L     R9,CHG9                 GET RETURN ADDRESS
         BR    R9                      EXIT
*
***********************************************************************
*                    ***** FMT> COMMAND *****                         *
*        SET UP PRINT FORMAT SPECIFICATIONS IN THE FORMAT TABLE       *
***********************************************************************
*
FORMAT   ST    R9,FMT9                 SAVE RETURN ADDRESS
         CLI   COMMAND+FMTIDNO+1-FMTLINE,C'_' ONLY ONE BYTE ENTERED?
         BE    FMT1BYT                 YES
         CLI   COMMAND+FMTIDNO+1-FMTLINE,C' ' ONLY ONE BYTE ENTERED?
         BNE   FMTCK1N
FMT1BYT  MVC   COMMAND+FMTIDNO+1-FMTLINE(1),COMMAND+FMTIDNO-FMTLINE
         MVI   COMMAND+FMTIDNO-FMTLINE,C'0' RIGHT, LEADING ZERO
FMTCK1N  MVZ   NUMTST(2),COMMAND+FMTIDNO-FMTLINE MOVE FORMAT ID NBR
         CLC   NUMTST(2),ZEROS         FORMAT ID NUMERIC?
         BE    FIDTST2                 YES
FBADID   MVC   PRT,FMTER1              MOVE ERROR MESSAGE
         BAL   R9,PRINT                PRINT ERROR MESSAGE
         B     FMTXIT                  AND EXIT
FIDTST2  PACK  DBLWD,COMMAND+FMTIDNO-FMTLINE(2) PACK FORMAT ID NBR
         CP    DBLWD,=P'20'            IS IT > 20?
         BH    FBADID                  YES, ERROR
         ZAP   DBLWD,DBLWD             IS IT < 1?
         BZ    FBADID                  YES, ERROR
         CVB   R12,DBLWD               CONVERT FORMAT ID NBR TO BINARY
         BCTR  R12,0                   RELATIVIZE
         MH    R12,FMTTBLNG            COMPUTE FORMAT TABLE ENTRY ADDR
         A     R12,FMTTBLA             POINT TO FORMAT TABLE ENTRY
         USING FMTTBL,R12
         XC    FMTTBL,FMTTBL           CLEAR TABLE ENTRY
         CLI   COMMAND+FMTSETCL-FMTLINE,C'C'   THIS A CLEAR REQUEST?
         BNE   FMTSET                  NO
         MVC   PRT,FMTCLR              YES, MOVE CLEAR MESSAGE
         BAL   R9,PRINT                PRINT IT
         B     FMTXIT                  AND EXIT
FMTSET   CLI   COMMAND+FMTSETCL-FMTLINE,C'S'   THIS A SET REQUEST?
         BE    FRMTSET                 YES
         MVC   PRT,FMTERA              NO, INVALID SET/CLEAR VALUE
         B     FMTERRS                 GO PRINT ERROR MESSAGE
FRMTSET  CLI   COMMAND+FMTKDTA-FMTLINE,C'K' IS IT KEY?
         BE    FSETKEY                 YES
         CLI   COMMAND+FMTKDTA-FMTLINE,C'D' IS IT DATA?
         BE    FSETDATA                YES
         MVC   PRT,FMTER2              NO, MOVE ERROR MESSAGE
FMTERRS  BAL   R9,PRINT                PRINT ERROR MESSAGE
         XC    FMTTBL,FMTTBL           INSURE ERROR FORMAT IS CLEAN
         B     FMTXIT                  AND EXIT
FSETKEY  OI    FMTFLAG,X'80'           SHOW KEY FORMAT
         B     FCHKSTRT                CONTINUE
FSETDATA OI    FMTFLAG,X'40'           SHOW DATA FORMAT
FCHKSTRT MVC   DBLWD(5),ZEROS          CLEAR WORK AREA
         LA    R15,DBLWD+4             POINT TO RIGHT END OF WORK
         LA    R14,COMMAND+FMTSTRT+4-FMTLINE POINT TO RHE START
         LA    R11,5                   MAX LENGTH TO SCAN
FCHKUS1  CLI   0(R14),C'A'             UNUSED SPACE?
         BNL   FCHKNUM1                NO
         BCTR  R14,0                   YES, BACK UP 1
         BCT   R11,FCHKUS1             CONTINUE SCAN
FMVERR4  MVC   PRT,FMTER4              MOVE ERROR MESSAGE
         B     FMTERRS                 GO PRINT IT
FCHKNUM1 CLI   0(R14),C'0'             POSSIBLE NUMERIC?
         BL    FMVERR4                 NO
         CLI   0(R14),C'9'             IS IT NUMERIC?
         BH    FMVERR4                 NO
         MVC   0(1,R15),0(R14)         YES, MOVE TO WORK
         BCTR  R14,0                   BACK UP IN FIELD
         BCTR  R15,0                   BACK UP IN WORK
         BCT   R11,FCHKNUM1            CONTINUE MOVING RIGHT JUSTIFIED
         PACK  DBLWD,DBLWD(5)          PACK START POSITION
         CVB   R15,DBLWD               CONVERT TO BINARY
         LTR   R15,R15                 OFFSET > 0?
         BZ    FMVERR4                 NO, ERROR
         BCTR  R15,0                   YES, BACK UP 1 TO RELATIVIZE
         STCM  R15,3,FMTSTART          SAVE STARTING OFFSET
         MVC   DBLWD(5),ZEROS          CLEAR WORK AREA
         LA    R15,DBLWD+4             POINT TO RIGHT END OF WORK
         LA    R14,COMMAND+FMTLGH+4-FMTLINE POINT TO RHE LENGTH
         LA    R11,5                   MAX LENGTH TO SCAN
FCHKUS2  CLI   0(R14),C'A'             UNUSED SPACE?
         BNL   FCHKNUM2                NO
         BCTR  R14,0                   YES, BACK UP 1
         BCT   R11,FCHKUS2             CONTINUE SCAN
FMVERR6  MVC   PRT,FMTER6              MOVE ERROR MESSAGE
         B     FMTERRS                 GO PRINT IT
FCHKNUM2 CLI   0(R14),C'0'             POSSIBLE NUMERIC?
         BL    FMVERR6                 NO
         CLI   0(R14),C'9'             IS IT NUMERIC?
         BH    FMVERR6                 NO
         MVC   0(1,R15),0(R14)         YES, MOVE TO WORK
         BCTR  R14,0                   BACK UP IN FIELD
         BCTR  R15,0                   BACK UP IN WORK
         BCT   R11,FCHKNUM2            CONTINUE MOVING RIGHT JUSTIFIED
         PACK  DBLWD,DBLWD(5)          PACK LENGTH
         CVB   R15,DBLWD               CONVERT TO BINARY
         STCM  R15,3,FMTLGTH           SAVE LENGTH CODE
         MVC   PRT,FMTOK               O.K. MESSAGE TO PRINT
         BAL   R9,PRINT                PRINT IT
         DROP  R12
FMTXIT   L     R9,FMT9                 GET RETURN ADDRESS
         BR    R9                      EXIT
*
***********************************************************************
*             ***** DCB> COMMAND *****                                *
*        SET UP PRINT DCB SPECIFICATIONS                              *
***********************************************************************
*
SETDCB   ST    R9,DCB9                 SAVE RETURN ADDRESS
         CLC   COMMAND+DCBDSORG-DCBLINE(L'DCBDSORG),=C'DA' DSORG=DA?
         BE    DCREC1                  YES, OK
         CLC   COMMAND+DCBDSORG-DCBLINE(L'DCBDSORG),=C'PS' DSORG=PS?
         BE    DCREC1                  YES, OK
         CLC   COMMAND+DCBDSORG-DCBLINE(L'DCBDSORG),=C'PO' DSORG=PO?
         BE    DCREC1                  YES, OK
         CLC   COMMAND+DCBDSORG-DCBLINE(L'DCBDSORG),=C'VS' DSORG=VS?
         BE    DCREC1                  YES, OK
         CLC   COMMAND+DCBDSORG-DCBLINE(L'DCBDSORG),=C'IS' DSORG=IS?
         BE    DCREC1                  YES
         MVC   PRT,DCBER0              NONE OF THESE, ERROR
         BNE   DCBERRS                 GO TELL USER
DCREC1   CLI   COMMAND+DCBRECFM-DCBLINE,C'F' RECFM 1ST BYTE = F?
         BE    DCREC2                  YES
         CLI   COMMAND+DCBRECFM-DCBLINE,C'V' RECFM 1ST BYTE = V?
         BE    DCREC2                  YES
         CLI   COMMAND+DCBRECFM-DCBLINE,C'U' RECFM 1ST BYTE = U?
         BE    DCREC2                  YES
DCBADRC  MVC   PRT,DCBER1              NONE OF THESE, ERROR
DCBERRS  BAL   R9,PRINT                PRINT RECFM ERROR MESSAGE
         B     DCBXIT                  AND EXIT
DCREC2   CLI   COMMAND+DCBRECFM-DCBLINE+1,C'A' 2ND BYTE NULL?
         BL    DCBGDREC                YES
         CLI   COMMAND+DCBRECFM-DCBLINE+1,C'B' 2ND BYTE = B?
         BNE   DCBADRC                 NO, ERROR
DCBGDREC MVC   DBLWD(5),ZEROS          CLEAR WORK AREA
         LA    R15,DBLWD+4             POINT TO RIGHT END OF WORK
         LA    R14,COMMAND+DCBLRECL-DCBLINE+4 POINT TO RHE LRECL
         LA    R11,5                   MAX LENGTH TO SCAN
DCHKUS1  CLI   0(R14),C'A'             UNUSED SPACE?
         BNL   DCHKNUM1                NO
         BCTR  R14,0                   YES, BACK UP 1
         BCT   R11,DCHKUS1             CONTINUE SCAN
DMVERR2  MVC   PRT,DCBER2              MOVE ERROR MESSAGE
         B     DCBERRS                 GO PRINT IT
DCHKNUM1 CLI   0(R14),C'0'             POSSIBLE NUMERIC?
         BL    DMVERR2                 NO
         CLI   0(R14),C'9'             IS IT NUMERIC?
         BH    DMVERR2                 NO
         MVC   0(1,R15),0(R14)         YES, MOVE TO WORK
         BCTR  R14,0                   BACK UP IN FIELD
         BCTR  R15,0                   BACK UP IN WORK
         BCT   R11,DCHKNUM1            CONTINUE MOVING RIGHT JUSTIFIED
         PACK  DBLWD,DBLWD(5)          PACK LRECL
         ZAP   DBLWD,DBLWD             LRECL > 0?
         BM    DMVERR2                 NO, ERROR
         UNPK  COMMAND+DCBLRECL-DCBLINE(L'DCBLRECL),DBLWD RT JUSTIFY
         OI    COMMAND+DCBLRECL-DCBLINE+L'DCBLRECL-1,C'0' CLEAR SIGN
         MVC   DBLWD(5),ZEROS          CLEAR WORK AREA
         LA    R15,DBLWD+4             POINT TO RIGHT END OF WORK
         LA    R14,COMMAND+DCBBLKSI-DCBLINE+4 POINT TO RHE BLKSIZE
         LA    R11,5                   MAX LENGTH TO SCAN
DCHKUS2  CLI   0(R14),C'A'             UNUSED SPACE?
         BNL   DCHKNUM2                NO
         BCTR  R14,0                   YES, BACK UP 1
         BCT   R11,DCHKUS2             CONTINUE SCAN
DMVERR3  MVC   PRT,DCBER3              MOVE ERROR MESSAGE
         B     DCBERRS                 GO PRINT IT
DCHKNUM2 CLI   0(R14),C'0'             POSSIBLE NUMERIC?
         BL    DMVERR3                 NO
         CLI   0(R14),C'9'             IS IT NUMERIC?
         BH    DMVERR3                 NO
         MVC   0(1,R15),0(R14)         YES, MOVE TO WORK
         BCTR  R14,0                   BACK UP IN FIELD
         BCTR  R15,0                   BACK UP IN WORK
         BCT   R11,DCHKNUM2            CONTINUE MOVING RIGHT JUSTIFIED
         PACK  DBLWD,DBLWD(5)          PACK BLKSIZE
         ZAP   DBLWD,DBLWD             BLKSIZE >= 0?
         BM    DMVERR3                 NO, ERROR
         UNPK  COMMAND+DCBBLKSI-DCBLINE(L'DCBBLKSI),DBLWD RT JUSTIFY
         OI    COMMAND+DCBBLKSI-DCBLINE+L'DCBBLKSI-1,C'0' CLEAR SIGN
         MVC   DBLWD(5),ZEROS          CLEAR WORK AREA
         LA    R15,DBLWD+4             POINT TO RIGHT END OF WORK
         LA    R14,COMMAND+DCBKEYLE-DCBLINE+2 POINT TO RHE KEY LENGTH
         LA    R11,3                   MAX LENGTH TO SCAN
DCHKUS3  CLI   0(R14),C'A'             UNUSED SPACE?
         BNL   DCHKNUM3                NO
         BCTR  R14,0                   YES, BACK UP 1
         BCT   R11,DCHKUS3             CONTINUE SCAN
DMVERR4  MVC   PRT,DCBER4              MOVE ERROR MESSAGE
         B     DCBERRS                 GO PRINT IT
DCHKNUM3 CLI   0(R14),C'0'             POSSIBLE NUMERIC?
         BL    DMVERR4                 NO
         CLI   0(R14),C'9'             IS IT NUMERIC?
         BH    DMVERR4                 NO
         MVC   0(1,R15),0(R14)         YES, MOVE TO WORK
         BCTR  R14,0                   BACK UP IN FIELD
         BCTR  R15,0                   BACK UP IN WORK
         BCT   R11,DCHKNUM3            CONTINUE MOVING RIGHT JUSTIFIED
         PACK  DBLWD,DBLWD(5)          PACK KEY LENGTH
         ZAP   DBLWD,DBLWD             BLKSIZE >= 0?
         BM    DMVERR4                 NO, ERROR
         UNPK  COMMAND+DCBKEYLE-DCBLINE(L'DCBKEYLE),DBLWD RT JUSTIFY
         OI    COMMAND+DCBKEYLE-DCBLINE+L'DCBKEYLE-1,C'0' CLEAR SIGN
         MVC   DBLWD(5),ZEROS          CLEAR WORK AREA
         LA    R15,DBLWD+4             POINT TO RIGHT END OF WORK
         LA    R14,COMMAND+DCBRKP-DCBLINE+4 POINT TO RHE REL KEY POS
         LA    R11,5                   MAX LENGTH TO SCAN
DCHKUS4  CLI   0(R14),C'A'             UNUSED SPACE?
         BNL   DCHKNUM4                NO
         BCTR  R14,0                   YES, BACK UP 1
         BCT   R11,DCHKUS4             CONTINUE SCAN
DMVERR5  MVC   PRT,DCBER5              MOVE ERROR MESSAGE
         B     DCBERRS                 GO PRINT IT
DCHKNUM4 CLI   0(R14),C'0'             POSSIBLE NUMERIC?
         BL    DMVERR5                 NO
         CLI   0(R14),C'9'             IS IT NUMERIC?
         BH    DMVERR5                 NO
         MVC   0(1,R15),0(R14)         YES, MOVE TO WORK
         BCTR  R14,0                   BACK UP IN FIELD
         BCTR  R15,0                   BACK UP IN WORK
         BCT   R11,DCHKNUM4            CONTINUE MOVING RIGHT JUSTIFIED
         PACK  DBLWD,DBLWD(5)          PACK REL KEY POS
         ZAP   DBLWD,DBLWD             BLKSIZE >= 0?
         BM    DMVERR5                 NO, ERROR
         UNPK  COMMAND+DCBRKP-DCBLINE(L'DCBRKP),DBLWD RT JUSTIFY
         OI    COMMAND+DCBRKP-DCBLINE+L'DCBRKP-1,C'0' CLEAR SIGN
         MVC   PRT,DCBOK               MOVE O.K. MESSAGE
         BAL   R9,PRINT                AND PRINT IT
         MVC   DSORG,COMMAND+DCBDSORG-DCBLINE MOVE DSORG TO SAVE
         MVC   RECFM,COMMAND+DCBRECFM-DCBLINE MOVE RECFM TO SAVE
         PACK  DBLWD,COMMAND+DCBLRECL-DCBLINE(L'DCBLRECL) CONVERT
         CVB   R15,DBLWD               LRECL TO BINARY
         STCM  R15,3,LRECL             SAVE LRECL
         PACK  DBLWD,COMMAND+DCBBLKSI-DCBLINE(L'DCBBLKSI) CONVERT
         CVB   R15,DBLWD               BLKSI TO BINARY
         STCM  R15,3,BLKSIZE           SAVE BLKSIZE
         PACK  DBLWD,COMMAND+DCBKEYLE-DCBLINE(L'DCBKEYLE) CONVERT
         CVB   R15,DBLWD               KEYLEN TO BINARY
         STCM  R15,3,KEYLEN            SAVE KEY LENGTH
         PACK  DBLWD,COMMAND+DCBRKP-DCBLINE(L'DCBRKP) CONVERT
         CVB   R15,DBLWD               RKP TO BINARY
         STCM  R15,3,RKP               SAVE RKP
DCBXIT   L     R9,DCB9                 GET RETURN ADDRESS
         BR    R9                      EXIT
*
***********************************************************************
*                 ***** SCH> COMMAND *****                            *
*        SET UP SEARCH SPECIFICATIONS (KEY OR DATA)                   *
***********************************************************************
*
SEARCH   ST    R9,SCH9                 SAVE RETURN ADDRESS
         XC    SCHTBL,SCHTBL           CLEAR TABLE ENTRY
         CLI   COMMAND+SCHIND-SCHLINE,C'C' CLEAR REQUEST?
         BNE   SCHSET                  NO
         MVC   PRT,SCHCLR              YES, MOVE CLEAR MESSAGE
         BAL   R9,PRINT                PRINT IT
         B     SCHXIT                  AND EXIT
SCHSET   CLI   COMMAND+SCHIND-SCHLINE,C'S' SET REQUEST?
         BE    SETSRCH                 YES
         MVC   PRT,SCHER1              INVALID INDICATOR
         BAL   R9,PRINT                SEND ERROR MESSAGE
         B     SCHXIT                  AND EXIT
SETSRCH  CLI   COMMAND+SCHKD-SCHLINE,C'K' IS IT KEY?
         BE    SSETKD                  YES
         CLI   COMMAND+SCHKD-SCHLINE,C'D' IS IT DATA?
         BE    SSETKD                  YES
         MVC   PRT,SCHER7              NO, MOVE ERROR MESSAGE
SCHERRS  BAL   R9,PRINT                PRINT ERROR MESSAGE
         XC    SCHTBL,SCHTBL           INSURE SEARCH CRITERIA GONE
         B     SCHXIT                  AND EXIT
SSETKD   MVC   SCHLOC,COMMAND+SCHKD-SCHLINE SET KEY/DATA
         MVC   DBLWD(5),ZEROS          CLEAR WORK AREA
         CLC   COMMAND+SCHSTRT-SCHLINE(3),=C'ALL'  IS IT 'ALL'?
         BNE   CHKRSP                  NO
         SR    R15,R15                 SET SEARCH START POS
         MVI   SCHALL,C'A'             INDICATE SEARCH 'ALL'
         B     SETRSP                  CONTINUE
CHKRSP   LA    R15,DBLWD+4             POINT TO RIGHT END OF WORK
         LA    R14,COMMAND+SCHSTRT-SCHLINE+4 POINT TO RHE START
         LA    R11,5                   MAX LENGTH TO SCAN
SRCKUS1  CLI   0(R14),C'A'             UNUSED SPACE?
         BNL   SRCKNUM1                NO
         BCTR  R14,0                   YES, BACK UP 1
         BCT   R11,SRCKUS1             CONTINUE SCAN
SRCERR2  MVC   PRT,SCHER4              MOVE ERROR MESSAGE
         B     SCHERRS                 GO PRINT IT
SRCKNUM1 CLI   0(R14),C'0'             POSSIBLE NUMERIC?
         BL    SRCERR2                 NO
         CLI   0(R14),C'9'             IS IT NUMERIC?
         BH    SRCERR2                 NO
         MVC   0(1,R15),0(R14)         YES, MOVE TO WORK
         BCTR  R14,0                   BACK UP IN FIELD
         BCTR  R15,0                   BACK UP IN WORK
         BCT   R11,SRCKNUM1            CONTINUE MOVING RIGHT JUSTIFIED
         PACK  DBLWD,DBLWD(5)          PACK START POSITION
         CVB   R15,DBLWD               CONVERT TO BINARY
         LTR   R15,R15                 START > 0?
         BZ    SRCERR2                 NO, ERROR
         BCTR  R15,0                   RELATIVIZE START POSITION
SETRSP   STCM  R15,3,SCHST             SAVE RELATIVE START POSITION
         CLI   COMMAND+SCHLGH+1-SCHLINE,C'_' ONLY ONE BYTE?
         BE    SCHL1BYT                YES
         CLI   COMMAND+SCHLGH+1-SCHLINE,C' ' ONLY ONE BYTE?
         BNE   SCHLGCK
SCHL1BYT MVC   COMMAND+SCHLGH+1-SCHLINE(1),COMMAND+SCHLGH-SCHLINE
         MVI   COMMAND+SCHLGH-SCHLINE,C'0' RIGHT JUSTIFY, LEADING 0
SCHLGCK  PACK  DBLWD,COMMAND+SCHLGH-SCHLINE(2) PACK LENGTH
         MVZ   NUMTST(2),COMMAND+SCHLGH-SCHLINE ZONES FOR TEST
         CLC   NUMTST(5),ZEROS         LENGTH NUMERIC?
         BE    CVRTSL                  YES
MVSCH6   MVC   PRT,SCHER6              NO, MOVE ERROR MESSAGE
         B     SCHERRS                 GO PRINT
CVRTSL   CVB   R15,DBLWD               CONVERT TO BINARY
         LTR   R15,R15                 LENGTH IS ZERO?
         BZ    MVSCH6                  YES, ERROR
         BCTR  R15,0                   COMPUTE LENGTH CODE
         STC   R15,SCHLGTH             SAVE LENGTH CODE
         CLI   COMMAND+SCHCPR+1-SCHLINE,C'_' ONLY ONE BYTE ENTERED?
         BNE   SCHCPTY                 NO
         MVI   COMMAND+SCHCPR+1-SCHLINE,C' ' YES, SET TO BLANK
SCHCPTY  MVI   SCHCMPR,X'80'           ASSUME = COMPARE
         CLC   COMMAND+SCHCPR-SCHLINE(2),=C'= ' COMPARE =?
         BE    SCHKCH                  YES
         MVI   SCHCMPR,X'40'           ASSUME < COMPARE
         CLC   COMMAND+SCHCPR-SCHLINE(2),=C'< ' COMPARE <?
         BE    SCHKCH                  YES
         MVI   SCHCMPR,X'20'           ASSUME > COMPARE
         CLC   COMMAND+SCHCPR-SCHLINE(2),=C'> ' COMPARE >?
         BE    SCHKCH                  YES
         MVI   SCHCMPR,X'C0'           ASSUME <= COMPARE
         CLC   COMMAND+SCHCPR-SCHLINE(2),=C'<=' COMPARE <=?
         BE    SCHKCH                  YES
         MVI   SCHCMPR,X'A0'           ASSUME >= COMPARE
         CLC   COMMAND+SCHCPR-SCHLINE(2),=C'>=' COMPARE >=?
         BE    SCHKCH                  YES
         MVI   SCHCMPR,X'70'           ASSUME <> COMPARE
         CLC   COMMAND+SCHCPR-SCHLINE(2),=C'<>' COMPARE <>?
         BE    SCHKCH                  YES
         MVC   PRT,SCHERA              YES, MOVE ERROR MESSAGE
         B     SCHERRS                 GO PRINT IT
SCHKCH   MVC   SCHDAT,COMMAND+SCHDATA-SCHLINE MOVE COMPARE DATA
         CLI   COMMAND+SCHCHHX-SCHLINE,C'C' CHAR SPECIFIED?
         BE    SCHOKMSG                YES
         CLI   COMMAND+SCHCHHX-SCHLINE,C'H' HEX SPECIFIED?
         BE    SSETHEX                 YES
         CLI   COMMAND+SCHCHHX-SCHLINE,C'X' HEX SPECIFIED?
         BE    SSETHEX                 YES
         MVC   PRT,SCHER5              NEITHER, MOVE ERROR MESSAGE
         B     SCHERRS                 GO PRINT
SSETHEX  LA    R14,COMMAND+SCHDATA-SCHLINE POINT TO SEARCH DATA
         SR    R15,R15                 CLEAR FOR INSERT
         IC    R15,SCHLGTH             PICK UP LENGTH CODE
         LA    R15,1(R15)              COMPUTE NBR HEX PAIRS
         BAL   R9,CHARHEX              CONVERT TO REAL HEX
         CLI   CHERR,0                 ANY ERROR?
         BNE   SHEXER                  YES
         MVC   SCHDAT,HEX              NO, MOVE REAL HEX
         B     SCHOKMSG                AND GO FINISH UP
SHEXER   MVC   PRT,SCHERC              INVALID HEX COMPARE DATA
         B     SCHERRS                 GO PRINT ERROR
SCHOKMSG MVC   PRT,SCHOK               O.K. MESSAGE TO PRINT
         BAL   R9,PRINT                PRINT IT
SCHXIT   L     R9,SCH9                 GET RETURN ADDRESS
         BR    R9                      EXIT
*
***********************************************************************
*                     ***** CAT= COMMAND *****                        *
*        READ THE CATALOG USING THE SPECIFIED DATASET NAME. IF AN     *
*        ENTRY IS FOUND, ALLOCATE THE VOLUME BY CALLING THE VOLUME    *
*        ROUTINE, THEN ALLOCATE THE DATASET BY CALLING THE DSNAMEA    *
*        ROUTINE.                                                     *
***********************************************************************
*
CATALOG  ST    R9,CAT9                 SAVE RETURN ADDRESS
         MVI   EXCPMTCH,0              INSURE EXCP
         LOCATE BYDSN                  READ CATALOG FOR SPEC DSNAME
         LTR   R15,R15                 SUCCESSFUL CATALOG READ?
         BZ    GOTCAT                  YES
         MVC   PRT,NOCTLG              NO, MESSAGE TO PRINT
         BAL   R9,PRINT                TELL USER NOT AVAILABLE
         B     CATXIT                  AND EXIT
GOTCAT   SR    R11,R11                 CLEAR FOR INSERT
         ICM   R11,3,LOCAREA           GET VOLSER COUNT
         LA    R12,LOCAREA+2           POINT TO 1ST VOLSER
CATLINE  LA    R9,9                    VOLSERS PER LINE
         LA    R10,PRT                 POINT TO PRINT LINE
CATMOVE  MVC   0(6,R10),4(R12)         MOVE A VOLSER TO PRINT LINE
         LA    R12,10(R12)             TO NEXT VOLSER IN LOCAREA
         LA    R10,8(R10)              TO NEXT PRINT LOCATION
         BCT   R11,CATDEC              DECREMENT VOLSER COUNT
         BAL   R9,PRINT                PRINT LAST LINE
         B     CATVOL                  AND GO ALLOC VOLUME
CATDEC   BCT   R9,CATMOVE              DECREMENT VOLSER/LINE COUNT
         BAL   R9,PRINT                PRINT THIS LINE
         B     CATLINE                 GO START NEXT LINE
CATVOL   MVC   DSNAME,COMMAND+4        SAVE DSNAME
         MVC   COMMAND+4(6),LOCAREA+6  SET UP VOLSER FOR VOLUME
         BAL   R9,VOLUME               GO ALLOCATE VOLUME
         MVC   COMMAND+4(44),DSNAME    SET UP DSNAME FOR DSNAMEA
         BAL   R9,DSNAMEA              GO ALLOCATE DATASET
CATXIT   L     R9,CAT9                 GET RETURN ADDRESS
         BR    R9                      EXIT
*
***********************************************************************
*                ***** REWRITE COMMAND *****                          *
*           REWRITE LAST RECORD READ (KEY AND DATA)                   *
***********************************************************************
*
REWRITE  ST    R9,REW9                 SAVE RETURN ADDRESS
         CLI   LASTREAD,C'R'           LAST EXCP WAS FOR READ?
         BE    SETWRT                  YES
         MVC   PRT,NOTREAD             NO, MOVE MESSAGE
         BAL   R9,PRINT                TELL USER LAST EXCP NOT READ
         B     REWXIT                  AND EXIT
SETWRT   MVI   LASTREAD,C'W'           SHOW LAST EXCP FOR WRITE
         MVC   WRITCCW+6(2),RCOUNT+6   DATA LENGTH TO WRITE CCW
         MVI   WRITCCW,X'05'           SET COMMAND TO WRITE DATA
         CLI   RCOUNT+5,0              ANY KEY?
         BE    SETWCNT                 NO
         MVI   WRITCCW,X'0D'           SET COMMAND TO WRITE KEY+DATA
         SR    R1,R1                   CLEAR WORK REG
         IC    R1,RCOUNT+5             PICK UP KEY LENGTH
         AH    R1,WRITCCW+6            ADD DATA LENGTH
         STH   R1,WRITCCW+6            KEY+DATA LENGTH TO CCW
SETWCNT  LA    R1,CMDCHNW              @ WRITE COMMAND CHAIN
         BAL   R9,EXCP                 ISSUE WRITE COMMAND
         CLI   EXCPIND,C' '            NORMAL COMPLETION?
         BNE   BADWRT                  NO
         MVC   PRT,GOODREW             MOVE GOOD MESSAGE
         B     WPRT                    GO PRINT
BADWRT   MVC   PRT,BADREW              MOVE ERROR MESSAGE
WPRT     BAL   R9,PRINT                PRINT
REWXIT   L     R9,REW9                 GET RETURN ADDRESST
         BR    R9                      EXIT
*
***********************************************************************
*        ***** END COMMAND *****                                      *
*           END OF JOB ROUTINE                                        *
***********************************************************************
*
EOJ      CLOSE (SYSIN,,SYSPRINT,,DADCB) CLOSE FILES
         CLOSE (SYSLST,,SYSOUT)        CLOSE AUX FILES
         L     R13,4(R13)              GET CALLER'S SAVE AREA ADDR
         LM    R14,R12,12(R13)         RESTORE CALLER'S REGS
         SR    R15,R15                 CLEAR RETURN CODE
         BR    R14                     RETURN TO CALLER
*
***********************************************************************
*        SEARCH FOR NEXT BLOCK USING THE VALUE IN COMMAND+4 AS THE    *
*        KEY. CALLER MUST SET THE KEY LENGTH IN SCHKEYLN BEFORE       *
*        CALLING THIS ROUTINE.                                        *
***********************************************************************
*
EXCPKEY  ST    R9,XKY9                 SAVE RETURN ADDRESS
         LA    R1,CMDCHNK              @ CCWS TO READ RECORD 0
         MVI   LASTREAD,C'K'           SHOW LAST EXCP WAS BY KEY
         BAL   R9,EXCP                 CALL EXCP ROUTINE
         L     R9,XKY9                 GET RETURN ADDRESS
         BR    R9                      EXIT
*
***********************************************************************
*        READ NEXT BLOCK USING EXCP. SEARCH ADDRESS IS IN THE RCOUNT  *
*        FIELD: SET UP BY THE GETCHR, VOLUME, OR DSNAME ROUTINES, OR  *
*        BY THE LAST EXECUTION OF THIS ROUTINE. IF SCH IS IN EFFECT,  *
*        THE SEARCH ARGUMENT IS COMPARED TO THE RECORD RETURNED FROM  *
*        THE EXCP ROUTINE. IF THERE IS NO MATCH, THE EXCP ROUTINE     *
*        IS CALLED AGAIN UNTIL A MATCH IS FOUND OR EOF OCCURS.        *
***********************************************************************
*
EXCPREAD ST    R9,XRD9                 SAVE RETURN ADDRESS
         MVI   SCHFND,0                CLEAR MATCHING FOUND INDIC
EXCPSRCH LA    R1,CMDCHNR              @ CCWS TO READ RECORD 0
         CLI   RCOUNT+4,0              WANT FIRST RECORD ON TRACK?
         BNE   XRDLST                  NO
         LA    R1,CMDCHNR0             YES, USE ALTERNATE CCW'S
XRDLST   MVI   LASTREAD,C'R'           SHOW LAST EXCP WAS READ
         BAL   R9,EXCP                 CALL EXCP ROUTINE
         CLI   EXCPIND,C'X'            GOOD I/O?
         BE    EXCPRXIT                NO
         CLI   EXCPIND,C'E'            END OF EXTENT?
         BE    EXCPRXIT                YES
         CLI   SCHTBL,0                ANY SEARCH CRITERIA SET?
         BE    EXCPRXIT                NO
         CLI   SCHALL,C'A'             SEARCH ALL BYTES?
         BE    GOTANA                  YES
         CLI   EXCPMTCH,0              RECORD READ MATCHES DCB INFO?
         BE    EXCPRXIT                NO
         B     FIXDSRCH                YES, ALLOW FIXED POINT SEARCH
GOTANA   L     R11,AREAST              YES, POINT TO KEY AREA
         SR    R1,R1                   CLEAR FOR INSERT
         IC    R1,RCOUNT+5             GET KEY LENGTH
         CLI   SCHLOC,C'K'             KEY SEARCH?
         BE    BEGNALL                 YES
         L     R11,CURRECD             POINT TO DATA RECORD
         LH    R1,LRECL                AND GET LENGTH
         CH    R1,H0                   ANY LRECL?
         BH    BEGNALL                 YES
         SR    R1,R1                   CLEAR FOR INSERT
         IC    R1,RCOUNT+5             PICK UP KEY LENGTH
         AH    R1,RCOUNT+6             AND ADD DATA LENGTH
BEGNALL  AR    R1,R11                  END OF SEARCH RANGE @
         SR    R15,R15                 CLEAR FOR INSERT
         IC    R15,SCHLGTH             GET COMPARE LENGTH
         SR    R1,R15                  REDUCE SEARCH RANGE
         BM    EXCPSRCH                BRANCH IF NONE LEFT
         STC   R15,ALLCLC+1            ELSE SET COMPARE LENGTH
         MVC   ALLBRCH+1(1),SCHCMPR    SET BRANCH CONDITION
ALLCLC   CLC   0(1,R11),SCHDAT         COMPARE SEARCH ARGUMENT
ALLBRCH  BC    0,SCHMET                BRANCH IF CONDITION MET
         LA    R11,1(R11)              ELSE ADVANCE 1 BYTE
         CR    R11,R1                  PAST END OF RANGE?
         BL    ALLCLC                  NO, CONTINUE IN THIS RECORD
         B     EXCPSRCH                ELSE CONTINUE TO NEXT RECORD
FIXDSRCH L     R11,AREAST              POINT TO I/O AREA
         CLI   SCHLOC,C'K'             KEY SEARCH?
         BE    SCHADST                 YES
         L     R11,CURRECD             POINT TO CURRENT RECORD
SCHADST  SR    R1,R1                   CLEAR FOR INSERT
         ICM   R1,3,SCHST              PICK UP STARTING OFFSET
         AR    R11,R1                  POINT TO FIELD START
         MVC   SCHBRCH+1(1),SCHCMPR    SET BRANCH CONDITION
         MVC   SCHCLC+1(1),SCHLGTH     SET COMPARE LENGTH
SCHCLC   CLC   0(1,R11),SCHDAT         COMPARE SEARCH ARGUMENT
SCHBRCH  BC    0,SCHMET                BRANCH IF CONDITION MET
         B     EXCPSRCH                ELSE CONTINUE SEARCH
SCHMET   MVI   SCHFND,1                SHOW MATCH FOUND
EXCPRXIT L     R9,XRD9                 GET RETURN ADDRESS
         BR    R9                      EXIT
*
***********************************************************************
*        ISSUE EXCP TO PERFORM THE OPERATION SET UP BY EXCPREAD,      *
*        EXCPKEY, OR REWRITE. SET EXCEPTION INDICATOR AS APPROPRIATE. *
*        IF THE CURRENT COMMAND IS R, THE CURRENT BLOCK MATCHES DCB   *
*        INFORMATION, AND THE CURRENT RECORD IS WITHIN THE CURRENT    *
*        BLOCK, RECORD NUMBER IS INCREMENTED, AND CURRECD IS ADVANCED *
*        TO PERMIT LOGICAL RECORD DEBLOCKING. WHEN A BLOCK IS READ    *
*        ITS CHARACTERISTICS ARE COMPARED TO THE DCB INFORMATION AND  *
*        IF THEY MATCH, THE EXCPMTCH INDICATOR IS SET. THE CURRECD    *
*        FIELD IS SET TO THE ADDRESS OF THE DATA RECORD (PAST THE     *
*        KEY RECORD), AND THE NEWRECD FIELD IS SET TO 0.              *
*        THE CALLER MUST PLACE THE ADDRESS OF THE COMMAND CHAIN TO BE *
*        EXECUTED IN R1 BEFORE CALLING EXCP.                          *
***********************************************************************
*
EXCP     ST    R9,EXCP9                SAVE RETURN ADDRESS
         ST    R1,DACCWAD              STORE COMMAND ADDRESS
         CLC   COMMAND(2),=C'Q '       REQUEST IS Q?
         BE    EXCKMTCH                YES
         CLC   COMMAND(2),=C'R '       REQUEST IS R?
         BNE   REISSUE                 NO
EXCKMTCH CLI   EXCPMTCH,0              RECORD MATCHES DCB INFO?
         BE    REISSUE                 NO
         CLC   DSORG,=C'VS'            VSAM FILE?
         BE    ADD1VSAM                YES
         CLI   RECFM+1,C'B'            BLOCKED RECORDS?
         BNE   REISSUE                 NO
         CLI   RECFM,C'F'              FIXED LENGTH?
         BE    ADD1REC                 YES
         CLI   RECFM,C'V'              VARIABLE LENGTH?
         BNE   REISSUE                 NO
         L     R1,CURRECD              PICK UP CURRENT ADDRESS
         AH    R1,0(R1)                ADD RDW LENGTH
         ST    R1,CURRECD              POINT TO NEXT RECORD
         MVC   LRECL,0(R1)             SAVE RECORD LENGTH
         B     CKINBLK                 GO CHECK IF STILL IN BLOCK
ADD1REC  L     R1,CURRECD              POINT TO CURRENT RECORD
         AH    R1,LRECL                ADD ONE RECORD SIZE
         ST    R1,CURRECD              POINT TO NEXT RECORD
CKINBLK  CLC   CURRECD,AREAEND         CURRENT REC ADDR IN BLOCK?
         BNL   REISSUE                 NO
         AP    RECNO,P1                INCREMENT RECORD NBR
         B     EXCPEXIT                AND EXIT
ADD1VSAM L     R14,CURRECD             POINT TO CURRENT RECORD
         AH    R14,VSAMCURL            POINT TO NEXT RECORD
         ST    R14,CURRECD             SAVE @ NEXT RECORD
         C     R14,VSAMDEND            ANY MORE DATA IN BLOCK?
         BNL   REISSUE                 NO, GO READ NEXT BLOCK
         L     R14,VSAMCRDF            POINT TO CURRENT RDF
         CLI   0(R14),0                SINGLE UNSPANNED RECORD?
         BE    BACK1RDF                YES
         TM    0(R14),X'BF'            MULTIPLE UNSPANNED RECORDS?
         BZ    SUB1MULT                YES
NOMTCHVS MVI   EXCPMTCH,0              INVALID RDF, TURN OFF MATCH
         MVC   CURRECD,VSAMDATA        POINT TO BLOCK START
         B     EXCPEXIT                AND EXIT
BACK1RDF SH    R14,H3                  BACK UP 1 RDF
         C     R14,VSAMLRDF            PAST LEFTMOST RDF?
         BL    REISSUE                 YES, GO READ NEXT BLOCK
         ST    R14,VSAMCRDF            UPDATE CURRENT RDF ADDRESS
         CLI   0(R14),0                SINGLE UNSPANNED RECORD?
         LH    R15,1(R14)              PICK UP LENGTH
         STH   R15,VSAMCURL            SAVE RECORD LENGTH
         STH   R15,LRECL               SAVE RECORD LENGTH
         CLI   0(R14),0                SINGLE UNSPANNED RECORD?
         BE    EXCPEXIT                YES, EXIT
         TM    R15,X'BF'               MULTIPLE UNSPANNED RECORDS?
         BNZ   NOMTCHVS                NO, TURN OFF MATCH
         SH    R14,H3                  YES, BACK UP TO PAIRED RDF
         LH    R15,1(R14)              GET NBR SAME SIZE RECDS
         LTR   R15,R15                 VALID NUMBER?
         BP    CHKPRD                  YES
         B     NOMTCHVS                NO, TURN OFF MATCH
SUB1MULT SH    R14,H3                  BACK UP TO PAIRED RDF
CHKPRD   C     R14,VSAMLRDF            PAST LEFTMOST RDF?
         BL    NOMTCHVS                YES, TURN OFF MATCH
         CLI   0(R14),X'08'            IS IT NBR-OF-RECORDS RDF?
         BNE   NOMTCHVS                NO, TURN OFF MATCH
         LH    R15,1(R14)              GET NBR RECORDS LEFT
         LTR   R15,R15                 ANY MORE THIS SIZE?
         BZ    BACK1RDF                NO, BACK UP ONE RDF
         BCTR  R15,0                   YES, DEDUCT ONE
         STH   R15,1(R14)              UPDATE COUNT
         B     EXCPEXIT                AND EXIT
REISSUE  MVI   EXCPIND,C' '            CLEAR ERROR INDICATOR
         MVC   DASRCH,RCOUNT           SEARCH ON LAST RECD READ
         EXCP  DAIOB                   READ COUNT, KEY, AND DATA
         WAIT  ECB=DAECB               AWAIT COMPLETION
         CLI   DAECB,X'7F'             GOOD READ
         BE    EXCPCHEK                YES
         MVI   LASTREAD,0              INDICATE LAST EXCP INCOMPLETE
         MVI   EXCPIND,C'E'            INDICATE END OF EXTENT RANGE
         CLI   DAECB,X'42'             IS IT EOE?
         BNE   SETXHE                  NO
         SR    R15,R15                 CLEAR FOR INSERT
         IC    R15,XTNTS               GET NBR REMAINING EXTENTS
         BCT   R15,NEWXTNT             DECREMENT NUMBER EXTENTS
         B     EXCPEXIT                BRANCH IF NO MORE EXTENTS
NEWXTNT  MVC   EXTENTS,EXTADNL         SHIFT IN NEXT EXTENT
         STC   R15,XTNTS               UPDATE EXTENT COUNT
         BAL   R9,SETXTNT              GO SET NEW EXTENT IN DEB
         L     R1,DACCWAD              GET CCW ADDRESS
         B     REISSUE                 AND GO REISSUE COMMAND
SETXHE   MVI   EXCPIND,C'X'            INDICATE HARD I/O ERROR
         CLI   DAECB,X'41'             I/O ERROR INDICATED
         BNE   EXHDERR                 NO
         TM    DAUNST,1                IS IT EOF RECORD
         BO    ENDF                    YES
EXHDERR  BAL   R9,HARDERR              NO, HARD I/O ERROR
         B     EXCPEXIT                EXIT
EXCPCHEK MVI   NEWRECD,0               INDICATE NEW RECORD
         CLC   DACCWAD+1(3),=AL3(CMDCHNR0) THIS WAS THE R0 READ CCW?
         BNE   SETSYSOT                NO
         MVC   DACCWAD+1(3),=AL3(CMDCHNR) YES, SET TO NORMAL READ
SETSYSOT LA    R1,RKEYDATA             POINT TO I/O AREA
         SR    R15,R15                 CLEAR FOR INSERT
         IC    R15,RCOUNT+5            GET KEY LENGTH
         AR    R1,R15                  ADD TO START
         ST    R1,CURRECD              SAVE DATA RECORD ADDRESS
         AH    R1,RCOUNT+6             ADD DATA LENGTH
         ST    R1,AREAEND              SAVE AREA END ADDRESS
         ZAP   RECNO,P1                INITIALIZE RECORD NBR
         MVI   EXCPMTCH,0              RESET MATCH INDICATOR
         CLC   KEYLEN+1(1),RCOUNT+5    KEY LENGTHS EQUAL?
         BNE   EXCPEXIT                NO, NOT A MATCH
         CLC   DSORG,=C'VS'            VSAM DATASET?
         BE    EXCPCKVS                YES, CHECK VSAM
         CLC   DSORG,=C'PO'            PDS?
         BE    EXCPCKFM                YES
         CLC   DSORG,=C'DA'            DIRECT DATASET?
         BE    EXCPCKFM                YES
         CLC   DSORG,=C'PS'            SEQUENTIAL DATASET?
         BE    EXCPCKFM                YES
         B     EXCPEXIT                NO, LEAVE NO MATCH
EXCPCKFM CLI   RECFM,C'F'              FIXED LENGTH RECORDS?
         BE    EXCHKF                  YES
         CLI   RECFM,C'V'              VARIABLE LENGTH RECORDS?
         BE    EXCHKV                  YES
         CLI   RECFM,C'U'              UNDEFINED LENGTH RECORDS?
         BNE   EXCPEXIT                NONE OF THESE, LEAVE NO MATCH
         CLC   BLKSIZE,RCOUNT+6        BLKSIZE : DATA LENGTH
         BNL   SETMTCH                 BRANCH IF DATA <= BLKSIZE
         B     EXCPEXIT                ELSE NO MATCH
EXCHKF   CLC   BLKSIZE,RCOUNT+6        BLKSIZE : RECORD SIZE
         BE    SETMTCH                 MATCH IF EQUAL
         BL    EXCPEXIT                NO MATCH IF RECORD > BLKSIZE
         CLI   RECFM+1,C'B'            BLOCKED RECORDS?
         BNE   EXCPEXIT                NO MATCH IF NOT BLOCKED
         SR    R14,R14                 CLEAR FOR DIVIDE
         LH    R15,RCOUNT+6            PICK UP DATA RECORD LENGTH
         LH    R1,LRECL                GET LRECL
         DR    R14,R1                  DIVIDE DATA RECORD BY LRECL
         LTR   R14,R14                 ANY REMAINDER?
         BZ    SETMTCH                 NO, GO SET MATCH
         B     EXCPEXIT                ELSE LEAVE NO MATCH
EXCPCKVS CLI   RCOUNT+7,0              RECORD A MULTIPLE OF 256 BYTES?
         BNE   EXCPEXIT                NO, LEAVE NO MATCH
         TM    RCOUNT+6,1              RECORD A MULTIPLE OF 512 BYTES?
         BO    EXCPEXIT                NO, LEAVE NO MATCH
         MVC   VSAMDATA,CURRECD        @ DATA BLOCK START
         L     R15,AREAEND             @ END OF BLOCK +1
         ST    R15,VSAMBEND            SAVE @ END OF BLOCK +1
         SH    R15,H4                  BACK UP TO CIDF FIELD
         MVC   VSAMCIDF,0(R15)         SAVE CIDF
         LH    R14,VSAMDATL            GET DATA SIZE
         AH    R14,VSAMFREL            ADD FREE SPACE SIZE
         AH    R14,H4                  ADD FOR CIDF
         BNP   EXCPEXIT                INVALID CIDF, LEAVE NO MATCH
         CH    R14,RCOUNT+6            TOTAL > BLOCK SIZE?
         BH    EXCPEXIT                INVALID CIDF, LEAVE NO MATCH
         LH    R15,RCOUNT+6            GET BLOCK LENGTH
         SH    R15,VSAMFREL            DEDUCT FREE SPACE SIZE
         SH    R15,VSAMDATL            DEDUCT DATA RECORD BYTES
         SH    R15,H4                  DEDUCT CIDF SIZE
         SR    R14,R14                 CLEAR FOR DIVIDE
         LH    R1,H3                   LENGTH OF AN RDF
         DR    R14,R1                  COMPUTE NUMBER RDF'S IN BLOCK
         LTR   R14,R14                 ANY REMAINDER?
         BNZ   EXCPEXIT                INVALID CIDF, LEAVE NO MATCH
         LH    R14,VSAMDATL            GET DATA SIZE
         LTR   R14,R14                 ANY DATA IN BLOCK?
         BZ    REISSUE                 NO, GO READ AGAIN
         A     R14,VSAMDATA            ADD @ DATA START
         ST    R14,VSAMDEND            SAVE @ DATA END +1
         AH    R14,VSAMFREL            POINT TO LEFTMOST RDF
         ST    R14,VSAMLRDF            SAVE @ LEFTMOST RDF
         L     R14,VSAMBEND            GET @ BLOCK END +1
         SH    R14,H7                  POINT TO RIGHTMOST RDF
         ST    R14,VSAMCRDF            SAVE @ CURRENT RDF
         LH    R15,1(R14)              GET RDF RECORD LENGTH
         STH   R15,VSAMCURL            SAVE CURRENT RECORD LENGTH
         STH   R15,LRECL               SAVE CURRENT RECORD LENGTH
         CLI   0(R14),0                SINGLE UNSPANNED RECORD?
         BE    SETMTCH                 YES
         TM    0(R14),X'BF'            MULTIPLE UNSPANNED RECORDS?
         BNZ   EXCPEXIT                NO, LEAVE NO MATCH
         SH    R14,H3                  BACK UP TO PAIRED RDF
         CLI   0(R14),X'08'            THIS A NUMBER-OF-RECORDS RDF?
         BNE   EXCPEXIT                NO, LEAVE NO MATCH
         LH    R15,1(R14)              PICK UP NBR RECORDS
         LTR   R15,R15                 POSITIVE NUMBER?
         BNP   EXCPEXIT                NO, LEAVE NO MATCH
         BCTR  R15,0                   DEDUCT 1
         STH   R15,1(R14)              UPDATE NBR RECORDS
         B     SETMTCH                 OK, GO SET MATCH
EXCHKV   CLC   BLKSIZE,RCOUNT+6        BLKSIZE : RECORD SIZE
         BL    EXCPEXIT                NO MATCH IF RECORD > BLKSIZE
         LA    R15,RKEYDATA            POINT TO KEY + DATA AREA
         SR    R14,R14                 CLEAR FOR INSERT
         IC    R14,RCOUNT+5            PICK UP KEY LENGTH
         AR    R15,R14                 POINT TO DATA PORTION
         CLC   0(2,R15),RCOUNT+6       BDW = DATA LENGTH?
         BNE   EXCPEXIT                NO, LEAVE NO MATCH
         L     R1,CURRECD              GET CURRENT RECORD ADDRESS
         LA    R1,4(R1)                STEP PAST BDW
         ST    R1,CURRECD              SAVE ADDRESS OF FIRST RDW
         MVC   LRECL,0(R1)             SAVE RECORD LENGTH
SETMTCH  MVI   EXCPMTCH,1              INDICATE RECORD MATCHES
         B     EXCPEXIT                AND EXIT
ENDF     MVI   EXCPIND,C'F'            INDICATE EOF RECORD
EXCPEXIT L     R9,EXCP9                GET RETURN ADDRESS
         BR    R9                      EXIT
*
***********************************************************************
*       PRINT HARD I/O ERROR DATA                                     *
***********************************************************************
*
HARDERR  ST    R9,HE9                  SAVE RETURN ADDRESS
         ICM   R15,8,DAECBCC           PICK UP ECB COMPLETION CODE
         BAL   R9,HEXPRNT              GO MAKE PRINTABLE
         MVC   IOECC,WORK              MOVE TO PRINT
         ICM   R15,15,DACSW            1ST 4 BYTES OF CSW
         BAL   R9,HEXPRNT              MAKE PRINTABLE
         MVC   IOECSW1,WORK            MOVE TO PRINT
         ICM   R15,15,DACSW+4          2ND 4 BYTES OF CSW
         BAL   R9,HEXPRNT              MAKE PRINTABLE
         MVC   IOECSW2,WORK            MOVE TO PRINT
         L     R14,DANXCCW             POINT TO NEXT CCW
         LA    R14,0(R14)              CLEAR HIGH ORDER BYTE
         SH    R14,=H'8'               BACK UP TO FAILING CCW
         C     R14,=A(CMDCHNR0)        THIS ONE OF MY CCW'S?
         BL    UNKNCCW                 NO
         C     R14,=A(WRITCCW)         THIS ONE OF MY CCW'S?
         BNH   FORMCCWD                YES
UNKNCCW  MVC   IOECCW1,=CL8'????????'  UNKNOWN CCW
         MVC   IOECCW2,=CL8'????????'  UNKNOWN CCW
         MVC   IOEBYTS,BLANX           IGNORE BYTES READ
         MVC   IOECD1,BLANX            IGNORE DATA READ
         MVC   IOECD2,BLANX            IGNORE DATA READ
         MVC   IOECD3,BLANX            IGNORE DATA READ
         B     HECHNAM                 CONTINUE
FORMCCWD ICM   R15,15,0(R14)           1ST 4 BYTES OF FAILING CCW
         BAL   R9,HEXPRNT              MAKE PRINTABLE
         MVC   IOECCW1,WORK            MOVE TO PRINT
         ICM   R15,15,4(R14)           2ND 4 BYTES OF FAILING CCW
         BAL   R9,HEXPRNT              MAKE PRINTABLE
         MVC   IOECCW2,WORK            MOVE TO PRINT
         LH    R15,6(R14)              PICK UP CCW LENGTH
         SH    R15,DARESID             COMPUTE BYTES READ
         CVD   R15,DBLWD               CONVERT TO PACKED
         UNPK  IOEBYTS,DBLWD           UNPACK TO PRINT
         L     R14,0(R14)              GET CCW DATA ADDRESS
         ICM   R15,15,0(R14)           POINT TO CCW DATA
         BAL   R9,HEXPRNT              MAKE PRINTABLE
         MVC   IOECD1,WORK             MOVE TO PRINT
         ICM   R15,15,4(R14)           PICK UP NEXT 4 BYTES
         BAL   R9,HEXPRNT              MAKE PRINTABLE
         MVC   IOECD2,WORK             MOVE TO PRINT
         ICM   R15,15,8(R14)           PICK UP NEXT 4 BYTES
         BAL   R9,HEXPRNT              MAKE PRINTABLE
         MVC   IOECD3,WORK             MOVE TO PRINT
         OI    IOEBYTS+4,C'0'          CLEAR SIGN
HECHNAM  MVC   IOECHNM,=CL8'CMDCHNR0'  ASSUME CMDCHNR0
         CLC   DACCWAD+1(3),=AL3(CMDCHNR0) IS IT CMDCHNR0?
         BE    ERRSCH                  YES
         MVC   IOECHNM,=CL8'CMDCHNR'   NO, ASSUME CMDCHNR
         CLC   DACCWAD+1(3),=AL3(CMDCHNR) IS IT CMDCHNR?
         BE    ERRSCH                  YES
         MVC   IOECHNM,=CL8'CMDCHNK'   ASSUME CMDCHNK
         CLC   DACCWAD+1(3),=AL3(CMDCHNK) IS IT CMDCHNK?
         BE    ERRSCH                  YES
         MVC   IOECHNM,=CL8'????????'  UNKNOWN CCW CHAIN
ERRSCH   ICM   R15,15,DASRCH           PICK UP SEARCH CCHH
         BAL   R9,HEXPRNT              MAKE PRINTABLE
         MVC   IOESRCH(8),WORK         MOVE TO PRINT
         ICM   R15,8,DASRCH+4          PICK UP SEARCH RECORD NBR
         BAL   R9,HEXPRNT              MAKE PRINTABLE
         MVC   IOESRCH+8(2),WORK       MOVE TO PRINT
         ICM   R15,12,DAUCSNS          PICK UP SENSE BYTES
         BAL   R9,HEXPRNT              MAKE PRINTABLE
         MVC   IOESNS,WORK             MOVE TO PRINT
         MVC   PRT,IOERR1              LINE 1 TO PRINT
         BAL   R9,PRINT                PRINT IT
         MVC   PRT,IOERR2              LINE 2 TO PRINT
         BAL   R9,PRINT                PRINT IT
         MVC   PRT,IOERR3              LINE 3 TO PRINT
         BAL   R9,PRINT                PRINT IT
         MVC   PRT+15(16),=CL16'CONDITIONS ARE: '
         LA    R14,PRT+31              POINT TO CONDITION DESCRIPTION
         CLI   DAECBCC,X'41'           IS IT PERMANENT I/O ERROR?
         BNE   IOE1                    NO
         LA    R15,0                   LITERAL SUBSCRIPT
         BAL   R9,CONDPRT              GO PRINT
IOE1     CLI   DAECBCC,X'42'           IS IT EXTENT VIOLATION?
         BNE   IOE2                    NO
         LA    R15,1                   LITERAL SUBSCRIPT
         BAL   R9,CONDPRT              GO PRINT
IOE2     CLI   DAECBCC,X'44'           IS IT INTERCEPTED?
         BNE   IOE3                    NO
         LA    R15,2                   LITERAL SUBSCRIPT
         BAL   R9,CONDPRT              GO PRINT
IOE3     TM    DAUNST,X'20'            IS IT UNIT CHECK?
         BZ    IOE4                    NO
         LA    R15,3                   LITERAL SUBSCRIPT
         BAL   R9,CONDPRT              GO PRINT
IOE4     TM    DAUNST,X'10'            IS IT UNIT EXCEPTION?
         BZ    IOE5                    NO
         LA    R15,4                   LITERAL SUBSCRIPT
         BAL   R9,CONDPRT              GO PRINT
IOE5     TM    DACHST,X'40'            IS IT WRONG LENGTH RECORD?
         BZ    IOE6                    NO
         LA    R15,5                   LITERAL SUBSCRIPT
         BAL   R9,CONDPRT              GO PRINT
IOE6     TM    DACHST,X'20'            IS IT CHANNEL PROGRAM CHECK?
         BZ    IOE7                    NO
         LA    R15,6                   LITERAL SUBSCRIPT
         BAL   R9,CONDPRT              GO PRINT
IOE7     TM    DACHST,X'10'            IS IT PROTECTION CHECK?
         BZ    IOE8                    NO
         LA    R15,7                   LITERAL SUBSCRIPT
         BAL   R9,CONDPRT              GO PRINT
IOE8     TM    DACHST,X'08'            IS IT CHANNEL DATA CHECK?
         BZ    IOE9                    NO
         LA    R15,8                   LITERAL SUBSCRIPT
         BAL   R9,CONDPRT              GO PRINT
IOE9     TM    DACHST,X'04'            IS IT CHANNEL CONTROL CHECK?
         BZ    IOE10                   NO
         LA    R15,9                   LITERAL SUBSCRIPT
         BAL   R9,CONDPRT              GO PRINT
IOE10    TM    DACHST,X'02'            IS IT INTERFACE CONTROL CHECK?
         BZ    IOE11                   NO
         LA    R15,10                  LITERAL SUBSCRIPT
         BAL   R9,CONDPRT              GO PRINT
IOE11    TM    DAUCSNS,X'80'           IS IT COMMAND REJECT?
         BZ    IOE12                   NO
         LA    R15,11                  LITERAL SUBSCRIPT
         BAL   R9,CONDPRT              GO PRINT
IOE12    TM    DAUCSNS,X'10'           IS IT EQUIPMENT CHECK?
         BZ    IOE13                   NO
         LA    R15,12                  LITERAL SUBSCRIPT
         BAL   R9,CONDPRT              GO PRINT
IOE13    TM    DAUCSNS,X'08'           IS IT DATA CHECK?
         BZ    IOE14                   NO
         LA    R15,13                  LITERAL SUBSCRIPT
         BAL   R9,CONDPRT              GO PRINT
IOE14    TM    DAUCSNS,X'04'           IS IT OVERRUN?
         BZ    IOE15                   NO
         LA    R15,14                  LITERAL SUBSCRIPT
         BAL   R9,CONDPRT              GO PRINT
IOE15    TM    DAUCSNS,X'02'           IS IT TRK CONDITION CHECK?
         BZ    IOE16                   NO
         LA    R15,15                  LITERAL SUBSCRIPT
         BAL   R9,CONDPRT              GO PRINT
IOE16    TM    DAUCSNS,X'01'           IS IT SEEK CHECK?
         BZ    IOE17                   NO
         LA    R15,16                  LITERAL SUBSCRIPT
         BAL   R9,CONDPRT              GO PRINT
IOE17    TM    DAUCSNS+1,X'80'         IS IT DATA CHECK IN COUNT?
         BZ    IOE18                   NO
         LA    R15,17                  LITERAL SUBSCRIPT
         BAL   R9,CONDPRT              GO PRINT
IOE18    TM    DAUCSNS+1,X'40'         IS IT WRITE TRACK OVERRUN?
         BZ    IOE19                   NO
         LA    R15,18                  LITERAL SUBSCRIPT
         BAL   R9,CONDPRT              GO PRINT
IOE19    TM    DAUCSNS+1,X'20'         IS IT END OF CYLINDER ON M-T?
         BZ    IOE20                   NO
         LA    R15,19                  LITERAL SUBSCRIPT
         BAL   R9,CONDPRT              GO PRINT
IOE20    TM    DAUCSNS+1,X'10'         IS IT INVALID COMMAND SEQUENCE?
         BZ    IOE21                   NO
         LA    R15,20                  LITERAL SUBSCRIPT
         BAL   R9,CONDPRT              GO PRINT
IOE21    TM    DAUCSNS+1,X'08'         IS IT NO RECORD FOUND?
         BZ    IOE22                   NO
         LA    R15,21                  LITERAL SUBSCRIPT
         BAL   R9,CONDPRT              GO PRINT
IOE22    TM    DAUCSNS+1,X'04'         IS IT FILE PROTECTED?
         BZ    IOE23                   NO
         LA    R15,22                  LITERAL SUBSCRIPT
         BAL   R9,CONDPRT              GO PRINT
IOE23    TM    DAUCSNS+1,X'02'         IS IT MISSING ADDRESS MARKER?
         BZ    IOE24                   NO
         LA    R15,23                  LITERAL SUBSCRIPT
         BAL   R9,CONDPRT              GO PRINT
IOE24    TM    DAUCSNS+1,X'01'         IS IT OVERFLOW INCOMPLETE?
         BZ    IOECKPTD                NO
         LA    R15,24                  LITERAL SUBSCRIPT
         BAL   R9,CONDPRT              GO PRINT
IOECKPTD CLC   PRT,BLANX               ANYTHING LEFT IN PRT?
         BE    HEXIT                   NO
         BAL   R9,PRINT                YES, PRINT IT
HEXIT    L     R9,HE9                  GET RETURN ADDRESS
         BR    R9                      EXIT
*
***********************************************************************
*        PRINT I/O ERROR CONDITION LITERALS                           *
***********************************************************************
*
CONDPRT  ST    R9,CND9                 SAVE RETURN ADDRESS
         MH    R15,=H'30'              GET OFFSET TO LITERAL
         LA    R15,CONDTBL(R15)        POINT TO LITERAL
         ST    R15,LITADR              SAVE LITERAL ADDRESS
CHKLENG  L     R15,LITADR              POINT TO LITERAL
         LR    R1,R14                  POINT TO CURRENT PRINT ADDR
         AH    R1,0(R15)               ADD THIS LITERAL LENGTH
         C     R1,=A(PRT+78)           PAST END OF PRINT LINE?
         BH    LINEFULL                YES
         LH    R1,0(R15)               NO, GET LITERAL LENGTH
         EX    R1,MOVLTRL              MOVE TO PRINT
         AH    R14,0(R15)              STEP PAST LITERAL
         LA    R14,1(R14)              ADD A SPACE
         B     CNDXIT                  AND EXIT
LINEFULL BAL   R9,PRINT                GO PRINT THE LINE
         LA    R14,PRT+15              POINT TO NEXT PRINT LOC
         B     CHKLENG                 CONTINUE
CNDXIT   L     R9,CND9                 GET RETURN ADDRESS
         BR    R9                      EXIT
MOVLTRL  MVC   0(1,R14),2(R15)         EXECUTED MOVE
*
***********************************************************************
*         PRINT EOF RECORDS                                           *
***********************************************************************
*
ENDFILE  ST    R9,EFI9                 SAVE RETURN ADDRESS
         BAL   R9,FORMCNT              GO FORMAT COUNT RECORD
         BAL   R9,FORMKEY              GO FORMAT KEY, IF ANY
         MVC   PRT,PLIN1               COUNT LINE TO PRINT
         MVC   PRT+30(18),=C'*** EOF RECORD ***' LITERAL TO PRINT
         BAL   R9,PRINT                GO PRINT
         MVC   PRT,PLIN2               SECOND LINE TO PRINT
         BAL   R9,PRINT                GO PRINT
         BAL   R9,PRINT                PRINT BLANK LINE
         L     R9,EFI9                 GET RETURN ADDRSS
         BR    R9                      EXIT
*
***********************************************************************
*        PRINT FORMAT CONTROL: IF THIS IS THE BEGINNING OF A NEW      *
*        BLOCK, PRINT THE COUNT RECORD. IF THE FIRST TIME FOR A NEW   *
*        KEYED BLOCK, AND A FORMAT IS AVAILABLE FOR THE KEY, FORMAT   *
*        PER SPECIFICATIONS, OTHERWISE PRINT THE ENTIRE KEY. IF A DATA*
*        FORMAT IS IN EFFECT, PRINT THE NEXT DATA RECORD IN THE BLOCK *
*        PER SPECIFICATIONS AND ADVANCE TO THE NEXT LOGICAL RECORD IN *
*        THE BLOCK, OTHERWISE PRINT THE ENTIRE BLOCK.                 *
***********************************************************************
*
PRNTCTL  ST    R9,PTC9                 SAVE RETURN ADDRESSORD
         CLC   COMMAND(2),=C'R '       READ REQUEST?
         BNE   CHKNDXT                 NO
         CLI   SCHTBL,0                SEARCH CRITERIA ACTIVE?
         BE    CHKNDXT                 NO
         CLI   SCHFND,1                YES, WAS A MATCH FOUND?
         BE    CHKNDXT                 YES
         MVC   PRT,NOMATCH             NO, MOVE NO MATCH MESSAGE
         B     PCPTERR                 CONTINUE
CHKNDXT  CLI   EXCPIND,C'E'            END OF EXTENT?
         BNE   CNTKEY                  NO
         MVC   PRT,EOEMSG              YES, GET END OF EXTENT MSG
PCPTERR  BAL   R9,PRINT                AND SEND TO USER
         B     PTCXIT                  EXIT
CNTKEY   CLI   EXCPMTCH,0              RECORD MATCHES DCB INFO?
         BE    PRTDCNT                 NO
         CLI   NEWRECD,0               FIRST TIME FOR THIS RECORD?
         BNE   EOFCHEK                 NO
PRTDCNT  BAL   R9,FORMCNT              GO FORMAT COUNT RECORD
KEYCHEX  CLI   RCOUNT+5,0              RECORD HAS A KEY?
         BE    EOFCHEK                 NO
         CLI   EXCPMTCH,0              RECORD MATCHES DCB INFO?
         BE    PRTDKEY                 NO
         L     R1,FMTTBLA              POINT TO FORMAT TABLE
         MVI   FOUNDFMT,0              CLEAR FORMAT FOUND INDIC
         USING FMTTBLD,R1
CKKEND   C     R1,FMTTBLE              END OF TABLE?
         BL    CKKKEY                  NO
         CLI   FOUNDFMT,0              ANY KEY FORMAT FOUND?
         BE    PRTDKEY                 NO
         B     EOFCHEK                 GO TO DATA RECORD FORMAT
CKKKEY   TM    FMTFLAG,X'80'           THIS A KEY FORMAT?
         BO    GOTKEY                  YES
CKKEYST  LA    R1,L'FMTTBL(R1)         STEP TO NEXT ENTRY
         B     CKKEND                  CONTINUE FORMAT SRCH
GOTKEY   MVI   FOUNDFMT,1              INDICATE FORMAT FOUND
         LH    R11,FMTSTART            GET STARTING OFFSET
         LA    R11,1(R11)              UN-RELATIVIZE
         CVD   R11,DBLWD               CONVERT TO PACKED
         ZAP   POS,DBLWD               INITIALIZE POSITION
         LH    R11,FMTLGTH             GET FIELD LENGTH
         LA    R12,RKEYDATA            POINT TO KEY START
         AH    R12,FMTSTART            POINT TO FIELD START
         MVC   PLIN1+20(7),=C'**KEY**' LITERAL TO PRINT
         ST    R1,TBLSAVE              SAVE TABLE ADDRESS
         BAL   R9,FORMPRT              GO PRINT THE FIELD
         L     R1,TBLSAVE              RESTORE TABLE ADDRESS
         B     CKKEYST                 GO SEARCH FOR NEXT FORMAT
PRTDKEY  BAL   R9,FORMKEY              GO FORMAT KEY RECORD
EOFCHEK  MVI   NEWRECD,1               INDICATE RECORD USED
         CLI   EXCPIND,C'F'            END OF FILE RECORD READ?
         BNE   NORMDATA                NO
         BAL   R9,ENDFILE              YES, GO PRINT EOF RECORD
         B     PTCXIT                  AND EXIT
NORMDATA CLI   EXCPMTCH,0              RECORD MATCHES DESCRIP?
         BE    PRTDDATA                NO
         L     R1,FMTTBLA              POINT TO FORMAT TABLE
         MVI   FOUNDFMT,0              RESET FORMAT FOUND INDICATOR
         USING FMTTBLD,R1
CKDEND   C     R1,FMTTBLE              END OF TABLE?
         BL    CKTDTA                  NO
         CLI   FOUNDFMT,0              ANY DATA FORMAT FOUND?
         BE    PRTDDATA                NO
         B     PTCXIT                  EXIT
CKTDTA   TM    FMTFLAG,X'40'           THIS A DATA FORMAT?
         BO    GOTDATA                 YES
CKDTAST  LA    R1,L'FMTTBL(R1)         STEP TO NEXT ENTRY
         B     CKDEND                  CONTINUE FORMAT SRCH
GOTDATA  MVI   FOUNDFMT,1              INDICATE FORMAT FOUND
         LH    R11,FMTSTART            GET STARTING OFFSET
         LA    R11,1(R11)              UN-RELATIVIZE
         CVD   R11,DBLWD               CONVERT TO PACKED
         ZAP   POS,DBLWD               INITIALIZE POSITION
         LH    R11,FMTLGTH             GET FIELD LENGTH
         L     R12,CURRECD             POINT TO DATA RECORD START
         AH    R12,FMTSTART            POINT TO FIELD START
         MVC   PLIN1+20(3),=C'REC'     LITERAL FOR RECORD NBR
         MVC   PLIN1+23(4),=X'40212121' EDIT WORD
         ED    PLIN1+23(4),RECNO       RECORD NBR TO PRINT
         ST    R1,TBLSAVE              SAVE TABLE ADDRESS
         BAL   R9,FORMPRT              GO PRINT THE FIELD
         L     R1,TBLSAVE              RESTORE TABLE ADDRESS
         B     CKDTAST                 GO SEARCH FOR NEXT FORMAT
         DROP  R1
PRTDDATA BAL   R9,FORMDATA             GO FORMAT DATA RECORD
PTCXIT   L     R9,PTC9                 GET RETURN ADDRESS
         BR    R9                      EXIT
*
***********************************************************************
*        PRINT A LINE                                                 *
***********************************************************************
*
PRINT    PUT   SYSPRINT,PRT            WRITE PRINT LINE
         TM    SYSLST+48,X'10'         DID SYSLST OPEN O.K.?
         BZ    CLRPRT                  NO
         PUT   SYSLST,PRT              YES, WRITE AUX PRINT FILE
CLRPRT   MVC   PRT,BLANX               CLEAR PRINT LINE
         BR    R9                      EXIT
*
***********************************************************************
*        FORMAT THE COUNT RECORD FOR PRINTING                         *
***********************************************************************
*
FORMCNT  ST    R9,FCNT9                SAVE RETURN ADDRESS
         MVC   PLIN1(4),=C'CHR='       LITERAL TO PRINT
         MVI   PLIN1+8,C'-'            DELIMITER TO PRINT
         MVI   PLIN1+13,C'-'           DELIMITER TO PRINT
         MVC   PLIN2(4),=C'KEY='       LITERAL TO PRINT
         MVC   PLIN2+8(5),=C'DATA='    LITERAL TO PRINT
         UNPK  WORK,RCOUNT(6)          UNPACK TO CONVERT
         TR    WORK,TRTBLA-240         TRANSLATE TO PRINTABLE
         MVC   PLIN1+4(4),WORK         CYLINDER TO PRINT
         MVC   PLIN1+9(4),WORK+4       HEAD NBR TO PRINT
         MVC   PLIN1+14(2),WORK+8      RECORD NBR TO PRINT
         SR    R11,R11                 CLEAR WORK REG
         IC    R11,RCOUNT+5            PICK UP KEY LENGTH
         CVD   R11,DBLWD               CONVERT TO PACKED
         UNPK  PLIN2+4(3),DBLWD+6(2)   UNPACK KEY LENGTH
         OI    PLIN2+6,C'0'            CLEAR SIGN
         LH    R11,RCOUNT+6            PICK UP DATA LENGTH
         CVD   R11,DBLWD               CONVERT TO PACKED
         UNPK  PLIN2+13(5),DBLWD+5(3)  UNPACK TO PRINT
         OI    PLIN2+17,C'0'           CLEAR SIGN
         L     R9,FCNT9                GET RETURN ADDRESS
         BR    R9                      EXIT
*
***********************************************************************
*        FORMAT KEY RECORD FOR PRINTING                               *
***********************************************************************
*
FORMKEY  ST    R9,FKEY9                SAVE RETURN ADDRESS
         SR    R11,R11                 CLEAR WORK REG
         IC    R11,RCOUNT+5            GET KEY LENGTH
         LTR   R11,R11                 IS IT ZERO
         BCR   8,R9                    YES, NO KEY, EXIT
         LA    R12,RKEYDATA            GET KEY + DATA ADDRESS
         ZAP   POS,P1                  SET RECORD POSITION NBR
         MVC   PLIN1+20(7),=C'**KEY**' LITERAL TO PRINT
         BAL   R9,FORMPRT              GO TO FORMAT FOR PRINTING
         L     R9,FKEY9                GET RETURN ADDRESS
         BR    R9                      EXIT
*
***********************************************************************
*        FORMAT DATA RECORD FOR PRINTING                              *
***********************************************************************
*
FORMDATA ST    R9,FDATA9               SAVE RETURN ADDRESS
         SR    R12,R12                 CLEAR WORK REG
         L     R12,CURRECD             POINT TO DATA RECORD
         LH    R11,RCOUNT+6            GET LENGTH FROM COUNT RECORD
         MVC   PLIN1+20(8),=C'**DATA**' PRINT LITERAL
         CLI   EXCPMTCH,0              RECORD MATCHES DCB DATA?
         BE    SETP1                   NO
         CLC   DSORG,=C'VS'            VSAM FILE?
         BE    GETRCLN                 YES
         CLI   RECFM+1,C'B'            BLOCKED RECORDS?
         BNE   RESMTCH                 NO
         CLI   RECFM,C'V'              VARIABLE LENGTH RECORDS?
         BE    SETVLEN                 YES
         CLI   RECFM,C'F'              FIXED LENGTH RECORDS?
         BNE   RESMTCH                 NO
GETRCLN  LH    R11,LRECL               YES, GET LOGICAL RECORD LENGTH
         B     SETRECL                 CONTINUE
SETVLEN  LH    R11,0(R12)              GET RDW RECORD LENGTH
SETRECL  MVC   PLIN1+20(3),=C'REC'     LITERAL TO PRINT
         MVC   PLIN1+23(4),=X'40212121' EDIT WORD
         ED    PLIN1+23(4),RECNO       RECORD NBR TO PRINT
         B     SETP1                   CONTINUE
RESMTCH  MVI   EXCPMTCH,0              RESET MATCH INDICATOR
SETP1    ZAP   POS,P1                  SET RECORD POSITION NBR
         BAL   R9,FORMPRT              GO FORMAT AND PRINT
         L     R9,FDATA9               GET RETURN ADDRESS
         BR    R9
*
***********************************************************************
*        FORMAT AND PRINT                                             *
***********************************************************************
*
FORMPRT  ST    R9,FORM9                SAVE RETURN ADDR
         STH   R11,RECLEN              SAVE RECORD LENGTH
         CLC   COMMAND(2),=C'Q '       READ LOOP REQUEST?
         BE    CKSYSOP                 NO
         CLC   COMMAND(2),=C'R '       READ REQUEST?
         BNE   NEXLIN                  NO
CKSYSOP  TM    SYSOUT+48,X'10'         IS SYSOUT FILE OPEN?
         BZ    NEXLIN                  NO
         TM    SYSOUT+36,X'C0'         UNDEFINED RECORDS?
         BNO   CKNXPUT                 NO
         SR    R1,R1                   CLEAR FOR INSERT
         IC    R1,RCOUNT+5             PICK UP KEY LENGTH
         AH    R1,RCOUNT+6             ADD DATA LENGTH
         STH   R1,SYSOUT+82            STORE TOTAL IN DCBLRECL
CKNXPUT  PUT   SYSOUT,0(R12)           WRITE SYSOUT RECORD
NEXLIN   MVC   PLIN3+20(7),=X'4020206B202020' EDIT WORD
         ED    PLIN3+20(7),POS         RECORD POSITION TO PRINT
         AP    POS,P50                 ADD FOR NEXT LINE
         LA    R10,50                  GET NORMAL LINE LENGTH
         CR    R10,R11                 50 > REMAINING LENGTH TO PRINT
         BNH   PART                    NO
         LR    R10,R11                 YES, USE REMAINING COUNT
         SR    R11,R11                 ZERO REMAINING COUNT
         B     BEGNLIN                 GO BEGIN FORMAT
PART     SR    R11,R10                 DEDUCT LINE LENGTH FROM REMAININ
BEGNLIN  BCTR  R10,R0                  SUBTRACT 1 = LINE LENG CODE
         STC   R10,CHMOV+1             CHARACTER MOVE LENGTH
         STC   R10,ZMOV+1              ZONE MOVE LENGTH
         STC   R10,NMOV+1              NUMERICS MOVE LENGTH
         STC   R10,CHTR+1              CHARACTER TRANSLATE LENGTH
         STC   R10,ZTR+1               ZONE TRANSLATE LENGTH
         STC   R10,NTR+1               NUMERICS TRANSLATE LENGTH
CHMOV    MVC   PLIN1+28(50),0(R12)     CHARACTERS TO PRINT LINE 1
ZMOV     MVZ   PLIN2+28(50),0(R12)     ZONES TO PLIN2
NMOV     MVN   PLIN3+28(50),0(R12)     NUMERICS TO PRINT LINE 3
CHTR     TR    PLIN1+28(50),CHTRTBL    TRANSLATE CHARACTERS
ZTR      TR    PLIN2+28(50),TRTBLZ     TRANSLATE ZONES
NTR      TR    PLIN3+28(50),TRTBLA-64  TRANSLATE NUMERICS
         MVC   PRT,PLIN1               LINE 1 TO PRINT
         BAL   R9,PRINT                GO PRINT IT
         MVC   PRT,PLIN2               LINE 2 TO PRINT
         BAL   R9,PRINT                GO PRINT IT
         MVC   PRT,PLIN3               LINE 3 TO PRINT
         BAL   R9,PRINT                GO PRINT IT
         BAL   R9,PRINT                PRINT BLANK LINE
         MVC   PLIN1,BLANX             CLEAR LINE 1
         MVC   PLIN2,BLANX             CLEAR LINE 2
         MVC   PLIN3,BLANX             CLEAR LINE 3
         LTR   R11,R11                 ANY REMAIN TO PRINT
         BZ    RELD9                   ZERO LEFT, EXIT
         LA    R12,1(R10,R12)          YES, SUBTRACT THIS LINE FROM REM
         B     NEXLIN                  AND GO TO NEXT LINE
RELD9    L     R9,FORM9                GET RETURN ADDR
         BR    R9                      EXIT
*
***********************************************************************
*        ROUTINE TO CONVERT HEX TO PRINTABLE CHARACTERS (2 CHARACTERS *
*        PER HEX BYTE. ON ENTRY, HEX TO BE CONVERTED IS IN R15. THE   *
*        CHARACTER EQUIVALENT IS PLACED IN THE FIRST 8 BYTES OF WORK. *
***********************************************************************
*
HEXPRNT  STCM  R15,15,WORK              SAVE HEX VALUE
         UNPK  WORK(9),WORK(5)          CONVERT TO 1 NIBBLE PER BYTE
         MVZ   WORK(8),XZROS            CLEAR ZONES FOR TRANSLATE
         TR    WORK(8),TRTBLA           TRANSLATE TO PRINTABLE
         BR    R9                       EXIT
*
***********************************************************************
*        ROUTINE TO CONVERT CHARACTERS TO HEX, TWO CHARACTERS PER BYTE*
*        ON ENTRY, R14 POINTS TO THE HEX FIELD AND R15 CONTAINS THE   *
*        NUMBER OF CHARACTER PAIRS TO CONVERT (80 MAX). THE HEX       *
*        RESULT IS STORED IN THE HEX FIELD. CHERR=1 IF ANY OF THE     *
*        CHARACTERS ARE INVALID (NOT 0-9 OR A-F).                     *
***********************************************************************
*
CHARHEX  LA    R12,HEX                  POINT TO HEX FIELD
         MVI   CHERR,0                  CLEAR ERROR INDICATOR
NEXPAIR  MVC   0(1,R12),1(R14)          MOVE SECOND CHAR (NUMERIC)
         TR    0(1,R12),TRCHAR          TRANSLATE
         CLI   0(R12),X'FF'             INVALID CHARACTER?
         BNE   DO1ST                    NO
CHERRS   MVI   CHERR,1                  INDICATE INVALID CHARACTER
         BR    R9                       EXIT
DO1ST    MVC   WORK(1),0(R14)           MOVE 1ST CHAR (ZONE)
         TR    WORK(1),TRCHAR           TRANSLATE
         CLI   WORK,X'FF'               INVALID CHARACTER?
         BE    CHERRS                   YES, ERROR
         PACK  WORK(1),WORK(1)          INVERT ZONE BYTE
         MVZ   0(1,R12),WORK            SET ZONE IN PLACE
         LA    R12,1(R12)               STEP OVER 1 BYTE IN CHARS
         LA    R14,2(R14)               STEP OVER 2 CHARS IN INPUT
         BCT   R15,NEXPAIR              CONTINUE
         BR    R9                       EXIT
***********************************************************************
*   SET DEB EXTENTS FOR THE RANGE TO BE ACCESSED                      *
***********************************************************************
*
SETXTNT  L     R12,DADCB+44            @ DEB FOR INPUT1 FILE
         SMODE KEY=0,STATE=P
         MVC   38(5,R12),BGNXTNT       SET DEB START EXTENT
         MVC   42(5,R12),ENDXTNT       SET DEB END EXTENT
         SMODE KEY=NZERO,STATE=P
         MVC   RCOUNT(4),BGNXTNT       SET BEGIN SEARCH ADDRESS
         MVI   RCOUNT+4,0              BEGIN AT RECORD 0
         BR    R9                      EXIT
*
***********************************************************************
*                                                                     *
*        DATA AREAS                                                   *
*                                                                     *
***********************************************************************
*
DAPARM1  DS    0F                      * 1ST PARAMETER FOR DYNALLOC *
DDN      DC    CL8'INPUT1'             DDNAME
DSNAME   DC    CL44'&&DADCB'           DATASET NAME
MEMBER   DC    XL8'00'                 MEMBER NAME
         DC    XL3'00'                 DISPOSITION:
*                                    BYTE1: 0=OLD,M=MOD,N=NEW,S=SHR
*                                    BYTE2: U=UNCATLG,C=CATLG,D=DELETE
*                                    K=KEEP; BYTE3: SAME AS BYTE2
         DC    CL8'DISK'               UNIT NAME
         DC    XL2'00'                 UNIT COUNT
         DC    XL6'00'                 VOLUME SERIAL NUMBER
         DC    XL1'00'                 LABEL TYPE:
*                                      N=NL, S=SL, B=BLP
         DC    XL2'00'                 DATASET SEQUENCE NBR (TAPE)
         DC    XL1'00'                 F: FREE=CLOSE
         DC    XL2'00'                 RETENTION PERIOD IN DAYS
         DC    XL3'00'                 RECORDING FORMAT:
*                                      BYTE1: F=FIXED, V=VARIABLE,
*                                      U=UNDEFINED; BYTE2: B=BLOCKED,
*                                      BYTE3: A=ASA CONTROL CHARACTERS
         DC    XL2'00'                 LOGICAL RECORD LENGTH
         DC    XL2'00'                 BLOCK SIZE
         DC    XL1'00'                 TAPE DENSITY: 1=1600,6=6250
         DC    XL2'00'                 BUFNO
         DC    XL2'00'                 KEY LENGTH
         DC    XL1'00'                 DATASET ORGANIZATION:
*                                      V=VSAM, P=PDS, D=DIRECT, S=SEQ
         DC    CL1'C'                  SPACE TYPE:
*                                      C=CYL, T=TRK
         DC    XL2'01'                 PRIMARY SPACE AMOUNT
         DC    XL2'00'                 SECONDARY SPACE AMOUNT
         DC    CL1'00'                 R=RLSE
         DC    XL2'00'                 NBR DIRECTORY BLOCKS
         DC    XL5'00'                 EXPIRATION DATE YYDDD
*
*
*
DAPARM2  DS    0F                      2ND PARAMETER FOR DYNALLOC
         DC    CL1'A'                  REQUEST CODE:
*                                      A=ALLOCATE A DATASET
*                                      V=VOLSER FEEDBACK
RETRNCD  DC    CL2' '                  DYNALLOC RETURN CODE
ERRRET   DC    CL4' '                  ERROR RETURN CODE
INFORET  DC    CL4' '                  INFO RETURN CODE
*
***********************************************************************
*                                                                     *
*        COMMON DATA AREAS                                            *
*                                                                     *
***********************************************************************
*
SAV15    DC    F'0'                    SAVE AREA FOR R15 AFTER UCBSCAN
FZERO    DC    F'0'                    CONSTANT ZERO
H0       DC    H'0'                    CONSTANT ZERO
H3       DC    H'3'                    CONSTANT 3
H4       DC    H'4'                    CONSTANT 4
H7       DC    H'7'                    CONSTANT 7
VSAMCIDF DS    0A                      VSAM CIDF FOR CURRENT BLOCK
VSAMDATL DC    H'0'                    .DATA RECORD BYTES IN BLOCK
VSAMFREL DC    H'0'                    .FREE SPACE BYTES IN BLOCK
VSAMDATA DC    A(0)                    BEGINNING OF VSAM DATA BLOCK
VSAMBEND DC    A(0)                    @ END OF BLOCK +1
VSAMCURR DC    A(0)                    @ CURRENT VSAM RECORD
VSAMDEND DC    A(0)                    @ END OF DATA IN BLOCK +1
VSAMCRDF DC    A(0)                    @ CURRENT RDF
VSAMLRDF DC    A(0)                    @ OF LEFTMOST RDF
VSAMCURL DC    H'0'                    CURRENT VSAM RECORD LENGTH
*
         DS    0D                      DOUBLEWORD ALIGN WORK100
WORK100  DC    XL100'00'               WORK AREA FOR CVTUCBSC
ADDRUCB  DC    A(0)                    UCB ADDR FROM IOSVSUCB
*
MEMR9    DS    F                       RETURN ADDRESS FOR MEMBRNM
TTR9     DS    F                       RETURN ADDRESS FOR TTR
VOL9     DS    F                       R9 SAVE FOR VOLUME ROUTINE
VLL9     DS    F                       R9 SAVE FOR VOLLIST ROUTINE
DSN9     DS    F                       R9 SAVE FOR DSNAMEA ROUTINE
DSL9     DS    F                       R9 SAVE FOR DSNLIST ROUTINE
GCHR9    DS    F                       R9 SAVE FOR GETCHR ROUTINE
EFI9     DS    F                       R9 SAVE
XRD9     DS    F                       R9 SAVE FOR EXCPREAD ROUTINE
XKY9     DS    F                       R9 SAVE FOR EXCPKEY  ROUTINE
REW9     DS    F                       R9 SAVE FOR REWRITE ROUTINE
HE9      DS    F                       R9 SAVE
CND9     DS    F                       R9 SAVE FOR CONDPRNT ROUTINE
LITADR   DS    F                       R15 SAVE FOR CONDPRNT ROUTINE
PTC9     DS    F                       R9 SAVE FOR PRNTCTL ROUTINE
FCNT9    DS    F                       R9 SAVE FOR FORMCNT ROUTINE
FKEY9    DS    F                       R9 SAVE FOR FORMKEY ROUTINE
FDATA9   DS    F                       R9 SAVE FOR FORMDATA ROUTINE
CHG9     DS    F                       R9 SAVE FOR CHANGE ROUTINE
EXCP9    DS    F                       R9 SAVE FOR EXCP ROUTINE
CAT9     DS    F                       R9 SAVE FOR CATALOG ROUTINE
FMT9     DS    F                       R9 SAVE FOR FORMAT ROUTINE
DCB9     DS    F                       R9 SAVE FOR SETDCB ROUTINE
REP9     DS    F                       R9 SAVE FOR REPRINT ROUTINE
FORM9    DS    F                       SAVE AREA FOR REG 9
LEG9     DS    F                       SAVE AREA FOR LEGEND
SCH9     DS    F                       R9 SAVE FOR SEARCH ROUTINE
CURRECD  DS    A                       CURRENT DATA RECORD ADDRESS
AREAST   DC    A(RKEYDATA)             I/O AREA ADDRESS
AREAEND  DS    A                       END OF I/O AREA ADDRESS
TBLSAVE  DS    F                       FORMAT TBL ADDRESS SAVE
FMTTBLA  DC    A(FMTAREA)              @ FORMAT TABLE AREA
FMTTBLE  DC    A(ENDFTBL)              @ END FORMAT TABLE AREA
FMTTBLNG DC    AL2(L'FMTTBL)           LENGTH OF FORMAT TBL ENTRY
SAVECUNT DS    XL8                     SAVE AREA FOR COUNT RECORD
NBRU     DS    PL3                     NBR DIRECTORY BLOCKS USED
NBRA     DS    PL3                     DIRECTORY BLOCKS ALLOCATED
EXCPMTCH DC    XL1'00'                 01=EXCP MATCHES DESCRIP
NEWSYSO  DC    XL1'00'                 01=NEW RECORD FOR SYSOUT
RECFM    DC    XL3'00'                 RECORDING FORMAT: BYTE 1=
*                                      F=FIXED, V=VARIABLE, U=UNDEF,
*                                      BYTE 2= B=BLOCKED RECORDS,
*                                      BYTE 3= A=ASA CTL CHARS
DSORG    DC    CL2'  '                 VS=VSAM, PO=PDS, DA=DIRECT,
*                                      PS=SEQ, IS=ISAM, ??=UNK
KEYLEN   DC    H'0'                    KEY LENGTH
LRECL    DC    H'0'                    LRECL
BLKSIZE  DC    H'0'                    BLOCKSIZE
RKP      DC    H'0'                    REL KEY POS
SCHFND   DS    XL1                     MATCH FOUND IN SEARCH
         DS    0H
DIRENTY  DS    0XL80                   DIRECTORY ENTRY SAVE AREA
DIRENAME DS    CL8                     MEMBER NAME
DIRETTR  DS    XL3                     MEMBER TTR
DIRESIZE DS    XL1                     ALIAS, SIZES
         DS    XL68                    USER HALFWORDS
*
*
*
CONDTBL  DC    H'19',CL28'PERMANENT I/O ERROR,        '
         DC    H'16',CL28'EXTENT VIOLATION,           '
         DC    H'11',CL28'INTERCEPTED,                '
         DC    H'10',CL28'UNIT CHECK,                 '
         DC    H'14',CL28'UNIT EXCEPTION,             '
         DC    H'19',CL28'WRONG LENGTH RECORD,        '
         DC    H'21',CL28'CHANNEL PROGRAM CHECK,      '
         DC    H'16',CL28'PROTECTION CHECK,           '
         DC    H'18',CL28'CHANNEL DATA CHECK,         '
         DC    H'21',CL28'CHANNEL CONTROL CHECK,      '
         DC    H'23',CL28'INTERFACE CONTROL CHECK,    '
         DC    H'14',CL28'COMMAND REJECT,             '
         DC    H'15',CL28'EQUIPMENT CHECK,            '
         DC    H'10',CL28'DATA CHECK,                 '
         DC    H'07',CL28'OVERRUN,                    '
         DC    H'21',CL28'TRACK CONDITION CHECK,      '
         DC    H'10',CL28'SEEK CHECK,                 '
         DC    H'19',CL28'DATA CHECK IN COUNT,        '
         DC    H'19',CL28'WRITE TRACK OVERRUN,        '
         DC    H'22',CL28'END OF CYLINDER ON M-T,     '
         DC    H'25',CL28'INVALID COMMAND SEQUENCE,   '
         DC    H'15',CL28'NO RECORD FOUND,            '
         DC    H'14',CL28'FILE PROTECTED,             '
         DC    H'22',CL28'MISSING ADDRESS MARKER,     '
         DC    H'19',CL28'OVERFLOW INCOMPLETE,        '
         DS    0F
CLRHI    DC    X'0000FFFF'             TO CLEAR HI-ORDER BYTES OF REG
NUMTST   DC    CL8'00000000'           NUMERIC TEST AREA
ZEROS    DC    CL8'00000000'           CONSTANT ZEROS
XZROS    DC    XL8'00'                 HEX ZEROS
HEX      DS    XL80                    HEX RESULT FROM CHARHEX
CHERR    DC    X'00'                   ERROR INDICATOR FROM CHARHEX
TRCHAR   DC    256X'FF'                TRANSLATE TABLE FOR CHARHEX
         ORG   TRCHAR+X'81'            ORG TO LOWER CASE A
         DC    X'0A0B0C0D0E0F'         A-F = 0A-0F
         ORG   TRCHAR+X'C1'            ORG TO UPPER CASE A
         DC    X'0A0B0C0D0E0F'         A-F = 0A-0F
         ORG   TRCHAR+C'0'             ORG TO ZERO
         DC    X'00010203040506070809' 0-9 = 00-09
         ORG
WORK     DS    CL11                    WORK AREA
POS      DC    PL3'0'                  RECORD POSITION COUNTER
RECNO    DC    PL2'0'                  RECORD NUMBER IN BLOCK
NEWRECD  DC    X'00'                   00=NEW RECORD READ
FOUNDFMT DC    X'00'                   01=FORMAT FOUND
XTNTS    DC    X'00'                   NUMBER OF EXTENTS
EXTENTS  DS    0XL10                   CURRENT EXTENT
         DS    XL2
BGNXTNT  DS    XL4                     CCHHR EXTENT BEGIN
ENDXTNT  DS    XL4                     CCHHR EXTENT END
EXTADNL  DS    15XL10                  15 ADDITIONAL EXTENTS
SAVEXT   DS    CL150                   SAVE AREA FOR DATASET EXTENTS
SAVNBRX  DS    XL1                     NUMBER EXTENTS
*
VALIDPO  DC    X'00'                   VALID PDS OPEN
         DS    0H
POXTNTS  DS    0XL4                    EXTENT TABLE FOR PDS TTR USE
PORELTT  DS    XL2                       RELATIVE TTR AT EXTENT START
POACTTT  DS    XL2                       ACTUAL TTR AT EXTENT START
         DS    16XL4                     REMAINING 15 EXTENTS
GOTFF    DC    X'00'                   SET TO 1 AT DIRECTORY END
EXCPIND  DS    XL1                     EXCP INDICATOR: BLANK=O.K.,
*                                      E=END EXTENT, X=HARD ERROR,
*                                      F=EOF RECORD
         DS    0H
VTOCADR  DS    0CL5                    VTOC CCHHR START ADDRESS
VTOCCYL  DS    H                       VTOC CYLINDER
VTOCHD   DS    H                       VTOC HEAD
VTOCREC  DS    XL1                     VTOC RECORD NUMBER
ALLCYL   DC    H'0'                    BEGIN CYLINDER
         DC    H'0'                    BEGIN HEAD
         DC    H'32767'                END CYLINDER
         DC    H'32767'                END HEAD
         DC    H'32767'                TRACKS IN EXTENT
TRTBLA   DC    C'0123456789ABCDEF'     TRANSLATE TABLE
DBLWD    DS    D                       DOUBLEWORD WORK AREA
P0       DC    P'0'                    CONSTANT 0
P1       DC    P'1'                    CONSTANT 1
P50      DC    P'50'                   CONSTANT 50
RECLEN   DS    H                       RECORD LENGTH
CHTRTBL  DS    0CL256                  CHARACTER TRANSLATE TABLE
         DC    XL16'40404040404040404040404040404040' 00-0F
         DC    XL16'40404040404040404040404040404040' 10-1F
         DC    XL16'40404040404040404040404040404040' 20-2F
         DC    XL16'40404040404040404040404040404040' 30-3F
         DC    XL16'404040404040404040404A4B4C4D4E4F' 40-4F
         DC    XL16'504040404040404040405A5B5C5D5E5F' 50-5F
         DC    XL16'60614040404040404040406B6C6D6E6F' 60-6F
         DC    XL16'404040404040404040407A7B7C7D7E7F' 70-7F
         DC    XL16'40818283848586878889404040404040' 80-8F
         DC    XL16'40919293949596979899404040404040' 90-9F
         DC    XL16'4040A2A3A4A5A6A7A8A9404040404040' A0-AF
         DC    XL16'40404040404040404040404040404040' B0-BF
         DC    XL16'40C1C2C3C4C5C6C7C8C9404040404040' C0-CF
         DC    XL16'40D1D2D3D4D5D6D7D8D9404040404040' D0-DF
         DC    XL16'4040E2E3E4E5E6E7E8E9404040404040' E0-EF
         DC    XL16'F0F1F2F3F4F5F6F7F8F9404040404040' F0-FF
TRTBLZ   DC    C'0'                    TRANSLATE TABLE FOR ZONE LINE
         DC    XL15'0'
         DC    C'1'
         DC    XL15'0'
         DC    C'2'
         DC    XL15'0'
         DC    C'3'
         DC    XL15'0'
         DC    C'4'
         DC    XL15'0'
         DC    C'5'
         DC    XL15'0'
         DC    C'6'
         DC    XL15'0'
         DC    C'7'
         DC    XL15'0'
         DC    C'8'
         DC    XL15'0'
         DC    C'9'
         DC    XL15'0'
         DC    C'A'
         DC    XL15'0'
         DC    C'B'
         DC    XL15'0'
         DC    C'C'
         DC    XL15'0'
         DC    C'D'
         DC    XL15'0'
         DC    C'E'
         DC    XL15'0'
         DC    C'F'
         DC    XL15'0'
*
*
*
PLIN1    DC    CL80' '                 CHARACTER PRINT LINE
PLIN2    DC    CL80' '                 ZONE PRINT LINE
PLIN3    DC    CL80' '                 NUMERICS PRINT LINE
*
*
*
VLA1     DS    0CL80                   VOLUME ALLOCATE LINE 1
         DC    CL17'FORMAT 4 DSCB AT '
VLACHR   DS    CL10
         DC    CL21', HIGH USED VTOC CHR='
VLAHI    DS    CL10
         DC    CL13', FREE DSCBS='
VLANDSCB DS    CL5
         DC    CL4' '
*
*
*
VLA2     DS    0CL80                   VOLUME ALLOCATE LINE 2
         DC    CL15'NBR CYL IN VOL='
VLANCYL  DS    CL5
         DC    CL19', NBR TRKS PER CYL='
VLANTRK  DS    CL5
         DC    CL16', BYTES PER TRK='
VLABTRK  DS    CL5
         DC    CL11', DSCB/TRK='
VLADSCT  DS    CL3
         DC    CL1' '
*
*
*
VLA3     DS    0CL80                   VOLUME ALLOCATE LINE 3
         DC    CL18'DIRECTORY BLK/TRK='
VLADBTRK DS    CL3
         DC    CL18', VSAM TIME STAMP='
VLATMSTP DS    CL16
         DC    CL13', VSAM OWNED='
VLAVSOWN DS    CL3
         DC    CL9' '
*
*
*
VLA4     DS    0CL80                   VOLUME ALLOCATE LINE 4
         DC    CL15'REL TRK OF CRA='
VLACRA   DS    CL5
         DC    CL26', CATALOG MATCH TIMESTAMP='
VLACMTS  DS    CL16
         DC    CL18' '
*
*
*
VLA5     DS    0CL80                   VOLUME ALLOCATE LINE 5
         DC    CL25'VTOC EXTENTS (CCHH) FROM '
VLABGN   DS    CL8
         DC    CL4' TO '
VLAEND   DS    CL8
         DC    CL9', DEVICE='
VLADVC   DS    CL4
         DC    CL22' '
*
*
*
VOLMSG   DS    0CL80                   VOLUME PRINT LINE
         DC    CL7'VOLSER='
VOLVOL   DS    CL6
         DC    CL9', DEVICE='
VOLDVC   DS    CL4
         DC    CL6', CUU='
VOLCUU   DS    CL3
         DC    CL11', VTOC TTR='
VOLVTOC  DS    CL6
         DC    CL28' '
*
*
*
DSNHDR   DS    0CL80                   DSNAME DATA LIST HEADER
         DC    CL45'DSNAME'
         DC    CL6'DSORG'
         DC    CL6'RECFM'
         DC    CL7'LRECL'
         DC    CL8'BLKSIZE'
         DC    CL7'KEYLEN'
         DC    CL1' '
*
*
*
DSNDATA  DS    0CL80                   DSNAME DATA DETAIL LINES
DSNDSNAM DS    CL44                      DSNAME
         DC    CL3' '
DSNDSORG DS    CL2                       DSORG
         DC    CL3' '
DSNRECFM DS    CL3                       RECFM
         DC    CL2' '
DSNLRECL DS    CL6                       LRECL
         DC    CL1' '
DSNBLKSI DS    CL6                       BLKSIZE
         DC    CL4' '
DSNKEYLN DS    CL3                       KEY LENGTH
         DC    CL3' '
*
*
*
DSA1     DS    0CL80                   DATASET ALLOCATION DATA LINE 1
         DC    CL17'FORMAT 1 DSCB AT '
DSADSCB1 DC    CL10' '
         DC    CL9', DSNAME='
DSADSN   DC    CL44' '
*
*
*
DSA2     DS    0CL80                   DATASET ALLOCATION DATA LINE 2
         DC    CL4' '
         DC    CL6'DSORG='
DSADSORG DC    CL4'____'
         DC    CL8', RECFM='
DSARECFM DC    CL3'___'
         DC    CL8', LRECL='
DSALRECL DC    CL5'00000'
         DC    CL10', BLKSIZE='
DSABLKSI DC    CL5'00000'
         DC    CL9', KEYLEN='
DSAKEYL  DC    CL3'000'
         DC    CL6', RKP='
DSARKP   DC    CL5'00000'
         DC    CL4' '
*
*
*
DSA3     DS    0CL80                   DATASET ALLOCATION DATA LINE 3
         DC    CL4' '
         DC    CL7'VOLSER='
DSAVOL   DC    CL6'______'
         DC    CL14', NBR EXTENTS='
DSANOEXT DC    CL2'00'
         DC    CL10', VOL SEQ='
DSAVLSQ  DC    CL3'000'
         DC    CL10', CREATED='
DSACREAT DC    CL6'______'
         DC    CL10', EXPIRES='
DSAEXP   DC    CL6'______'
         DC    CL2' '
*
*
*
DSA4     DS    0CL80                   DATASET ALLOCATION DATA LINE 4
         DC    CL4' '
         DC    CL11'LAST REFER='
DSAREF   DC    CL6'______'
         DC    CL11', PASSWORD='
DSAPSWD  DC    CL10'__________'
         DC    CL11', ALLOC IN='
DSALLOC  DC    CL6'______'
         DC    CL12', SEC ALLOC='
DSASEC   DC    CL6'000000'
         DC    CL4' '
*
*
*
DSA5     DS    0CL80                  DATASET ALLOCATION DATA LINE 5
         DC    CL4' '
         DC    CL13'LAST BLK TTR='
DSALBT   DC    CL6'______'
         DC    CL24', FORMAT 3 DSCB ADDRESS='
DSAFMT3  DC    CL10'__________'
         DC    CL23' '
*
*
*
DSA6     DS    0CL80                  DATASET ALLOCATION EXTENT LINES
         DC    CL8' '
         DC    CL12'EXTENT TYPE='
DSAXTYP  DC    CL4'____'
         DC    CL6', SEQ='
DSAXSEQ  DC    CL3'___'
         DC    CL13', BEGIN CCHH='
DSAXBGN  DC    CL8'________'
         DC    CL11', END CCHH='
DSAXEND  DC    CL8'________'
         DC    CL7' '
*
*
*
DSA7     DS    0CL80               PARTITIONED DATASET DIRECTORY INFO
         DC    CL7'OF THE '
PRTALOC  DC    CL5'00000'
         DC    CL29' DIRECTORY BLOCKS ALLOCATED, '
PRTUSED  DC    CL5'00000'
         DC    CL34' ARE IN USE'
*
*
*
IOERR1   DS    0CL80                   I/O ERROR LINE 1
         DC    CL21'*** I/O ERROR: ECBCC='
IOECC    DS    CL2
         DC    CL6', CSW='
IOECSW1  DS    CL8
         DC    CL1' '
IOECSW2  DS    CL8
         DC    CL14', FAILING CCW='
IOECCW1  DS    CL8
         DC    CL1' '
IOECCW2  DS    CL8
         DC    CL3' '
*
*
*
IOERR2   DS    0CL80                  I/O ERROR LINE 2
         DC    CL21'               SENSE='
IOESNS   DS    CL4
         DC    CL19', COMMAND CHAIN IS '
IOECHNM  DS    CL8
         DC    CL17', SEARCH ADDRESS='
IOESRCH  DS    CL10
         DC    CL1' '
*
*
*
IOERR3   DS    0CL80                 I/O ERROR LINE 3
         DC    CL26'               BYTES READ='
IOEBYTS  DS    CL5
         DC    CL22', DATA AT CCW ADDRESS='
IOECD1   DS    CL8
         DC    CL1' '
IOECD2   DS    CL8
         DC    CL1' '
IOECD3   DS    CL8
         DC    CL1' '
DYNERR   DC    CL31'DYNALLOC ERROR, RETURN CODE IS '
DYNRTCD  DS    CL4
         DC    CL22', INFO RETURN CODE IS '
DYNINFO  DS    CL4
         DC    CL19' '
*
*
*
CHGLINE  DS    0CL80                   CHANGE SPECIFICATION LINE
         DC    CL5'CHG> '
         DC    CL9'KEY/DATA '
CHGKD    DC    CL1'_'
         DC    CL8' OFFSET '
CHGOFF   DC    CL5'_____'
         DC    CL11' IN X OR C '
CHGXC    DC    CL1'_'
         DC    CL4' TO '
CHGVAL   DC    32C'_'
         DC    CL4' '
*
*
*
FMTLINE  DS    0CL80                   FORMAT SPECIFICATION LINE
         DC    CL5'FMT> '
         DC    CL10'ID(01-20)='
FMTIDNO  DC    CL2'__'
         DC    CL10', SET/CLR='
FMTSETCL DC    CL1'_'
         DC    CL11', KEY/DATA='
FMTKDTA  DC    CL1'_'
         DC    CL11', STRT POS='
FMTSTRT  DC    CL5'_____'
         DC    CL9', LENGTH='
FMTLGH   DC    CL5'_____'
         DC    CL10' '
*
*
*
DCBLINE  DS    0CL80                   DCB SPECIFICATION LINE
         DC    CL5'DCB> '
         DC    CL6'DSORG='
DCBDSORG DC    CL2'__'
         DC    CL8', RECFM='
DCBRECFM DC    CL2'__'
         DC    CL8', LRECL='
DCBLRECL DC    CL5'00000'
         DC    CL10', BLKSIZE='
DCBBLKSI DC    CL5'00000'
         DC    CL9', KEYLEN='
DCBKEYLE DC    CL3'000'
         DC    CL6', RKP='
DCBRKP   DC    CL5'00000'
         DC    CL6' '
*
*
*
SCHLINH  DS    0CL80                   SEARCH SPECIFICATION HEADER
         DC    CL5'     '
         DC    CL8'SET/CLR '
         DC    CL9' KEY/DATA'
         DC    CL6' START'
         DC    CL7' LENGTH'
         DC    CL8' COMPARE'
         DC    CL9' CHAR/HEX'
         DC    CL17' DATA'
         DC    CL11' '
*
SCHLINE  DS    0CL80                   SEARCH SPECIFICATION LINE
         DC    CL5'SCH> '
         DC    CL3' '
SCHIND   DC    CL1'_'
         DC    CL4' '
         DC    CL4' '
SCHKD    DC    CL1'_'
         DC    CL4' '
         DC    CL1' '
SCHSTRT  DC    CL5'ALL__'
         DC    CL3' '
SCHLGH   DC    CL2'__'
         DC    CL2' '
         DC    CL3' '
SCHCPR   DC    CL2'__'
         DC    CL3' '
         DC    CL4' '
SCHCHHX  DC    CL1'_'
         DC    CL4' '
         DC    CL1' '
SCHDATA  DC    CL16'________________'
         DC    CL11' '
*
*                                      SEARCH SPECIFICATION DATA
*
SCHTBL   DS    0XL22                   SEARCH TABLE ENTRY
SCHLOC   DC    XL1'00'                 K=KEY, D=DATA, 00=NONE
SCHALL   DC    XL1'00'                 A=ALL BYTES, 00=FIXED LOCN
SCHST    DC    XL2'00'                 STARTING OFFSET IN LRECL/BLOCK
SCHLGTH  DC    XL1'00'                 FIELD LENGTH CODE
SCHCMPR  DC    XL1'00'                 COMPARISON TYPE, SAME AS BRANCH
*                                             MASKS (80 IS EQUAL, ETC)
SCHDAT   DC    CL16' '                 COMPARISON DATA
*
*
*
FMTER1   DC    CL80'FORMAT ID NUMBER (ID=) MUST BE 1-20'
FMTER2   DC    CL80'K/D MUST BE K FOR KEY OR D FOR DATA'
FMTER4   DC    CL80'STRT POS MUST BE DECIMAL START POSITION (> 0)'
FMTER6   DC    CL80'LENGTH MUST BE NUMBER OF BYTES'
FMTER7   DC    CL80'LREC/BLK CAN BE L ONLY IF DSN= OR CAT= SPECIFIED'
FMTERA   DC    CL80'SET/CLR MUST BE S TO SET OR C TO CLEAR'
FMTOK    DC    CL80'FORMAT STORED'
FMTCLR   DC    CL80'FORMAT CLEARED'
DCBER0   DC    CL80'INVALID DSORG USE PS, PO, VS, DA, OR IS'
DCBER1   DC    CL80'INVALID RECFM USE F, V, U, FB, VB, OR U'
DCBER2   DC    CL80'INVALID LRECL, ENTER 1-5 DECIMAL DIGITS'
DCBER3   DC    CL80'INVALID BLKSIZE, ENTER 1-5 DECIMAL DIGITS > 0'
DCBER4   DC    CL80'INVALID KEY LENGTH, ENTER 1-3 DECIMAL DIGITS'
DCBER5   DC    CL80'INVALID RKP, ENTER 1-5 DECIMAL DIGITS'
DCBOK    DC    CL80'DCB SPECIFICATION STORED'
SCHER1   DC    CL80'TYPE INDICATOR MUST BE S TO SET OR C TO CLEAR'
SCHER4   DC    CL80'START MUST BE STARTING POSITION (> 0)'
SCHER5   DC    CL80'CHAR/HEX MUST BE C FOR CHARACTER, X OR H FOR HEX'
SCHER6   DC    CL80'LENGTH MUST BE NUMBER OF BYTES, 1-16'
SCHER7   DC    CL80'K/D MUST BE K FOR KEY OR D FOR DATA'
SCHERA   DC    CL80'COMPARE VALUE MUST BE =, <, >, <=, >=, OR <>'
SCHERC   DC    CL80'HEX DATA MUST CONTAIN PAIRS OF VALID HEX DIGITS'
SCHOK    DC    CL80'SEARCH CRITERIA STORED'
SCHCLR   DC    CL80'SEARCH CRITERIA CLEARED'
CHGOK    DC    CL80'CHANGE MADE TO RECORD IN MEMORY'
CHGERR1  DC    CL80'KEY/DATA FIELD MUST BE ENTERED AS K OR D'
CHGERR2  DC    CL80'OFFSET MUST BE 1 TO 5 DECIMAL DIGITS AND > 0'
CHGERR3  DC    CL80'CHANGE DATA MUST ALL FIT WITHIN THE RECORD'
CHGERR4  DC    CL40'X OR C FIELD MUST BE ENTERED AS X FOR HE'
         DC    CL40'X OR C FOR CHARACTER DATA'
CHGERR6  DC    CL80'HEX DATA MUST BE ENTERED AS PAIRS OF HEX DIGITS'
CHGERR7  DC    CL80'CHANGE DATA MUST BE ENTERED IN THE "TO" FIELD'
NOCTLG   DC    CL80'UNABLE TO OBTAIN CATALOG INFORMATION FOR DSNAME'
UNALOC   DC    CL80'UNABLE TO ALLOCATE WORK DATASET'
UNOPEN   DC    CL80'UNABLE TO OPEN WORK DATASET'
FMT3ERR  DC    CL80'ERROR READING FORMAT 3 DSCB'
INVLDCHR DC    CL80'INVALID HEX CHARACTERS, RE-ENTER COMMAND'
CHRERR1  DC    CL80'TRACK NUMBER TOO LARGE FOR DEVICE'
CHRERR2  DC    CL80'CYLINDER NUMBER TOO LARGE FOR DEVICE'
CHRERR3  DC    CL80'INVALID FORMAT, USE CCCCHHHHRR-CCCCHHHHRR'
CHROK    DC    CL80'CHR EXTENTS SET O.K.'
BADVOL   DC    CL80'REQUESTED VOLUME SERIAL NOT AVAILABLE'
NOTREAD  DC    CL80'CANNOT REWRITE: LAST EXCP WAS NOT A GOOD READ'
GOODREW  DC    CL80'RECORD SUCCESSFULLY REWRITTEN'
BADREW   DC    CL80'ERROR OCCURRED DURING REWRITE - CHECK CAREFULLY'
INVDVC   DC    CL80'DEVICE TYPE NOT SUPPORTED'
BADDSN   DC    CL80'DATASET NOT ON VOLUME OR I/O ERROR READING VTOC'
INVFMT4  DC    CL80'ERROR: UNABLE TO ACCESS VTOC FORMAT 4'
NOFMT4   DC    CL80'NO VOLUME ALLOCATED, DO A VOL= OR CAT= COMMAND'
EOEMSG   DC    CL80'END OF ALLOCATED EXTENT, USE CHR, CAT, OR DSN'
NOMATCH  DC    CL80'NO RECORD MATCHES SEARCH CRITERIA (CHECK DCB)'
*
*
*
LEGLINES DS    0CL80
         DC    CL40'DDNAME SYSOUT CAN DEFINE A FILE FOR ALL '
         DC    CL40'SELECTED RECORDS.                       '
         DC    CL40'DDNAME SYSLST CAN DEFINE A FILE FOR ALL '
         DC    CL40'PRINTED OUTPUT                          '
         DC    CL40'R . . . . . . . . . . . . . READ NEXT RE'
         DC    CL40'CORD IN EXTENT AND DISPLAY IT           '
         DC    CL40'Q . . . . . . . . . . . . . REPEAT R COM'
         DC    CL40'MANDS UNTIL END OF EXTENT OR I/O ERROR  '
         DC    CL40'P . . . . . . . . . . . . . RE-DISPLAY T'
         DC    CL40'HE CURRENT RECORD                       '
         DC    CL40'VOL . . . . . . . . . . . . DISPLAY A LI'
         DC    CL40'ST OF ONLINE DISK VOLUMES               '
         DC    CL40'VOL=VVVVVV  . . . . . . . . ALLOCATE TO '
         DC    CL40'VOLUME VVVVVV                           '
         DC    CL40'DSN . . . . . . . . . . . . DISPLAY A LI'
         DC    CL40'ST OF DATASETS ON THE CURRENT VOLUME    '
         DC    CL40'DSN=DDD...DDD . . . . . . . ALLOCATE TO '
         DC    CL40'THE DATASET NAMED DDD...DDD             '
         DC    CL40'MEM=MMMMMMMM  . . . . . . . POSITION TO '
         DC    CL40'THE PDS MEMBER NAMED MMMMMMMM           '
         DC    CL40'TTR=TTTTRR . . . . . . . . .POSITION TO '
         DC    CL40'THE GIVEN TTR WITHIN THE PDS            '
         DC    CL40'CHR=CCCCHHHHRR-CCCCHHHHRR . SET EXTENT R'
         DC    CL40'ANGE                                    '
         DC    CL40'C . . . . . . . . . . . . . CHANGE THE C'
         DC    CL40'ONTENT OF THE CURRENT RECORD            '
         DC    CL40'F . . . . . . . . . . . . . DEFINE DISPL'
         DC    CL40'AY FORMAT                               '
         DC    CL40'DCB . . . . . . . . . . . . SET UP DCB A'
         DC    CL40'TTRIBUTES                               '
         DC    CL40'S . . . . . . . . . . . . . DEFINE SEARC'
         DC    CL40'H CRITERIA                              '
         DC    CL40'CAT=DDD...DDD . . . . . . . ALLOCATE TO '
         DC    CL40'DATASET DDD...DDD USING CATALOG         '
         DC    CL40'REWRITE . . . . . . . . . . REWRITE THE '
         DC    CL40'CURRENT RECORD                          '
         DC    CL40'END . . . . . . . . . . . . TERMINATE PR'
         DC    CL40'OCESSING                                '
         DC    X'FF'
*
*
*
BYDSN    CAMLST NAME,COMMAND+4,,LOCAREA READ CATALOG LIST
LOCAREA  DS    CL265                   CATALOG INFORMATION AREA
PRT      DC    CL80' '                 PRINT AREA
BLANX    DC    CL80' '                 CONSTANT BLANKS
COMMAND  DC    CL80' '                 SYSIN READ-IN AREA
LASTCMND DC    CL80' '                 LAST COMMAND READ
LASTREAD DC    XL1'0'                  LAST EXCP OPERATION SWITCH
BEGINAD  DS    F                       CHANGE BEGIN ADDRESS
ENDAD    DS    F                       CHANGE END ADDRESS
LENGCODE DS    XL1                     CHANGE LENGTH CODE
*
***********************************************************************
*                                                                     *
*       COMMAND CHAINS FOR EXCP                                       *
*                                                                     *
***********************************************************************
*
CMDCHNR0 CCW   X'39',DASRCH,X'40',4     SEARCH HOME ADDRESS EQUAL
         CCW   X'08',*-8,0,0            TIC
         CCW   X'1E',RCOUNT,X'20',32767 READ CKD
*
*
*
CMDCHNR  CCW   X'31',DASRCH,X'40',5    SEARCH FOR PRECEDING RECORD
         CCW   8,*-8,0,0               TIC
         CCW   X'9E',RCOUNT,X'20',32767 READ CKD MULTI TRK
*
*
*
CMDCHNK  CCW   X'39',DASRCH,X'40',4     SEARCH HOME ADDRESS EQUAL
         CCW   X'08',CMDCHNK,0,0        TIC
KRDCT    CCW   X'92',RCOUNT,X'40',8     READ COUNT RECORD
KSCH     CCW   X'29',COMMAND+4,X'40',5  SEARCH KEY EQUAL
         CCW   8,KRDCT,0,0              TIC
         CCW   X'06',RKEYDATA,X'20',32767  READ DATA
SCHKYLN  EQU   KSCH+6,2                 SRCH KEY= CCW LENGTH
*
*
*
CMDCHNW  CCW   X'31',DASRCH,X'40',5    SEARCH FOR CURRENT RECORD
         CCW   8,*-8,0,0               TIC
WRITCCW  CCW   X'05',RKEYDATA,0,32767  WRITE DATA (OR KEY+DATA)
*
***********************************************************************
*                                                                     *
*        PRINT AND CONTROL FILES                                      *
*                                                                     *
***********************************************************************
*
SYSIN    DCB   DSORG=PS,MACRF=GM,DDNAME=SYSIN,EODAD=EOJ,               X
               RECFM=FB,LRECL=80
SYSPRINT DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,                      X
               RECFM=FB,LRECL=80
SYSLST   DCB   DSORG=PS,MACRF=PM,DDNAME=SYSLST
SYSOUT   DCB   DSORG=PS,MACRF=PM,DDNAME=SYSOUT
         LTORG
*
***********************************************************************
*                                                                     *
*        EXCP FILE, VTOC RECORDS, INPUT DATA AREA                     *
*                                                                     *
***********************************************************************
*
         PRINT GEN
DAIOB    EXCPIOB CCW=CMDCHNR,DDNAME=INPUT1
         DSCBDEF FMT2=NO,FMT5=NO,FMT6=NO,DSECT=NO
         DS    0D
RCOUNT   DS    XL8                     THIS RECORD'S COUNT
RKEYDATA DS    CL32768                 THIS RECORD'S KEY AND DATA
*
*
*
FMTTBLD  DSECT ,                       FORMAT TABLE FOR 20 FORMATS
FMTTBL   DS    0XL6                    FORMAT TABLE ENTRY
FMTFLAG  DC    X'00'                   FLAGS: 80=KEY, 40=DATA
         DC    X'00'                   ALIGNMENT FILLER
FMTSTART DC    XL2'00'                 STARTING OFFSET IN LRECL/BLOCK
FMTLGTH  DC    XL2'00'                 FIELD LENGTH
         DC    19XL5'00'               19 MORE ENTRIES
         DC    X'FF'                   END OF TABLE
         PRINT NOGEN
         CVT   DSECT=YES               GENERATE CVT DSECT
         IEFUCBOB ,                    GENERATE UCB DSECT
CHRDUMP  CSECT
FMTAREA  DC    20XL6'FFFFFFFFFF'       AREA FOR FORMAT TABLE
ENDFTBL  EQU   *
         END
