         TITLE '*** DUMPSTOR: ANALYZE STORAGE IN DUMP  ***'
DUMPSTOR CSECT
*********************************************************************
* READS A DUMP DATASET CREATED AS RECFM=FB,LRECL=121 EITHER USING   *
* A SYSUDUMP DD STATEMENT, OR BY USING THE PRINT DATASET COMMAND IN *
* SDSF.                                                             *
*                                                                   *
* 1. READ THE DUMP DATASET LOOKING FOR THE ASCB CONTROL BLOCK. IF   *
*    NOT FOUND, TERMINATE WITH A MESSAGE AND RC=08.                 *
* 2. LOOK FOR THE FIRST CDE CONTROL BLOCK. IF NOT FOUND, TERMINATE  *
*    WITH A MESSAGE AND RC=08.                                      *
* 3. PROCESS THE CDE ENTRIES
* 3. LOOK FOR THE XL HEADER. IF NOT FOUND, TERMINATE WITH A MESSAGE *
*    AND RC=8.                                                      *
* 4. PROCESS THE XTLST ENTRIES                                      *
* 5. LOOK FOR THE VIRTUAL STORAGE HEADER. IF NOT FOUND, TERMINATE   *
*    WITH A MESSAGE AND RC=8.                                       *
* 6. PROCESS THE SUBPOOL ENTRIES                                    *
* 7. LOOK FOR THE SSAT HEADER. IF NOT FOUND, TERMINATE WITH A       *
*    MESSAGE AND RC=8.                                              *
*                                                                   *
*                                                                   *
*                                                                   *
*                                                                   *
*                                                                   *
* AUTHOR R THORNTON JULY 2001                                       *
*********************************************************************
*
*********************************************************************
*        SAVE REGISTERS, SET UP BASE REGS, CHAIN SAVE AREAS         *
*********************************************************************
         USING DUMPSTOR,R3,R4
         STM   R14,R12,12(R13)         SAVE CALLER'S REGS
         LR    R3,R15                  SET UP BASE FIRST BASE REG
         LA    R4,4095(R3)             SET UP SECOND
         LA    R4,1(R4)                    BASE REGISTER
         LA    R15,MYSAVE              POINT TO MY REGISTER SAVE AREA
         ST    R15,8(R13)              SET LSA IN CALLER'S SAVE
         ST    R13,4(R15)              SET HSA IN MY SAVE AREA
         LR    R13,R15                 SET UP SAVE AREA POINTER
         B     START                   BRANCH AROUND CONSTANTS
         DC    CL8'DUMPSTOR'           PROGRAM NAME IDENTIFIER
         DC    CL8'&SYSDATE'           ASSEMBLY DATE
         DC    CL8'&SYSTIME'           ASSEMBLY TIME
MYSAVE   DS    18F                     MY REGISTER SAVE AREA
START    DS    0H                      BEGIN PROCESSING
*********************************************************************
*        INITIALIZE FOR PROCESSING. OPEN FILES, LOCATE FIRST CDE    *
*********************************************************************
OPENS    OPEN  (STORDATA,OUTPUT,DUMPIN) OPEN FILES
         STORAGE OBTAIN,LENGTH=80000,LOC=BELOW
         ST    R1,STORTBLA             SAVE STORAGE TABLE ADDRESS
         ST    R1,CURRNTRY             SAVE CURRENT TABLE ENTRY ADDR
         A     R1,=F'79999'            COMPUTE TABLE END ADDR
         ST    R1,ENDTBLA              SAVE TABLE END ADDRESS
GETASCB  BAL   R9,READDUMP             READ DUMP RECORD
         CLI   EOF,X'FF'               END OF FILE?
         BE    NOASCB                  YES
         CLC   INASCB,=CL8'  ASCB: '   THIS THE ASCB CONTROL BLOCK?
         BNE   GETASCB                 NO, CONTINUE SEARCH
GETCDE1  BAL   R9,READDUMP             READ DUMP RECORD
         CLI   EOF,X'FF'               END OF FILE?
         BE    NOCDE                   YES
         CLC   INCDE,=CL8'0CDE    '    THIS THE CDE HEADER?
         BNE   GETCDE1                 NO, CONTINUE SEARCH
         B     MAINLINE                YES, START PROCESSING
NOASCB   WTO   'DUMPSTOR FOUND NO ASCB IN THE DUMP',ROUTCDE=11
         MVC   RETCODE,RC8             SET RETURN CODE = 8
         B     EOJ                     TERMINATE PROCESSING
NOCDE    WTO   'DUMPSTOR FOUND NO CDE HEADER IN THE DUMP',ROUTCDE=11
         MVC   RETCODE,RC8             SET RETURN CODE = 8
         B     EOJ                     TERMINATE PROCESSING
*********************************************************************
*             MAINLINE ROUTINE                                      *
*********************************************************************
MAINLINE BAL   R9,CDE                  GO PROCESS THE CDE'S
         BAL   R9,XTLST                GO PROCESS THE XTLST
         BAL   R9,VIRTSTOR             GO PROCESS THE SUBPOOL ENTRIES
         B     EOJ                     TERMINATE
*********************************************************************
*             PROCESS THE CDE'S                                     *
*********************************************************************
CDE      ST    R9,CDE9                 SAVE RETURN ADDRESS
CDEREAD  BAL   R9,READDUMP             READ DUMP FILE RECORD
         CLI   EOF,X'FF'               END OF FILE?
         BE    NOXL                    YES
         CLC   INXTLST,=CL8'0XTLST  '  FOUND XTLST HEADER?
         BE    CDEXIT                  YES, FINISHED HERE
         CLC   INCDNM,=CL10'NAME..... ' CDE NAME LINE?
         BNE   CDEREAD                 NO, GO READ AGAIN
         L     R12,CURRNTRY            YES, POINT TO CURRENT ENTRY
         MVC   0(8,R12),INCDNAME       MOVE NAME TO TABLE ENTRY
         LA    R12,8(R12)              POINT TO START FIELD
         XC    0(8,R12),0(R12)         ZERO OUT START AND END FIELDS
         LA    R11,INXLMJP             POINT TO THE XLMJP
         BAL   R9,CHR2HEX              GO CONVERT TO HEX
         LA    R12,8(R12)              STEP TO NEXT TABLE ENTRY
         C     R12,ENDTBLA             STILL WITHIN TABLE?
         BNL   TOOMNYCD                NO
         ST    R12,CURRNTRY            YES, UPDATE CURRENT ENTRY ADDR
         MVI   0(R12),X'FF'            SET TABLE STOPPER
         B     CDEREAD                 CONTINUE
CDEXIT   L     R9,CDE9                 GET RETURN ADDRESS
         BR    R9                      RETURN TO CALLER
NOXL     WTO   'DUMPSTOR FOUND NO XTLST HEADER IN THE DUMP',ROUTCDE=11
         MVC   RETCODE,RC8             SET RETURN CODE = 8
         B     EOJ                     TERMINATE
TOOMNYCD WTO   'DUMPSTOR: TOO MANY CDE ENTRIES FOUND',ROUTCDE=11
         MVC   RETCODE,RC8             SET RETURN CODE = 8
         B     EOJ                     TERMINATE
CDE9     DS    A                       RETURN ADDRESS FOR CDE
*********************************************************************
*             PROCESS THE XTLST ENTRIES                             *
*********************************************************************
XTLST    ST    R9,XL9                  SAVE RETURN ADDRESS
XLREAD   BAL   R9,READDUMP             READ DUMP FILE RECORD
         CLI   EOF,X'FF'               END OF FILE?
         BE    NOTIOT                  YES
         CLC   INTIOT,=CL8'  TIOT: '   FOUND TIOT HEADER?
         BE    XLXIT                   YES
         CLC   INMBLA,=CL10'MSBLA.... ' VALID XL ENTRY?
         BNE   XLREAD                  NO
         LA    R11,INXLADR             POINT TO XL'S ADDRESS (CHAR)
         LA    R12,XLA                 POINT TO XL'S ADDRESS (HEX)
         BAL   R9,CHR2HEX              CONVERT THE XL'S ADDRESS
         LA    R11,INMSBLA             POINT TO AREA LENGTH (CHAR)
         LA    R12,LENGTH              POINT TO AREA LENGTH (HEX)
         BAL   R9,CHR2HEX              CONVERT THE AREA LENGTH
         MVI   LENGTH,0                HIGH BYTE IS NOT LENGTH
         LA    R11,INMSBAD             POINT TO AREA ADDRESS (CHAR)
         LA    R12,ADDRESS             POINT TO AREA ADDRESS (HEX)
         BAL   R9,CHR2HEX              CONVERT THE AREA ADDRESS
         L     R12,STORTBLA            POINT TO 1ST TABLE ENTRY
XLCKND   CLI   0(R12),X'FF'            END OF TABLE?
         BE    XLREAD                  YES
         C     R12,CURRNTRY            END OF TABLE?
         BNL   XLREAD                  YES
         CLC   XLA,8(R12)              IS THIS THE ENTRY?
         BNE   XLSTEP                  NO
         MVC   8(4,R12),ADDRESS        YES, ENTER START ADDRESS
         L     R1,ADDRESS              COMPUTE
         A     R1,LENGTH                 END
         BCTR  R1,0                        ADDRESS
         ST    R1,12(R12)                    AND STORE IT
XLSTEP   LA    R12,16(R12)             STEP TO NEXT TBL ENTRY
         B     XLCKND                  LOOP THROUGH TABLE
XLXIT    L     R9,XL9                  GET RETURN ADDRESS
         BR    R9                      RETURN TO CALLER
NOTIOT   WTO   'DUMPSTOR FOUND NO TIOT HEADER IN THE DUMP',ROUTCDE=11
         MVC   RETCODE,RC8             SET RETURN CODE = 8
         B     EOJ                     TERMINATE
XL9      DS    A                       RETURN ADDRESS FOR XTLST
*********************************************************************
*             PROCESS THE SUBPOOL ENTRIES                           *
*********************************************************************
VIRTSTOR ST    R9,VS9                  SAVE RETURN ADDRESS
VSREAD1  BAL   R9,READDUMP             READ DUMP FILE RECORD
         CLI   EOF,X'FF'               END OF FILE?
         BE    NOVSM                   YES
         CLC   INVSMHD,=CL23'**VIRTUAL STORAGE MAP**'
         BNE   VSREAD1                 BRANCH IF VSM NOT FOUND
VSREAD2  BAL   R9,READDUMP             READ DUMP FILE RECORD
         CLI   EOF,X'FF'               END OF FILE?
         BE    NOSSAT                  YES
         CLC   INSSAT,=CL8'  SSAT: '   FOUND SSAT HEADER?
         BE    VSXIT                   YES
         CLC   INSBPL,=CL8'SUBPOOL '   FOUND SUBPOOL HEADER?
         BNE   VSTRYAD                 NO
         MVC   SPID,INSPID             YES, SAVE SUBPOOL ID
         MVC   SPPKEY,INSPKY           SAVE SUBPOOL PROTECT KEY
         B     VSREAD2                 CONTINUE
VSTRYAD  CLC   INSPAD,=CL8'ADDRESS '   FOUND SUBPOOL ADDRESS LINE?
         BNE   VSREAD2                 NO
         LA    R11,INSPADDR            POINT TO CHARACTER ADDRESS
         LA    R12,ADDRESS             POINT TO WHERE IT GOES
         BAL   R9,CHR2HEX              GO CONVERT TO REAL HEX
         LA    R11,INSPLGTH            POINT TO CHARACTER LENGTH
         LA    R12,LENGTH              POINT TO WHERE IT GOES
         BAL   R9,CHR2HEX              GO CONVERT TO REAL HEX
         L     R12,CURRNTRY            POINT TO CURRENT TABLE ENTRY
         MVC   0(8,R12),SUBPOOL        SET NAME FIELD
         L     R11,ADDRESS             PICK UP ADDRESS
         ST    R11,8(R12)              PUT START ADDRESS IN TBL
         MVI   LENGTH,0                CLEAR HIGH BYTE OF LENGTH
         A     R11,LENGTH              COMPUTE AREA
         BCTR  R11,0                     END ADDRESS
         ST    R11,12(R12)             PUT END ADDRESS IN TABLE
         LA    R12,16(R12)             STEP TO NEXT ENTRY
         MVI   0(R12),X'FF'            SET TABLE STOPPER
         ST    R12,CURRNTRY            UPDATE CURRENT ENTRY POINTER
         B     VSREAD2
VSXIT    L     R9,VS9                  GET RETURN ADDRESS
         BR    R9                      RETURN TO CALLER
NOSSAT   WTO   'DUMPSTOR FOUND NO SSAT HEADER IN THE DUMP',ROUTCDE=11
         MVC   RETCODE,RC8             SET RETURN CODE = 8
         B     EOJ                     TERMINATE
NOVSM    WTO   'DUMPSTOR FOUND NO VIRTUAL STORAGE MAP',ROUTCDE=11
         MVC   RETCODE,RC8             SET RETURN CODE = 8
         B     EOJ                     TERMINATE
VS9      DS    A                       RETURN ADDRESS FOR XTLST
*********************************************************************
*             READ DUMP DATASET                                     *
*********************************************************************
READDUMP GET   DUMPIN,INREC            READ NEXT RECORD
         CLC   0(5,R1),=CL5'1JOB '     HEADER LINE?
         BE    READDUMP                YES, SKIP IT
         CLC   0(121,R1),BLANKS        BLANK LINE?
         BE    READDUMP                YES, SKIP IT
         BR    R9                      RETURN TO CALLER
ENDDUMP  MVI   EOF,X'FF'               SET EOF FLAG
         BR    R9                      RETURN TO CALLER
*********************************************************************
*             WRITE OUTPUT RECORD SUBROUTINE                        *
*********************************************************************
PUTOUT   PUT   STORDATA,OUTREC         WRITE OUTPUT RECORD
         MVC   OUTREC,BLANKS           CLEAR OUTPUT RECORD
         BR    R9                      RETURN TO CALLER
*********************************************************************
* CONVERT A 4-BYTE REAL HEX VALUE TO AN 8-CHARACTER PRINTABLE HEX   *
* FIELD. ON ENTRY, R11 POINTS TO THE REAL HEX VALUE AND R12 POINTS  *
* TO THE CALLER'S 8-CHARACTER RESULT FIELD.                         *
*********************************************************************
HEX2CHR  UNPK  CWORK(9),0(5,R11)       UNPACK HEX BYTES TO WORK FIELD
         TR    CWORK(8),TRCHAR-C'0'    MAKE ALL PRINTABLE
         MVC   0(8,R12),CWORK          COPY CHARACTERS CALLER'S AREA
         BR    R9                      RETURN TO CALLER
TRCHAR   DC    CL16'0123456789ABCDEF'  TRANSLATE HEX TO CHARACTERS
*********************************************************************
* CONVERT AN 8-BYTE CHARACTER HEX FIELD TO A 4-BYTE REAL HEX VALUE. *
* ON ENTRY, R12 POINTS TO THE REAL HEX FIELD THAT WILL CONTAIN THE  *
* RESULT, AND R11 POINTS THE 8-CHARACTER PRINTABLE HEX FIELD TO BE  *
* CONVERTED.                                                        *
*********************************************************************
CHR2HEX  MVC   CWORK(8),0(R11)         COPY CHARACTERS TO WORK FIELD
         TR    CWORK(8),TRHEX          MAKE ALL 00-0F
         PACK  HWORK(5),CWORK(9)       MAKE TRUE HEX IN HWORK
         MVC   0(4,R12),HWORK          COPY REAL HEX TO CALLER'S AREA
         BR    R9                      RETURN TO CALLER
CWORK    DS    CL9                     CHARACTER WORK AREA
HWORK    DS    CL5                     HEX WORK AREA
TRHEX    DC    XL256'00'               TRANSLATE CHARACTERS TO HEX
         ORG   TRHEX+C'A'
         DC    X'0A0B0C0D0E0F'
         ORG   TRHEX+C'1'
         DC    X'010203040506070809'
         ORG
*********************************************************************
* END OF JOB. SORT THE STORAGE TABLE IN START ADDRESS ORDER, THEN   *
* WRITE THE OUTPUT REPORT.                                          *
*********************************************************************
EOJ      L     R6,STORTBLA             POINT TO 1ST TABLE ENTRY
EOJSRTND CLI   0(R6),X'FF'             END OF SORT?
         BE    EOJ1                    YES
NEXPASS  LA    R7,16(R6)               NO, POINT TO NEXT ELEMENT
EOJSRTN2 CLI   0(R7),X'FF'             END OF PASS?
         BNE   EOJSRTCK                NO
         LA    R6,16(R6)               YES, ADVANCE TO NEXT
         B     EOJSRTND                CONTINUE SORT
EOJSRTCK CLC   8(4,R6),8(R7)           COMPARE ELEMENTS
         BL    EOJSRTNX                FIRST NOT LOW, ADVANCE
         MVC   HOLD,0(R6)              FIRST LOW, HOLD IT
         MVC   0(16,R6),0(R7)          MOVE SECOND TO FIRST LOCATION
         MVC   0(16,R7),HOLD           MOVE FIRST TO SECOND LOCATION
EOJSRTNX LA    R7,16(R7)               ADVANCE
         B     EOJSRTN2                CONTINUE PASS
EOJ1     MVC   OUTREC,LEGEND           PRINT
         BAL   R9,PUTOUT                 THE LEGEND
         LA    R12,LEGEND1                  LINES
         LA    R11,11                         .
EOJ1PRT  MVC   OUTREC,0(R12)                  .
         BAL   R9,PUTOUT                      .
         LA    R12,80(R12)                    .
         BCT   R11,EOJ1PRT                    .
         MVC   OUTREC,LEGEND                  .
         BAL   R9,PUTOUT                      .
         BAL   R9,PUTOUT               WRITE BLANK LINE
         MVC   OUTREC,HEADER           WRITE
         BAL   R9,PUTOUT                  HEADING LINE
         L     R6,STORTBLA             POINT TO 1ST TABLE ENTRY
         XC    HOLD,HOLD               CLEAR LAST ENTRY AREA
EOJCKND  CLI   0(R6),X'FF'             END OF TABLE?
         BE    EOJ2                    YES
         C     R6,CURRNTRY             END OF TABLE?
         BNL   EOJ2                    YES
         CLC   12(4,R6),F0             ANY END ADDRESS?
         BE    EOJOUST                 NO, DROP MINOR ENTRY POINT
         ICM   R1,15,HOLD+12           PICK UP LAST END ADDRESS
         C     R1,8(R6)                OVERLAPPING AREAS?
         BL    EOJAD1                  NO
         MVC   OUTCOMM(7),=CL7'OVERLAP' INDICATE OVERLAP
         B     EOJFRMT                 GO FORMAT LINE
EOJAD1   LA    R1,1(R1)                COMPUTE NEXT ADDRESS EXPECTED
         C     R1,8(R6)                SEAMLESS MEMORY USE?
         BE    EOJFRMT                 YES
         L     R2,8(R6)                COMPUTE
         SR    R2,R1                     GAP
         ST    R2,SIZE                     SIZE
         LA    R11,SIZE                POINT TO GAP SIZE
         LA    R12,OUTSIZE             POINT TO OUTPUT RECORD FIELD
         BAL   R9,HEX2CHR              GO CONVERT TO PRINTABLE
         MVC   OUTNAME,=CL8'**GAP** '  INDICATE GAP AREA
         BAL   R9,PUTOUT               GO WRITE GAP RECORD
EOJFRMT  MVC   OUTNAME,0(R6)           NAME TO OUTPUT RECORD
         CLI   OUTNAME,X'EE'           THIS A SUBPOOL ENTRY?
         BNE   EOJPTST                 NO
         MVI   OUTNAME,C'S'            YES
EOJPTST  LA    R11,8(R6)               POINT TO START ADDRESS
         LA    R12,OUTSTART            POINT TO OUTPUT RECORD FLD
         BAL   R9,HEX2CHR              GO CONVERT TO PRINTABLE
         LA    R11,12(R6)              POINT TO END ADDRESS
         LA    R12,OUTEND              POINT TO OUTPUT RECORD FIELD
         BAL   R9,HEX2CHR              GO CONVERT TO PRINTABLE
         L     R12,12(R6)              COMPUTE
         S     R12,8(R6)                  AREA
         ST    R12,SIZE                      SIZE
         LA    R11,SIZE                POINT TO SIZE FIELD
         LA    R12,OUTSIZE             POINT TO OUTPUT RECORD FIELD
         BAL   R9,HEX2CHR              GO CONVERT TO PRINTABLE
EOJOUT   BAL   R9,PUTOUT               WRITE OUTPUT RECORD
         MVC   HOLD,0(R6)              SAVE LAST ENTRY
EOJOUST  LA    R6,16(R6)               STEP TO NEXT TBL ENTRY
         B     EOJCKND                 LOOP THROUGH TABLE
EOJ2     CLOSE (STORDATA,,DUMPIN)      CLOSE FILES
         L     R13,4(R13)              POINT TO CALLER'S SAVE AREA
         L     R14,12(R13)             RESTORE RETURN REG: R14
         L     R15,RETCODE             SET RETURN CODE
         LM    R0,R12,20(R13)          RESTORE CALLER'S REGS 0-12
         BR    R14                     RETURN
*********************************************************************
*        STORAGE AND FILE AREAS                                     *
*********************************************************************
*
DBLWD    DS    D                       DOUBLEWORD WORK AREA
STORTBLA DS    A                       ADDRESS OF STORAGE DATA TABLE
CURRNTRY DS    A                       CURRENT STORAGE DATA TBL ADDR
ENDTBLA  DS    A                       END OF STORAGE DATA TABLE ADDR
XLA      DS    A                       ADDRESS OF AL XL
LENGTH   DS    F                       LENGTH OF AREA IN XL
SIZE     DS    F                       SIZE OF GAP BETWEEN AREAS
ADDRESS  DS    A                       ADDRESS OF AREA IN XL
RETCODE  DS    F'0'                    RETURN CODE
RC8      DC    F'8'                    RC=8 VALUE
F0       DC    F'0'                    FULLWORD OF HEX ZEROS
H0       DC    H'0'                    HEX ZERO
EOF      DC    X'00'                   X'FF' = END OF DUMP FILE
BLANKS   DC    CL121' '                BLANKS
HOLD     DS    CL16                    SORT HOLD AREA
LEGEND   DC    CL50'**************************************************'
         DC    CL30'********************          '
LEGEND1  DC    CL50'* NOTES: (1) IN THE NAMES BELOW, THOSE BEGINNING W'
         DC    CL30'ITH SP ARE MOSTLY  *          '
LEGEND2  DC    CL50'* SUBPOOL ENTRIES FORMED AS SPIIIKNN, WHERE III IS'
         DC    CL30' A 3-DIGIT SUBPOOL *          '
LEGEND3  DC    CL50'* NUMBER AND NN IS A 2-DIGIT STORAGE KEY. (2) TO S'
         DC    CL30'EE A SYSTEM MEMORY *          '
LEGEND4  DC    CL50'* MAP, LOG ONTO THE LPAR OF INTEREST AND ENTER "TS'
         DC    CL30'O WHERE *MAP*" (3) *          '
LEGEND5  DC    CL50'* "OVERLAP" INDICATES THE AREA OVERLAPS THE ONE AB'
         DC    CL30'OVE. SINCE PROGRAMS*          '
LEGEND6  DC    CL50'* LIVE IN SUBPOOLS, THIS IS USUALLY NORMAL. (4) FO'
         DC    CL30'R A DESCRIPTION OF *          '
LEGEND7  DC    CL50'* SUBPOOLS SEE IBM MANUAL SY28-1084 "MVS DIAGNOSIS'
         DC    CL30': REFERENCE, CHAP- *          '
LEGEND8  DC    CL50'* TER 8. (5) FOR INFORMATION ON HOW STORAGE IS MAN'
         DC    CL30'AGED BY MVS, SEE   *          '
LEGEND9  DC    CL50'* IBM MANUAL SC28-1751 INITIALIZATION AND TUNING G'
         DC    CL30'UIDE, CHAPTER 1.   *          '
LEGEN10  DC    CL50'* (6) "**GAP** " IN THE NAME FIELD SHOWS THE SIZE '
         DC    CL30'OF AN UNALLOCATED  *          '
LEGEN11  DC    CL50'* AREA OF MEMORY.                                 '
         DC    CL30'                   *          '
*
SUBPOOL  DS    0CL8                    SUBPOOL NAME FIELD
         DC    X'EE',C'P'                SUBPOOL NAME IDENTIFIER
SPID     DC    CL3'???'                  SUBPOOL ID
         DC    C'K'                      PROTECT KEY ID
SPPKEY   DC    CL2'??'                   SUBPOOL PROTECT KEY
*
HEADER   DS    0CL80                    HEADING LINE
         DC    CL80'NAME     START    END      SIZE     COMMENTS'
*
INREC    DS    CL121                    INPUT RECORD AREA
INASCB   EQU   INREC+0,8
INCDE    EQU   INREC+0,8
INXTLST  EQU   INREC+0,8
INCDNM   EQU   INREC+11,10
INCDNAME EQU   INREC+21,8
INXLMJP  EQU   INREC+101,8
INTIOT   EQU   INREC+0,8
INMBLA   EQU   INREC+58,10
INXLADR  EQU   INREC+8,8
INMSBLA  EQU   INREC+68,8
INMSBAD  EQU   INREC+88,8
INVSMHD  EQU   INREC+28,23
INSSAT   EQU   INREC+0,8
INSBPL   EQU   INREC+3,8
INSPID   EQU   INREC+11,3
INSPKY   EQU   INREC+20,2
INSPAD   EQU   INREC+7,8
INSPADDR EQU   INREC+15,8
INSPLGTH EQU   INREC+32,8
*
OUTREC   DS    0CL80                    OUTPUT RECORD
OUTNAME  DC    CL8' '                     AREA NAME
         DC    CL1' '
OUTSTART DC    CL8' '                     START ADDRESS
         DC    CL1' '
OUTEND   DC    CL8' '                     END ADDRESS
         DC    CL1' '
OUTSIZE  DC    CL8' '                     AREA SIZE
         DC    CL1' '
OUTCOMM  DC    CL44' '                    COMMENTS
*********************************************************************
*             DCB'S                                                 *
*********************************************************************
STORDATA DCB   DSORG=PS,MACRF=PM,DDNAME=STORDATA,                      X
               RECFM=FB,LRECL=80
DUMPIN   DCB   DSORG=PS,MACRF=GM,DDNAME=DUMPIN,EODAD=ENDDUMP,          X
               RECFM=FB,LRECL=121
         LTORG
DUMPSTOR CSECT
*********************************************************************
*             REGISTER EQUATES                                      *
*********************************************************************
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
