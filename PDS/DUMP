         TITLE '***** STORAGE DUMP SUBROUTINE *****'
         PRINT NOGEN
DUMP SVLNK BASEREG
**********************************************************************
*  PRODUCES A STORAGE DUMP IN A FORMAT SIMILAR TO THAT GIVEN BY THE  *
*  NORMAL OPERATING SYSTEM DUMP. PRINCIPAL PURPOSE IS TO PROVIDE A   *
*  PRE-WRITTEN AND DEBUGGED DUMP ROUTINE.                            *
*                                                                    *
*                                                                    *
*  AUTHOR R. THORNTON DEC 1990                                       *
**********************************************************************
WORKREG1 EQU   R1                       WORK REGISTER
MEMRYREG EQU   R3                       POINTER TO MEMORY BEING DUMPED
LENGREG  EQU   R4                       REMAINING LENGTH TO DUMP
OFSETREG EQU   R5                       OFFSET FROM BEGINNING OF AREA
PRNTREG  EQU   R8                       PRINT LINE POINTER
PRFMREG  EQU   R10                      PERFORM (BAL) REG
BASEREG  EQU   R11                      PROGRAM BASE REGISTER
SAVEREG  EQU   R13                      SAVE AREA POINTER
RTRNREG  EQU   R14                      LINKAGE RETURN REG
LINKREG  EQU   R15                      LINKAGE CALL REG
         OPEN  (PRINT1,OUTPUT)          OPEN PRINT FILE
         L     MEMRYREG,STARTAD         POINT TO STARTING MEMORY ADDR
         L     LENGREG,DUMPLENG         GET LENGTH OF AREA TO DUMP
         SR    OFSETREG,OFSETREG        CLEAR OFFSET COUNTER
NEWLINE  MVI   LINE1,C' '               CLEAR
         MVC   LINE1+1(131),LINE1          PRINT LINE
         ST    OFSETREG,DBLWD           PUT
         UNPK  LINE1(7),DBLWD(5)           OFFSET
         TR    LINE1(7),TRUPX2C               INTO
         MVI   LINE1+6,C' '                      PRINT LINE
         ST    MEMRYREG,DBLWD           PUT
         UNPK  LINE1+9(9),DBLWD(5)         ADDRESS
         TR    LINE1+9(8),TRUPX2C             INTO
         MVI   LINE1+17,C' '                     PRINT LINE
         LR    WORKREG1,LENGREG         PUT
         BCTR  WORKREG1,0                  CHARACTERS
         C     WORKREG1,F31                   WITH
         BNH   DOCHAR                            DOTS
         L     WORKREG1,F31                         ON RIGHT
DOCHAR   EX    WORKREG1,NEWMVC                         SIDE
         EX    WORKREG1,NEWTR                             OF LINE
         LA    PRNTREG,LINE1+20         BEGINNING LEFT SIDE HEX
         BAL   PRFMREG,FORMHALF         FORMAT LEFT SIDE
         LA    PRNTREG,LINE1+58         BEGINNING RIGHT SIDE HEX
         BAL   PRFMREG,FORMHALF         FORMAT RIGHT SIDE
         LA    PRNTREG,LINE1            PRINT
         BAL   PRFMREG,PRINTER             THE LINE
         LA    OFSETREG,32(OFSETREG)    ADVANCE OFFSET COUNTER
         B     NEWLINE                  LOOP TO DUMP ENTIRE AREA
NEWMVC   MVC   LINE1+96(1),0(MEMRYREG)  EXECUTED MOVE
NEWTR    TR    LINE1+96(1),TRX2C        EXECUTED TRANSLATE
FORMHALF ST    PRFMREG,FH10             SAVE RETURN ADDRESS
         LA    R7,4                     LOOP COUNTER
         BAL   PRFMREG,FORMBLOK         GO FORMAT ONE HEX BLOCK
         BCT   R7,FORMBLOK              LOOP THRU 4 BLOCKS
         L     PRFMREG,FH10             GET RETURN ADDRESS
         BR    PRFMREG                  RETURN
FORMBLOK ST    PRFMREG,FB10             SAVE RETURN ADDRESS
         C     LENGREG,F4               AT LEAST 8 BYTES REMAIN?
         BNH   LASTBLOK                 NO, LAST BLOCK
         UNPK  0(9,PRNTREG),0(5,MEMRYREG) YES, PRINT
         TR    0(9,PRNTREG),TRUPX2C        A BLOCK
         MVI   8(PRNTREG),C' '                OF 8 BYTES
         LA    PRNTREG,9(PRNTREG)       ADVANCE IN PRINT LINE
         LA    MEMRYREG,4(MEMRYREG)     ADVANCE IN MEMORY
         S     LENGREG,F4               DEDUCT FROM BYTES REMAINING
         L     PRFMREG,FB10             GET RETURN ADDRESS
         BR    PRFMREG                  RETURN
LASTBLOK LR    OFSETREG,LENGREG         SAVE LENGTH REMAINING
         BCTR  LENGREG,0                LENGTH-1 = MOVE LENGTH CODE
LASTMVC  EX    LENGREG,MVREM            MOVE REMAINING BYTES
         LR    LENGREG,OFSETREG         GET REMAINING LENGTH
         SLL   LENGREG,5                SHIFT TO HIGH NIBBLE & DOUBLE
         OR    LENGREG,OFSETREG         SET LOW NIBBLE
LASTUPK  EX    LENGREG,UPKREM           UNPK REMAINING
         SRL   LENGREG,4                DOUBLE LENGTH
LASTTR   EX    LENGREG,TRREM            MAKE LAST FEW BYTES PRINTABLE
         AR    PRNTREG,LENGREG          POINT TO GARBAGE BYTE
         MVI   0(PRNTREG),C' '          CLEAR GARBAGE BYTE
         LA    PRNTREG,LINE1            POINT TO PRINT LINE
         BAL   PRFMREG,PRINTER          PRINT THE LINE
         B     EOJ                      TERMINATE
MVREM    MVC   DBLWD(1),0(MEMRYREG)     EXECUTED MOVE
UPKREM   UNPK  0(1,PRNTREG),DBLWD(1)    EXECUTED UNPACK
TRREM    TR    0(1,PRNTREG),TRUPX2C     EXECUTED TRANSLATE
***********************************************************************
*        PRINT A LINE                                                 *
***********************************************************************
PRINTER  PUT   PRINT1,0(PRNTREG)       PRINT A LINE
         BR    PRFMREG                 RETURN
***********************************************************************
*        END OF JOB                                                   *
***********************************************************************
EOJ      CLOSE PRINT1                  CLOSE PRINT FILE
         L     SAVEREG,4(SAVEREG)      POINT TO CALLER'S SAVE AREA
         LM    RTRNREG,R12,12(SAVEREG) RESTORE CALLER'S REGS
         SR    LINKREG,LINKREG         SET RETURN CODE
         BR    RTRNREG                 RETURN TO CALLER
***********************************************************************
*        DATA DEFINITIONS                                             *
***********************************************************************
DBLWD    DS    D                       WORK AREA
STARTAD  DC    A(DUMP)                 START ADDRESS
DUMPLENG DC    A(DUMPEND-DUMP)         LENGTH OF AREA TO DUMP
         DC    C'0123456789ABCDEF'     SOMETHING TO END THE DUMP
DUMPEND  DS    0C                      END OF DUMP
LINE1    DS    CL132                   DUMP PRINT LINE
FH10     DS    F                       PRFMREG FOR FORMHALF
FB10     DS    F                       PRFMREG FOR FORMBLOK
F31      DC    F'31'                   CONSTANT 31
F8       DC    F'8'                    CONSTANT 8
F4       DC    F'4'                    CONSTANT 4
TRUPX2T  DC    C'0123456789ABCDEF'     MAKE UNPACKED HEX PRINTABLE
         ORG   TRUPX2T-C'0'
TRUPX2C  EQU   *                       VIRTUAL START OF TABLE
         ORG
TRX2C    DC    256C'.'                 MAKE ORDINARY HEX PRINTABLE
         ORG   TRX2C+C'A'
         DC    C'ABCDEFGHI'
         ORG   TRX2C+C'J'
         DC    C'JKLMNOPQR'
         ORG   TRX2C+C'S'
         DC    C'STUVWXYZ'
         ORG   TRX2C+C'0'
         DC    C'0123456789'
         ORG
PRINT1   DCB   DSORG=PS,MACRF=PM,DDNAME=PRINT1,                        X
               RECFM=FB,LRECL=132
         END
