         PRINT NOGEN
         TITLE '*****FINDLDM: SCAN LOAD MODULE PDS FOR STRINGS*****'
FINDLDM  SVLNK R3
*
***********************************************************************
* SCAN LOAD MODULES FOR CHARACTER STRINGS AND WRITE AN OUTPUT RECORD  *
* FOR EACH OCCURRENCE OF A STRING, GIVING THE MEMBER NAME, RELATIVE   *
* OFFSET TO THE STRING FROM THE BEGINNING OF THE MODULE, AND THE      *
* STRING FOUND. INPUT MUST BE A PDS WITH UNDEFINED RECORD FORMAT.     *
*                                                                     *
* THE READER1 DATASET IS USED TO ENTER THE CHARACTER STRINGS TO BE    *
* FOUND IN THE INPUT PDS. UP TO 500 STRINGS MAY BE ENTERED, ONE PER   *
* RECORD. THE STRING IS ASSUMED TO BEGIN IN COLUMN 1 OF THE READER1   *
* RECORDS, AND ENDS EITHER WITH THE LAST NON-BLANK COLUMN IN THE      *
* RECORD, OR ONE COLUMN LEFT OF THIS, IF THE LAST NON-BLANK COLUMN    *
* CONTAINS THE < TERMINATING SIGN. IF THE LAST CHARACTER OF THE STRING*
* TO BE FOUND IS <, THEN 2 CONSECUTIVE <'S MUST END THE STRING.       *
*                                                                     *
*                                                                     *
* AUTHOR R THORNTON MAY 1985                                          *
***********************************************************************
*
*
***********************************************************************
* INITIALIZATION: OPEN INPUT AND OUTPUT FILES. GET STORAGE FOR 500    *
* STRING RECORDS. READ THE READER1 FILE, STORING THE STRINGS IN THE   *
* TABLE. EACH STRING IS STORED LEFT JUSTIFIED IN THE LAST 71 BYTES OF *
* THE TABLE ENTRY. THE FIRST BYTE OF EACH ENTRY IS USED TO CONTAIN    *
* THE LENGTH CODE (LENGTH-1) OF THE STRING.                           *
***********************************************************************
*
         OPEN  (OUTPUT1,OUTPUT,INPUT1,,READER1) OPEN FILES
READCARD GET   READER1,STRCARD         READ STRING RECORD
         L     R1,CURRTBL              POINT TO CURRENT ENTRY
         C     R1,STREND               PAST END OF TABLE?
         BH    TOOMANY                 YES, ERROR
         LA    R15,71                  GET MAX POSSIBLE LENGTH CODE
         LA    R14,STRCARD+71          POINT TO LAST POSSIBLE TERM
CRDLNBK  CLI   0(R14),C' '             FOUND LAST NON-BLANK COLUMN?
         BNE   LASNONBK                YES
         BCTR  R15,0                   NO, DECREMENT STRING LENGTH CODE
         BCT   R14,CRDLNBK             DECREMENT POINTER AND LOOP
LASNONBK CLI   0(R14),C'<'             GOT THE TERMINATOR SIGN?
         BNE   SAVELENG                NO
         BCTR  R15,0                   YES, DON'T INCLUDE IN LENGTH
SAVELENG STC   R15,0(R1)               YES, SAVE STRING LENGTH
         MVC   1(71,R1),BLANKS         PRE-CLEAR ENTRY
         EX    R15,TBLMOVE             MOVE STRING TO TABLE
         LA    R1,72(R1)               ADVANCE TO NEXT ENTRY
         ST    R1,CURRTBL              SAVE CURRENT ENTRY POINTER
         B     READCARD                CONTINUE
TBLMOVE  MVC   1(1,R1),STRCARD         EXECUTED MOVE
TOOMANY  WTO   'FINDLDM: TOO MANY CARDS, 1ST 500 USED',ROUTCDE=11
*
***********************************************************************
* INITIALIZATION: SORT THE STRINGS READ IN FROM READER1 IN ASCENDING  *
* ORDER.                                                              *
***********************************************************************
*
ENDCARDS L     R1,CURRTBL              GET NEXT TABLE ADDRESS
         MVI   0(R1),X'00'             SET END ENTRY LENGTH = 1
         MVI   1(R1),X'FF'             SET END ENTRY DATE = FF
         ST    R1,STREND               SET ACTUAL TABLE END
         L     R1,STRTBL               POINT TO TABLE START
NEXPASS  LR    R2,R1                   POINT TO 1ST PASS ENTRY
NEXNTRY  LA    R2,72(R2)               POINT TO NEXT ENTRY
         C     R2,STREND               PAST END OF TABLE?
         BH    ENDPASS                 YES
         CLC   1(72,R2),1(R1)          2ND ENTRY IS LOW?
         BL    SRTSWCH                 YES, GO SWITCH
         B     NEXNTRY                 NO, CONTINUE PASS
SRTSWCH  MVC   STRCARD,0(R1)           SAVE 1ST ENTRY
         MVC   0(72,R1),0(R2)          MOVE 2ND TO 1ST
         MVC   0(72,R2),STRCARD        MOVE 1ST TO SECOND
         B     NEXNTRY                 CONTINUE PASS
ENDPASS  LA    R1,72(R1)               POINT TO NEXT TABLE ENTRY
         C     R1,STREND               PAST END OF TABLE?
         BL    NEXPASS                 NO
*
***********************************************************************
* INITIALIZATION: CHECK THE FIRST BYTE OF THE FIRST STRING IN THE     *
* TABLE. IF IT IS LOWER THAN THE LETTER "A", PUT THE ADDRESS OF THE   *
* FIRST STRING ENTRY IN THE LOWPTR FIELD FOR USE IN LATER SCANNING.   *
* NEXT, MOVE THE VALUE X'01' TO THE LOCATION IN THE TRTSCH TRT TABLE  *
* CORRESPONDING TO THIS BYTE. THIS WILL CAUSE THE SCANNING TRT TO     *
* STOP WHEN THIS BYTE IS FOUND IN AN INPUT SOURCE RECORD. CONTINUE TO *
* SEARCH THROUGH THE STRING TABLE SO LONG AS THE STRINGS BEGIN WITH   *
* VALUES LESS THAN THE LETTER "A", SETTING THE CORRESPONDING TRT TABLE*
* LOCATION TO X'01' FOR EACH ONE FOUND.                               *
***********************************************************************
*
ENDSORT  L     R1,STRTBL               POINT TO TABLE START
         CLI   1(R1),C'A'              1ST STRING BEGINS < A?
         BNL   FINDALFA                NO
         STCM  R1,7,LOWPTR+1           YES, SET BEGIN SRCH ADDRESS
FINDALFA CLI   1(R1),C'A'              FOUND FIRST ALPHA?
         BNL   ALFACHEK                PERHAPS
         SR    R14,R14                 CLEAR FOR INSERT
         IC    R14,1(R1)               PICK UP 1ST BYTE OF STRING
         LA    R14,TRTSCH(R14)         POINT TO TRT TABLE BYTE
         MVI   0(R14),X'01'            SET STOP FOR THIS BYTE
         LA    R1,72(R1)               STEP TO NEXT ENTRY
         C     R1,STREND               PAST END OF TABLE?
         BH    CHKINPDS                YES
         B     FINDALFA                ELSE CONTINUE SEARCH
*
***********************************************************************
* INITIALIZATION: ON ENTRY, R1 POINTS TO A STRING TABLE ENTRY. CHECK  *
* THE FIRST BYTE OF THE STRING FOR ALPHABETIC. IF GREATER THAN THE    *
* LETTER "Z", GO TO GOTHIONE. THIS CODE SEARCHES THROUGH THE STRING   *
* TABLE UNTIL THE TABLE IS EXHAUSTED, OR A STRING IS FOUND HAVING A   *
* FIRST BYTE GREATER THAN THE LETTER "Z". FOR EACH NEW ALPHABETIC     *
* CHARACTER FOUND STARTING A STRING, THE ADDRESS OF THE FIRST STRING  *
* WITH THIS STARTING LETTER IS MOVED TO THE ADDRESS TABLE ENTRY (APTR *
* THROUGH ZPTR). IN ADDITION, A VALUE BETWEEN 01 AND 1B CORRESPONDING *
* TO A-Z IS MOVED TO THE SCANNING TABLE, TRTSCH, SO THAT THE BYTE WILL*
* STOP THE SCANNING TRT IF FOUND WITHIN AN INPUT RECORD.              *
***********************************************************************
*
ALFACHEK CLI   1(R1),C'Z'              IS IT AN ALPHABETIC?
         BH    GOTHIONE                NO
         LA    R15,APTR                POINT TO LOAD ADDR TABLE
NEWALFA  CLC   1(1,R1),0(R15)          FOUND ADDRESS ENTRY?
         BE    SAVALFAD                YES
NEWSTEP  LA    R15,4(R15)              NO, ADVANCE AN ENTRY
         C     R15,LDADEND             PAST END OF TABLE?
         BH    CHKINPDS                YES
         B     NEWALFA                 NO, CONTINUE SEARCH
SAVALFAD STCM  R1,7,1(R15)             SET ADDRESS IN ENTRY
         SR    R2,R2                   CLEAR FOR INSERT
         IC    R2,1(R1)                GET 1ST BYTE OF STRING
         LA    R14,TRTSCH(R2)          POINT TO TRT TABLE BYTE
         CLI   1(R1),C'R'              ALPHA S-Z?
         BNL   GOTSZ                   YES
         CLI   1(R1),C'J'              ALPHA J-R?
         BNL   GOTJR                   YES
         LA    R2,65(R2)               CONVERT A-I TO 02-0A
         B     SETTABL                 GO SET IN TABLE
GOTJR    LA    R2,58(R2)               CONVERT J-R TO 0B-13
         B     SETTABL                 GO SET IN TABLE
GOTSZ    LA    R2,50(R2)               CONVERT S-Z TO 14-1B
SETTABL  STC   R2,0(R14)               SET BYTE IN TRT TABLE
ALFASTEP LA    R1,72(R1)               STEP TO NEXT STRING IN TABLE
         C     R1,STREND               PAST END OF TABLE?
         BH    CHKINPDS                YES
         CLC   1(1,R1),0(R15)          1ST STRING BYTE SAME AS LAST?
         BE    ALFASTEP                YES, CONTINUE
         CLI   1(R1),C'Z'              STILL ALPHABETIC?
         BH    GOTHIONE                NO, GO FINISH
         B     NEWSTEP                 CONTINUE
*
***********************************************************************
* INITIALIZATION: ON ENTRY, R1 POINTS TO A STRING TABLE ENTRY. THE    *
* FIRST BYTE OF THE STRING IS GREATER THAN THE LETTER "Z". THE ADDRESS*
* OF THIS ENTRY IS MOVED TO THE HIPTR FIELD, AND THE VALUE X'1C' IS   *
* SET IN THE TRTSCH TRT TABLE AT THE LOCATION CORRESPONDING TO THE    *
* VALUE OF THE STRING'S FIRST BYTE. THE REST OF THE STRING TABLE IS   *
* SEARCHED, AND X'1C' IS MOVED TO THE TRTSCH TABLE FOR EACH DIFFERENT *
* STRING STARTING VALUE.                                              *
***********************************************************************
*
GOTHIONE STCM  R1,7,HIPTR+1            SET LOAD ADDRESS POINTER
HICLEAR  SR    R2,R2                   CLEAR FOR INSERT
         IC    R2,1(R1)                PICK UP STARTING BYTE
         LA    R14,TRTSCH(R2)          POINT TO BYTE
         MVI   0(R14),X'1C'            SET TRT STOP
         LA    R1,72(R1)               STEP TO NEXT STRING
         C     R1,STREND               PAST END OF TABLE?
         BL    HICLEAR                 NO, CONTINUE
*
***********************************************************************
*     INITIALIZATION:  CHECK THE ASSEMBLER SOURCE INPUT FILE TO       *
* INSURE THAT IT HAS FIXED LENGTH 80-BYTE RECORDS, AND IS EITHER      *
* PHYSICALLY SEQUENTIAL, OR IS A PDS. IF PHYSICALLY SEQUENTIAL, OR IF *
* A SPECIFIC PDS MEMBER IS CODED IN THE JCL, SET THE SWITCH TO SHOW   *
* THE INPUT FILE IS A SIMPLE SEQUENTIAL FILE. IF AN ENTIRE PDS IS     *
* INPUT, CALL THE READDIR AND READMEM SUBROUTINES TO OPEN THE FILE.   *
***********************************************************************
*
CHKINPDS RDJFCB INPUT1                 READ JFCB FOR INPUT FILE
         TM    JFCRECFM,X'C0'          UNDEFINED LENGTH RECORDS?
         BNO   BADINPUT                NO, ERROR
         CLI   JFCDSORG,X'02'          DSORG=PO?
         BNE   BADINPUT                NO, ERROR
         CLI   JFCELNM,C' '            MEMBER NAME SPECIFIED?
         BH    BADINPUT                YES, ERROR
         CALL  READDIR,OPEN            OPEN DIRECTORY FILE
         B     FININIT                 GO FINISH INITIALIZATION
BADINPUT WTO   'FINDLDM: INVALID INPUT FILE. FILE MUST BE',ROUTCDE=11
         WTO   '         DSORG=PO, RECFM=U',ROUTCDE=11
         ABEND 777,DUMP                TERMINATE IN ERROR
FININIT  L     R1,16                   POINT TO CVT
         L     R1,0(R1)                POINT TO NEW-OLD WORDS
         MVC   TCBADR,0(R1)            SAVE MY TCB ADDRESS
*
***********************************************************************
* MAINLINE PROCESSING: LOCATE THE NEXT MEMBER USING READDIR, AND      *
* ISSUE A LOAD TO BRING IT INTO MEMORY. SCAN THE LOAD MODULE FOR THE  *
* CHARACTER STRINGS SPECIFIED BY THE READER1 DATASET. IF A STRING IS  *
* FOUND IN A LOAD MODULE, WRITE AN OUTPUT RECORD CONTAINING THE MEMBER*
* NAME, OFFSET TO THE STRING FOUND, AND THE STRING FOUND.             *
***********************************************************************
*
NEWMEM   CALL  READDIR,(READ,DIRECTRY) READ NEXT DIRECTORY ENTRY
         CLI   MEMNAME,EOF             END OF FILE
         BE    EOJ                     YES, STOP RUN
         LOAD  EPLOC=MEMNAME,DCB=INPUT1 BRING LOAD MODULE INTO MEMORY
         L     R1,TCBADR               GET MY TCB ADDRESS
         L     R1,36(R1)               @ LAST LLE ON LOAD LIST
NEXLLE   LTR   R1,R1                   ANY MORE LLE'S?
         BZ    DELETIT                 NO (NOT FOUND????)
         L     R2,4(R1)                POINT TO CDE
         CLC   MEMNAME,8(R2)           THIS CDE FOR THE MODULE?
         BE    GETXL                   YES
         L     R1,0(R1)                POINT TO NEXT LLE
         B     NEXLLE                  CONTINUE SEARCH
GETXL    L     R1,20(R2)               POINT TO XL OR MAJOR CDE
         TM    28(R2),X'04'            THIS A MINOR CDE?
         BZ    GOTXL                   NO
         LR    R2,R1                   YES, COPY MAJOR CDE ADDR
         B     GETXL                   CONTINUE
GOTXL    MVC   MODSTRT+1(3),13(R1)     COPY START ADDRESS
         L     R2,8(R1)                PICK UP MODULE LENGTH
         LA    R2,0(R2)                CLEAR HIGH ORDER BYTE
         A     R2,MODSTRT              COMPUTE MODULE END ADDRESS
         ST    R2,MODENDAD             AND SAVE IT
         L     R11,MODSTRT             POINT TO START OF MODULE
         BCTR  R11,0                   BACK UP 1 BYTE
         L     R12,MODENDAD            POINT TO END OF MODULE
TRTSCAN  SR    R2,R2                   CLEAR FOR TRT INSERT
         CR    R11,R12                 PAST END OF MODULE?
         BNL   DELETIT                 YES, ALL THRU
         LR    R10,R12                 COPY MODULE END ADDRESS
         SR    R10,R11                 COMPUTE LENGTH REMAINING
         SH    R10,=H'2'               -2 SINCE TRT STARTS AT R11+1
         BM    DELETIT                 NEGATIVE IS PAST END OF MODULE
         CH    R10,=H'256'             OVER 256 BYTES REMAIN?
         BL    EXECTR                  NO
         LA    R10,255                 YES, SET MAX LENGTH FOR TRT
EXECTR   EX    R10,SCANTRT             SCAN FOR NEXT STRING
         BNZ   CKINREC                 FOUND, GO CHECK
         LA    R11,256(R11)            NOT FOUND, STEP TO NEXT BYTE
         B     TRTSCAN                 CONTINUE SCAN
SCANTRT  TRT   1(1,R11),TRTSCH         EXECUTED TRT INSTRUCTION
CKINREC  CR    R1,R12                  PAST END OF MODULE?
         BH    DELETIT                 YES, ALL THROUGH
         LA    R11,0(R1)               COPY ADDRESS FOUND
         LR    R15,R12                 COPY END ADDRESS
         SR    R15,R11                 LENGTH REMAINING IN RECORD
         SLL   R2,3                    MULTIPLY TRT CODE FOR BRANCH
         B     BRTBL-8(R2)             GO GET STRING TABLE POINTER
BRTBL    L     R2,LOWPTR               POINT TO 1ST STRING IN TABLE
         B     STRSRCH                 GO SEARCH TABLE
ASRCH    L     R2,APTR                 POINT TO 1ST STRING STARTING "A"
         B     STRSRCH                 GO SEARCH TABLE
BSRCH    L     R2,BPTR                 POINT TO 1ST STRING STARTING "B"
         B     STRSRCH                 GO SEARCH TABLE
CSRCH    L     R2,CPTR                 POINT TO 1ST STRING STARTING "C"
         B     STRSRCH                 GO SEARCH TABLE
DSRCH    L     R2,DPTR                 POINT TO 1ST STRING STARTING "D"
         B     STRSRCH                 GO SEARCH TABLE
ESRCH    L     R2,EPTR                 POINT TO 1ST STRING STARTING "E"
         B     STRSRCH                 GO SEARCH TABLE
FSRCH    L     R2,FPTR                 POINT TO 1ST STRING STARTING "F"
         B     STRSRCH                 GO SEARCH TABLE
GSRCH    L     R2,GPTR                 POINT TO 1ST STRING STARTING "G"
         B     STRSRCH                 GO SEARCH TABLE
HSRCH    L     R2,HPTR                 POINT TO 1ST STRING STARTING "H"
         B     STRSRCH                 GO SEARCH TABLE
ISRCH    L     R2,IPTR                 POINT TO 1ST STRING STARTING "I"
         B     STRSRCH                 GO SEARCH TABLE
JSRCH    L     R2,JPTR                 POINT TO 1ST STRING STARTING "J"
         B     STRSRCH                 GO SEARCH TABLE
KSRCH    L     R2,KPTR                 POINT TO 1ST STRING STARTING "K"
         B     STRSRCH                 GO SEARCH TABLE
LSRCH    L     R2,LPTR                 POINT TO 1ST STRING STARTING "L"
         B     STRSRCH                 GO SEARCH TABLE
MSRCH    L     R2,MPTR                 POINT TO 1ST STRING STARTING "M"
         B     STRSRCH                 GO SEARCH TABLE
NSRCH    L     R2,NPTR                 POINT TO 1ST STRING STARTING "N"
         B     STRSRCH                 GO SEARCH TABLE
OSRCH    L     R2,OPTR                 POINT TO 1ST STRING STARTING "O"
         B     STRSRCH                 GO SEARCH TABLE
PSRCH    L     R2,PPTR                 POINT TO 1ST STRING STARTING "P"
         B     STRSRCH                 GO SEARCH TABLE
QSRCH    L     R2,QPTR                 POINT TO 1ST STRING STARTING "Q"
         B     STRSRCH                 GO SEARCH TABLE
RSRCH    L     R2,RPTR                 POINT TO 1ST STRING STARTING "R"
         B     STRSRCH                 GO SEARCH TABLE
SSRCH    L     R2,SPTR                 POINT TO 1ST STRING STARTING "S"
         B     STRSRCH                 GO SEARCH TABLE
TSRCH    L     R2,TPTR                 POINT TO 1ST STRING STARTING "T"
         B     STRSRCH                 GO SEARCH TABLE
USRCH    L     R2,UPTR                 POINT TO 1ST STRING STARTING "U"
         B     STRSRCH                 GO SEARCH TABLE
VSRCH    L     R2,VPTR                 POINT TO 1ST STRING STARTING "V"
         B     STRSRCH                 GO SEARCH TABLE
WSRCH    L     R2,WPTR                 POINT TO 1ST STRING STARTING "W"
         B     STRSRCH                 GO SEARCH TABLE
XSRCH    L     R2,XPTR                 POINT TO 1ST STRING STARTING "X"
         B     STRSRCH                 GO SEARCH TABLE
YSRCH    L     R2,YPTR                 POINT TO 1ST STRING STARTING "Y"
         B     STRSRCH                 GO SEARCH TABLE
ZSRCH    L     R2,ZPTR                 POINT TO 1ST STRING STARTING "Z"
         B     STRSRCH                 GO SEARCH TABLE
HISRCH   L     R2,HIPTR                POINT TO 1ST STRING  > "Z"
         CLC   0(2,R2),=X'00FF'        ANYTHING THERE?
         BE    TRTSCAN                 NO, IGNORE IT
STRSRCH  LA    R2,0(R2)                CLEAR HI-ORDER BYTE
         C     R2,STREND               PAST END OF TABLE?
         BH    TRTSCAN                 YES, NO STRING FOUND
         SR    R1,R1                   CLEAR FOR INSERT
         IC    R1,0(R2)                GET STRING LENGTH FROM ENTRY
         CR    R1,R15                  RECORD CAN CONTAIN STRING?
         BL    DOCMPR                  YES, GO COMPARE FOR STRING
SYSRSTEP LA    R2,72(R2)               STEP TO NEXT STRING ENTRY
         CLC   1(1,R2),0(R11)          SAME STARTING BYTE?
         BE    STRSRCH                 YES, GO COMPARE
         B     TRTSCAN                 ELSE NOT FOUND
COMPARE  CLC   0(1,R11),1(R2)          EXECUTED COMPARE
DOCMPR   EX    R1,COMPARE              COMPARE RECORD:STRING ENTRY
         BNE   SYSRSTEP                BRANCH IF NOT EQUAL
         MVC   OUTMEM,MEMNAME          MEMBER NAME TO OUTPUT RECORD
         LR    R1,R11                  COPY STRING ADDRESS
         S     R1,MODSTRT              COMPUTE OFFSET
         ST    R1,HEXOFSET             SAVE HEX OFFSET
         UNPK  OUTOFSET(7),HEXOFSET+1(4) UNPACK TO MAKE PRINTABLE
         MVI   OUTOFSET+6,C' '         CLEAR GARBAGE BYTE
         TR    OUTOFSET,TRALFA-C'0'    MAKE PRINTABLE
         MVC   OUTIMAG,1(R2)           INPUT RECORD TO OUTPUT
         PUT   OUTPUT1,OUTREC          WRITE OUTPUT RECORD
         B     TRTSCAN                 CONTINUE SCAN
DELETIT  DELETE EPLOC=MEMNAME          DELETE THE MODULE
         B     NEWMEM                  GO GET NEXT RECORD
*
***********************************************************************
*        END OF INPUT FILE AND END OF JOB                             *
***********************************************************************
*
EOJ      CLOSE (OUTPUT1,,INPUT1,,READER1) CLOSE FILES
         L     R13,4(R13)              GET CALLER'S SAVE ADDRESS
         LM    R14,R12,12(R13)         GET CALLER'S REGISTERS
         SR    R15,R15                 ZERO RETURN CODE
         BR    R14                     RETURN TO CALLER
*
***********************************************************************
*        STORAGE AND FILE AREAS                                       *
***********************************************************************
*
TCBADR   DC    A(0)                    ADDRESS OF MY TCB
MODSTRT  DC    A(0)                    LOAD MODULE BEGIN ADDRESS
MODENDAD DC    A(0)                    LOAD MODULE END ADDRESS
STRTBL   DC    A(STRINGS)              FIRST STRING TABLE ADDRESS
CURRTBL  DC    A(STRINGS)              CURRENT STRING TABLE ADDRESS
STREND   DC    A(ENDSTRS)              END OF STRING TABLE
HEXOFSET DS    F                       HEX MODULE OFFSET
TRALFA   DC    C'0123456789ABCDEF'     PRINTABLE HEX TRANSLATION
STRCARD  DS    CL80                    STRING RECORD FROM INPUT1
F36000   DC    F'36000'                CONSTANT 36,000
BLANKS   DC    CL80' '                 CONSTANT BLANKS
HIVAL    DC    XL8'FFFFFFFFFFFFFFFF'   CONSTANT HIGH-VALUES
H80      DC    H'80'                   CONSTANT 80
SEQFILE  DC    X'00'                   SIMPLE SEQUENTIAL FILE INDIC
LDADDRS  DS    0F                      ADDRESS TABLE
EOF      EQU   X'FF'                   EOF INDICATOR
LOWPTR   DC    A(HIVAL)                FOR STRINGS < "A"
APTR     DC    C'A',AL3(HIVAL)         FOR STRINGS STARTING "A"
BPTR     DC    C'B',AL3(HIVAL)         FOR STRINGS STARTING "B"
CPTR     DC    C'C',AL3(HIVAL)         FOR STRINGS STARTING "C"
DPTR     DC    C'D',AL3(HIVAL)         FOR STRINGS STARTING "D"
EPTR     DC    C'E',AL3(HIVAL)         FOR STRINGS STARTING "E"
FPTR     DC    C'F',AL3(HIVAL)         FOR STRINGS STARTING "F"
GPTR     DC    C'G',AL3(HIVAL)         FOR STRINGS STARTING "G"
HPTR     DC    C'H',AL3(HIVAL)         FOR STRINGS STARTING "H"
IPTR     DC    C'I',AL3(HIVAL)         FOR STRINGS STARTING "I"
JPTR     DC    C'J',AL3(HIVAL)         FOR STRINGS STARTING "J"
KPTR     DC    C'K',AL3(HIVAL)         FOR STRINGS STARTING "K"
LPTR     DC    C'L',AL3(HIVAL)         FOR STRINGS STARTING "L"
MPTR     DC    C'M',AL3(HIVAL)         FOR STRINGS STARTING "M"
NPTR     DC    C'N',AL3(HIVAL)         FOR STRINGS STARTING "N"
OPTR     DC    C'O',AL3(HIVAL)         FOR STRINGS STARTING "O"
PPTR     DC    C'P',AL3(HIVAL)         FOR STRINGS STARTING "P"
QPTR     DC    C'Q',AL3(HIVAL)         FOR STRINGS STARTING "Q"
RPTR     DC    C'R',AL3(HIVAL)         FOR STRINGS STARTING "R"
SPTR     DC    C'S',AL3(HIVAL)         FOR STRINGS STARTING "S"
TPTR     DC    C'T',AL3(HIVAL)         FOR STRINGS STARTING "T"
UPTR     DC    C'U',AL3(HIVAL)         FOR STRINGS STARTING "U"
VPTR     DC    C'V',AL3(HIVAL)         FOR STRINGS STARTING "V"
WPTR     DC    C'W',AL3(HIVAL)         FOR STRINGS STARTING "W"
XPTR     DC    C'X',AL3(HIVAL)         FOR STRINGS STARTING "X"
YPTR     DC    C'Y',AL3(HIVAL)         FOR STRINGS STARTING "Y"
ZPTR     DC    C'Z',AL3(HIVAL)         FOR STRINGS STARTING "Z"
HIPTR    DC    C'0',AL3(HIVAL)         FOR STRINGS STARTING > "Z"
LDADEND  DC    A(*)                    END OF TABLE POINTER "A"
*
OPEN     DC    CL9'OINPUT1'            OPEN PARAMETER LIST
READ     DC    C'R'                    READ PARAMETER
*
DIRECTRY DS    0CL11                   DIRECTORY DATA
MEMNAME  DS    CL8                     MEMBER NAME
MEMTTR   DS    XL3                     TTR OF FIRST BLOCK
*
FIND     DS    0CL10                   FIND MEMBER PARAMETER LIST
         DC    C'FN'                   FIND BY NAME
FINDNAM  DS    CL8                     NAME TO BE FOUND
*
MEMREC   DS    CL80                    MEMBER RECORD
*
OUTREC   DS    0CL80                   OUTPUT RECORD
OUTMEM   DC    CL8' '                  MEMBER NAME
         DC    CL1' '
OUTOFSET DS    CL6                     OFFSET FROM START OF MODULE
         DC    CL1' '
OUTIMAG  DC    CL64' '                 IMAGE OF INPUT RECORD
*
JFCAD    DS    0F
         DC    X'87'                   END OF LIST, JFCB ADDR
         DC    AL3(JFCB)               ADDRESS OF JFCB AREA
JFCB     DS    CL176                   JFCB FOR INPUT1
JFCLRECL EQU   JFCB+104,2              LRECL
JFCRECFM EQU   JFCB+100,1              RECFM
JFCDSORG EQU   JFCB+98,1               DSORG
JFCELNM  EQU   JFCB+44,8               MEMBER NAME
*
INPUT1   DCB   DSORG=PO,MACRF=R,DDNAME=INPUT1,EXLST=JFCAD
READER1  DCB   DSORG=PS,MACRF=GM,DDNAME=READER1,                       X
               RECFM=FB,LRECL=80,EODAD=ENDCARDS
OUTPUT1  DCB   DSORG=PS,MACRF=PM,DDNAME=OUTPUT1,                       X
               RECFM=FB,LRECL=80
         LTORG
*
*        TRT SCANNING TABLE TO FIND POSSIBLE STRING
TRTSCH   DC    256X'00'
*
*        STRING TABLE AREA WITH ROOM FOR 500 STRINGS
STRINGS  DS    CL36000
ENDSTRS  DS    CL72
         END
