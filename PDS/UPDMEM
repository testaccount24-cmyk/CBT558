         PRINT NOGEN
         TITLE '***** READ/REWRITE PDS (IN PLACE *****'
**********************************************************************
* PERMITS ACCESS TO A PDS HAVING 80-BYTE LOGICAL RECORDS. CALLER MUST*
* CALL FIRST TO OPEN THE PDS, THEN CALL TO FIND (POSITION TO) THE    *
* DESIRED MEMBER, THEN CALL TO READ 80-BYTE LOGICAL RECORDS FROM THE *
* PDS MEMBER. IF A RECORD IS TO BE UPDATED, THE CALL FOLLOWING THE   *
* READ MUST BE A CALL TO UPDATE, PASSING THE UPDATED RECORD. WHEN END*
* OF MEMBER IS FOUND WHILE READING, THIS ROUTINE RETURNS X'FF' IN THE*
* FIRST POSITION OF THE RECORD AREA.                                 *
*                                                                    *
* TWO PARAMETERS ARE PASSED AT EACH CALL. THE FIRST CONTAINS THE     *
* REQUEST CODE, AND IS FOLLOWED BY ANOTHER FIELD FOR OPEN AND FIND.  *
* THE SECOND PARAMETER IS THE USER'S RECORD AREA IN WHICH THE RECORD *
* IS RETURNED FOR A READ, AND WHICH CONTAINS THE UPDATED RECORD FOR  *
* AN UPDATE CALL.                                                    *
*                                                                    *
* REQUEST CODES AND CALLING CONVENTIONS ARE, WHERE DOTS INDICATE THE *
* INDICATED PARAMETER IS NOT REQUIRED FOR THE CALL:                  *
*                                                                    *
*  REQ   FIELD     RECORD                                            *
*  CODE  AFTER     AREA     DESCRIPTION                              *
*                                                                    *
*   O    DDNAME    ........ OPEN THE FILE USING THE SPECIFIED DDNAME.*
*                           INCLUDE A DD STATEMENT IN THE JCL WITH   *
*                           THIS DDNAME. MUST REFER TO A PDS HAVING  *
*                           LRECL=80.                                *
*   F    TXXX      ........ POSITION TO THE MEMBER WHOSE RELATIVE    *
*                           TRACK AND RECORD (TTR) ARE GIVEN BY THE  *
*                           XXX FIELD FOLLOWING THE FT. THE TTR CAN  *
*                           BE OBTAINED FROM A BLDL OR BY USING THE  *
*                           READDIR SUBROUTINE.                      *
*   F    NCCCCCCCC ........ POSITION TO THE MEMBER WHOSE NAME FOLLOWS*
*                           THE FN. IF THE MEMBER IS NOT FOUND, X'00'*
*                           IS RETURNED IN THE FIRST BYTE OF THE     *
*                           MEMBER NAME FIELD.                       *
*   R    ......    REC AREA READ THE NEXT RECORD IN THE MEMBER. YOU  *
*                           MUST HAVE CALLED TO OPEN THE FILE, AND TO*
*                           POSITION TO THE MEMBER BEFORE CALLING TO *
*                           READ. IF END OF MEMBER IS FOUND, X'FF'   *
*                           WILL BE RETURNED IN THE FIRST BYTE OF THE*
*                           RECORD AREA.                             *
*   U    ......    UPDT REC WRITE THE RECORD IN THE RECORD AREA OVER *
*                           THE LAST RECORD READ FROM THE PDS. THE   *
*                           READ MUST IMMEDIATELY PRECEDE THE UPDATE *
*                           CALL.                                    *
*   C    ......    ........ CLOSE THE PDS. ALWAYS DO THIS TO INSURE  *
*                           THE LAST UPDATE IS WRITTEN.              *
*                                                                    *
* THE SUBROUTINE WILL TRERMINATE ABNORMALLY WITH USER ABEND CODE U201*
* IF AN INVALID REQUEST CODE IS RECEIVED, IF AN F REQUEST CODE IS NOT*
* FOLLOWED BY A 'N' OR 'T', OR IF AN UPDATE CALL IS NOT PRECEDED BY A*
* READ.                                                              *
*                                                                    *
* SEE ALSO THE READDIR AND READMEM SUBROUTINES AND PROGRAMS SUCH AS  *
* JCLSCAN FOR HINTS ON USE.                                          *
*                                                                    *
* AUTHOR R THORNTON JUNE 1988                                        *
*                                                                    *
**********************************************************************
UPDMEM   SVLNK R3
         L     R4,0(R1)                    POINT TO REQUEST CODE
         L     R5,4(R1)                    POINT TO CALLER'S AREA
         CLI   0(R4),C'U'                  UPDATE REQUEST?
         BE    UPDATE                      YES
         CLI   0(R4),C'O'                  NO, OPEN REQUEST?
         BE    OPEN                        YES
         CLI   0(R4),C'F'                  NO, FIND REQUEST?
         BE    FIND                        YES
         CLI   0(R4),C'R'                  NO, READ REQUEST?
         BE    READ                        YES
         CLI   0(R4),C'C'                  NO, CLOSE REQUEST?
         BE    CLOSE                       YES
BADREQ   ABEND 201,DUMP                    INVALID REQUEST CODE
RETURN   L     R13,4(R13)                  POINT TO CALLER'S SAVE
         LM    R14,R12,12(R13)             RESTORE REGS
         SR    R15,R15                     CLEAR RETURN CODE
         BR    R14                         EXIT
**********************************************************************
*        OPEN THE PDS FOR UPDAT AND GET STORAGE FOR A BUFFER         *
**********************************************************************
OPEN     MVC   DCBDDNAM,1(R4)              DCBDDNAM TO DCB
         OPEN  (PDS,UPDAT)                 OPEN THE PDS FOR UPDATE
         LH    R12,DCBBLKSI                PICK UP DCBBLKSI
         CH    R12,BUFRLENG                GOTTEN SIZE SUFFICIENT?
         BNH   RETURN                      YES
         LH    R11,BUFRLENG                PICK UP GOTTEN LENGTH
         LTR   R11,R11                     WAS ANY GOTTEN?
         BZ    GETBUFR                     NO
         FREEMAIN EU,LV=(11),A=BUFRADDR    FREE OLD BUFFER AREA
GETBUFR  STH   R12,BUFRLENG                SAVE DCBBLKSI AS BUFFER LENG
         GETMAIN EU,LV=(12),A=BUFRADDR     GET STORAGE FOR BUFFER
         MVC   PDSAREA,BUFRADDR            AREA ADDRESS TO DECB
         B     RETURN                      RETURN TO CALLER
**********************************************************************
*        CLOSE THE PDS                                               *
**********************************************************************
CLOSE    BAL   R9,ENDBLOK                  FINISH UP BLOCK
         CLOSE PDS                         CLOSE THE PDS
         B     RETURN                      RETURN TO CALLER
**********************************************************************
*        FIND A MEMBER BY NAME OR BY TTR                             *
**********************************************************************
FIND     BAL   R9,ENDBLOK                  FINISH UP BLOCK
         SR    R0,R0                       SET REMAINING
         STH   R0,REMBYTS                     LENGTH TO ZERO
         CLI   1(R4),C'N'                  FIND BY NAME?
         BE    NAMEFIND                    YES
         CLI   1(R4),C'T'                  NO, FIND BY TTR?
         BNE   BADREQ                      NO, BAD REQUEST CODE
TTRFIND  MVC   TTR(3),2(R4)                YES, MOVE REQUESTED TTR
         FIND  PDS,TTR,C                   POSITION TO THE TTR
         B     RETURN                      RETURN TO CALLER
NAMEFIND MVC   MEMBNAME(8),2(R4)           MOVE REQUESTED MEMBER NAME
         FIND  PDS,MEMBNAME,D              FIND MEMBER BY NAME
         LTR   R15,R15                     MEMBER FOUND?
         BZ    RETURN                      YES, RETURN TO CALLER
         MVI   2(R4),X'00'                 NO, INDICATE ERROR
         B     RETURN                      AND RETURN TO CALLER
**********************************************************************
*        READ CURRENT BLOCK FROM PDS                                 *
**********************************************************************
READ     MVI   LASTREQ,C'R'                SAVE REQUEST CODE USED
         LH    R12,REMBYTS                 GET LENGTH REMAINING
         CH    R12,H80                     DEDUCT 80 BYTES
         BNL   SAMEBLOK                    CONTINUE IF MORE IN BLOCK
         BAL   R9,ENDBLOK                  FINISH UP BLOCK
         L     R12,BUFRADDR                POINT TO BUFFER AREA
         READ  PDSDECB,SF,MF=E             READ A BLOCK FROM PDS
         CHECK PDSDECB                     CHECK RESULT
         L     R12,DCBIOBA                 POINT TO IOB PREFIX
         MVC   REMBYTS(2),22(R12)          SAVE CSW RESIDUAL COUNT
         LH    R12,DCBBLKSI                GET MAX BLKSIZE
         SH    R12,REMBYTS                 DEDUCT RESIDUAL COUNT
         STH   R12,REMBYTS                 SAVE ACTUAL BLOCK SIZE
         MVC   CURRADDR,BUFRADDR           INITIALIZE CURRENT ADDRESS
SAMEBLOK LH    R12,REMBYTS                 GET BYTES LEFT IN BLOCK
         SH    R12,H80                     DEDUCT 80
         STH   R12,REMBYTS                 UPDATE REMAINING BYTE COUNT
         L     R12,CURRADDR                POINT TO CURRENT RECORD
         MVC   0(80,R5),0(R12)             MOVE RECORD TO USER AREA
         AH    R12,H80                     STEP PAST THIS RECORD
         ST    R12,CURRADDR                SAVE NEXT RECORD ADDRESS
         B     RETURN                      RETURN TO CALLER
**********************************************************************
*        UPDATE CURRENT PDS BLOCK IN MEMORY                          *
**********************************************************************
UPDATE   CLI   LASTREQ,C'R'                LAST REQUEST WAS READ?
         BNE   BADREQ                      NO, ERROR
         MVI   LASTREQ,X'00'               YES, RESET LAST REQUEST
         MVI   UPDINDIC,X'01'              INDICATE BLOCK UPDATED
         L     R12,CURRADDR                POINT TO CURRENT RECORD
         SH    R12,H80                     BACK UP TO PREVIOUS REC
         MVC   0(80,R12),0(R5)             UPDATE THE RECORD
         B     RETURN                      RETURN TO CALLER
**********************************************************************
*        IF CURRENT BLOCK WAS UPDATED, REWRITE IT                    *
**********************************************************************
ENDBLOK  CLI   UPDINDIC,X'00'              WAS BLOCK UPDATED?
         BCR   8,R9                        NO, EXIT
         WRITE PDSDECB,SF,MF=E             YES, REWRITE THIS BLOCK
         CHECK PDSDECB                     AWAIT COMPLETION
         MVI   UPDINDIC,X'00'              CLEAR UPDATE INDICATOR
         BR    R9                          EXIT
**********************************************************************
*        END OF FILE ON PDS, TELL CALLER                             *
**********************************************************************
EOF      MVI   0(R5),X'FF'                 INDICATE EOF TO CALLER
         B     RETURN                      RETURN TO CALLER
**********************************************************************
*        DATA AND FILE AREAS                                         *
**********************************************************************
LASTREQ  DC    X'00'                       LAST REQUEST CODE
UPDINDIC DC    X'00'                       01=BLOCK UPDATED
         READ  PDSDECB,SF,PDS,BUFRADDR,'S',MF=L DECB FOR PDS
PDSAREA  EQU   PDSDECB+12,4                ADDRESS OF BLOCK
BUFRLENG DC    F'0'                        BUFFER LENGTH
BUFRADDR DC    F'0'                        BUFFER ADDRESS
REMBYTS  DC    H'0'                        BYTES LEFT IN BUFFER
H80      DC    H'0080'                     CONSTANT 80 (LRECL)
CURRADDR DC    F'0'                        CURRENT RECORD IN BUFFER
TTR      DC    F'0'                        TTR ADDRESS FOR POINT
MEMBNAME DC    XL8'00'                     MEMBER NAME FOR FIND
PDS      DCB   DSORG=PO,EODAD=EOF,DDNAME=PDS,MACRF=(R)
DCBDDNAM EQU   PDS+40,8
DCBBLKSI EQU   PDS+62,2
DCBIOBA  EQU   PDS+68,4
         END
