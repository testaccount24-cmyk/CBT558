   TITLE  '*** READLMOD: IEWBIND SUBROUTINE ***'
READLMOD CSECT
READLMOD AMODE 31
READLMOD RMODE 24
***********************************************************************
*  SUBROUTINE USED TO RETURN LOAD MODULE INFORMATION TO THE CALLER.   *
*  THE IEWBUFF AND IEWBIND MACROS ARE USED TO OBTAIN THE DATA. ON     *
*  RETURN, A POINTER TO THE DATA BUFFER FROM IEWBIND IS PASSED TO THE *
*  CALLER.                                                            *
*                                                                     *
*  CALLER PASSES A PARAMETER AREA THAT CONTAINS INFORMATION ABOUT THE *
*  REQUESTED DATA, AND SEVERAL DATA FIELDS THAT WILL RECEIVE DATA     *
*  FROM THIS SUBROUTINE ON RETURN. FOR DETAILED INFORMATION ON THE    *
*  IEWBIND AND IEWBUFF MACROS SEE THE IBM MANUAL PROGRAM MANAGEMENT   *
*  SECTION ON THE API INTERFACE.                                      *
*                                                                     *
*  CALLER PASSED PARAMETER AREA FORMAT:                               *
*       PARMAREA DS    0F      READLMOD PARMS                         *
*       PRMDDNAM DS    CL8     DDNAME FOR LOADLIB CONTAINING MEMBER   *
*       PRMEMBER DS    CL8     MEMBER NAME                            *
*       PRMCSECT DS    CL8     CSECT NAME                             *
*       PRMREQST DS    CL8     NAME OF DATA TO BE RETRIEVED: ESD, RLD,*
*       *                         TEXT, SYM, IDRU, IDRL, IDRZ, IDRB,  *
*       *                         NAME, OR MAP                        *
*       PRMCURSR DS    F       CURSOR VALUE. CALLER SETS THIS TO ZERO *
*       *                      BEFORE A FIRST CALL FOR A SET OF DATA, *
*       *                      THEN LEAVES IT AS-IS WHEN RETURNING FOR*
*       *                      ADDITIONAL DATA UNTIL IT HAS ALL BEEN  *
*       *                      RETURNED. CURRENT VALUE IS RETURNED BY *
*       *                      THIS SUBROUTINE AFTER EACH CALL.       *
*       PRMRETCD DS    F       RETURN CODE FROM IEWBIND (S/B ZERO)    *
*       PRMRSNCD DS    F       REASON CODE FROM IEWBIND (ZERO MEANS   *
*       *                      MORE DATA OF THIS TYPE IS AVAILABLE AND*
*       *                      WILL BE RETURNED IN SUBSEQUENT CALLS.  *
*       *                      4 MEANS THE DATA IN THE BUFFER IS ALL  *
*       *                      THAT IS AVAILABLE OF THE REQUESTED TYPE*
*       PRMCOUNT DS    F       NUMBER ELEMENTS AVAILABLE IN THE BUFFER*
*       PRMBUFAD DS    A       ADDRESS OF THE DATA BUFFER HEADER. THE *
*       *                      HEADER IS 32 BYTES LONG, FOLLOWED BY   *
*       *                      THE DATA ELEMENTS.                     *
*       PRMERROR DS    CL1     ERROR INDICATOR ON RETURN:             *
*       PRMOK    EQU   C' '        SUCCESSFUL READLMOD CALL           *
*       PRMPRMER EQU   C'P'        PARAMETER ERROR                    *
*       PRMACERR EQU   C'E'        IEWBIND MACRO ERROR OCCURRED       *
*                                                                     *
* AUTHOR R THORNTON FEB 2002                                          *
***********************************************************************
***********************************************************************
*        INIT1:                                                       *
*   SET UP BASE REGISTERS, CHAIN SAVE AREAS.                          *
***********************************************************************
         USING READLMOD,R3
INIT1    STM   R14,R12,12(R13)    SAVE CALLER'S REGS
         LR    R3,R15             SET UP BASE FIRST BASE REG
         LA    R15,MYSAVE         POINT TO MY REGISTER SAVE AREA
         ST    R15,8(R13)         SET LSA IN CALLER'S SAVE
         ST    R13,4(R15)         SET HSA IN MY SAVE AREA
         LR    R13,R15            SET UP SAVE AREA POINTER
         B     INIT2              BRANCH AROUND CONSTANTS
         DC    CL8'READLMOD'      PROGRAM NAME IDENTIFIER
         DC    CL8'&SYSDATE'      ASSEMBLY DATE
         DC    CL8'&SYSTIME'      ASSEMBLY TIME
MYSAVE   DS    18F                MY REGISTER SAVE AREA
*********************************************************************
*        INIT2:ON: VALIDATE CALLER'S PARAMETERS. OBTAIN BUFFER      *
*  VALIDATE CALLER'S PARAMETERS. IF FIRST TIME HERE, INITIALIZE THE *
*  IEWBIND API INTERFACE ENVIRONMENT.                               *
*********************************************************************
INIT2    LR    R6,R1              COPY PARMLIST POINTER
         L     R6,0(R6)           POINT TO PARMLIST
         USING PARMAREA,R6
         MVI   PRMERROR,C' '      RESET PARAMETER ERROR BYTE
         LA    R1,VALREQ          POINT TO VALID REQUEST TABLE
I2CKEND  CLI   0(R1),X'FF'        END OF TABLE?
         BNE   I2CKFND            NO
         MVI   PRMERROR,C'P'      YES, INDICATE PARAMETER ERROR
         B     RETURN             AND EXIT TO CALLER
I2CKFND  CLC   PRMREQST,4(R1)     FOUND THE ENTRY?
         BE    I2FOUND            YES
         LA    R1,16(R1)          NO, ADVANCE TO NEXT TABLE ENTRY
         B     I2CKEND            CONTINUE SEARCH
I2FOUND  MVC   HOLDREQ,0(R1)      SAVE THE REQUEST ENTRY
*********************************************************************
*        INIT3:                                                     *
*  IF FIRST TIME, INITIALIZE THE IEWBIND API INTERFACE ENVIRONMENT  *
*********************************************************************
INIT3    CLI   FIRSTIME,1         FIRST TIME HERE?
         BNE   INIT4              NO
         MVI   FIRSTIME,0         RESET FIRST TIME SWITCH
         STORAGE OBTAIN,LENGTH=32768,ADDR=(R11),SP=0 GET BUFFER STORAGE
         ST    R11,BUFFERAD       SAVE ADDRESS OF BUFFER STORAGE
         XC    DTOKEN,DTOKEN      CLEAR DIALOG TOKEN
         IEWBIND FUNC=STARTD,     INITIATE THE BINDER DIALOG           C    C
               RETCODE=RETCODE,       RETURN CODE                      C    C
               RSNCODE=RSNCODE,       REASON CODE                      C    C
               DIALOG=DTOKEN,         DIALOG TOKEN                     C    C
               VERSION=3              USE VERSION 3 BUFFERS
         CLC   RETCODE,ZERO       CHECK THE RETURN CODE
         BE    I3CRWKMD           CONTINUE IF SUCCESSFUL
         WTO   'UNABLE TO START IEWBIND DIALOG, ABENDING',ROUTCDE=11
ABEND111 ABEND 111,DUMP           TERMINATE IN ERROR
I3CRWKMD XC    WKTOKEN,WKTOKEN    CLEAR WORKMOD TOKEN
         IEWBIND FUNC=CREATEW,    CREATE THE WORKMOD                   C    C
               RETCODE=RETCODE,      RETURN CODE                       C    C
               RSNCODE=RSNCODE,      REASON CODE                       C    C
               WORKMOD=WKTOKEN,      WORKMOD TOKEN                     C    C
               DIALOG=DTOKEN,        DIALOG TOKEN                      C    C
               INTENT=ACCESS,        WHAT WE NEED IT FOR               C    C
               VERSION=3             USE VERSION 3 BUFFERS
         CLC   RETCODE,ZERO       CHECK THE RETURN CODE
         BE    INIT4              CONTINUE IF SUCCESSFUL
         WTO   'UNABLE TO CREATE A WORKMOD, ABENDING',ROUTCDE=11
ABEND222 ABEND 222,DUMP           TERMINATE IN ERROR
***********************************************************************
*        INIT4:                                                       *
*    DETERMINE WHETHER AN INCLUDE IS NEEDED, OR IF IT HAS ALREADY     *
*    BEEN DONE. IF MEMBER NAME IS UNCHANGED, NO INCLUDE IS NEEDED,    *
*    OTHERWISE, EXTRACT THE MEMBER NAME AND ISSUE AN INCLUDE.         *
***********************************************************************
INIT4    MVI   DDNMEMCH,0         CLEAR SWITCH
         CLC   PRMEMBER,MEMBER    SAME MEMBER NAME BEING PROCESSED?
         BE    INIT4A             YES, CONTINUE
         MVI   DDNMEMCH,1         INDICATE MEMBER NAME CHANGED
         MVC   MEMBER,PRMEMBER    SAVE MEMBER NAME
         LA    R1,8               MAX LENGTH
         LA    R2,MEMBER+7        POINT TO RIGHT-HAND END
I4CKTRL  CLI   0(R2),C' '         TRAILING BLANK?
         BNE   I4ATRHE            NO
         BCTR  R2,0               BACK UP 1 BYTE IN MEMBER NAME
         BCT   R1,I4CKTRL         LOOP
         MVI   PRMERROR,C'P'      NO MEMBER NAME, PARMAMETER ERROR
         B     RETURN             AND EXIT TO CALLER
I4ATRHE  STH   R1,MEMLENG         SAVE MEMBER NAME LENGTH
INIT4A   CLC   PRMDDNAM,DDNAMEC   SAME DDNAME BEING PROCESSED?
         BE    I4INCLUD           YES, CONTINUE
         MVI   DDNMEMCH,1         INDICATE DDNAME CHANGED
         MVC   DDNAMEC,PRMDDNAM   SAVE DDNAME
         LA    R1,8               MAX LENGTH
         LA    R2,DDNAMEC+7       POINT TO RIGHT-HAND END
I4ACKTRL CLI   0(R2),C' '         TRAILING BLANK?
         BNE   I4AATRHE           NO
         BCTR  R2,0               BACK UP 1 BYTE IN DDNAME
         BCT   R1,I4ACKTRL        LOOP
         MVI   PRMERROR,C'P'      NO DDNAME, PARMAMETER ERROR
         B     RETURN             AND EXIT TO CALLER
I4AATRHE STH   R1,DDNLENG         SAVE DDNAME LENGTH
I4INCLUD CLI   DDNMEMCH,0         DDNAME OR MEMBER NAME CHANGED?
         BE    INIT5              NO
         MVI   LASTERR,C'P'       INSURE CURSOR RESET
         IEWBIND FUNC=INCLUDE,    INCLUDE THE MEMBER TO PROCESS        C    C
               RETCODE=RETCODE,      RETURN CODE                       C    C
               RSNCODE=RSNCODE,      REASON CODE                       C    C
               WORKMOD=WKTOKEN,      WORKMOD TOKEN                     C    C
               INTYPE=NAME,          WE'RE SUPPLYING MEMBER NAME       C    C
               DDNAME=DDNAME,        USE DDNAME TO FIND MEMBER         C    C
               MEMBER=MEMNAME,       MEMBER NAME WITH LENGTH           C    C
               VERSION=3 USE VERSION 3 BUFFERS
         CLC   RETCODE,ZERO       CHECK THE RETURN CODE
         BE    INIT5              CONTINUE IF SUCCESSFUL
         WTO   'ERROR INCLUDING REQUESTED MEMBER, ABENDING',ROUTCDE=11
ABEND333 ABEND 333,DUMP           TERMINATE IN ERROR
***********************************************************************
*        INIT5:                                                       *
*    DETERMINE WHETHER BUFFER SHOULD BE INITIALIZED. IF SO, ISSUE     *
*    AN INITBUFF TO INITIALIZE IT.                                    *
***********************************************************************
INIT5    CLI   LASTERR,C' '       LAST CALL IN ERROR?
         BNE   INITBUFF           YES
         CLC   LASTRET,ZERO       LAST CALL LEFT MORE DATA?
         BNE   INITBUFF           NO
         CLC   LASTREQ,PRMREQST   LAST CALL FOR SAME DATA?
         BE    INIT6              YES
INITBUFF XC    CURSOR,CURSOR      RESET CURSOR FOR THIS CALL
         L     R11,BUFFERAD       POINT TO THE BUFFER
         L     R15,HOLDINIT       POINT TO INITBUFF FOR REQUESTED CLASS
         BR    R15                GO TO APPROPRIATE BUFFER INIT.
INITESD  IEWBUFF FUNC=INITBUF,TYPE=ESD INITIALIZE ESD BUFFER
         B     INIT6              GO READ REQUESTED DATA
INITRLD  IEWBUFF FUNC=INITBUF,TYPE=RLD INITIALIZE RLD BUFFER
         B     INIT6              GO READ REQUESTED DATA
INITTEXT IEWBUFF FUNC=INITBUF,TYPE=TEXT INITIALIZE TEXT BUFFER
         B     INIT6              GO READ REQUESTED DATA
INITSYM  IEWBUFF FUNC=INITBUF,TYPE=SYM  INITIALIZE SYM  BUFFER
         B     INIT6              GO READ REQUESTED DATA
INITIDRU IEWBUFF FUNC=INITBUF,TYPE=IDRU INITIALIZE IDRU BUFFER
         B     INIT6              GO READ REQUESTED DATA
INITIDRL IEWBUFF FUNC=INITBUF,TYPE=IDRL INITIALIZE IDRL BUFFER
         B     INIT6              GO READ REQUESTED DATA
INITIDRZ IEWBUFF FUNC=INITBUF,TYPE=IDRZ INITIALIZE IDRZ BUFFER
         B     INIT6              GO READ REQUESTED DATA
INITIDRB IEWBUFF FUNC=INITBUF,TYPE=IDRB INITIALIZE IDRB BUFFER
         B     INIT6              GO READ REQUESTED DATA
INITNAME IEWBUFF FUNC=INITBUF,TYPE=NAME INITIALIZE NAME BUFFER
         B     INIT6              GO READ REQUESTED DATA
INITMAP  IEWBUFF FUNC=INITBUF,TYPE=MAP  INITIALIZE MAP  BUFFER
***********************************************************************
*        INIT6:                                                       *
*    IF CSECT NAME HAS CHANGED, EXTRACT IT FROM CALLER'S PARAMETERS.  *
***********************************************************************
INIT6    CLC   PRMCSECT,CSECT     SAME CSECT NAME BEING PROCESSED?
         BE    MAINLINE           YES, CONTINUE
         MVC   CSECT,PRMCSECT     SAVE CSECT NAME
         LA    R1,8               MAX LENGTH
         LA    R2,CSECT+7         POINT TO RIGHT-HAND END
I6CKTRL  CLI   0(R2),C' '         TRAILING BLANK?
         BNE   I6ATRHE            NO
         BCTR  R2,0               BACK UP 1 BYTE IN CSECT NAME
         BCT   R1,I6CKTRL         LOOP
         MVI   PRMERROR,C'P'      NO CSECT NAME, PARMAMETER ERROR
         B     RETURN             AND EXIT TO CALLER
I6ATRHE  STH   R1,CSLENG          SAVE CSECT NAME LENGTH
*********************************************************************
*        MAINLINE:                                                  *
*  ISSUE THE IEWBIND FUNC=GETD MACRO TO READ REQUESTED DATA         *
*********************************************************************
MAINLINE MVI   PRMERROR,C' '      CLEAR ERROR INDICATOR
         L     R11,BUFFERAD       POINT TO BUFFER HEADER
         LA    R12,32(R11)        POINT TO FIRST OCCURRING ELEMENT
         CLC   PRMREQST,=CL8'NAME' IS THIS A NAME REQUEST?
         BE    DOGETN             YES
*        CLC   PRMREQST,=CL8'ESD'  IS THIS AN ESD REQUEST?
*        BE    DOGETE             YES
DOGETD   IEWBIND FUNC=GETD,       READ SPECIFIED DATA FOR CSECT NAME   C    C
               RETCODE=RETCODE,       RETURN CODE                      C    C
               RSNCODE=RSNCODE,       REASON CODE                      C    C
               WORKMOD=WKTOKEN,       WORKMOD TOKEN                    C    C
               CLASS=HOLDREQ,         IDENTIFY DATA TO BE READ         C    C
               SECTION=CSNAME,        CSECT NAME WITH LENGTH           C    C
               AREA=0(R11),           READ DATA INTO BUFFER            C    C
               CURSOR=CURSOR,         CURSOR (0=FIRST CALL)            C    C
               COUNT=COUNT,           NUMBER ESD ITEMS READ INTO BUFFERC    C
               VERSION=3              BUFFER VERSION USED
         B     RETURN             GO BACK TO CALLER
DOGETN   IEWBIND FUNC=GETN,       READ CSECT (SECTION) NAMES IN MEMBER C    C
               RETCODE=RETCODE,       RETURN CODE                      C    C
               RSNCODE=RSNCODE,       REASON CODE                      C    C
               WORKMOD=WKTOKEN,       WORKMOD TOKEN                    C    C
               AREA=0(R11),           READ DATA INTO BUFFER            C    C
               CURSOR=CURSOR,         CURSOR (0=FIRST CALL)            C    C
               COUNT=COUNT,           NUMBER NAMES GOTTEN IN BUFFER    C    C
               TCOUNT=TCOUNT,         TOTAL NBR NAMES IN MEMBER        C    C
               NTYPE=SECTION,         RETURN SECTION (NOT CLASS) NAMES C    C
               VERSION=3              USE VERSION 3 BUFFERS
         B     RETURN             GO BACK TO CALLER
DOGETE   IEWBIND FUNC=GETE,       READ ESD DATA FOR CSECT NAME         C    C
               RETCODE=RETCODE,       RETURN CODE                      C    C
               RSNCODE=RSNCODE,       REASON CODE                      C    C
               WORKMOD=WKTOKEN,       WORKMOD TOKEN                    C    C
               SECTION=CSNAME,        CSECT NAME WITH LENGTH           C    C
               CLASS=HOLDREQ,         IDENTIFY DATA TO BE READ         C    C
               AREA=0(R11),           READ DATA INTO BUFFER            C    C
               CURSOR=CURSOR,         CURSOR (0=FIRST CALL)            C    C
               COUNT=COUNT,           NUMBER ESD ITEMS READ INTO BUFFERC    C
               VERSION=3              BUFFER VERSION USED
         B     RETURN             GO BACK TO CALLER
***********************************************************************
*        RETURN:                                                      *
*  RETURN PROCESSING. RESTORE CALLER'S REGS, AND RETURN TO CALLER.    *
***********************************************************************
RETURN   CLI   PRMERROR,C' '      ANY ERROR FOUND?
         BNE   RETSAVE            YES
         MVC   PRMCURSR,CURSOR    SEND BACK IEWBIND CURSOR VALUE
         MVC   PRMRETCD,RETCODE   SEND BACK IEWBIND RETURN CODE
         MVC   PRMRSNCD,RSNCODE   SEND BACK IEWBIND REASON CODE
         MVC   PRMCOUNT,COUNT     SEND BACK IEWBIND COUNT VALUE
         MVC   PRMBUFAD,BUFFERAD  SEND BACK BUFFER ADDRESS
         CLC   PRMRETCD,FOUR      ANY IEWBIND ERROR?
         BNH   RETSAVE            NO
         MVI   PRMERROR,C'E'      INDICATE IEWBIND ERROR
RETSAVE  MVC   LASTERR,PRMERROR   SAVE ERROR INDICATOR
         MVC   LASTRET,RETCODE    SAVE RETURN CODE
         MVC   LASTREQ,PRMREQST   SAVE LAST REQUEST CODE
GOBACK   L     R13,4(R13)         POINT TO CALLER'S SAVE AREA
         L     R14,12(R13)        GET RETURN ADDRESS
         L     R15,R15RC          GET PROGRAM RETURN CODE
         LM    R0,R12,20(R13)     RESTORE CALLER'S REGS 0-12
         BR    R14                RETURN TO CALLER
***********************************************************************
*        WORKING STORAGE AREAS                                        *
***********************************************************************
DTOKEN   DC    D'0'               DIALOG TOKEN
WKTOKEN  DC    D'0'               WORKMOD TOKEN
RETCODE  DC    F'0'               IEWBIND RETURN CODE
RSNCODE  DC    F'0'               IEWBIND REASON CODE
CURSOR   DC    F'0'               CURSOR VALUE FROM IEWBIND
COUNT    DC    F'0'               COUNT FROM IEWBIND CALLS
TCOUNT   DC    F'0'               TOTAL COUNT FROM GETN
R15RC    DC    F'0'               END OF JOB RETURN CODE
ZERO     DC    F'0'               CONSTANT ZERO
FOUR     DC    F'4'               CONSTANT ZERO
BUFFERAD DC    A(0)               ADDRESS OF BUFFER FOR IEWBUFF
DDNMEMCH DC    X'00'              CHANGED SWITCH
FIRSTIME DC    X'01'              FIRST TIME SWITCH
BLANKS   DC    CL133' '           CONSTANT BLANKS
*
LASTERR  DC    C'P'               ERROR INDICATOR FROM LAST CALL
LASTRET  DC    XL4'FF'            RETURN CODE FROM LAST CALL
LASTREQ  DC    CL8'NONE'          DATA REQUEST FROM LAST CALL
*
         DS    0F
HOLDREQ  DS    0CL16              SAVE AREA FOR VALREQ ENTRY
HOLDLENG DC    H'0'                  LENGTH OF CLASS NAME
HOLDCLAS DC    CL10' '               REQUESTED CLASS NAME
HOLDINIT DC    A(0)                  INITBUFF ADDRESS
*
DDNAME   DS    0H                 INCLUDE LIBRARY DDNAME AREA
DDNLENG  DC    H'0'                  INCLUDE LIBRARY NAME LENGTH
DDNAMEC  DC    CL8' '                INCLUDE LIBRARY DDNAME
*
MEMNAME  DS    0H                 MODULE (MEMBER) NAME
MEMLENG  DC    H'0'                 MEMBER NAME LENGTH
MEMBER   DC    CL8' '               MEMBER NAME TEXT
*
CSNAME   DS    0H                 CSECT NAME
CSLENG   DC    H'0'                 CSECT NAME LENGTH
CSECT    DC    CL8' '               CSECT NAME TEXT
*
VALREQ   DS    0F                 TABLE OF VALID REQUESTS
         DC    H'5',CL10'B_ESD     ',A(INITESD)
         DC    H'5',CL10'B_RLD     ',A(INITRLD)
         DC    H'6',CL10'B_TEXT    ',A(INITTEXT)
         DC    H'5',CL10'B_SYM     ',A(INITSYM)
         DC    H'6',CL10'B_IDRU    ',A(INITIDRU)
         DC    H'6',CL10'B_IDRL    ',A(INITIDRL)
         DC    H'6',CL10'B_IDRZ    ',A(INITIDRZ)
         DC    H'6',CL10'B_IDRB    ',A(INITIDRB)
         DC    H'6',CL10'B_NAME    ',A(INITNAME)
         DC    H'5',CL10'B_MAP     ',A(INITMAP)
         DC    X'FFFF'
*
***********************************************************************
* NAMES AND ESD BUFFER MAPPINGS. NOTE THAT THE BUFFER VERSION MUST    *
* MATCH THE VERSION OF THE GETN AND THE GETD BINDER API'S. THE MAPBUF *
* FUNCTION OF THE IEWBUFF MACRO PROVIDES DSECT MAPS FOR BOTH THE ESD  *
* AND THE NAMES BUFFERS. REGISTERS 6 AND 7 ARE DEDICATED AS BASE REG- *
* ISTERS FOR THE ESD BUFFER HEADER AND ENTRIES, RESPECTIVELY. SIMIL-  *
* ARLY, REGISTERS 8 AND 9 ARE DEDICATED TO THE NAMES BUFFER.          *
* NOTE THAT YOU MUST CODE THE IEWBUFF MACRO WITHIN A CSECT. ALSO NOTE *
* THAT THE VERSION PARAMETER IN IEWBUFF MUST MATCH THE VALUE OF THE   *
* VERSION PARAMETER IN THE GETN AND GETD BINDER API'S.                *
***********************************************************************
         IEWBUFF FUNC=MAPBUF,TYPE=ESD,BYTES=32768,VERSION=3,           C    C
               HEADREG=R11,ENTRYREG=R12
         IEWBUFF FUNC=MAPBUF,TYPE=RLD,BYTES=32768,VERSION=3,           C    C
               HEADREG=R11,ENTRYREG=R12
         IEWBUFF FUNC=MAPBUF,TYPE=IDRU,BYTES=32768,VERSION=3,          C    C
               HEADREG=R11,ENTRYREG=R12
         IEWBUFF FUNC=MAPBUF,TYPE=IDRL,BYTES=32768,VERSION=3,          C    C
               HEADREG=R11,ENTRYREG=R12
         IEWBUFF FUNC=MAPBUF,TYPE=IDRZ,BYTES=32768,VERSION=3,          C    C
               HEADREG=R11,ENTRYREG=R12
         IEWBUFF FUNC=MAPBUF,TYPE=IDRB,BYTES=32768,VERSION=3,          C    C
               HEADREG=R11,ENTRYREG=R12
         IEWBUFF FUNC=MAPBUF,TYPE=SYM,BYTES=32768,VERSION=3,           C    C
               HEADREG=R11,ENTRYREG=R12
         IEWBUFF FUNC=MAPBUF,TYPE=TEXT,BYTES=32768,VERSION=3,          C    C
               HEADREG=R11,ENTRYREG=R12
         IEWBUFF FUNC=MAPBUF,TYPE=NAME,BYTES=32768,VERSION=3,          C    C
               HEADREG=R11,ENTRYREG=R12
         IEWBUFF FUNC=MAPBUF,TYPE=MAP,BYTES=32768,VERSION=3,           C    C
               HEADREG=R11,ENTRYREG=R12
         LTORG
***********************************************************************
*  PARAMETER AREA PASSED BY CALLER                                    *
***********************************************************************
PARMAREA DSECT ,       READLMOD PARMAREA SENT BY CALLER
PRMDDNAM DS    CL8     DDNAME FOR LOADLIB CONTAINING MEMBER
PRMEMBER DS    CL8     MEMBER NAME
PRMCSECT DS    CL8     CSECT NAME
PRMREQST DS    CL8     NAME OF DATA TO BE RETRIEVED: ESD, RLD,
*                           TEXT, SYM, IDRU, IDRL, IDRZ, IDRB,
*                           NAME, OR MAP
PRMCURSR DS    F       CURSOR VALUE. CALLER SETS THIS TO ZERO
*                        BEFORE A FIRST CALL FOR A SET OF DATA,
*                        THEN LEAVES IT AS-IS WHEN RETURNING FOR
*                        ADDITIONAL DATA UNTIL IT HAS ALL BEEN
*                        RETURNED. CURRENT VALUE IS RETURNED BY
*                        THIS SUBROUTINE AFTER EACH CALL.
PRMRETCD DS    F       RETURN CODE FROM IEWBIND (S/B ZERO)
PRMRSNCD DS    F       REASON CODE FROM IEWBIND (ZERO MEANS
*                        MORE DATA OF THIS TYPE IS AVAILABLE AND
*                        WILL BE RETURNED IN SUBSEQUENT CALLS.
*                        4 MEANS THE DATA IN THE BUFFER IS ALL
*                        THAT IS AVAILABLE OF THE REQUESTED TYPE
PRMCOUNT DS    F       NUMBER ELEMENTS AVAILABLE IN THE BUFFER
PRMBUFAD DS    A       ADDRESS OF THE DATA BUFFER HEADER. THE
*                        HEADER IS 32 BYTES LONG, FOLLOWED BY
*                        THE DATA ELEMENTS.
PRMERROR DS    CL1     ERROR INDICATOR ON RETURN:
PRMOK    EQU   C' '      SUCCESSFUL READLMOD CALL
PRMPRMER EQU   C'P'      PARAMETER ERROR
PRMACERR EQU   C'E'      IEWBIND MACRO ERROR OCCURRED
READLMOD CSECT
***********************************************************************
* REGISTER EQUATES                                                    *
***********************************************************************
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
