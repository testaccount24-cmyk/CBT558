         TITLE '*** PDSREAD: EXAMINE A PDS AND RETURN DATA ***'
PDSREAD CSECT
PDSREAD AMODE 24
PDSREAD RMODE 24
***********************************************************************
* THIS SUBROUTINE READS A PDS DIRECTORY AND THE BODY OF MEMBERS AND   *
* RETURNS THE ADDRESS OF A STORAGE AREA GOTTEN IN SUBPOOL 1 THAT      *
* CONTAINS STATISTICS AND TABULAR MEMBER DATA. STATISTICS INCLUDE     *
* THE NUMBER OF DIRECTORY ENTRIES, NUMBER OF DIRECTORY ENTRIES USED,  *
* NUMBER OF ACTIVE MEMBERS IN THE DIRECTORY, AND NUMBER OF DELETED    *
* MEMBERS PRESENT IN THE BODY OF THE PDS. TABLUAR DATA INCLUDES THE   *
* MEMBER NAME (BLANK IF DELETED MEMBER), TTR OF THE MEMBER, AND AN    *
* INDICATOR (A=ALIAS, D=DELETED MEMBER, BLANK=ACTIVE MEMBER).         *
*                                                                     *
* ON ENTRY, THE CALLER SUPPLIES A FIELD CONTAINING THE DDNAME FOR THE *
* PDS TO BE ANALYZED, AND A FULLWORD AREA TO CONTAIN THE ADDRESS OF   *
* THE DATA AREA RETURNED. IT IS THE RESPONSIBILITY OF THE CALLER TO   *
* FREE THE RETURNED DATA AREA, IF NECESSARY.                          *
*                                                                     *
* STORAGE SUBPOOL 111 IS USED FOR BLOCKS READ FROM THE PDS DURING     *
* PROCESSING, AND ALSO FOR THE TTR-NAME-ALIAS TABLE THAT IS BUILT     *
* DURING PROCESSING. SUBPOOL 111 STORAGE IS FREED AFTER PROCESSING    *
* IS COMPLETE, SO THE CALLER SHOULD NOT USE THIS SUBPOOL UNLESS ITS   *
* LOSS IS ACCEPTABLE FOLLOWING A CALL TO THIS SUBROUTINE.             *
*                                                                     *
* AUTHOR R THORNTON FEB 2000                                          *
***********************************************************************
         USING PDSREAD,R3             ESTABLISH ADDRESSABILITY
         STM   R14,R12,12(R13)        SAVE CALLING PROG REGISTERS
         LR    R3,R15                 INITIALIZE BASE REG
         ST    R13,SAVE+4             SAVE RETURN POINTER
         LA    R15,SAVE               GET SAVE AREA ADDR
         ST    R15,8(R13)             STORE FORWARD POINTER
         LR    R13,R15                INITIALIZE SAVE AREA POINTER
         B     INIT                   GO INITIALIZE FOR PROCESSING
SAVE     DS    18F
**********************************************************************
* OPEN FILES, GET STORAGE, INITIALIZE DATA FIELDS, GET PARM DATA     *
**********************************************************************
INIT     L     R1,4(R13)              GET PARM FIELD ADDR
         L     R1,24(R1)              GET CALLER'S R1 PARM POINTER
         MVC   USERADDR,4(R1)         SAVE POINTER TO CALLER'S AREA
         L     R1,0(R1)               PICK UP DDNAME ADDRESS
         MVC   INPDS+40(8),0(R1)      MOVE DDNAME TO INPDS
         MVC   PDSDIR+40(8),0(R1)     MOVE DDNAME TO PDSDIR
         OPEN  (INPDS,,PDSDIR)        OPEN FILE FOR BODY, DIRECTORY
         TM    PDSDIR+48,X'10'        OPEN WAS SUCCESSFUL?
         BZ    BADPDSS                NO, ERROR
         TM    INPDS+48,X'10'         OPEN WAS SUCCESSFUL?
         BZ    BADPDSO                NO, ERROR
         TM    INPDS+26,X'02'         DSORG=PO?
         BZ    BADPDSD                NO, ERROR
         LH    R12,INPDS+62           GET BLOCKSIZE
         STORAGE OBTAIN,LENGTH=(R12),SP=111 GET STORAGE FOR BLOCK
         ST    R1,BLKADDR             SAVE BLOCK STORAGE POINTER
         LA    R11,L'TBLENTRY         COMPUTE TABLE
         MH    R11,H50                   SEGMENT SIZE
         STORAGE OBTAIN,LENGTH=(R11),SP=111 GET TABLE SEGMENT STORAGE
         ST    R1,TTRNAME1            SAVE POINTER TO 1ST TTRNAME SEG
         ST    R1,CURRSEG             SAVE POINTER TO CURR TBL SEGMENT
         ST    R1,CURRNTRY            SAVE SEGMENT POINTER
         LA    R11,0(R1,R11)          POINT PAST END OF SEGMENT
         ST    R11,CURRLAST           SAVE SEGMENT END ADDRESS
         MVI   0(R1),X'00'            INITIALIZE TTRNAME TABLE
         MVI   EOFLDIR,C'N'           CLEAR SWITCH
         MVI   EOFPDIR,C'N'           CLEAR SWITCH
         MVI   EOFMEM,C'N'            CLEAR SWITCH
**********************************************************************
* MAINLINE EXECUTIVE ROUTINE. FIRST, READDIR IS PERFORMED TO PROCESS *
* THE DIRECTORY AND BUILD A TABLE OF MEMBER NAMES AND THEIR TTR'S.   *
* NEXT, THEN READBODY ROUTINE IS PERFORMED TO PROCESS THE BODY OF THE*
* PDS. AT END, BUILD THE USER DATA AREA AND PASS ITS ADDRESS TO THE  *
* CALLER.                                                            *
**********************************************************************
MAINLINE BAS   R9,READDIR             READ/PROCESS PDS DIRECTORY
         BAS   R9,READBODY            READ/PROCESS PDS BODY
         B     EOJ                    GO TERMINATE PROCESSING
**********************************************************************
* READ AND PROCESS THE PDS DIRECTORY. PDS DIRECTORY BLOCKS ARE ALL   *
* 256-BYTE DATA RECORDS WITH 8-BYTE KEYS. EACH MEMBER/ALIAS ENTRY    *
* FOUND IN THE DIRECTORY IS PUT INTO THE TTRNAME TABLE WITH ITS TTR. *
* WHEN AN END-OF-FILE IS ENCOUNTERED, DIRECTORY PROCESSING IS        *
* COMPLETE. THE DIRREAD ROUTINE IS USED TO READ DIRECTORY BLOCKS FROM*
* THE INPDS FILE. EACH DIRECTORY BLOCK IS VALIDATED AND SENT TO THE  *
* DIRBLOX ROUTINE FOR ENTRY PROCESSING.                              *
**********************************************************************
READDIR  ST    R9,RD9                 SAVE RETURN ADDRESS
RDDIRNX  BAS   R9,DIRREAD             READ NEXT DIRECTORY BLOCK
         CLI   EOFPDIR,C'Y'           PHYSICAL END OF DIRECTORY?
         BE    RDXIT                  YES, ALL THROUGH
         AP    DIRBLKS,P1             NO, ADD 1 TO DIRECTORY BLOCKS
         CLI   EOFLDIR,C'Y'           LOGICAL END OF DIRECTORY?
         BE    RDDIRNX                YES, GO READ NEXT BLOCK
         CLC   REMBYTES,H256          256-BYTE BLOCK?
         BNE   BADDIRSZ               YES
         L     R12,NEXTRECD           POINT TO BEGINNING OF BLOCK
         LH    R1,0(R12)              PICK UP DATA LENGTH
         LA    R12,2(R12)             POINT TO FIRST DIRECTORY ENTRY
         ST    R12,NEXTRECD           UPDATE NEXT RECORD ADDRESS
         SH    R1,H2                  DEDUCT 10 BYTES FROM DATA LENGTH
         STH   R1,REMBYTES            UPDATE DATA LENGTH REMAINING
         CLC   REMBYTES,H12           AT LEAST 1 DIRECTORY ENTRY?
         BL    BADDIRLN               NO, ERROR LENGTH
         CLC   REMBYTES,H254          VALID LENGTH?
         BH    BADDIRLN               NO
         AP    USDBLKS,P1             YES, ADD 1 TO USED DIRECTORY BLKS
         BAS   R9,DIRBLOX             GO PROCESS THE DIRECTORY BLK
         B     RDDIRNX                GO READ NEXT DIRECTORY BLOCK
RDXIT    L     R9,RD9                 GET RETURN ADDRESS
         BR    R9                     RETURN TO CALLER
**********************************************************************
* EXTRACT AND PROCESS DIRECTORY ENTRIES WITHIN A DIRECTORY BLOCK. ON *
* ENTRY, A DIRECTORY BLOCK HAS BEEN READ, NEXTRECD POINTS TO THE     *
* FIRST ENTRY IN THE BLOCK, AND REMBYTES CONTAINS THE NUMBER OF BYTES*
* LEFT TO PROCESS IN THE BLOCK. WHEN AN ENTRY NAME BEGINS WITH A BYTE*
* > C'Z', IT IS LOGICAL END OF DIRECTORY. THE NAME, TTR, AND ALIAS   *
* INDICATOR ARE EXTRACTED FROM EACH ENTRY AND ARE ADDED TO THE       *
* TTRNAME TABLE. THE ADDTABL ROUTINE IS CALLED TO ADD ENTRIES TO THE *
* TTRNAME TABLE. THE NXTDIRNT IS USED TO LOCATE THE NEXT ENTRY IN    *
* THIS DIRECTORY BLOCK.                                              *
**********************************************************************
DIRBLOX  ST    R9,DB9                 SAVE RETURN ADDRESS
DBNEXT   L     R12,NEXTRECD           POINT TO CURRENT ENTRY
         CLI   0(R12),C'Z'            LOGICAL END OF DIRECTORY?
         BNH   DBGETDTA               NO
         MVI   EOFLDIR,C'Y'           INDICATE LOGICAL END OF DIRECTORY
         B     DBXIT                  AND EXIT
DBGETDTA MVC   ENTNAME,0(R12)         MOVE ENTRY NAME
         MVC   ENTTTR,8(R12)          MOVE ENTRY
         MVI   ENTALIAS,C' '          CLEAR ALIAS INDICATOR
         TM    11(R12),X'80'          THIS AN ALIAS?
         BZ    DBADDTBL               NO
         MVI   ENTALIAS,C'A'          YES, SET ALIAS INDICATOR
DBADDTBL BAS   R9,ADDTABL             ADD ENTRY TO TABLE
         AP    ACTVMEM,P1             ADD 1 TO ACTIVE MEMBERS
         BAS   R9,NXTDIRNT            GET NEXT DIRECTORY ENTRY
         CLC   REMBYTES,H0            ANY MORE ENTRIES IN THE BLOCK?
         BH    DBNEXT                 YES, GO PROCESS NEXT ENTRY
DBXIT    L     R9,DB9                 GET RETURN ADDRESS
         BR    R9                     RETURN TO CALLER
**********************************************************************
* ADDS A NEW ENTRY TO THE TTRNAME TABLE USING DATA IN THE TBLENTRY   *
* FIELD. THE NEXT TABLE ENTRY IS LOCATED, THE DATA IS MOVED TO IT,   *
* AND THE PREVIOUS LAST ENTRY POINTER IS SET TO THIS ENTRY. THE NEXT *
* POINTER FROM THIS NEW ENTRY IS SET TO ZEROES. IF NO MORE SPACE IS  *
* AVAILABLE IN THE CURRENT SEGMENT, A STORAGE OBTAIN IS ISSUED TO    *
* GET ANOTHER SEGMENT, AND THE NEW ENTRY IS MOVED TO IT.             *
**********************************************************************
ADDTABL  ST    R9,AT9                 SAVE RETURN ADDRESS
         L     R12,CURRNTRY           POINT TO CURRENT ENTRY
         CLI   0(R12),X'00'           FIRST TIME HERE?
         BNE   ATNOT1                 NO
         MVC   0(L'TBLENTRY,R12),TBLENTRY MOVE ENTRY TO 1ST SLOT
         B     ATXIT                  AND LEAVE
ATNOT1   LA    R1,L'TBLENTRY(R12)     POINT TO NEXT ENTRY
         C     R1,CURRLAST            PAST END OF CURRENT AREA?
         BL    ATADDIT                NO
         LA    R11,L'TBLENTRY         COMPUTE TABLE
         MH    R11,H50                   SEGMENT SIZE
         STORAGE OBTAIN,LENGTH=(R11),SP=111 GET TABLE SEGMENT STORAGE
         ST    R1,CURRNTRY            SAVE SEGMENT POINTER
         LA    R11,0(R1,R11)          POINT PAST END OF SEGMENT
         ST    R11,CURRLAST           SAVE SEGMENT END ADDRESS
ATADDIT  ST    R1,ENTNEXT-TBLENTRY(R12) POINT LAST ENTRY TO THIS ONE
         MVC   0(L'TBLENTRY,R1),TBLENTRY MOVE ENTRY TO TABLE
         ST    R1,CURRNTRY            UPDATE CURRENT ENTRY POINTER
ATXIT    AP    TABLMEM,P1             ADD 1 TO MEMBERS IN TABLE
         L     R9,AT9                 GET RETURN ADDRESS
         BR    R9                     RETURN TO CALLER
**********************************************************************
* LOCATES THE NEXT DIRECTORY ENTRY IN THIS DIRECTORY BLOCK. EACH     *
* ENTRY IS 12 BYTES LONG PLUS THE NUMBER OF USER HALFWORDS, WHICH IS *
* GIVEN BY THE LOWER 5 BITS OF THE 12TH BYTE OF EACH ENTRY. THE      *
* NXTRECD AND REMBYTES FIELDS ARE UPDATED. IF THE DIRECTORY BLOCK    *
* DOES NOT CONTAIN AN EXACT NUMBER OF ENTRIES, AN ERROR MESSAGE AND  *
* ABEND ARE ISSUED.                                                  *
**********************************************************************
NXTDIRNT ST    R9,ND9                 SAVE RETURN ADDRESS
         L     R12,NEXTRECD           POINT TO CURRENT DIRECTORY ENTRY
         IC    R11,11(R12)            PICK UP BYTE 12 ("C" FIELD)
         N     R11,LOW5BITS           AND OUT ALL BUT LOW 5 BITS
         SLL   R11,1                  MULTIPLY USER HALFWORDS BY 2
         LA    R11,12(R11)            COMPUTE THIS ENTRY SIZE
         AR    R12,R11                POINT TO NEXT ENTRY
         ST    R12,NEXTRECD           SAVE POINTER TO NEXT ENTRY
         LH    R12,REMBYTES           GET REMAINING BYTES IN BLOCK
         SR    R12,R11                DEDUCT LENGTH OF THIS ENTRY
         STH   R12,REMBYTES           SAVE BYTES REMAINING
         LTR   R12,R12                TEST REMAINING BYTES
         BP    NDXIT                  CONTINUE IF MORE BYTES IN BLOCK
         BZ    NDEND                  ZERO LEFT, END OF BLOCK
         B     BADDIRBK               NEGATIVE RESULT, ERROR
NDEND    XC    NEXTRECD,NEXTRECD      CLEAR NEXT RECORD ADDRESS
NDXIT    L     R9,ND9                 GET RETURN ADDRESS
         BR    R9                     RETURN TO CALLER
**********************************************************************
* READBODY READS THE BODY OF THE PDS. EACH MEMBER BEGINS IMMEDIATELY *
* FOLLOWING AN END-OF-FILE FOR THE PRECEDING MEMBER. AS EACH BODY    *
* MEMBER IS IDENTIFIED, THE TTRNAME TABLE IS SCANNED FOR AN ENTRY    *
* HAVING THE SAME TTR. IF FOUND, NO ACTION IS TAKEN, OTHERWISE AN    *
* ENTRY IS ADDED TO THE TABLE FOR THIS TTR, BUT WITH BLANKS IN THE   *
* NAME AND ALIAS FIELDS.                                             *
* ON ENTRY, THE LAST BLOCK READ WAS THE END-OF-FILE FOR THE DIRECTORY*
* SO THE NEXT READ WILL GET THE FIRST BLOCK FOR THE FIRST MEMBER IN  *
* THE BODY OF THE PDS. THE READPDS ROUTINE IS CALLED TO READ BLOCKS  *
* FROM THE PDS, WHILE THE ADDTABL ROUTINE IS USED TO ADD ENTRIES TO  *
* THE TTRNAME TABLE WITH "D" IN ALIAS INDICATOR TO SHOW DELETED.     *
**********************************************************************
READBODY ST    R9,RB9                 SAVE RETURN ADDRESS
RBNEWMEM MVI   EOFMEM,C'N'            RESET EOF INDICATOR
         BAS   R9,READPDS             READ NEXT BODY BLOCK
         CLI   EOFMEM,C'Y'            END OF FILE FOUND?
         BE    RBFNDEOF               YES, NO MEMBER HERE
         MVC   ENTNAME,BLANKS         MOVE BLANKS TO TABLE ENTRY
         MVC   ENTTTR,TTRADDR         TTR OF BLOCK JUST READ TO ENTRY
         MVI   ENTALIAS,C'D'          DELETED MEMBER INDICATOR
         BAS   R9,SRCHTABL            SEARCH TABLE FOR THIS TTR
         CLI   FOUND,C'Y'             ENTRY FOUND?
         BE    RBFNDEOF               YES, NO ENTRY NEDED
         BAS   R9,ADDTABL             ADD DELETED ENTRY TO TABLE
         AP    DELEMEM,P1             ADD 1 TO DELETED MEMBERS IN TABLE
RBFNDEOF BAS   R9,READPDS             READ NEXT BLOCK
         CLI   EOFMEM,C'Y'            END OF FILE FOUND?
         BNE   RBFNDEOF               NO, CONTINUE EOF SEARCH
         B     RBNEWMEM               YES, GO PROCESS NEXT BODY MEMBER
RBXIT    L     R9,RB9                 GET RETURN ADDRESS
         BR    R9                     RETURN TO CALLER
**********************************************************************
* SEARCHES THE TTRNAME TABLE FOR AN ENTRY HAVING THE SAME TTR AS THAT*
* IN THE ENTTTR FIELD OF TBLENTRY. RETURNS INDICATION IN THE FOUND   *
* FIELD.                                                             *
**********************************************************************
SRCHTABL ST    R9,ST9                 SAVE RETURN ADDRESS
         L     R12,TTRNAME1           POINT TO FIRST ENTRY
         CLI   0(R12),X'00'           IS THERE A FIRST ENTRY?
         BE    STNOTFND               NO
         MVI   FOUND,C'Y'             ASSUME FOUND
STCHECK  CLC   ENTTTR,ENTTTR-TBLENTRY(R12) SAME TTR IN TABLE?
         BE    STXIT                  YES, EXIT
         L     R12,ENTNEXT-TBLENTRY(R12) GET POINTER TO NEXT ENTRY
         LTR   R12,R12                IS THERE ANOTHER ENTRY?
         BNZ   STCHECK                YES
STNOTFND MVI   FOUND,C'N'             NO, NOT FOUND
STXIT    L     R9,ST9                 GET RETURN ADDRESS
         BR    R9                     RETURN TO CALLER
**********************************************************************
* READ NEXT BLOCK FROM INPDS BODY INTO GOTTEN STORAGE                *
**********************************************************************
READPDS  L     R12,BLKADDR            POINT TO GOTTEN STORAGE
         READ  BODYDECB,SF,INPDS,(R12),'S' READ NEXT BLOCK FROM INPDS
         CHECK BODYDECB               WAIT FOR COMPLETION
         NOTE  INPDS                  GET TTR OF LAST RECORD READ
         STCM  R1,14,TTRADDR          SAVE TTR OF BLOCK READ
         L     R12,INPDS+68           GET IOB PREFIX ADDRESS
         MVC   REMBYTES,22(R12)       RESIDUAL COUNT FROM IOB CSW
         LH    R12,INPDS+62           BLOCKSIZE FROM DCB
         SH    R12,REMBYTES           RECORD LEN=BLKSIZE-RESID CT
         STH   R12,REMBYTES           STORE CALCULATED RECORD LENGTH
         MVC   NEXTRECD,BLKADDR       MOVE BLOCK ADDRESS
         BR    R9                     GO BACK TO CALLER
**********************************************************************
* EOF ON MEMBER IN INPDS OR EOF FOR ENTIRE PDS IF SECOND ENTRY FOR   *
* SAME TTR. FOR MEMBER EOF SET SWITCH AND EXIT. IF EOF FOR THE ENTIRE*
* PDS, GO TO EOJ.                                                    *
**********************************************************************
MEMEOF   CLI   EOFMEM,C'Y'            ANY BLOCK READ SINCE LAST ENTRY?
         BE    EOJ                    NO, END OF ENTIRE PDS
         MVI   EOFMEM,C'Y'            SHOW INPDS IS AT EOF
         XC    REMBYTES,REMBYTES      SHOW 0 BYTES REMAIN IN BLOCK
         XC    NEXTRECD,NEXTRECD      CLEAR NEXT RECORD ADDRESS
         BR    R9                     EXIT
**********************************************************************
* READ NEXT BLOCK FROM INPDS DIRECTORY INTO GOTTEN STORAGE           *
**********************************************************************
DIRREAD  L     R12,BLKADDR            POINT TO GOTTEN STORAGE
         READ  PDSDECB,SF,PDSDIR,(R12),256 READ NEXT BLOCK FROM PDSDIR
         CHECK PDSDECB                WAIT FOR COMPLETION
         NOTE  PDSDIR                 GET TTR OF LAST RECORD READ
         STCM  R1,14,TTRADDR          SAVE TTR OF BLOCK READ
         L     R12,PDSDIR+68          GET IOB PREFIX ADDRESS
         MVC   REMBYTES,22(R12)       RESIDUAL COUNT FROM IOB CSW
         LH    R12,PDSDIR+62          BLOCKSIZE FROM DCB
         SH    R12,REMBYTES           RECORD LEN=BLKSIZE-RESID CT
         STH   R12,REMBYTES           STORE CALCULATED RECORD LENGTH
         MVC   NEXTRECD,BLKADDR       MOVE BLOCK ADDRESS
         BR    R9                     GO BACK TO CALLER
**********************************************************************
* EOF ON INPDS DIRECTORY. POSITION BODY AND SET EOF FLAG             *
**********************************************************************
DIREOF   NOTE  PDSDIR                 GET TTR FOR THE EOF
         ST    R1,TTR1                SAVE IT
         MVI   TTR1+3,X'01'           SET TO RETRIEVE BLOCK AFTER EOF
         POINT INPDS,TTR1             POINT PAST DIRECTORY EOF RECORD
         MVC   ENTNAME,BLANKS         CLEAR ENTRY NAME FIELD
         MVI   EOFPDIR,C'Y'           SHOW DIRECTORY AT PHYSICAL EOF
         XC    REMBYTES,REMBYTES      SHOW 0 BYTES REMAIN IN BLOCK
         XC    NEXTRECD,NEXTRECD      CLEAR NEXT RECORD ADDRESS
         BR    R9                     EXIT
**********************************************************************
* SYNAD ERROR ROUTINE FOR THE INPDS FILE. TEST FOR END OF PDS BODY   *
* AND GO TO EOJ IF SO (END OF EXTENTS), ELSE ABEND WITH MESSAGE.     *
**********************************************************************
PDSERR   LR    R11,R0                 COPY DECB ADDRESS TO R11
         SYNADAF ACSMETH=BPAM         GET ERROR ANALYSIS MESSAGE
         MVC   SYNMSG,8(R1)           SAVE THE MESSAGE FOR WTO
         SYNADRLS ,                   RELEASE SYNAD STORAGE
         CLI   0(R11),X'42'           EXTENT VIOLATION?
         BE    EOJ                    YES, END OF PDS BODY AND EOJ
         WTO   'ERROR PROCESSING INPDS BODY',ROUTCDE=11
         WTO   TEXT=SYNMESAG,ROUTCDE=11 DISPLAY SYNADAF MESSAGE
         ABEND 222,DUMP               TERMINATE IN ERROR
**********************************************************************
* SYNAD ERROR ROUTINE FOR THE INPDS DIRECTORY FILE. ABEND WITH       *
* MESSAGE.                                                           *
**********************************************************************
DIRERR   LR    R11,R0                 COPY DECB ADDRESS TO R11
         SYNADAF ACSMETH=BPAM         GET ERROR ANALYSIS MESSAGE
         MVC   SYNMSG,8(R1)           SAVE THE MESSAGE FOR WTO
         SYNADRLS ,                   RELEASE SYNAD STORAGE
         WTO   'ERROR PROCESSING INPDS DIRECTORY',ROUTCDE=11
         WTO   TEXT=SYNMESAG,ROUTCDE=11 DISPLAY SYNADAF MESSAGE
         ABEND 333,DUMP               TERMINATE IN ERROR
**********************************************************************
* END OF JOB. CLOSE INPDS FILE, RETURN TO CALLER WITH ADDRESS OF THE *
* TTR-NAME-ALIAS TABLE IN R1.                                        *
**********************************************************************
EOJ      CLOSE (INPDS,,PDSDIR)        CLOSE INPDS DIRECTORY AND BODY
         FREEPOOL INPDS               FREE THE BUFFER BODY
         FREEPOOL PDSDIR              FREE THE BUFFER DIRECTORY
         ZAP   DBLWORD,TABLMEM        NUMBER TABLE MEMBERS TOTAL
         CVB   R12,DBLWORD            R12 = NBR TBL MEMBERS
         MH    R12,NTRYLENG           MULTIPLY BY ENTRY LENGTH
         LA    R12,MBREND-RETHDR+8(R12) ADD HEADER LENGTH + 8
         SRL   R12,3                  ROUND TO
         SLL   R12,3                     MULTIPLE OF 8
         ST    R12,AREALEN            SAVE AREA LENGTH
         STORAGE OBTAIN,LENGTH=(R12)  GET AREA FOR RETURNED DATA
         ST    R1,AREASTRT            SAVE RETURN AREA START ADDRESS
         MVC   0(MBREND-RETHDR,R1),RETHDR MOVE HEADER TO RETURN AREA
         ZAP   TABLMEM,TABLMEM        ANY TABLE MEMBERS?
         BZ    RLSE111                NO
         LA    R1,TABLSTRT-RETHDR(R1) POINT TO RETURN AREA TABLE START
         L     R12,TTRNAME1           POINT TO NAME-TTR-ALIAS TABLE
EOJMOVE  MVC   0(MBREND-MBRNTRY,R1),0(R12) MOVE HEADER DATA
         LA    R1,L'TBLENTRY-4(R1)    STEP TO NEXT RETURN AREA ENTRY
         ICM   R12,15,ENTNEXT-TBLENTRY(R12) POINT TO NEXT TTRNAME ENTRY
         BNZ   EOJMOVE                CONTINUE MOVING IF MORE ENTRIES
         MVC   0(8,R1),HIVALU         SET TABLE END (HEX FF'S)
RLSE111  STORAGE RELEASE,SP=111,COND=YES FREE ANY SP 111 STORAGE
         L     R1,USERADDR            PASS BACK POINTER
         MVC   0(4,R1),AREASTRT           TO RETURN AREA
         L     R13,4(R13)             POINT TO CALLER'S SAVE AREA
         LM    R14,R12,12(R13)        RESTORE CALLER'S REGS
         BR    R14                    RETURN TO CALLER
**********************************************************************
* ABNORMAL TERMINATIONS                                              *
**********************************************************************
BADPDSS  WTO   'ERROR OPENING INPDS FILE DIRECTORY',ROUTCDE=11
         B     BADPDSA                GO TO ABEND
BADPDSO  WTO   'ERROR OPENING INPDS FILE BODY',ROUTCDE=11
         B     BADPDSA                GO TO ABEND
BADPDSD  WTO   'INPDS FILE MUST HAVE DSORG=PO',ROUTCDE=11
         B     BADPDSA                GO TO ABEND
BADDIRSZ WTO   'INVALID DIRECTORY BLOCK SIZE',ROUTCDE=11
         B     BADPDSA                GO TO ABEND
BADDIRLN WTO   'DIRECTORY BLOCK LENGTH ERROR',ROUTCDE=11
         B     BADPDSA                GO TO ABEND
BADDIRBK WTO   'DIRECTORY BLOCK LENGTH MISMATCH',ROUTCDE=11
BADPDSA  ABEND 111,DUMP               TERMINATE IN ERROR
**********************************************************************
*        STORAGE, VARIABLES, CONSTANTS, AND FILES                    *
**********************************************************************
DBLWORD  DC    D'0'          DOUBLEWORD WORK AREA
USERADDR DC    A(0)          ADDRESS OF CALLER'S AREA POINTER FIELD
RD9      DC    A(0)          RETURN ADDRESS FOR READDIR
DB9      DC    A(0)          RETURN ADDRESS FOR DIRBLOX
AT9      DC    A(0)          RETURN ADDRESS FOR ADDTABL
ND9      DC    A(0)          RETURN ADDRESS FOR NXTDIRNT
RB9      DC    A(0)          RETURN ADDRESS FOR READBODY
ST9      DC    A(0)                   RETURN ADDRESS FOR SRCHTABL
LOW5BITS DC    X'0000001F'   MASK TO TURN OFF ALL BUT LOW 5 BITS
TTRNAME1 DC    A(0)          POINTER TO FIRST TTRNAME ENTRY
CURRSEG  DC    A(0)          POINTER TO CURRENT TABLE SEGMENT
CURRNTRY DC    A(0)          POINTER TO CURRENT TTRNAME ENTRY
CURRLAST DC    A(0)          POINTER TO END OF CURRENT TABLE SEGMENT
TTR1     DC    X'00000100'   CONSTANT FOR TTR=001
H0       DC    H'0'          CONSTANT 0
H2       DC    H'2'          CONSTANT 2
H12      DC    H'12'         CONSTANT 12
H50      DC    H'50'         CONSTANT 50
H80      DC    H'80'         CONSTANT 80
H254     DC    H'254'        CONSTANT 254
H256     DC    H'256'        CONSTANT 256
P1       DC    P'1'          CONSTANT 1
FOUND    DC    C'N'          'Y'= FOUND, 'N'= NOT FOUND
BLANKS   DC    CL80' '       CONSTANT BLANKS
HIVALU   DC    8X'FF'        CONSTANT HEX FF'S
*
RETHDR   DS    0F            RETURNED DATA HEADER
AREASTRT DC    A(0)             ADDRESS OF RETURNED DATA (SUBPOOL 1)
AREALEN  DC    A(0)             LENGTH OF GOTTEN STORAGE
HDRLENG  DC    AL2(TABLSTRT-RETHDR) OFFSET TO TABLE FROM AREA START
NTRYLENG DC    AL2(MBREND-MBRNTRY) LENGTH OF EACH TABLE ENTRY
DIRBLKS  DC    PL4'0'           NUMBER DIRECTORY BLOCKS TOTAL
USDBLKS  DC    PL4'0'           NUMBER DIRECTORY BLOCKS USED
ACTVMEM  DC    PL4'0'           NUMBER ACTIVE MEMBERS IN PDS
DELEMEM  DC    PL4'0'           NUMBER DELETED MEMBERS IN PDS
TABLMEM  DC    PL4'0'           NUMBER TABLE ENTRIES TOTAL
TABLSTRT EQU   *                BEGINNING OF NAME-TTR-ALIAS TABLE
MBRNTRY  DS    0C               TABLE ENTRIES BEGIN HERE
MBRNAME  DC    8X'FF'              MEMBER NAME (BLANK IF DELETED)
MBRTTR   DC    3X'FF'              TTR TO START OF MEMBER
MBRALIAS DC    X'FF'               A = ALIAS, D = DELETED, ELSE BLANK
MBREND   EQU   *                   END OF ENTRY
PDSREAD  CSECT
*
TBLENTRY DS    0CL16         ENTRY FOR TTRNAME TABLE
ENTNAME  DS    CL8             ENTRY NAME
ENTTTR   DS    XL3             TTR FOR ENTRY
ENTALIAS DS    CL1             *=ALIAS, BLANK=REAL MEMBER
ENTNEXT  DC    XL4'00'         LINK POINTER TO NEXT ENTRY (0=LAST)
*
BLKADDR  DS    F             BUFFER ADDRESS FOR INPDS
TTRADDR  DC    XL3'00'       TTR OF CURRENT BLOCK
REMBYTES DC    H'0'          REMAINING BYTES IN INPDS BUFFER
NEXTRECD DS    F             ADDRESS OF NEXT RECORD IN INPDS BUFFER
EOFMEM   DC    C'N'          EOF INDICATOR FOR MEMBER IN INPDS BODY
EOFLDIR  DC    C'N'          'Y'= AT LOGICAL END OF DIRECTORY
EOFPDIR  DC    C'N'          PHYSICAL EOF INDICATOR FOR DIRECTORY
*
SYNMESAG DS    0D            SYNAD ERROR MESSAGE WTO AREA
         DC    H'120'           TEXT DATA LENGTH
SYNMSG   DS    CL120            TEXT OF THE SYNADAF MESSAGE
*
INPDS    DCB   DDNAME=INPDS,DSORG=PO,MACRF=R,EODAD=MEMEOF,SYNAD=PDSERR
PDSDIR   DCB   DDNAME=INPDS,DSORG=PS,MACRF=RP,EODAD=DIREOF,            X
               RECFM=F,LRECL=256,BLKSIZE=256,SYNAD=DIRERR
         LTORG
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
