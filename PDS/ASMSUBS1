         TITLE '*** ASMSUBS1: TEST COBOL CALLS ***'
ASMSUBS1 CSECT
ASMSUBS1 AMODE 31
ASMSUBS1 RMODE ANY
*********************************************************************
* ASSEMBLER SUB PROGRAM USED TO TEST VARIOUS STATIC AND DYNAMIC     *
* CALLS BETWEEN ASSEMBLER AND COBOL WHEN THE MAIN PROGRAM IS        *
* ASSEMBLER. THIS SUBROUTINE IS CALLED STATICALLY. IT RECEIVES      *
* A 3-ADDRESS PARAMETER LIST, THE FIRST AN 8-CHARACTER STRING THAT  *
* CONTAINS "ASMSUBS1", THE SECOND IS A 2-BYTE PACKED DECIMAL NUMBER *
* AND THE THIRD IS A BINARY HALFWORD.                               *
*                                                                   *
* THIS ROUTINE DISPLAYS THE INCOMING PARAMETERS USING A WTO, THEN   *
* CALLS COBSUBS2 AND COBSUBD2, THEN RETURNS TO ITS CALLER.          *
*                                                                   *
* AUTHOR R THORNTON AUG 2001                                        *
*********************************************************************
*
*********************************************************************
*        SAVE REGISTERS, SET UP BASE REGS, CHAIN SAVE AREAS         *
*********************************************************************
         USING ASMSUBS1,R3,R4
         STM   R14,R12,12(R13)         SAVE CALLER'S REGS
         LR    R3,R15                  SET UP BASE FIRST BASE REG
         LA    R4,4095(R3)             SET UP SECOND
         LA    R4,1(R4)                    BASE REGISTER
         LA    R15,MYSAVE              POINT TO MY REGISTER SAVE AREA
         ST    R15,8(R13)              SET LSA IN CALLER'S SAVE
         ST    R13,4(R15)              SET HSA IN MY SAVE AREA
         LR    R13,R15                 SET UP SAVE AREA POINTER
         B     START                   BRANCH AROUND CONSTANTS
         DC    CL8'ASMSUBS1'           PROGRAM NAME IDENTIFIER
         DC    CL8'&SYSDATE'           ASSEMBLY DATE
         DC    CL8'&SYSTIME'           ASSEMBLY TIME
MYSAVE   DS    18F                     MY REGISTER SAVE AREA
*********************************************************************
*        PROCESS PARM FIELD                                         *
*********************************************************************
START    L     R1,4(R13)               POINT TO CALLER'S SAVE AREA
         L     R1,24(R1)               PICK UP PARAMETER POINTER
         L     R2,0(R1)                POINT TO 8-CHAR STRING PARAMETER
         MVC   PARM1,0(R2)             SAVE INCOMING STRING
         L     R2,4(R1)                POINT TO PACKED PARAMETER
         MVC   PARM2,0(R2)             SAVE INCOMING PACKED NUMBER
         L     R2,8(R1)                POINT TO BINARY PARAMETER
         MVC   PARM3,0(R2)             SAVE INCOMING BINARY NUMBER
         OI    CSS2END,X'80'           SET PARM END BIT
         OI    CSD2END,X'80'           SET PARM END BIT
*********************************************************************
*             MAINLINE ROUTINE                                      *
*********************************************************************
MAINLINE UNPK  UPARM2,PARM2            UNPACK SECOND PARM
         LH    R1,PARM3                GET PARMM3 HALFWORD
         CVD   R1,DBLWD                CONVERT IT TO PACKED DECIMAL
         UNPK  CUPARM3,DBLWD+3(5)      UNPACK IT TO WTO AREA
         LA    R1,MSGWTO               POINT TO MESSAGE
         SVC   35                      ISSUE WTO
         LA    R1,CSS2PARM             POINT TO PARMLIST
         L     R15,=V(COBSUBS2)        POINT TO COBOL SUBROUTINE
         BASR  R14,R15                 CALL COBSUBS2 STATICALLY
         LOAD  EP=COBSUBD2             LOAD COBOL SUBRTN DYNAMICALLY
         LR    R15,R0                  COPY ENTRY POINT ADDRESS
         LA    R1,CSD2PARM             POINT TO PARMLIST
         BASR  R14,R15                 CALL DYN LOADED COBOL PGM
         DELETE EP=COBSUBD2            DELETE THE COBOL PROGRAM
*********************************************************************
*             RETURN TO CALLER                                      *
*********************************************************************
RETURN   L     R13,4(R13)              POINT TO CALLER'S SAVE AREA
         L     R14,12(R13)             RESTORE RETURN REG: R14
         L     R15,RETCODE             SET RETURN CODE
         LM    R0,R12,20(R13)          RESTORE CALLER'S REGS 0-12
         BR    R14                     RETURN
*********************************************************************
*        STORAGE AND FILE AREAS                                     *
*********************************************************************
         LTORG
DBLWD    DS    D                       DOUBLEWORD WORK AREA
RETCODE  DC    F'0'                    RETURN CODE
*
CSS2PARM DC    A(CSS2P1)               PARMLIST FOR COBSUBS2
         DC    A(CSS2P2)
CSS2END  DC    A(CSS2P3)
CSS2P1   DC    CL8'COBSUBS2'             PARM 1 = PROGRAM NAME
CSS2P2   DC    PL2'300'                  PARM 2 = PACKED 1
CSS2P3   DC    H'300'                    PARM 3 = HALFWORD 1
*
CSD2PARM DC    A(CSD2P1)               PARMLIST FOR COBSUBD2
         DC    A(CSD2P2)
CSD2END  DC    A(CSD2P3)
CSD2P1   DC    CL8'COBSUBD2'             PARM 1 = PROGRAM NAME
CSD2P2   DC    PL2'300'                  PARM 2 = PACKED 1
CSD2P3   DC    H'300'                    PARM 3 = HALFWORD 1
*
MSGWTO   DS    0F                      WTO LENGTH ERROR MESSAGE
         DC    AL2(MSGEND-MSGWTO)      AREA LENGTH
         DC    X'8000'                 MCS FLAGS
MSGLEAD  DC    C'ASMSUBS1 RECEIVED: PARM1='
PARM1    DS    CL8                     8-CHARACTER STRING PARM 1
         DC    C', PARM2='
UPARM2   DS    CL3                     UNPACKED PARM 2
         DC    C', PARM3='
CUPARM3  DS    CL5                     CONVERTED, UNPACKED PARM 3
MSGEND   EQU   * END OF TEXT
         DC    X'0200'                 DESC=7
         DC    X'0020'                 ROUTCDE=11
*
PARM2    DS    PL2                     INCOMING PARAMETER 2
PARM3    DS    H                       INCOMING PARAMETER 3
ASMSUBS1 CSECT
*********************************************************************
*             REGISTER EQUATES                                      *
*********************************************************************
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
