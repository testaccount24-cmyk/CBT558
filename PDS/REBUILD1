         TITLE '*** BUILD ASSEMBLER SOURCE FROM A LOAD MODULE ***'
REBUILD CSECT
REBUILD AMODE 31
REBUILD RMODE 24
*********************************************************************
* THIS SUBROUTINE IS CALLED BY THE RESOURCE PROGRAM, WHICH PERFORMS *
* INITIALIZATION FOR THE DISASSEMBLY. ONCE INITIALIZATION IS        *
* COMPLETE, THIS ROUTINE IS ENTERED WITH POINTERS TO THE LOAD MODULE*
* TEXT AND THE TABLES BUILT BY THE RESOURCE PROGRAM.                *
*                                                                   *
* REBUILD IS CALLED TWICE BY RESOURCE:                              *
*   1ST CALL: THE STAGE BYTE = X'01'. DURING THIS PASS, THE TEXT IS *
*             ANALYZED TO FIND LOCATIONS WHERE LABELS WILL BE NEEDED*
*             ON SOURCE CODE OUTPUT STATEMENTS. THESE LABELS ARE    *
*             ADDED TO THE LABEL TABLE.                             *
*   2ND CALL: THE STAGE BYTE = X'02'. DURING THIS PASS THE SOURCE   *
*             CODE IS DEVELOPED AND WRITTEN TO THE SYSOUT FILE.     *
*                                                                   *
*   DURING PROCESSING, THE OFFSET WITHIN THE TEXT OF THE CSECT BEING*
*   DISASSEMBLED IS MAINTAINED IN THE LOCATION FIELD. THE TEXT IS   *
*   SCANNED ONE BYTE AT A TIME. WHEN THE LOCATION FIELD IS AN EVEN  *
*   NUMBER, THE BYTE MAY BE AN INSTRUCTION OP-CODE, AND IT IS SENT  *
*   TO THE SRCHOC ROUTINE TO DETERMINE WHETHER OR NOT IT MAY BE AN  *
*   INSTRUCTION OP-CODE. IF SO, THE ISINST FLAG IS SET, AND THE     *
*   INSTRUCS ROUTINE INITIALIZES FOR AN INSTRUCTION AND THEN GOES   *
*   TO THE APPROPRIATE FORMATTING ROUTINE. WITHIN THE FORMATTING    *
*   ROUTINE ADDITIONAL SPECIALIZED CHECKS ARE MADE TO DETERMINE     *
*   WHETHER THIS REALLY IS AN INSTRUCTION. IF NOT, THE ISINST FLAG  *
*   IS RESET, AND ON RETURN, THE BLDCONST ROUTINE WILL BE CALLED TO *
*   PROCESS THE TEXT AS A CONSTANT. BLDCONST IS ALSO CALLED IF THE  *
*   SRCHOC ROUTINE FINDS THAT THE TEXT IS NOT A VALID INSTRUCTION   *
*   OP-CODE.                                                        *
*                                                                   *
*   DURING STAGE 1 PROCESSING, INSTRUCTION STORAGE OPERANDS ARE USED*
*   TO CREATE LABELS IF THERE IS A USING IN EFFECT FOR THE BASE     *
*   REGISTER IN THE ADDRESS. DURING STAGE 2 PROCESSING, THE LABEL   *
*   TABLE IS ACCESSED FOR EACH INSTRUCTION STORAGE ADDRESS TO SEE   *
*   IS A LABEL IS AVAILABLE FOR USE IN THE OPERAND FIELD, OR IF AN  *
*   EXPLICIT OPERAND MUST BE FORMATTED. FOR EACH OUTPUT STATEMENT   *
*   IN STAGE 2, THE LABEL TABLE IS ALSO ACCESSED TO SEE IF THERE IS *
*   A LABEL THAT SHOULD BE INCLUDED IN THE LABEL FIELD OF THE OUTPUT*
*   STATEMENT.                                                      *
*                                                                   *
* AUTHOR R THORNTON FEB 2002                                        *
*********************************************************************
*
*********************************************************************
*        SAVE REGISTERS, SET UP BASE REGS, CHAIN SAVE AREAS         *
*********************************************************************
         USING REBUILD,R3,R4,R5
         STM   R14,R12,12(R13)         SAVE CALLER'S REGS
         LR    R3,R15                  SET UP BASE FIRST BASE REG
         LA    R4,4095(R3)             SET UP SECOND
         LA    R4,1(R4)                    BASE REGISTER
         LA    R5,4095(R4)             SET UP THIRD
         LA    R5,1(R5)                    BASE REGISTER
         LA    R15,MYSAVE              POINT TO MY REGISTER SAVE AREA
         ST    R15,8(R13)              SET LSA IN CALLER'S SAVE
         ST    R13,4(R15)              SET HSA IN MY SAVE AREA
         LR    R13,R15                 SET UP SAVE AREA POINTER
         B     PARMS                   BRANCH AROUND CONSTANTS
         DC    CL8'REBUILD'            PROGRAM NAME IDENTIFIER
         DC    CL8'&SYSDATE'           ASSEMBLY DATE
         DC    CL8'&SYSTIME'           ASSEMBLY TIME
MYSAVE   DS    18F                     MY REGISTER SAVE AREA
*********************************************************************
* INITIALIZE FOR PROCESSING                                         *
*********************************************************************
PARMS    MVC   PARMAREA(ENDPARMS-PARMAREA),0(R1) SAVE PARMS
         L     R1,STAGEA               POINT TO STAGE INDICATOR
         MVC   STAGE,0(R1)             GET STAGE INDICATOR
         XC    LOCATION,LOCATION       START AT LOCATION ZERO
         MVI   INDATA,0                RESET IN DATA INDICATOR
         L     R12,TEXTADDR            POINT TO START OF TEXT
         ST    R12,CURRTXTA            SAVE CURRENT TEXT ADDRESS
         L     R1,LBLTBADR             POINT TO 1ST LABEL TABLE ENTRY
         MVC   CURLBNT,0(R1)           SAVE THE LABEL ENTRY
         ST    R1,CURRLBLA             SAVE CURRENT LABEL ADDRESS
         L     R12,CSECTA              POINT TO CSECT ADDRESS
         MVC   CSECT,0(R12)            SAVE CSECT NAME
         MVI   CONPROG,0               CLEAR INDICATOR
         CLI   STAGE,1                 NOW IN STAGE 1?
         BE    MAINLINE                YES
         MVC   OUTREC,BLANKS           CLEAR THE OUTPUT RECORD AREA
         MVC   OUTMNEM,=CL5'CSECT'     BUILD THE
         MVC   OUTLABEL,CSECT             CSECT STATEMENT
         BAS   R9,OUTPUT               AND WRITE TO OUTPUT
*********************************************************************
* MAINLINE CONTROL                                                  *
*********************************************************************
MAINLINE CLC   CURRTXTA,TEXTENDA       PAST END OF TEXT?
         BH    RETURN                  YES
         CLC   CURLBOFS,LOCATION       TIME TO HANDLE A LABEL ENTRY?
         BH    MLTSTDTA                NO
         BAS   R9,LABELS               YES, GO HANDLE LABEL ENTRY
         B     MAINLINE                CONTINUE
MLTSTDTA CLI   INDATA,1                IN A DATA-ONLY AREA NOW?
         BE    MLINDATA                YES, GO HANDLE CONSTANTS
         TM    LOCATION+3,X'01'        AT AN ODD-ADDRESS?
         BO    MLINDATA                YES, NOT AN OP-CODE
         BAS   R9,SRCHOC               GO TEST FOR INSTRUCTION OP
         CLI   ISINST,1                IS THIS AN OP-CODE?
         BNE   MLINDATA                NO, GO HANDLE CONSTANTS
         BAS   R9,INSTRUCS             ELSE PROCESS THE INSTRUCTION
         CLI   ISINST,1                STILL LOOK LIKE AN OP-CODE?
         BE    MAINLINE                YES, CONTINUE
MLINDATA BAS   R9,BLDCONST             GO PROCESS AS A CONSTANT
         B     MAINLINE                CONTINUE
*********************************************************************
* PROCESS NEXT LABEL ENTRY                                          *
*********************************************************************
LABELS   ST    R9,LS9                  SAVE RETURN ADDRESS
         LA    R9,LSNEXT               GET DESIRED RETURN ADDRESS
         CLI   CURLBTYP,CURLDROP       DROP USING REGISTER?
         BE    ADDDROP                 YES
         CLI   CURLBTYP,CURLUSNG       SPECIFY USING REGISTER?
         BE    ADDDROP                 YES
         CLI   CURLBTYP,CURLDTST       DATA-ONLY START?
         BE    STDROP                  YES
         CLI   CURLBTYP,CURLDTND       DATA-ONLY END?
         BE    STDROP                  YES
         CLI   CURLBTYP,CURLABEL       SIMPLE LABEL ENTRY?
         BE    SMPLABEL                YES
         CLI   CURLBTYP,CURLADCN       ADCON LOCATION?
         BE    ADCONLOC                YES
         CLI   CURLBTYP,CURLVCON       V-CON LOCATION?
         BE    VCONLOC                 YES
LSNEXT   L     R1,CURRLBLA             POINT TO CURRENT LABEL ENTRY
         LA    R1,L'CURLBNT(R1)        POINT TO NEXT LABEL ENTRY
         C     R1,LBLTBEND             PAST END OF LABEL TABLE?
         BNH   LSMVENTY                NO
         MVC   CURLBOFS,HEXFFS         YES, SET LABEL OFFSET HIGH
         B     LSXIT                   AND EXIT
LSMVENTY MVC   CURLBNT,0(R1)           SAVE THE LABEL ENTRY
         ST    R1,CURRLBLA             SAVE CURRENT LABEL ADDRESS
LSXIT    L     R9,LS9                  GET RETURN ADDRESS
         BR    R9                      EXIT
LS9      DC    A(0)                    RETURN ADDRESS
*********************************************************************
* ADD OR DROP USING REGISTERS                                       *
*********************************************************************
ADDDROP  ST    R9,AD9                  SAVE RETURN ADDRESS
         SR    R1,R1                   CLEAR FOR INSERT
         IC    R1,CURLBURG             INSERT THE USING REGISTER NBR
         SLL   R1,2                    MULTIPLY BY ENTRY LENGTH = 4
         LA    R1,USENTRY(R1)          POINT TO ENTRY IN USING TABLE
         XC    0(L'USENTRY,R1),0(R1)   CLEAR THE ENTRY
         CLI   CURLBTYP,CURLUSNG       SPECIFY USING REGISTER?
         BE    ADUSING                 YES
         CLI   STAGE,1                 IN STAGE 1?
         BE    ADXIT                   YES, EXIT
         MVC   HOLDOUT,OUTREC          SAVE OUTPUT RECORD
         MVC   OUTREC,BLANKS           CLEAR FOR USING OR DROP
         MVC   OUTMNEM,=CL5'DROP'      SET MNEMONIC
         LA    R8,OUTOPND              POINT TO OUTPUT OPERAND FIELD
         IC    R1,CURLBURG             PICK UP REGISTER TO DROP
         BAS   R9,REGOPNDS             GO FORMAT THE REGISTER OPND
         BAS   R9,OUTPUT               WRITE THE DROP STATEMENT
         MVC   OUTREC,HOLDOUT          RESTORE OUTPUT RECORD
         B     ADXIT                   AND EXIT
ADUSING  MVC   0(L'USENTRY,R1),CURLBINU SET UP USING REGISTER ENTRY
         OI    0(R1),X'80'             SET IN-USE BIT
         CLI   STAGE,1                 IN STAGE 1?
         BE    ADXIT                   YES, EXIT
         MVC   HOLDOUT,OUTREC          SAVE OUTPUT RECORD
         MVC   OUTREC,BLANKS           CLEAR FOR USING OR DROP
         MVC   OUTMNEM,=CL5'USING'     SET MNEMONIC
         CLC   CURLBINU,XZROS          IS USING VALUE ZERO?
         BNE   ADUSLBL                 NO, GO BUILD LABEL
         MVC   OUTOPND(8),CSECT        YES, USE CSECT NAME
         LA    R8,OUTOPND+7            POINT TO LAST POSSIBLE BYTE
ADUSLUP  CLI   0(R8),C' '              AT RIGHT END OF CSECT NAME?
         BNE   ADUSRHE                 YES
         BCT   R8,ADUSLUP              NO, BACK UP AND CHECK AGAIN
ADUSRHE  MVI   1(R8),C','              MOVE OPERAND SEPARATOR
         LA    R8,2(R8)                STEP PAST THE COMMA
         B     ADUSREG                 GO FORMAT THE REGISTER OPND
ADUSLBL  MVI   OUTOPND,C'A'            FORMAT
         UNPK  OUTOPND+1(7),CURLBINU+1(4)   USING
         TR    OUTOPND+1(6),TRCHAR-C'0'      LABEL
         MVI   OUTOPND+7,C','          SEPARATE OPERANDS
         LA    R8,OUTOPND+8            POINT TO REG OPERAND FIELD
ADUSREG  IC    R1,CURLBURG             PICK UP USING REGISTER
         BAS   R9,REGOPNDS             GO FORMAT THE REGISTER OPND
         BAS   R9,OUTPUT               WRITE THE DROP STATEMENT
         MVC   OUTREC,HOLDOUT          RESTORE OUTPUT RECORD
ADXIT    L     R9,AD9                  GET RETURN ADDRESS
         BR    R9                      EXIT
AD9      DC    A(0)                    RETURN ADDRESS
*********************************************************************
* START OR STOP DATA-ONLY AREAS                                     *
*********************************************************************
STDROP   ST    R9,SD9                  ASSUME DATA-ONLY END
         MVI   INDATA,0                ASSUME DATA-ONLY END
         CLI   CURLBTYP,CURLDTND       DATA-ONLY END?
         BE    SDXIT                   YES, EXIT
         MVI   INDATA,1                NO, INDICATE NOW IN DATA-ONLY
SDXIT    L     R9,SD9                  GET RETURN ADDRESS
         BR    R9                      EXIT
SD9      DC    A(0)                    RETURN ADDRESS
*********************************************************************
* PROCESS SIMPLE LABEL ENTRY                                        *
*********************************************************************
SMPLABEL ST    R9,SL9                  ASSUME DATA-ONLY END
         CLI   STAGE,1                 NOW IN STAGE 1?
         BE    SLXIT                   YES, NOTHING TO DO NOW
         CLI   CONPROG,0               IS A CONSTANT IN PROGRESS?
         BE    SLCKLBL                 NO
SLFORCE  BAS   R9,FORCECON             YES, GO FORCE CONSTANT OUT
SLCKLBL  CLI   CURLBLBL,C'A'           VALID LABEL ON LABEL ENTRY?
         BNL   SLCKLBL2                YES
         MVI   CURLBLBL,C'A'           NO, MOVE LABEL NAME 1ST CHAR
         UNPK  CURLBLBL+1(7),CURLBOFS+1(4) UNPACK TO MAKE PRINTABLE
         MVI   CURLBLBL+7,C' '         CLEAR TRASH
         TR    CURLBLBL+1(6),TRCHAR-C'0' MAKE IT PRINTABLE
SLCKLBL2 CLI   OUTLABEL,C' '           LABEL ALREADY ON OUTPUT?
         BE    SLMOVE                  NO
         MVC   HOLDOUT,OUTREC          SAVE OUTPUT RECORD
         MVC   OUTMNEM(3),=CL3'EQU'    SET MNEMONIC TO EQU
         MVI   OUTOPND,C'*'            SHOW LABEL FOR HERE
         CLC   LBLLENG,H0              LENGTH ASSOCIATED WITH LABEL?
         BE    SLOUTPT                 NO
         MVI   OUTOPND+1,C','          MOVE SEPARATOR
         LA    R8,OUTOPND+2            POINT PAST THE COMMA
         LH    R9,LBLLENG              PICK UP LABEL LENGTH
         BAS   R9,DECMOPND             FORMAT THE LENGTH
SLOUTPT  BAS   R9,OUTPUT               YES, GO WRITE CURRENT OUTPUT
         MVC   OUTREC,HOLDOUT          RESTORE OUTPUT RECORD
SLMOVE   MVC   OUTLABEL,CURLBLBL       MOVE THE LABEL TO OUTPUT
SLMVLENG MVC   LBLLENG,CURLBRLD        SAVE ASSOCIATED LENGTH
SLCKOFST CLC   CURLBOFS,LOCATION       LABEL IS FOR THIS LOCATION?
         BNL   SLCKPROG                YES
         MVC   HOLDOUT,OUTREC          SAVE OUTPUT RECORD
         MVC   OUTMNEM(3),=CL3'EQU'    SET MNEMONIC TO EQU
         MVI   OUTOPND,C'*'            SHOW LABEL FOR HERE
         MVI   OUTOPND+1,C'-'          MINUS SIGN
         L     R1,LOCATION             COMPUTE
         S     R1,CURLBOFS                NEGATIVE ORIGIN
         LA    R8,OUTOPND+2            POINT TO OPERAND LOCATION
         BAS   R9,DECMOPND             GO FORMAT THE NEGATIVE ORIGIN
         CLC   LBLLENG,H0              LENGTH ASSOCIATED WITH LABEL?
         BE    SLOUTPT2                NO
         MVI   0(R8),C','              SEPARATE OPERANDS
         LA    R8,1(R8)                STEP PAST THE COMMA
         LH    R1,LBLLENG              PICK UP LABEL LENGTH
         BAS   R9,DECMOPND             GO FORMAT THE LENGTH
SLOUTPT2 BAS   R9,OUTPUT               YES, GO WRITE CURRENT OUTPUT
         MVC   CURLBLBL,BLANKS         CLEAR THE LABEL
         MVC   LBLLENG,XZROS           AND LENGTH
         MVC   OUTREC,HOLDOUT          RESTORE OUTPUT RECORD
         MVC   OUTLABEL,BLANKS         CLEAR ANY LABEL THERE
SLCKPROG CLI   OUTMNEM,C' '            ANY STATEMENT IN PROGRESS?
         BNE   SLXIT                   YES
         CLC   CURLBLBL,CSECT          LABEL IS CSECT NAME?
         BNE   SLXIT                   NO
         MVC   OUTLABEL,BLANKS         YES, ERASE IT
         CLC   OUTREC,BLANKS           ANYTHING LEFT TO WRITE?
         BE    SLXIT                   NO
         BAS   R9,OUTPUT               WRITE CSECT STATEMENT
SLXIT    L     R9,SL9                  GET RETURN ADDRESS
         BR    R9                      EXIT
SL9      DC    A(0)                    RETURN ADDRESS
*********************************************************************
* PROCESS ADDRESS CONSTANTS (ADCON)                                 *
*********************************************************************
ADCONLOC ST    R9,AC9                  ASSUME DATA-ONLY END
         CLI   STAGE,1                 NOW IN STAGE 1?
         BE    ACADVNC                 YES
         CLI   CONPROG,0               IS A CONSTANT IN PROGRESS?
         BE    ACCHKLB                 NO
         BAS   R9,FORCECON             YES, GO FORCE CONSTANT OUT
ACCHKLB  CLI   OUTLABEL,C' '           LABEL ALREADY ON OUTPUT?
         BE    ACMOVE                  NO
         CLI   CURLBLBL,C' '           CONSTANT HAS A LABEL?
         BE    ACMVMNE                 NO, USE EXISTING LABEL
         MVC   HOLDOUT,OUTREC          SAVE OUTPUT RECORD
         MVC   OUTMNEM(3),=CL3'EQU'    SET MNEMONIC TO EQU
         MVI   OUTOPND,C'*'            SHOW LABEL FOR HERE
         CLC   LBLLENG,H0              LENGTH ASSOCIATED WITH LABEL?
         BE    ACOUTLB                 NO
         MVI   OUTOPND+1,C','          MOVE SEPARATOR
         LH    R9,LBLLENG              PICK UP LABEL LENGTH
         CVD   R9,DBLWD                CONVERT IT TO PACKED DECIMAL
         UNPK  OUTOPND+2(3),DBLWD UNPACK LABEL LENGTH
         OI    OUTOPND+4,X'F0'         CLEAR SIGN
ACOUTLB  BAS   R9,OUTPUT               YES, GO WRITE CURRENT OUTPUT
         MVC   OUTREC,HOLDOUT          RESTORE OUTPUT RECORD
ACMOVE   MVC   OUTLABEL,CURLBLBL       LABEL TO OUTPUT RECORD
ACMVMNE  MVC   OUTMNEM(2),=CL2'DC'     MNEMONIC
         MVC   OUTOPND(2),=CL2'AL'     START THE OPERAND
         MVC   OUTOPND+2(1),CURLBRLD+1 MOVE LENGTH
         OI    OUTOPND+2,X'F0'             OF CONSTANT
         MVI   OUTOPND+3,C'('          MOVE THE OPEN PAREN
         L     R12,CURRTXTA            POINT TO CURRENT TEXT
         ICM   R2,15,0(R12)            PICK UP 4 BYTES
         CLC   CURLBRLD,H4             4-BYTE ADCON?
         BNL   ACSTRR2                 YES
         SRL   R2,8                    NO, SHIFT OUT LOW ORDER BYTE
         CLC   CURLBRLD,H3             3-BYTE ADCON?
         BE    ACSTRR2                 YES
         SRL   R2,8                    NO, SHIFT OUT LOW ORDER BYTE
         CLC   CURLBRLD,H2             2-BYTE ADCON?
         BE    ACSTRR2                 YES
         SRL   R2,8                    NO, SHIFT OUT LOW ORDER BYTE
ACSTRR2  ST    R2,ADCNVALU             SAVE ADCON TEXT VALUE
         L     R1,LBLTBADR             POINT TO THE LABEL TABLE
         USING LBLDSECT,R1
ACCHKND  C     R1,LBLTBEND             PAST END OF TABLE?
         BH    ACNOLBL                 YES
         C     R2,LBLOFSET             FOUND THE LABEL ENTRY?
         BH    ACLBLSTP                NO, NOT THERE YET
         BL    ACNOLBL                 NO, PAST THE OFFSET
         CLI   LBLLABEL,C'A'           ENTRY HAS A LABEL?
         BNL   ACUSELBL                YES
ACLBLSTP LA    R1,L'LBLENTRY(R1)       STEP TO NEXT ENTRY
         B     ACCHKND                 LOOP TO FIND THE LABEL ENTRY
ACUSELBL MVC   OUTOPND+4(8),LBLLABEL   MOVE LABEL TO OPERAND
         DROP  R1
         LA    R1,OUTOPND+11           PT TO LAST POSSIBLE LABEL BYTE
ACCKTRL  CLI   0(R1),C' '              AT A TRAILING BLANK?
         BNE   ACMVRPN1                NO, GO MOVE ENDING PAREN
         BCT   R1,ACCKTRL              CONTINUE
ACMVRPN1 MVI   1(R1),C')'              MOVE ENDING PAREN
         B     ACFINI                  CONTINUE
ACNOLBL  MVC   OUTOPND+4(8),CSECT      MOVE IN CSECT NAME
         LA    R1,OUTOPND+11           PT TO LAST POSSIBLE BYTE
ACCKRHE2 CLI   0(R1),C' '              AT RIGHT END OF NAME?
         BNE   ACMVPLUS                YES
         BCT   R1,ACCKRHE2             LOOP TO FIND RHE
ACMVPLUS MVI   1(R1),C'+'              MOVE PLUS SIGN
         L     R2,ADCNVALU             GET ADCON TEXT VALUE
         CVD   R2,DBLWD                CONVERT IT TO DECIMAL
         UNPK  UNPKWORK,DBLWD          UNPACK ADCON VALUE
         OI    UNPKWORK+7,X'F0'        CLEAR SIGN
         LA    R2,UNPKWORK             POINT TO 1ST BYTE
         LA    R15,8                   MAX LENGTH
ACCKLDG0 CLI   0(R2),C'0'              AT A LEADING ZERO?
         BNE   ACATLHE                 NO
         LA    R2,1(R2)                YES, STEP TO NEXT DIGIT
         BCT   R15,ACCKLDG0            AND LOOP
         MVI   1(R1),C')'              NO OFFSET, JUST RT PAREN
         B     ACFINI                  CONTINUE
ACATLHE  BCTR  R15,0                   MAKE LENGTH CODE FOR MOVE
         EX    R15,ACMVOFST            MOVE IN THE OFFSET
         AR    R1,R15                  POINT TO END
         MVI   3(R1),C')'              AND ADD FINAL PAREN
ACFINI   UNPK  OUTOFFST(7),LOCATION+1(4) UNPACK OFFSET
         MVI   OUTOFFST+6,C' '         CLEAR TRASH
         TR    OUTOFFST,TRCHAR-C'0'    MAKE PRINTABLE
         L     R12,CURRTXTA            POINT TO CURRENT TEXT
         UNPK  OUTTEXT(9),0(5,R12)     UNPACK TEXT
         MVI   OUTTEXT+8,C' '          CLEAR TRASH
         TR    OUTTEXT(8),TRCHAR-C'0'  MAKE PRINTABLE
         CLI   CURLBRLD+1,4            4-BYTE ADCON?
         BNL   ACOUTPT                 YES
         MVC   OUTTEXT+6(2),=CL2'  '   LESS, CLEAR LAST TWO
         CLI   CURLBRLD+1,3            3-BYTE ADCON?
         BNL   ACOUTPT                 YES
         MVC   OUTTEXT+4(2),=CL2'  '   LESS, CLEAR LAST TWO
         CLI   CURLBRLD+1,2            2-BYTE ADCON?
         BNL   ACOUTPT                 YES
         MVC   OUTTEXT+2(2),=CL2'  '   LESS, CLEAR LAST TWO
ACOUTPT  BAS   R9,OUTPUT               WRITE TO OUTPUT
ACADVNC  LH    R1,CURLBRLD             GET ADCON LENGTH
         A     R1,CURRTXTA             UPDATE CURRENT
         ST    R1,CURRTXTA                TEXT ADDRESS
         LH    R1,CURLBRLD             GET ADCON LENGTH
         A     R1,LOCATION             UPDATE CURRENT
         ST    R1,LOCATION                LOCATION OFFSET
ACXIT    L     R9,AC9                  GET RETURN ADDRESS
         BR    R9                      EXIT
AC9      DC    A(0)                    RETURN ADDRESS
ACMVOFST MVC   2(1,R1),0(R2)           EXECUTED MOVE
*********************************************************************
* PROCESS V-CON ENTRIES                                             *
*********************************************************************
VCONLOC  ST    R9,VC9                  ASSUME DATA-ONLY END
         CLI   STAGE,1                 NOW IN STAGE 1?
         BE    VCADVNC                 YES
         CLI   CONPROG,0               IS A CONSTANT IN PROGRESS?
         BE    VCCHKLB                 NO
         BAS   R9,FORCECON             YES, GO FORCE CONSTANT OUT
VCCHKLB  CLI   OUTLABEL,C' '           LABEL ALREADY ON OUTPUT?
         BE    VCMOVE                  NO
         CLI   CURLBLBL,C' '           CONSTANT HAS A LABEL?
         BE    VCMOVE                  NO, USE EXISTING LABEL
         MVC   HOLDOUT,OUTREC          SAVE OUTPUT RECORD
         MVC   OUTMNEM(3),=CL3'EQU'    SET MNEMONIC TO EQU
         MVI   OUTOPND,C'*'            SHOW LABEL FOR HERE
         CLC   LBLLENG,H0              LENGTH ASSOCIATED WITH LABEL?
         BE    VCOUTLB                 NO
         MVI   OUTOPND+1,C','          MOVE SEPARATOR
         LH    R9,LBLLENG              PICK UP LABEL LENGTH
         CVD   R9,DBLWD                CONVERT IT TO PACKED DECIMAL
         UNPK  OUTOPND+2(3),DBLWD UNPACK LABEL LENGTH
         OI    OUTOPND+4,X'F0'         CLEAR SIGN
VCOUTLB  BAS   R9,OUTPUT               YES, GO WRITE CURRENT OUTPUT
         MVC   OUTREC+8(72),HOLDOUT+8  RESTORE OUTPUT RECORD - LABEL
VCMOVE   MVC   OUTMNEM(2),=CL2'DC'     SET UP MNEMONIC
         MVC   OUTOPND(2),=CL2'VL'     BEGIN OPERAND
         MVC   OUTOPND+2(1),CURLBRLD+1 MOVE VCON LENGTH
         OI    OUTOPND+2,X'F0'            AND MAKE IT PRINTABLE
         MVI   OUTOPND+3,C'('          OPENING PAREN
         MVC   OUTOPND+4(8),CURLBLBL   MOVE IN EXTERNAL NAME
         LA    R2,OUTOPND+11           POINT TO LAST POSSIBLE BYTE
VCCHKRHE CLI   0(R2),C' '              AT RIGHT END?
         BNE   VCATRHE                 YES
         BCT   R2,VCCHKRHE             LOOP TO FIND RHE
VCATRHE  MVI   1(R2),C')'              MOVE CLOSING PAREN
         UNPK  OUTOFFST(7),LOCATION+1(4) UNPACK OFFSET
         MVI   OUTOFFST+6,C' '         CLEAR TRASH
         TR    OUTOFFST,TRCHAR-C'0'    MAKE PRINTABLE
         L     R12,CURRTXTA            POINT TO CURRENT TEXT
         UNPK  OUTTEXT(9),0(5,R12)     UNPACK TEXT
         MVI   OUTTEXT+8,C' '          CLEAR TRASH
         TR    OUTTEXT(8),TRCHAR-C'0'  MAKE PRINTABLE
         CLI   CURLBRLD+1,4            4-BYTE V-CON?
         BNL   VCOUTPT                 YES
         MVC   OUTTEXT+6(2),=CL2'  '   LESS, CLEAR LAST TWO
         CLI   CURLBRLD+1,3            3-BYTE V-CON?
         BNL   VCOUTPT                 YES
         MVC   OUTTEXT+4(2),=CL2'  '   LESS, CLEAR LAST TWO
         CLI   CURLBRLD+1,2            2-BYTE V-CON?
         BNL   VCOUTPT                 YES
         MVC   OUTTEXT+2(2),=CL2'  '   LESS, CLEAR LAST TWO
VCOUTPT  BAS   R9,OUTPUT               YES, GO WRITE CURRENT OUTPUT
VCADVNC  LH    R1,CURLBRLD             GET ADCON LENGTH
         A     R1,CURRTXTA             UPDATE CURRENT
         ST    R1,CURRTXTA                TEXT ADDRESS
         LH    R1,CURLBRLD             GET ADCON LENGTH
         A     R1,LOCATION             UPDATE CURRENT
         ST    R1,LOCATION                LOCATION OFFSET
VCXIT    L     R9,VC9                  GET RETURN ADDRESS
         BR    R9                      EXIT
VC9      DC    A(0)                    RETURN ADDRESS
*********************************************************************
* PROCESS MACHINE INSTRUCTIONS. GENERAL OUTPUT FORMATTING IS DONE   *
* AND A SPECIALIZED ROUTINE IS CALLED TO FORMAT THE OPERANDS. IF    *
* ANY TESTS DETERMINE THIS MAY NOT BE AN INSTRUCTION, THE ISINST    *
* FLAG IS TURNED OFF, AND INSTRUCTION PROCESSING IS ABANDONED.      *
*********************************************************************
INSTRUCS ST    R9,IS9                  SAVE RETURN ADDRESS
         CLI   CONPROG,0               IS A CONSTANT IN PROGRESS?
         BE    ISMVMN                  NO
         BAS   R9,FORCECON             YES, GO WRITE CONSTANT
ISMVMN   MVC   OUTMNEM,INSTMNEM        MNEMONIC TO OUTPUT
         UNPK  OUTOFFST(7),LOCATION+1(4) UNPACK LOCATION
         MVI   OUTOFFST+6,C' '         CLEAR TRASH
         TR    OUTOFFST,TRCHAR-C'0'    MAKE PRINTABLE
         UNPK  OUTTEXT(13),INSTTEXT(7) UNPACK INSTRUCTION TEXT
         MVI   OUTTEXT+12,C' '         CLEAR TRASH
         TR    OUTTEXT,TRCHAR-C'0'     MAKE PRINTABLE
         CLI   INSTLENG,6              6-BYTE INSTRUCTION?
         BE    ISOPNDS                 YES
         MVC   OUTTEXT+8(4),=CL4' '    NO, CLEAR LAST TWO BYTES
         CLI   INSTLENG,4              4-BYTE INSTRUCTION?
         BE    ISOPNDS                 YES
         MVC   OUTTEXT+4(4),=CL4' '    NO, CLEAR LAST TWO BYTES
ISOPNDS  LA    R9,ISRETRN              LOAD DESIRED RETURN ADDRESS
         LA    R8,OUTOPND              POINT TO OPERAND FIELD
         SR    R2,R2                   CLEAR FOR INSERT
         IC    R2,INSTFMT              PICK UP INSTRUCTION FORMAT CODE
         SLL   R2,2                    MULTIPLY BY 4
         B     *(R2)                   GO PROCESS OPERANDS
         B     EOPND                   FMT=01: E FORMAT
         B     RIOPND                  FMT=02: RI FORMAT
         B     RR1OPND                 FMT=03: RR FORMAT TYPE 1
         B     RR2OPND                 FMT=04: RR FORMAT TYPE 2
         B     RR3OPND                 FMT=05: RR FORMAT TYPE 3
         B     RRE1OPND                FMT=06: RRE FORMAT TYPE 1
         B     RRE2OPND                FMT=07: RRE FORMAT TYPE 2
         B     RRE3OPND                FMT=08: RRE FORMAT TYPE 3
         B     RRF1OPND                FMT=09: RRF FORMAT TYPE 1
         B     RRF2OPND                FMT=0A: RRF FORMAT TYPE 2
         B     RRF3OPND                FMT=0B: RRF FORMAT TYPE 3
         B     RS1OPND                 FMT=0C: RS FORMAT TYPE 1
         B     RS2OPND                 FMT=0D: RS FORMAT TYPE 2
         B     RS3OPND                 FMT=0E: RS FORMAT TYPE 3
         B     RSIOPND                 FMT=0F: RSI FORMAT
         B     RX1OPND                 FMT=10: RX FORMAT TYPE 1
         B     RX2OPND                 FMT=11: RX FORMAT TYPE 2
         B     RXEOPND                 FMT=12: RXE FORMAT
         B     RXFOPND                 FMT=13: RXF FORMAT
         B     S1OPND                  FMT=14: S FORMAT TYPE 1
         B     S2OPND                  FMT=15: S FORMAT TYPE 2
         B     SIOPND                  FMT=16: SI FORMAT
         B     SS1OPND                 FMT=17: SS FORMAT TYPE 1
         B     SS2OPND                 FMT=18: SS FORMAT TYPE 2
         B     SS3OPND                 FMT=19: SS FORMAT TYPE 3
         B     SS4OPND                 FMT=1A: SS FORMAT TYPE 4
         B     SS5OPND                 FMT=1B: SS FORMAT TYPE 5
         B     SSEOPND                 FMT=1C: SSE FORMAT
         B     RR4OPND                 FMT=1D: RR FORMAT TYPE 4
         B     S3OPND                  FMT=14: S FORMAT TYPE 3
ISRETRN  CLI   ISINST,1                STILL LOOKS LIKE AN INSTRUCTION?
         BE    ISOUTPT                 YES, GO WRITE TO OUTPUT
         MVC   OUTREC,BLANKS           NO, CLEAR OUTPUT RECORD
         B     ISXIT                   AND EXIT
ISOUTPT  CLI   STAGE,1                 NOW IN STAGE 1?
         BE    ISADVNC                 YES
         BAS   R9,OUTPUT               GO WRITE TO OUTPUT
ISADVNC  L     R1,CURRTXTA             POINT TO CURRENT TEXT ADDRESS
         SR    R2,R2                   CLEAR FOR INSERT
         IC    R2,INSTLENG             PICK UP INSTRUCTION LENGTH
         AR    R1,R2                   POINT TO NEXT INSTRUCTION
         ST    R1,CURRTXTA             UPDATE TEXT ADDRESS
         A     R2,LOCATION             UPDATE LOCATION
         ST    R2,LOCATION                COUNTER OFFSET
         MVI   LAST,C'I'               SHOW LAST WAS INSTRUCTION
         CLI   INSTCCNT,0              THIS INST SETS COND CODE?
         BE    ISXIT                   NO
         SR    R1,R1                   YES, CLEAR FOR INSERT
         IC    R1,INSTCCNT             PICK UP TABLE ENTRY NBR
         BCTR  R1,0                    MAKE ZERO-RELATIVE
         MHI   R1,L'CCTBLNT            MULTIPLY BY TABLE ENTRY LENGTH
         LA    R1,CCTBLNT(R1)          POINT TO ENTRY
         MVC   LASTCCNT,0(R1)          AND SAVE THE ENTRY
ISXIT    L     R9,IS9                  GET RETURN ADDRESS
         BR    R9                      EXIT
IS9      DC    A(0)                    RETURN ADDRESS
***********************************************************************
*              E-FORMAT INSTRUCTION OPERANDS                          *
*                                                                     *
* THESE 2 BYTE INSTRUCTIONS HAVE TWO-BYTE OP-CODES, WHERE THE FIRST   *
* BYTE IS X'01'                                                       *
*                                                                     *
* FMT  NBR  MEMORY CONTENT                       OPERAND CODING       *
* E1   01   .OC.OC.OC.OC.                        (NONE)               *
*                                                                     *
* SINCE THESE INSTRUCTIONS HAVE NO OPERANDS, NO ACTION IS REQUIRED.   *
*                                                                     *
* E-FORMAT INSTRUCTIONS INCLUDE:                                      *
*       PR    UPT   SCKPF TRAP2                                       *
*                                                                     *
* SPECIAL OPCFLAG1 FLAGS INCLUDE: NONE                                *
* SPECIAL OPCFLAG2 FLAGS INCLUDE: NONE                                *
***********************************************************************
EOPND    ST    R9,EO9                  SAVE RETURN ADDRESS
EOXIT    L     R9,EO9                  GET RETURN ADDRESS
         BR    R9                      EXIT
EO9      DC    A(0)                    RETURN ADDRESS
***********************************************************************
*              RI-FORMAT INSTRUCTION OPERANDS                         *
*                                                                     *
* THESE 4-BYTE INSTRUCTIONS HAVE 1.5-BYTE OP-CODES, THE FIRST OP-CODE *
* BYTE IS X'A7' AND THE THIRD NYBBLE IS LOCATED IN THE 4TH NYBBLE     *
* OF THE INSTRUCTION.                                                 *
*                                                                     *
* FMT  NBR  MEMORY CONTENT                        OPERAND CODING      *
* RI1   02  .OC.OC.R1.OC.I2.I2.I2.I2.             R1,I2               *
*                                                                     *
* RI-FORMAT INSTRUCTIONS INCLUDE:                                     *
*       TMH   TML   BRC   BRAS  BRCT  LHI   AHI   MHI   CHI           *
*                                                                     *
* SPECIAL OPCFLAG1 FLAGS INCLUDE: NONE                                *
* SPECIAL OPCFLAG2 FLAGS INCLUDE: NONE                                *
*                                                                     *
* THE RELATIVE BRANCH INSTRUCTIONS (BRC, BRAS, AND BRCT) TREAT THE I2 *
* OPERAND AS A NUMBER OF HALFWORDS TO THE BRANCH TARGET BEFORE OR     *
* AFTER THE CURRENT LOCATION (*- OR *+).                              *
***********************************************************************
RIOPND   ST    R9,RI9                  SAVE RETURN ADDRESS
         CLI   STAGE,1                 THIS STAGE 1?
         BE    RIXIT                   YES, NOTHING TO DO HERE
         IC    R1,INSTTEXT+1           GET R1 OPERAND
         SRL   R1,4                      TO LOW NYBBLE
         BAS   R9,REGOPNDS             GO FORMAT THE R1 REGISTER
         CLI   OUTMNEM,C'B'            THIS A RELATIVE BRANCH?
         BNE   RIHEXI2                 NO
         MVC   0(3,R8),CMASTRP         MOVE ",*+"
         SR    R1,R1                   CLEAR FOR INSERT
         ICM   R1,3,INSTTEXT+2         PICK UP .I2.I2.I2.I2.
         BNM   RIRELOP                 BRANCH IF NOT MINUS
         MVI   2(R8),C'-'              CHANGE THE SIGN
         LCR   R1,R1                   MAKE VALUE POSITIVE
RIRELOP  SLL   R1,1                    DOUBLE FOR HALFWORDS
         LA    R8,3(R8)                STEP PAST THE DELIMITER
         BAS   R9,DECMOPND             GO FORMAT THE NBR HALFWORDS
         B     RIXIT                   GO TO EXIT
RIHEXI2  MVC   0(3,R8),CMAXQT          MOVE ",X'"
         UNPK  3(5,R8),INSTTEXT+2(3)   UNPACK IMMEDIATE OPERAND
         TR    3(4,R8),TRCHAR-C'0'     MAKE IT PRINTABLE
         MVI   7(R8),C''''             MOVE ENDING QUOTE
RIXIT    L     R9,RI9                  GET RETURN ADDRESS
         BR    R9                      EXIT
RI9      DC    A(0)                    RETURN ADDRESS
***********************************************************************
*              RR-FORMAT INSTRUCTIONS, TYPE 1 OPERANDS                *
* THESE 2-BYTE INSTRUCTIONS HAVE SINGLE-BYTE OP-CODES.                *
*                                                                     *
* FMT  NBR  MEMORY CONTENT                       OPERAND CODING       *
* RR1   03  .OC.OC.R1.R2.                        R1,R2                *
*                                                                     *
* RR-FORMAT TYPE 1 INSTRUCTIONS INCLUDE:                              *
*       BALR  BCTR  BSM   BASSM BASR  MVCL  CLCL  LPR   LNR           *
*       LTR   LCR   NR    CLR   OR    XR    LR    CR    AR            *
*       SR    MR    DR    ALR   SLR   LPDR  LNDR  LTDR  LCDR          *
*       HDR   LDXR  MXR   MXDR  LDR   CDR   ADR   SDR   MDR           *
*       DDR   AWR   SWR   LPER  LNER  LTER  LCER  HER   LEDR          *
*       AXR   SXR   LER   CER   AER   SER   MDER  DER   AUR           *
*       SUR                                                           *
*                                                                     *
* SPECIAL OPCFLAG1 FLAGS INCLUDE: X'01'                               *
* SPECIAL OPCFLAG2 FLAGS INCLUDE: X'80', X'10', X'04', X'02', X'01'   *
***********************************************************************
RR1OPND  ST    R9,RR19                 SAVE RETURN ADDRESS
         CLC   INSTFLG1(2),XZROS       ANY FLAGS?
         BE    RR1CKSTG                NO
RR1F101  TM    INSTFLG1,X'01'          R2 MUST BE FP PAIR START?
         BZ    RR1F280                 NO
         MVC   DBLWD(1),INSTTEXT+1     MOVE .R1.R2.
         NI    DBLWD,X'0F'             CLEAR ALL BUT R2
         TRT   DBLWD(1),FLTPTPR        VALID FLOATING POINT PAIR?
         BZ    RR1F280                 YES
RR1NOTI  MVI   ISINST,0                SHOW NOT AN INSTRUCTION
         B     RR1XIT                  AND EXIT
RR1F280  TM    INSTFLG2,X'80'          R1 MUST BE FP PAIR START?
         BZ    RR1F210                 NO
         PACK  DBLWD(1),INSTTEXT+1(1)  PACK .R1.R2. INTO DBLWD
         NI    DBLWD,X'0F'             CLEAR ALL BUT R1
         TRT   DBLWD(1),FLTPTPR        VALID FLOATING POINT PAIR?
         BNZ   RR1NOTI                 NO
RR1F210  TM    INSTFLG2,X'10'          R1 & R2 MUST DIFFER?
         BZ    RR1F204                 NO
         PACK  DBLWD(1),INSTTEXT+1(1)  INVERT .R1.R2.
         CLC   INSTTEXT+1(1),DBLWD     .R1.R2. = .R2.R1.?
         BE    RR1NOTI                 YES, NOT AN INSTRUCTION
RR1F204  TM    INSTFLG2,X'04'          R2 MUST BE EVEN?
         BZ    RR1F202                 NO
         TM    INSTTEXT+1,X'01'        IS R2 EVEN?
         BO    RR1NOTI                 NO, NOT AN INSTRUCTION
RR1F202  TM    INSTFLG2,X'02'          R1 MUST BE EVEN?
         BZ    RR1CKSTG                NO
         TM    INSTTEXT+1,X'10'        IS R2 EVEN?
         BO    RR1NOTI                 NO, NOT AN INSTRUCTION
RR1CKSTG CLI   STAGE,1                 THIS STAGE 1?
         BE    RR1XIT                  YES, NOTHING TO DO HERE
         IC    R1,INSTTEXT+1           PICK UP REGISTER OPERANDS
         SRL   R1,4                    PUT R1 IN LOW NYBBLE
         BAS   R9,REGOPNDS             GO FORMAT THE R1 OPERAND
         MVI   0(R8),C','              MOVE OPERAND SEPARATOR
         LA    R8,1(R8)                STEP PAST COMMA
RR1F201  TM    INSTFLG2,X'01'          R2 PRINTS 0 WHEN 0?
         BZ    RR1FMTR2                NO, GO FORMAT AS A REGISTER
         TM    INSTTEXT+1,X'0F'        IS R2 ZERO?
         BNZ   RR1FMTR2                NO
         MVI   0(R8),C'0'              YES, MOVE A ZERO TO OPERAND
         B     RR1XIT                  AND EXIT
RR1FMTR2 IC    R1,INSTTEXT+1           PICK UP THE R2 OPERAND
         BAS   R9,REGOPNDS             GO FORMAT THE R2 OPERAND
RR1XIT   L     R9,RR19                 GET RETURN ADDRESS
         BR    R9                      EXIT
RR19     DC    A(0)                    RETURN ADDRESS
***********************************************************************
*              RR-FORMAT INSTRUCTIONS, TYPE 2 OPERANDS                *
* THESE 2-BYTE INSTRUCTIONS HAVE SINGLE-BYTE OP-CODES. THE SVCOP TABLE*
* IS USED TO FIND THE SVC NAME, WHICH IS MOVED TO THE SOURCE LINE.    *
*                                                                     *
* FMT  NBR  MEMORY CONTENT                       OPERAND CODING       *
* RR2   04  .OC.OC.I1.I1.                        I1                   *
*                                                                     *
* RR-FORMAT TYPE 2 INSTRUCTIONS INCLUDE: SVC                          *
*                                                                     *
* SPECIAL OPCFLAG1 FLAGS INCLUDE: NONE                                *
* SPECIAL OPCFLAG2 FLAGS INCLUDE: NONE                                *
***********************************************************************
RR2OPND  ST    R9,RR29                 SAVE RETURN ADDRESS
         CLI   STAGE,1                 THIS STAGE 1?
         BE    RR2XIT                  YES, NOTHING TO DO HERE
         SR    R1,R1                   CLEAR FOR INSERT
         ICM   R1,1,INSTTEXT+1         PICK UP IMMEDIATE OPERAND VALUE
         CVD   R1,DBLWD                CONVERT TO PACKED
         CP    DBLWD,PK99              OVER 100?
         BH    RR2THREE                YES
         CP    DBLWD,PK9               OVER 10?
         BH    RR2TWO                  YES
         UNPK  OUTOPND(1),DBLWD        SINGLE DIGIT VALUE
         OI    OUTOPND,X'F0'           CLEAR THE SIGN
         B     RR2NAME                 AND GO LOCATE THE SVC NAME
RR2TWO   UNPK  OUTOPND(2),DBLWD        SINGLE DIGIT VALUE
         OI    OUTOPND+1,X'F0'         CLEAR THE SIGN
         B     RR2NAME                 AND GO LOCATE THE NAME
RR2THREE UNPK  OUTOPND(3),DBLWD        SINGLE DIGIT VALUE
         OI    OUTOPND+2,X'F0'         CLEAR THE SIGN
RR2NAME  LA    R1,SVCOP                POINT TO THE SVC NAME TABLE
RR2CKND  CLI   0(R1),X'FF'             AT END OF TABLE?
         BNE   RR2CKNBR                NO
         MVC   OUTOPND+14(11),=CL11'UNKNOWN SVC' SHOW UNKNOWN SVC
         B     RR2XIT                  AND EXIT
RR2CKNBR CLC   0(1,R1),INSTTEXT+1      FOUND THE SVC NAME ENTRY?
         BE    RR2GOTIT                YES
         LA    R1,L'SVCOP(R1)          NO, STEP TO NEXT
         B     RR2CKND                 CONTINUE SEARCH
RR2GOTIT MVC   OUTOPND+14(9),1(R1)     MOVE SVC NAME
RR2XIT   L     R9,RR29                 GET RETURN ADDRESS
         BR    R9                      EXIT
RR29     DC    A(0)                    RETURN ADDRESS
***********************************************************************
*              RR-FORMAT INSTRUCTIONS, TYPE 3 OPERANDS                *
* THESE 2-BYTE INSTRUCTIONS HAVE SINGLE-BYTE OP-CODES.                *
*                                                                     *
* FMT  NBR  MEMORY CONTENT                       OPERAND CODING       *
* RR3   05  .OC.OC.R1.--.                        R1                   *
*                                                                     *
* RR-FORMAT TYPE 3 INSTRUCTIONS INCLUDE: SPM                          *
*                                                                     *
* SPECIAL OPCFLAG1 FLAGS INCLUDE: NONE                                *
* SPECIAL OPCFLAG2 FLAGS INCLUDE: NONE                                *
***********************************************************************
RR3OPND  ST    R9,RR39                 SAVE RETURN ADDRESS
         TM    INSTTEXT+1,X'0F'        LAST NYBBLE OF INSTRUCTION = 0?
         BZ    RR3CKSTG                YES
         MVI   ISINST,0                NO, RESET THE INSTRUCTION SWITCH
         B     RR3XIT                  AND EXIT
RR3CKSTG CLI   STAGE,1                 THIS STAGE 1?
         BE    RR3XIT                  YES, NOTHING TO DO HERE
         IC    R1,INSTTEXT+1           GET REGISTER OPERAND
         SRL   R1,4                    AND SHIFT TO LOW NYBBLE
         BAS   R9,REGOPNDS             GO FORMAT THE REGISTER OPERAND
RR3XIT   L     R9,RR39                 GET RETURN ADDRESS
         BR    R9                      EXIT
RR39     DC    A(0)                    RETURN ADDRESS
***********************************************************************
*              RR-FORMAT INSTRUCTIONS, TYPE 4 OPERANDS                *
* THESE 2-BYTE INSTRUCTIONS HAVE SINGLE-BYTE OP-CODES. ONLY THE RR    *
* FORMAT CONDITIONAL BRANCH INSTRUCTION HAS THIS FORMAT.              *
*                                                                     *
* FMT  NBR  MEMORY CONTENT                       OPERAND CODING       *
* RR4   05  .OC.OC.M1.R2.                        M1,R2                *
*                                                                     *
* RR-FORMAT TYPE 4 INSTRUCTIONS INCLUDE: BCR                          *
*                                                                     *
* SPECIAL OPCFLAG1 FLAGS INCLUDE: NONE                                *
* SPECIAL OPCFLAG2 FLAGS INCLUDE: X'01'                               *
***********************************************************************
RR4OPND  ST    R9,RR49                 SAVE RETURN ADDRESS
         CLI   STAGE,1                 THIS STAGE 1?
         BE    RR4XIT                  YES, NOTHING TO DO HERE
         IC    R1,INSTTEXT+1           PICK UP THE MASK VALUE
         SRL   R1,4                    SHIFT TO LOW NYBBLE
         BAS   R9,CONDOPND             GO PROCESS CONDITIONAL BRANCH
         TM    INSTFLG2,X'01'          R2 PRINTS AS 0 WHEN 0?
         BZ    RR4FMTR2                NO
         TM    INSTTEXT+1,X'0F'        IS R2=0?
         BNZ   RR4FMTR2                NO
         MVI   0(R8),C'0'              YES, MOVE A ZERO TO PRINT
         B     RR4XIT                  AND EXIT
RR4FMTR2 IC    R1,INSTTEXT+1           PICK UP REGISTER OPERAND VALUE
         BAS   R9,REGOPNDS             GO FORMAT THE REGISTER OPERAND
RR4XIT   L     R9,RR49                 GET RETURN ADDRESS
         BR    R9                      EXIT
RR49     DC    A(0)                    RETURN ADDRESS
***********************************************************************
*              RRE-FORMAT INSTRUCTION, TYPE 1 OPERANDS                *
* THESE 4-BYTE INSTRUCTIONS HAVE 2-BYTE OP-CODES WHOSE FIRST BYTE IS  *
* X'B2' OR X'B3'                                                      *
*                                                                     *
* FMT  NBR  MEMORY CONTENT                        OPERAND CODING      *
* RRE1  06  .OC.OC.OC.OC.--.--.R1.R2.             R1,R2               *
*                                                                     *
* RRE-FORMAT TYPE 1 INSTRUCTIONS INCLUDE:                             *
*       IPTE  IVSK  PT    ISKE  RRBE  SSKE  TB    DXR   BAKR          *
*       CKSM  SQDR  SQER  STURA EREG  ESTA  LURA  TAR   CPYA          *
*       SAR   EAR   MSR   MVPG  MVST  CUSE  BSG   BSA   CLST          *
*       SRST  TRE   CUUTF CUTFU LPEBR LNEBR LTEBR LCEBR LDEBR         *
*       LXDBR LXEBR MXDBR KEBR  CEBR  AEBR  SEBR  MDEBR DEBR          *
*       LPDBR LNDBR LTDBR LCDBR SQEBR SQDBR SQXBR MEEBR KDBR          *
*       CDBR  ADBR  SDBR  MDBR  DDBR  LDER  LXDR  LXER  SQXR          *
*       MEER  LPXBR LNXBR LTXBR LCXBR LEDBR LDXBR LEXBR KXBR          *
*       CXBR  AXBR  SXBR  MXBR  DXBR  THDER THDR  LPXR  LNXR          *
*       LTXR  LCXR  LXR   LEXR  FIXR  CXR   FIER  FIDR  CEFBR         *
*       CDFBR CXFBR CEFR  CDFR  CXFR                                  *
*                                                                     *
* SPECIAL OPCFLAG1 FLAGS INCLUDE: X'80' (TRE, CKSM), X'01'            *
* SPECIAL OPCFLAG2 FLAGS INCLUDE: X'80', X'10', X'04', X'02'          *
***********************************************************************
RRE1OPND ST    R9,RRE19                SAVE RETURN ADDRESS
         CLI   INSTTEXT+2,0            3RD BYTE IS ALL ZEROS?
         BZ    RRE1CKFG                YES
RRE1NOTI MVI   ISINST,0                NO, NOT AN INSTRUCTION
         B     RRE1XIT                 EXIT
RRE1CKFG CLC   INSTFLG1(2),XZROS       ANY FLAGS?
         BE    RRE1CKST                NO
RRE1F180 TM    INSTFLG1,X'80'          UNUSUAL INSTRUCTION TESTS?
         BZ    RRE1F101                NO
         CLC   INSTMNEM(3),=CL3'TRE'   THIS IS TRE?
         BNE   RRE1CKSM                NO
         TM    INSTTEXT+3,X'F0'        R1 IS ZERO?
         BZ    RRE1NOTI                YES, NOT INSTRUCTION
         TM    INSTTEXT+3,X'0F'        R2 IS ZERO?
         BZ    RRE1NOTI                YES, NOT INSTRUCTION
         B     RRE1F101                NO, CONTINUE
RRE1CKSM IC    R1,INSTTEXT+3           CKSM: PICK UP .R1.R2.
         LA    R1,1(R1)                COMPUTE .R2.+1
         STC   R1,DBLWD                SAVE .R1.R2+1.
         NI    DBLWD,X'0F'             CLEAR ALL BUT R2+1
         PACK  DBLWD+1(1),INSTTEXT+3(1) INVERT .R1.R2.
         NI    DBLWD+1,X'0F'           CLEAR ALL BUT R1
         CLC   DBLWD(1),DBLWD+1        R1 = R2+1?
         BE    RRE1NOTI                YES, NOT AN INSTRUCTION
RRE1F101 TM    INSTFLG1,X'01'          R2 MUST BE FP PAIR START?
         BZ    RRE1F280                NO
         MVC   DBLWD(1),INSTTEXT+3     MOVE .R1.R2.
         NI    DBLWD,X'0F'             CLEAR ALL BUT R2
         TRT   DBLWD(1),FLTPTPR        VALID FLOATING POINT PAIR?
         BNZ   RRE1NOTI                NO, NOT AN INSTRUCTION
RRE1F280 TM    INSTFLG2,X'80'          R1 MUST BE FP PAIR START?
         BZ    RRE1F210                NO
         PACK  DBLWD(1),INSTTEXT+3(1)  PACK .R1.R2. INTO DBLWD
         NI    DBLWD,X'0F'             CLEAR ALL BUT R1
         TRT   DBLWD(1),FLTPTPR        VALID FLOATING POINT PAIR?
         BNZ   RRE1NOTI                NO
RRE1F210 TM    INSTFLG2,X'10'          R1 & R2 MUST DIFFER?
         BZ    RRE1F204                NO
         PACK  DBLWD(1),INSTTEXT+3(1)  INVERT .R1.R2.
         CLC   INSTTEXT+3(1),DBLWD     .R1.R2. = .R2.R1.?
         BE    RRE1NOTI                YES, NOT AN INSTRUCTION
RRE1F204 TM    INSTFLG2,X'04'          R2 MUST BE EVEN?
         BZ    RRE1F202                NO
         TM    INSTTEXT+3,X'01'        IS R2 EVEN?
         BO    RRE1NOTI                NO, NOT AN INSTRUCTION
RRE1F202 TM    INSTFLG2,X'02'          R1 MUST BE EVEN?
         BZ    RRE1CKST                NO
         TM    INSTTEXT+3,X'10'        IS R2 EVEN?
         BO    RRE1NOTI                NO, NOT AN INSTRUCTION
RRE1CKST CLI   STAGE,1                 THIS STAGE 1?
         BE    RRE1XIT                 YES, NOTHING TO DO HERE
         IC    R1,INSTTEXT+3           PICK UP R1 OPERAND
         SRL   R1,4                    AND MOVE TO LOW NYBBLE
         BAS   R9,REGOPNDS             GO FORMAT THE R1 REGISTER
         MVI   0(R8),C','              SEPARATE OPERANDS
         LA    R8,1(R8)                STEP PAST THE COMMA
         IC    R1,INSTTEXT+3           PICK UP R2 OPERAND
         BAS   R9,REGOPNDS             GO FORMAT THE R2 REGISTER
RRE1XIT  L     R9,RRE19                GET RETURN ADDRESS
         BR    R9                      EXIT
RRE19    DC    A(0)                    RETURN ADDRESS
***********************************************************************
*              RRE-FORMAT INSTRUCTION, TYPE 2 OPERANDS                *
* THESE 4-BYTE INSTRUCTIONS HAVE 2-BYTE OP-CODES WHOSE FIRST BYTE IS  *
* X'B2' OR X'B3'                                                      *
*                                                                     *
* FMT  NBR  MEMORY CONTENT                        OPERAND CODING      *
* RRE2  07  .OC.OC.OC.OC.--.--.R1.--.             R1                  *
*                                                                     *
* RRE-FORMAT TYPE 2 INSTRUCTIONS INCLUDE:                             *
*       IPM   IAC   SSAR  EPAR  ESAR  MSTA  LZER  LZDR  LZXR          *
*       SFPC  EFPC                                                    *
*                                                                     *
* SPECIAL OPCFLAG1 FLAGS INCLUDE: NONE                                *
* SPECIAL OPCFLAG2 FLAGS INCLUDE: X'80', X'02'                        *
***********************************************************************
RRE2OPND ST    R9,RRE29                SAVE RETURN ADDRESS
         CLI   INSTTEXT+2,0            BYTE 3 IS ALL ZEROS?
         BNZ   RRE2NOTI                NO, NOT AN INSTRUCTION
         TM    INSTTEXT+3,X'0F'        LAST NYBBLE IS ALL ZEROS?
         BZ    RRE2CKFG                YES, CONTINUE
RRE2NOTI MVI   ISINST,0                SHOW NOT AN INSTRUCTION
         B     RRE2XIT                 AND EXIT
RRE2CKFG CLI   INSTFLG2,0              ANY FLAGS?
         BE    RRE2CKST                NO
RRE2F280 TM    INSTFLG2,X'80'          R1 MUST BE FP PAIR START?
         BZ    RRE2F202                NO
         PACK  DBLWD(1),INSTTEXT+3(1)  PACK .R1.R2. INTO DBLWD
         NI    DBLWD,X'0F'             CLEAR ALL BUT R1
         TRT   DBLWD(1),FLTPTPR        VALID FLOATING POINT PAIR?
         BNZ   RRE2NOTI                NO
RRE2F202 TM    INSTFLG2,X'02'          R1 MUST BE EVEN?
         BZ    RRE2CKST                NO
         TM    INSTTEXT+3,X'10'        IS R2 EVEN?
         BO    RRE2NOTI                NO, NOT AN INSTRUCTION
RRE2CKST CLI   STAGE,1                 THIS STAGE 1?
         BE    RRE2XIT                 YES, NOTHING TO DO HERE
RRE2R1   IC    R1,INSTTEXT+3           PICK UP THE R1 OPERAND
         SRL   R1,4                    AND SHIFT TO LOW NYBBLE
         BAS   R9,REGOPNDS             GO FORMAT THE R1 OPERAND
RRE2XIT  L     R9,RRE29                GET RETURN ADDRESS
         BR    R9                      EXIT
RRE29    DC    A(0)                    RETURN ADDRESS
***********************************************************************
*              RRE-FORMAT INSTRUCTION, TYPE 3 OPERANDS                *
* THESE 4-BYTE INSTRUCTIONS HAVE 2-BYTE OP-CODES WHOSE FIRST BYTE IS  *
* X'B2' OR X'B3'                                                      *
*                                                                     *
* FMT  NBR  MEMORY CONTENT                        OPERAND CODING      *
* RRE3  08  .OC.OC.OC.OC.--.--.--.--.             (NONE)              *
*                                                                     *
* RRE-FORMAT TYPE 3 INSTRUCTIONS INCLUDE: PALB                        *
*                                                                     *
* SPECIAL OPCFLAG1 FLAGS INCLUDE: NONE                                *
* SPECIAL OPCFLAG2 FLAGS INCLUDE: NONE                                *
***********************************************************************
RRE3OPND ST    R9,RRE39                SAVE RETURN ADDRESS
         CLC   INSTTEXT+2(2),XZROS     BYTES 2-3 ARE ALL ZEROS?
         BZ    RR3XIT                  YES
         MVI   ISINST,0                NO, SHOW NOT AN INSTRUCTION
RRE3XIT  L     R9,RRE39                GET RETURN ADDRESS
         BR    R9                      EXIT
RRE39    DC    A(0)                    RETURN ADDRESS
***********************************************************************
*              RRF-FORMAT INSTRUCTION, TYPE 1 OPERANDS                *
* THESE 4-BYTE INSTRUCTIONS HAVE 2-BYTE OP-CODES WHOSE FIRST BYTE IS  *
* X'B3'.                                                              *
*                                                                     *
* FMT  NBR  MEMORY CONTENT                        OPERAND CODING      *
* RRF1  09  .OC.OC.OC.OC.R1.--.R3.R2.             R1,R3,R2            *
*                                                                     *
* RRF-FORMAT TYPE 1 INSTRUCTIONS INCLUDE:                             *
*        MAEBR MSEBR MADBR MSDBR                                      *
*                                                                     *
* SPECIAL OPCFLAG1 FLAGS INCLUDE: NONE                                *
* SPECIAL OPCFLAG2 FLAGS INCLUDE: NONE                                *
***********************************************************************
RRF1OPND ST    R9,RRF19                SAVE RETURN ADDRESS
         TM    INSTTEXT+2,X'0F'        6TH NYBBLE IS ALL ZEROS?
         BZ    RRF1CKST                YES, CONTINUE
         MVI   ISINST,0                NO, SHOW NOT AN INSTRUCTION
         B     RRF1XIT                 AND EXIT
RRF1CKST CLI   STAGE,1                 THIS STAGE 1?
         BE    RRF1XIT                 YES, NOTHING TO DO HERE
         IC    R1,INSTTEXT+2           PICK UP THE R1 OPERAND
         SRL   R1,4                    SHIFT IT TO THE LOW NYBBLE
         BAS   R9,REGOPNDS             GO FORMAT THE R1 OPERAND
         MVI   0(R8),C','              SEPARATE OPERANDS
         LA    R8,1(R8)                STEP PAST THE COMMA
         IC    R1,INSTTEXT+3           PICK UP THE R3 OPERAND
         SRL   R1,4                    SHIFT IT TO THE LOW NYBBLE
         BAS   R9,REGOPNDS             GO FORMAT THE R3 OPERAND
         MVI   0(R8),C','              SEPARATE OPERANDS
         LA    R8,1(R8)                STEP PAST THE COMMA
         IC    R1,INSTTEXT+2           PICK UP THE R2 OPERAND
         BAS   R9,REGOPNDS             GO FORMAT THE R2 OPERAND
RRF1XIT  L     R9,RRF19                GET RETURN ADDRESS
         BR    R9                      EXIT
RRF19    DC    A(0)                    RETURN ADDRESS
***********************************************************************
*              RRF-FORMAT INSTRUCTION, TYPE 2 OPERANDS                *
* THESE 4-BYTE INSTRUCTIONS HAVE 2-BYTE OP-CODES WHOSE FIRST BYTE IS  *
* X'B3'.                                                              *
*                                                                     *
* FMT  NBR  MEMORY CONTENT                        OPERAND CODING      *
* RRF2  0A  .OC.OC.OC.OC.M3.--.R1.R2.             R1,M3,R2            *
*                                                                     *
* RRF-FORMAT TYPE 2 INSTRUCTIONS INCLUDE:                             *
*        FIXBR TBEDR TBDR  FIEBR FIDBR CFEBR CFDBR CFXBR CFER         *
*        CFDR  CFXR                                                   *
*                                                                     *
* SPECIAL OPCFLAG1 FLAGS INCLUDE: X'01'                               *
* SPECIAL OPCFLAG2 FLAGS INCLUDE: X'80', X'40'                        *
***********************************************************************
RRF2OPND ST    R9,RRF29                SAVE RETURN ADDRESS
         TM    INSTTEXT+2,X'0F'        6TH NYBBLE IS ALL ZEROS?
         BNZ   RRF2NOTI                NO, NOT AN INSTRUCTION
         CLC   INSTFLG1(2),XZROS       ANY FLAGS?
         BE    RRF2CKST                NO
RRF2F101 TM    INSTFLG1,X'01'          R2 MUST BE FP PAIR START?
         BZ    RRF2F280                NO
         MVC   DBLWD(1),INSTTEXT+3     MOVE .R1.R2.
         NI    DBLWD,X'0F'             CLEAR ALL BUT R2
         TRT   DBLWD(1),FLTPTPR        VALID FLOATING POINT PAIR?
         BNZ   RRF2NOTI                NO, NOT AN INSTRUCTION
RRF2F280 TM    INSTFLG2,X'80'          R1 MUST BE FP PAIR START?
         BZ    RRF2F240                NO
         PACK  DBLWD(1),INSTTEXT+3(1)  PACK .R1.R2. INTO DBLWD
         NI    DBLWD,X'0F'             CLEAR ALL BUT R1
         TRT   DBLWD(1),FLTPTPR        VALID FLOATING POINT PAIR?
         BNZ   RRF2NOTI                NO
RRF2F240 TM    INSTFLG2,X'40'          M3 MUST BE 0,1,4,5,6,7?
         BZ    RRF2CKST                NO
         PACK  DBLWD(1),INSTTEXT+2(1)  PACK .M3.--. INTO DBLWD
         NI    DBLWD,X'0F'             CLEAR ALL BUT M3
         TRT   DBLWD(1),VALIDM3        VALID M3 MASK VALUE?
         BZ    RRF2CKST                YES
RRF2NOTI MVI   ISINST,0                NO, SHOW NOT AN INSTRUCTION
         B     RRF2XIT                 AND EXIT
RRF2CKST CLI   STAGE,1                 THIS STAGE 1?
         BE    RRF2XIT                 YES, NOTHING TO DO HERE
         IC    R1,INSTTEXT+3           PICK UP R1R2
         SRL   R1,4                    SHIFT OUT R2
         BAS   R9,REGOPNDS             GO FORMAT R1 OPERAND
         MVI   0(R8),C','              SEPARATE OPERANDS
         LA    R8,1(R8)                STEP PAST COMMA
         SR    R1,R1                   CLEAR FOR INSERT
         IC    R1,INSTTEXT+2           PICK UP M3--
         SRL   R1,4                    SHIFT OUT --
         BAS   R9,DECMOPND             GO FORMAT M3 OPERAND
         MVI   0(R8),C','              SEPARATE OPERANDS
         LA    R8,1(R8)                STEP PAST COMMA
         IC    R1,INSTTEXT+3           PICK UP R1R2
         BAS   R9,REGOPNDS             GO FORMAT R2 OPERAND
RRF2XIT  L     R9,RRF29                GET RETURN ADDRESS
         BR    R9                      EXIT
RRF29    DC    A(0)                    RETURN ADDRESS
***********************************************************************
*              RRF-FORMAT INSTRUCTION, TYPE 3 OPERANDS                *
* THESE 4-BYTE INSTRUCTIONS HAVE 2-BYTE OP-CODES WHOSE FIRST BYTE IS  *
* X'B3'.                                                              *
*                                                                     *
* FMT  NBR  MEMORY CONTENT                        OPERAND CODING      *
* RRF3  0B  .OC.OC.OC.OC.R3.M4.R1.R2.             R1,R3,R2,M4         *
*                                                                     *
* RRF-FORMAT TYPE 3 INSTRUCTIONS INCLUDE:  DIEBR DIDBR                *
*                                                                     *
* SPECIAL OPCFLAG1 FLAGS INCLUDE: X'80' (DIEBR, DIDBR)                *
* SPECIAL OPCFLAG2 FLAGS INCLUDE: X'40'                               *
*********************************************************************
RRF3OPND ST    R9,RRF39                SAVE RETURN ADDRESS
         CLC   INSTFLG1(2),XZROS       ANY FLAGS SET?
         BE    RRF3CKST                NO
         TM    INSTFLG1,X'80'          DIEBR OR DIDBR INSTRUCTION?
         BZ    RRF3F240                NO
         PACK  DBLWD(1),INSTTEXT+2(1)  INVERT .R3.M4.
         NI    DBLWD,X'0F'             CLEAR ALL BUT R3
         PACK  DBLWD+1(1),INSTTEXT+3(1) INVERT .R1.R2.
         NI    DBLWD+1,X'0F'           CLEAR ALL BUT R1
         MVC   DBLWD+2(1),INSTTEXT+3   MOVE .R1.R2.
         NI    DBLWD+2,X'0F'           CLEAR ALL BUT R2
         CLC   DBLWD(1),DBLWD+1        R3=R1?
         BE    RRF3NOTI                YES, NOT AN INSTRUCTION
         CLC   DBLWD(1),DBLWD+2        R3=R2?
         BE    RRF3NOTI                YES, NOT AN INSTRUCTION
         CLC   DBLWD+1(1),DBLWD+2      R1=R2?
         BE    RRF3NOTI                YES, NOT AN INSTRUCTION
RRF3F240 TM    INSTFLG2,X'40'          M3 MUST BE 0,1,4,5,6,7?
         BZ    RRF3CKST                NO
         MVC   DBLWD(1),INSTTEXT+2     MOVE .R3.M4. INTO DBLWD
         NI    DBLWD,X'0F'             CLEAR ALL BUT M4
         TRT   DBLWD(1),VALIDM3        VALID M3 MASK VALUE?
         BZ    RRF3CKST                YES
RRF3NOTI MVI   ISINST,0                SHOW NOT AN INSTRUCTION
         B     RRF3XIT                 AND EXIT
RRF3CKST CLI   STAGE,1                 THIS STAGE 1?
         BE    RRF3XIT                 YES, NOTHING TO DO HERE
         IC    R1,INSTTEXT+3           PICK UP R1R2
         SRL   R1,4                    SHIFT OUT R2
         BAS   R9,REGOPNDS             GO FORMAT R1 OPERAND
         MVI   0(R8),C','              SEPARATE OPERANDS
         LA    R8,1(R8)                STEP PAST THE COMMA
         IC    R1,INSTTEXT+2           PICK UP R3M4
         SRL   R1,4                    SHIFT OUT M4
         BAS   R9,REGOPNDS             GO FORMAT R3 OPERAND
         MVI   0(R8),C','              SEPARATE OPERANDS
         LA    R8,1(R8)                STEP PAST THE COMMA
         IC    R1,INSTTEXT+3           PICK UP R1R2
         BAS   R9,REGOPNDS             GO FORMAT R2 OPERAND
         MVI   0(R8),C','              SEPARATE OPERANDS
         LA    R8,1(R8)                STEP PAST THE COMMA
         IC    R1,INSTTEXT+2           PICK UP R3M4
         N     R1,ZEROF                ERASE ALL BUT M4
         BAS   R9,DECMOPND             GO FORMAT M4 OPERAND
RRF3XIT  L     R9,RRF39                GET RETURN ADDRESS
         BR    R9                      EXIT
RRF39    DC    A(0)                    RETURN ADDRESS
***********************************************************************
*                RS-FORMAT INSTRUCTION, TYPE 1 OPERANDS               *
* THESE 4-BYTE INSTRUCTIONS HAVE SINGLE-BYTE OP-CODES.                *
*                                                                     *
* FMT  NBR  MEMORY CONTENT                        OPERAND CODING      *
* RS1   0C  .OC.OC.R1.R3.B2.D2.D2.D2.             R1,R3,D2(B2)        *
*                                                                     *
*  RS-FORMAT TYPE 1 INSTRUCTIONS INCLUDE:                             *
*       BXH   BXLE  STM   LM    TRACE LAM   STAM  MVCLE CLCLE         *
*       SIGP  STCTL LCTL  CS    CDS                                   *
*                                                                     *
* SPECIAL OPCFLAG1 FLAGS INCLUDE: X'80' (MVCLE, CLCLE)                *
* SPECIAL OPCFLAG2 FLAGS INCLUDE: X'08', X'02'                        *
***********************************************************************
RS1OPND  ST    R9,RS19                 SAVE RETURN ADDRESS
RS1F180  TM    INSTFLG1,X'80'          SPECIAL TEST REQUIRED?
         BZ    RS1F208                 NO
         PACK  DBLWD(1),INSTTEXT+2(1)  INVERT .B2.D2.
         NI    DBLWD,X'0F'             CLEAR ALL BUT B2
         IC    R1,INSTTEXT+1           PICK UP .R1.R3.
         STC   R1,DBLWD+1              SAVE R1R3
         NI    DBLWD+1,X'0F'           CLEAR ALL BUT R3
         LA    R1,1(R1)                COMPUTE R3+1
         STC   R1,DBLWD+2              SAVE .R1.R3+1.
         NI    DBLWD+2,X'0F'           CLEAR ALL BUT R3+1
         CLC   DBLWD(1),DBLWD+1        B2 = R3?
         BE    RS1NOTI                 YES, NOT AN INSTRUCTION
         CLC   DBLWD(1),DBLWD+2        B2 = R3+1?
         BE    RS1NOTI                 YES, NOT AN INSTRUCTION
         PACK  DBLWD+1(1),INSTTEXT+1(1) INVERT .R1.R3.
         NI    DBLWD+1,X'0F'           CLEAR ALL BUT R1
         IC    R1,DBLWD+1              PICK UP R1
         LA    R1,1(R1)                COMPUTE R1+1
         STC   R1,DBLWD+2              SAVE R1+1
         CLC   DBLWD(1),DBLWD+1        B2 = R1?
         BE    RS1NOTI                 YES, NOT AN INSTRUCTION
         CLC   DBLWD(1),DBLWD+2        B2 = R1+1?
         BE    RS1NOTI                 YES, NOT AN INSTRUCTION
RS1F208  TM    INSTFLG2,X'08'          R3 MUST BE EVEN NUMBERED?
         BZ    RS1F202                 NO
         TM    INSTTEXT+1,X'01'        IS R3 EVEN?
         BO    RS1NOTI                 NO, NOT AN INSTRUCTION
RS1F202  TM    INSTFLG2,X'02'          R1 MUST BE EVEN NUMBERED?
         BZ    RS1CKSTG                NO
         TM    INSTTEXT+1,X'10'        IS R1 EVEN?
         BZ    RS1CKSTG                YES
RS1NOTI  MVI   ISINST,0                SHOW NOT AN INSTRUCTION
         B     RS1XIT                  AND EXIT
RS1CKSTG CLI   STAGE,1                 THIS STAGE 1?
         BE    RS1BDOP                 YES, SKIP REGISTER OPERANDS
         IC    R1,INSTTEXT+1           PICK UP R1R3
         SRL   R1,4                    SHIFT OUT R3
         BAS   R9,REGOPNDS             GO FORMAT THE R1 OPERAND
         MVI   0(R8),C','              SEPARATE OPERANDS
         LA    R8,1(R8)                STEP PAST THE COMMA
         IC    R1,INSTTEXT+1           PICK UP R1R3
         BAS   R9,REGOPNDS             GO FORMAT THE R3 OPERAND
         MVI   0(R8),C','              SEPARATE OPERANDS
         LA    R8,1(R8)                STEP PAST THE COMMA
RS1BDOP  ICM   R1,3,INSTTEXT+2         PICK UP THE BASE-DISPL ADDR
         MVI   LENGTH,0                SET LENGTH TO ZERO (N/A)
         BAS   R9,BDOPND               GO FORMAT THE BASE-DISPL ADDR
RS1XIT   L     R9,RS19                 GET RETURN ADDRESS
         BR    R9                      EXIT
RS19     DC    A(0)                    RETURN ADDRESS
***********************************************************************
*                RS-FORMAT INSTRUCTION, TYPE 2 OPERANDS               *
* THESE 4-BYTE INSTRUCTIONS HAVE SINGLE-BYTE OP-CODES.                *
*                                                                     *
* FMT  NBR  MEMORY CONTENT                        OPERAND CODING      *
* RS2   0D  .OC.OC.R1.--.B2.D2.D2.D2.             R1,D2(B2)           *
*                                                                     *
*  RS-FORMAT TYPE 2 INSTRUCTIONS INCLUDE:                             *
*       SRL   SLL   SRA   SLA   SRDL  SLDL  SRDA  SLDA  CLM           *
*                                                                     *
* SPECIAL OPCFLAG1 FLAGS INCLUDE: NONE                                *
* SPECIAL OPCFLAG2 FLAGS INCLUDE: X'20', X'02'                        *
***********************************************************************
RS2OPND  ST    R9,RS29                 SAVE RETURN ADDRESS
         TM    INSTTEXT+1,X'0F'        BITS 13-16 ARE ZEROS?
         BNZ   RS2NOTI                 NO, NOT AN INSTRUCTION
         CLI   INSTFLG2,X'00'          ANY FLAGS?
         BE    RS2CKSTG                NO
RS2F220  TM    INSTFLG2,X'20'          INSTR BITS 16-25 MUST BE ZERO?
         BZ    RS2F202                 NO
         CLI   INSTTEXT+2,X'00'        YES, BITS 16-23 ARE ZERO?
         BNE   RS2NOTI                 NO, NOT AN INSTRUCTION
         TM    INSTTEXT+3,X'C0'        YES, BITS 24-25 ARE ZERO?
         BZ    RS2CKSTG                YES
RS2F202  TM    INSTFLG2,X'02'          R1 MUST BE EVEN?
         BZ    RS2CKSTG                NO
         TM    INSTTEXT+1,X'10'        IS R2 EVEN?
         BZ    RS2CKSTG                YES
RS2NOTI  MVI   ISINST,0                NO, NOT AN INSTRUCTION
         B     RS2XIT                  EXIT
RS2CKSTG CLI   STAGE,1                 THIS STAGE 1?
         BE    RS2BDOP                 YES, SKIP REGISTER OPERAND
         IC    R1,INSTTEXT+1           PICK UP R1--
         SRL   R1,4                    SHIFT OUT THE --
         BAS   R9,REGOPNDS             GO FORMAT THE R1 REGISTER
         MVI   0(R8),C','              SET COMMA DELIMITER
         LA    R8,1(R8)                STEP PAST THE COMMA
RS2BDOP  ICM   R1,3,INSTTEXT+2         PICK UP THE BASE-DISPL ADDR
         MVI   LENGTH,0                SET LENGTH TO ZERO (N/A)
         BAS   R9,BDOPND               GO FORMAT THE BASE-DISPL ADDR
RS2XIT   L     R9,RS29                 GET RETURN ADDRESS
         BR    R9                      EXIT
RS29     DC    A(0)                    RETURN ADDRESS
***********************************************************************
*                RS-FORMAT INSTRUCTION, TYPE 3 OPERANDS               *
* THESE 4-BYTE INSTRUCTIONS HAVE SINGLE-BYTE OP-CODES.                *
*                                                                     *
* FMT  NBR  MEMORY CONTENT                        OPERAND CODING      *
* RS3   0E  .OC.OC.R1.M3.B2.D2.D2.D2.             R1,M3,D2(B2)        *
*                                                                     *
*  RS-FORMAT TYPE 3 INSTRUCTIONS INCLUDE: ICM, STCM                   *
*                                                                     *
* SPECIAL OPCFLAG1 FLAGS INCLUDE: NONE                                *
* SPECIAL OPCFLAG2 FLAGS INCLUDE: NONE                                *
***********************************************************************
RS3OPND  ST    R9,RS39                 SAVE RETURN ADDRESS
         TM    INSTTEXT+1,X'0F'        IS THE M3 MASK = 0?
         BNZ   RS3CKSTG                NO
RS3NOTI  MVI   ISINST,0                YES, SHOW NOT AN INSTRUCTION
         B     RS3XIT                  AND EXIT
RS3CKSTG CLI   STAGE,1                 THIS STAGE 1?
         BE    RS3BDOP                 YES, SKIP REG, MASK OPERANDS
         IC    R1,INSTTEXT+1           GET R1 OPERAND
         SRL   R1,4                      TO LOW NYBBLE
         BAS   R9,REGOPNDS             GO FORMAT THE R1 REGISTER
         MVI   0(R8),C','              SET COMMA DELIMITER
         LA    R8,1(R8)                STEP PAST THE COMMA
         IC    R1,INSTTEXT+1           GET M1 OPERAND
         N     R1,ZEROF                   IN THE LOW ORDER NYBBLE
         BAS   R9,DECMOPND             GO FORMAT THE M1 FIELD
         MVI   0(R8),C','              SET COMMA DELIMITER
         LA    R8,1(R8)                STEP PAST THE COMMA
RS3BDOP  ICM   R1,3,INSTTEXT+2         PICK UP THE BASE-DISPL ADDR
         MVI   LENGTH,0                SET LENGTH TO ZERO (N/A)
         BAS   R9,BDOPND               GO FORMAT THE BASE-DISPL ADDR
RS3XIT   L     R9,RS39                 GET RETURN ADDRESS
         BR    R9                      EXIT
RS39     DC    A(0)                    RETURN ADDRESS
***********************************************************************
*                RSI-FORMAT INSTRUCTION OPERANDS                      *
* THESE 4-BYTE INSTRUCTIONS HAVE SINGLE-BYTE OP-CODES.                *
*                                                                     *
* FMT  NBR  MEMORY CONTENT                        OPERAND CODING      *
* RSI1  0F  .OC.OC.R1.R3.I2.I2.I2.I2.             R1,R3,I2            *
*                                                                     *
* RSI-FORMAT INSTRUCTIONS INCLUDE: BRXH  BRXLE                        *
*                                                                     *
* NOTE: THE I2 OPERAND IS THE NUMBER OF HALFWORDS FROM THE CURRENT    *
*       LOCATION TO THE BRANCH TARGET, AND MAY BE POSITIVE OR NEGATIVE*
*                                                                     *
* SPECIAL OPCFLAG1 FLAGS INCLUDE: NONE                                *
* SPECIAL OPCFLAG2 FLAGS INCLUDE: NONE                                *
***********************************************************************
RSIOPND  ST    R9,RSI9                 SAVE RETURN ADDRESS
         CLI   STAGE,1                 THIS STAGE 1?
         BE    RSIXIT                  YES, NOTHING TO DO HERE
         IC    R1,INSTTEXT+1           GET R1 OPERAND
         SRL   R1,4                      TO LOW NYBBLE
         BAS   R9,REGOPNDS             GO FORMAT THE R1 REGISTER
         MVI   0(R8),C','              SET COMMA DELIMITER
         LA    R8,1(R8)                STEP PAST THE COMMA
         IC    R1,INSTTEXT+1           GET R3 OPERAND
         BAS   R9,REGOPNDS             GO FORMAT THE R3 FIELD
         MVC   0(3,R8),CMASTRP         MOVE ",*+"
         SR    R1,R1                   CLEAR FOR INSERT
         ICM   R1,3,INSTTEXT+2         PICK UP .I2.I2.I2.I2.
         BNM   RSIRELOP                BRANCH IF NOT MINUS
         MVI   2(R8),C'-'              CHANGE THE SIGN
         LCR   R1,R1                   MAKE VALUE POSITIVE
RSIRELOP SLL   R1,1                    DOUBLE FOR HALFWORDS
         LA    R8,3(R8)                STEP PAST THE DELIMITER
         BAS   R9,DECMOPND             GO FORMAT THE NBR HALFWORDS
RSIXIT   L     R9,RSI9                 GET RETURN ADDRESS
         BR    R9                      EXIT
RSI9     DC    A(0)                    RETURN ADDRESS
***********************************************************************
*                RX-FORMAT INSTRUCTION, TYPE 1 OPERANDS               *
* THESE 4-BYTE INSTRUCTIONS HAVE SINGLE-BYTE OP-CODES.                *
*                                                                     *
* FMT  NBR  MEMORY CONTENT                        OPERAND CODING      *
* RX1   10  .OC.OC.R1.X2.B2.D2.D2.D2.             R1,D2(X2,B2)        *
*                                                                     *
*  RX-FORMAT TYPE 1 INSTRUCTIONS INCLUDE:                             *
*       STH   LA    STC   IC    EX    BAL   BCT   LH    CH            *
*       AH    SH    MH    BAS   CVD   CVB   ST    LAE   N             *
*       CL    O     X     L     C     A     S     M     D             *
*       AL    SL    STD   MXD   LD    CD    AD    SD    MD            *
*       DD    AW    SW    STE   MS    LE    CE    AE    SE            *
*       MDE   DE    AU    SU    LRA                                   *
*                                                                     *
* SPECIAL OPCFLAG1 FLAGS INCLUDE: X'80' (EX)                          *
* SPECIAL OPCFLAG2 FLAGS INCLUDE: X'80', X'02'                        *
***********************************************************************
RX1OPND  ST    R9,RX19                 SAVE RETURN ADDRESS
         CLI   INSTFLG2,X'00'          ANY FLAGS?
         BE    RX1CKSTG                NO
RX1F280  TM    INSTFLG2,X'80'          R1 MUST BE FP PAIR START?
         BZ    RX1F202                 NO
         PACK  DBLWD(1),INSTTEXT+1(1)  PACK .R1.X2. INTO DBLWD
         NI    DBLWD,X'0F'             CLEAR ALL BUT R1
         TRT   DBLWD(1),FLTPTPR        VALID FLOATING POINT PAIR?
         BNZ   RX1NOTI                 NO
RX1F202  TM    INSTFLG2,X'02'          R1 MUST BE EVEN NUMBERED?
         BZ    RX1CKSTG                NO
         TM    INSTTEXT+1,X'10'        IS R1 EVEN NUMBERED?
         BZ    RX1CKSTG                YES
RX1NOTI  MVI   ISINST,0                SHOW NOT AN INSTRUCTION
         B     RX1XIT                  AND EXIT
RX1CKSTG CLI   STAGE,1                 THIS STAGE 1?
         BE    RX1BDOP                 YES, SKIP R1 OPERAND
         CLI   INSTTEXT,X'44'          THIS AN EX INSTRUCTION?
         BNE   RX1DOR1                 NO
         TM    INSTTEXT+1,X'F0'        IS R1 ZERO?
         BNZ   RX1DOR1                 NO
         MVI   0(R8),C'0'              YES, MOVE A ZERO
         B     RX1SEPA                 CONTINUE
RX1DOR1  IC    R1,INSTTEXT+1           PICK UP R1X2
         SRL   R1,4                    SHIFT OUT X2
         BAS   R9,REGOPNDS             GO FORMAT THE R1 REGISTER
RX1SEPA  MVI   0(R8),C','              MOVE COMMA SEPARATOR
         LA    R8,1(R8)                STEP PAST THE COMMA
RX1BDOP  ICM   R1,7,INSTTEXT+1         PICK UP M1X2B2D2D2D2 IN R1
         BAS   R9,XBDOPND              GO FORMAT THE INDEXED OPERAND
RX1XIT   L     R9,RX19                 GET RETURN ADDRESS
         BR    R9                      EXIT
RX19     DC    A(0)                    RETURN ADDRESS
***********************************************************************
*                RX-FORMAT INSTRUCTION, TYPE 2 OPERANDS               *
* THESE 4-BYTE INSTRUCTIONS HAVE SINGLE-BYTE OP-CODES. ACTUALLY, ONLY *
* THE CONDITIONAL BRANCH WITH RX-TYPE OPERAND HAS THIS FORMAT.        *
*                                                                     *
* FMT  NBR  MEMORY CONTENT                        OPERAND CODING      *
* RX2   11  .OC.OC.M1.X2.B2.D2.D2.D2.             M1,D2(X2,B2)        *
*                                                                     *
*  RX-FORMAT TYPE 2 INSTRUCTIONS INCLUDE: BC                          *
*                                                                     *
* SPECIAL OPCFLAG1 FLAGS INCLUDE: NONE                                *
* SPECIAL OPCFLAG2 FLAGS INCLUDE: NONE                                *
***********************************************************************
RX2OPND  ST    R9,RX29                 SAVE RETURN ADDRESS
         CLI   STAGE,1                 THIS STAGE 1?
         BE    RX2BDOP                 YES, SKIP M1 FORMATTING
         IC    R1,INSTTEXT+1           PICK UP THE MASK VALUE
         SRL   R1,4                    SHIFT TO LOW NYBBLE
         BAS   R9,CONDOPND             GO PROCESS CONDITIONAL BRANCH
RX2BDOP  ICM   R1,7,INSTTEXT+1         PICK UP M1X2B2D2D2D2 IN R1
         BAS   R9,XBDOPND              GO FORMAT THE INDEXED OPERAND
RX2XIT   L     R9,RX29                 GET RETURN ADDRESS
         BR    R9                      EXIT
RX29     DC    A(0)                    RETURN ADDRESS
***********************************************************************
*                RXE-FORMAT INSTRUCTION OPERANDS                      *
* THESE 4-BYTE INSTRUCTIONS HAVE 2-BYTE OP-CODES WHOSE FIRST BYTE IS  *
* X'ED'.                                                              *
*                                                                     *
* FMT  NBR  MEMORY CONTENT                        OPERAND CODING      *
* RXE1  12  .OC.OC.R1.X2.B2.D2.D2.D2.--.--.OC.OC. R1,D2(X2,B2)        *
*                                                                     *
*  RXE-FORMAT INSTRUCTIONS INCLUDE:                                   *
*       LDEB  LXDB  LXEB  MXDB  KEB   CEB   AEB   SEB   MDEB          *
*       DEB   TCEB  TCDB  TCXB  SQEB  SQDB  MEEB  KDB   CDB           *
*       ADB   SDB   MDB   DDB   LDE   LXD   LXE   SQE   SQD           *
*       MEE                                                           *
*                                                                     *
* SPECIAL OPCFLAG1 FLAGS INCLUDE: NONE                                *
* SPECIAL OPCFLAG2 FLAGS INCLUDE: X'80'                               *
***********************************************************************
RXEOPND  ST    R9,RXE9                 SAVE RETURN ADDRESS
         CLI   INSTTEXT+4,0            BYTE 5 IS ALL ZEROS?
         BNZ   RXENOTI                 NO, NOT AN INSTRUCTION
RXEF280  TM    INSTFLG2,X'80'          R1 MUST BE FP PAIR START?
         BZ    RXECKSTG                NO
         PACK  DBLWD(1),INSTTEXT+1(1)  INVERT .R1.X2.
         NI    DBLWD,X'0F'             CLEAR ALL BUT R1
         TRT   DBLWD(1),FLTPTPR        VALID FLOATING POINT PAIR?
         BZ    RXECKSTG                YES
RXENOTI  MVI   ISINST,0                NO, NOT AN INSTRUCTION
         B     RXEXIT                  EXIT
RXECKSTG CLI   STAGE,1                 THIS STAGE 1?
         BE    RXEBDOP                 YES, SKIP R1 FORMATTING
         IC    R1,INSTTEXT+1           GET R1 OPERAND
         SRL   R1,4                      TO LOW NYBBLE
         BAS   R9,REGOPNDS             GO FORMAT THE R1 REGISTER
         MVI   0(R8),C','              SET COMMA DELIMITER
         LA    R8,1(R8)                STEP PAST THE COMMA
RXEBDOP  ICM   R1,7,INSTTEXT+1         GET X-B-D ADDRESS
         BAS   R9,XBDOPND              GO FORMAT THE RX ADDRESS
RXEXIT   L     R9,RXE9                 GET RETURN ADDRESS
         BR    R9                      EXIT
RXE9     DC    A(0)                    RETURN ADDRESS
***********************************************************************
*   OPERANDS FOR RXF-FORMAT INSTRUCTIONS                              *
* THESE 4-BYTE INSTRUCTIONS HAVE 2-BYTE OP-CODES WHOSE FIRST BYTE IS  *
* X'ED'.                                                              *
*                                                                     *
* FMT  NBR  MEMORY CONTENT                        OPERAND CODING      *
* RXF1  13  .OC.OC.R3.X2.B2.D2.D2.D2.R1.--.OC.OC. R1,R3,D2(X2,B2)     *
*                                                                     *
*  RXF-FORMAT INSTRUCTIONS INCLUDE: MAEB  MSEB MADB   MSDB            *
*                                                                     *
* SPECIAL OPCFLAG1 FLAGS INCLUDE: NONE                                *
* SPECIAL OPCFLAG2 FLAGS INCLUDE: NONE                                *
***********************************************************************
RXFOPND  ST    R9,RXF9                 SAVE RETURN ADDRESS
         TM    INSTTEXT+4,X'0F'        10TH NYBBLE IS ALL ZEROS?
         BZ    RXFCKSTG                YES, CONTINUE
         MVI   ISINST,0                NO, NOT AN INSTRUCTION
         B     RXFXIT                  EXIT
RXFCKSTG CLI   STAGE,1                 THIS STAGE 1?
         BE    RXFBDOP                 YES, SKIP FORMATTING R1 AND R3
         IC    R1,INSTTEXT+4           GET R1 OPERAND
         SRL   R1,4                      TO LOW NYBBLE
         BAS   R9,REGOPNDS             GO FORMAT THE R1 REGISTER
         MVI   0(R8),C','              SET COMMA DELIMITER
         LA    R8,1(R8)                STEP PAST THE COMMA
         IC    R1,INSTTEXT+1           GET R3 OPERAND
         SRL   R1,4                      TO LOW NYBBLE
         BAS   R9,REGOPNDS             GO FORMAT THE R3 REGISTER
         MVI   0(R8),C','              SET COMMA DELIMITER
         LA    R8,1(R8)                STEP PAST THE COMMA
RXFBDOP  ICM   R1,7,INSTTEXT+1         GET X-B-D ADDRESS
         BAS   R9,XBDOPND              GO FORMAT THE RX ADDRESS
RXFXIT   L     R9,RXF9                 GET RETURN ADDRESS
         BR    R9                      EXIT
RXF9     DC    A(0)                    RETURN ADDRESS
***********************************************************************
*                S-FORMAT INSTRUCTION, TYPE 1 OPERANDS                *
* THESE 4-BYTE INSTRUCTIONS HAVE SINGLE-BYTE OP-CODES.                *
*                                                                     *
* FMT  NBR  MEMORY CONTENT                        OPERAND CODING      *
* S1    14  .OC.OC.--.--.B2.D2.D2.D2.             D2(B2)              *
*                                                                     *
*  S-FORMAT TYPE 1 INSTRUCTIONS INCLUDE:                              *
*       SSM   LPSW  TS                                                *
*                                                                     *
* SPECIAL OPCFLAG1 FLAGS INCLUDE: NONE                                *
* SPECIAL OPCFLAG2 FLAGS INCLUDE: NONE                                *
***********************************************************************
S1OPND   ST    R9,S19                  SAVE RETURN ADDRESS
         CLI   INSTTEXT+1,0            SECOND BYTE IS ALL ZEROS?
         BE    S1BDOP                  YES, CONTINUE
         MVI   ISINST,0                NO, SHOW NOT AN INSTRUCTION
         B     S1XIT                   AND EXIT
S1BDOP   ICM   R1,3,INSTTEXT+2         PICK UP B2D2D2D2
         MVI   LENGTH,0                SHOW LENGTH N/A
         BAS   R9,BDOPND               GO FORMAT THE BASE-DISPL ADDR
S1XIT    L     R9,S19                  GET RETURN ADDRESS
         BR    R9                      EXIT
S19      DC    A(0)                    RETURN ADDRESS
***********************************************************************
*                S-FORMAT INSTRUCTION, TYPE 2 OPERANDS                *
* THESE 4-BYTE INSTRUCTIONS HAVE 2-BYTE OP-CODES WHOSE FIRST BYTE IS  *
* X'B2'.                                                              *
*                                                                     *
* FMT  NBR  MEMORY CONTENT                        OPERAND CODING      *
* S2    15  .OC.OC.OC.OC.--.--.--.--.             (NONE)              *
*                                                                     *
*  S-FORMAT TYPE 2 INSTRUCTIONS INCLUDE:                              *
*       IPK   PTLB  CSCH  HSCH  SAL   RSCH  RCHP  SCHM                *
*                                                                     *
* SPECIAL OPCFLAG1 FLAGS INCLUDE: NONE                                *
* SPECIAL OPCFLAG2 FLAGS INCLUDE: NONE                                *
***********************************************************************
S2OPND   ST    R9,S29                  SAVE RETURN ADDRESS
         CLC   INSTTEXT+2(2),XZROS     LAST TWO BYTES ARE ALL ZEROS?
         BE    S2XIT                   YES, NOTHING ELSE TO DO
         MVI   ISINST,0                NO, NOT AN INSTRUCTION
S2XIT    L     R9,S29                  GET RETURN ADDRESS
         BR    R9                      EXIT
S29      DC    A(0)                    RETURN ADDRESS
***********************************************************************
*                S-FORMAT INSTRUCTION, TYPE 3 OPERANDS                *
* THESE 4-BYTE INSTRUCTIONS HAVE TWO-BYTE OP-CODES.                   *
*                                                                     *
* FMT  NBR  MEMORY CONTENT                        OPERAND CODING      *
* S1    14  .OC.OC.OC.OC.B2.D2.D2.D2.             D2(B2)              *
*                                                                     *
*  S-FORMAT TYPE 3 INSTRUCTIONS INCLUDE:                              *
*       STIDP SCK   STCK  SCKC  STCKC SPT   STPT  SPKA  SPX           *
*       STPX  STAP  PC    SAC   CFC   MSCH  SSCH  STSCH TSCH          *
*       TPI   STCRW STCPS RP    STCKE SACF  STSI  SRNM  STFPC         *
*       LFPC  TRAP4                                                   *
*                                                                     *
* SPECIAL OPCFLAG1 FLAGS INCLUDE: X'80' (CFC)                         *
* SPECIAL OPCFLAG2 FLAGS INCLUDE: NONE                                *
***********************************************************************
S3OPND   ST    R9,S39                  SAVE RETURN ADDRESS
         TM    INSTFLG1,X'80'          THIS THE CFC INSTRUCTION?
         BZ    S3FORMAT                NO
         PACK  DBLWD(1),INSTTEXT+2(1)  INVERT .B2.D2.
         NI    DBLWD,X'0F'             CLEAR ALL BUT B2
         CLI   DBLWD,X'02'             B2=X'02'?
         BNE   S3FORMAT                NO, CONTINUE
S3NOTI   MVI   ISINST,0                SHOW NOT AN INSTRUCTION
         B     S3XIT                   AND EXIT
S3FORMAT ICM   R1,3,INSTTEXT+2         PICK UP B2D2D2D2
         MVI   LENGTH,0                SHOW LENGTH N/A
         BAS   R9,BDOPND               GO FORMAT THE BASE-DISPL ADDR
S3XIT    L     R9,S39                  GET RETURN ADDRESS
         BR    R9                      EXIT
S39      DC    A(0)                    RETURN ADDRESS
***********************************************************************
*                SI-FORMAT INSTRUCTION OPERANDS                       *
* THESE 4-BYTE INSTRUCTIONS HAVE SINGLE-BYTE OP-CODES.                *
*                                                                     *
* FMT  NBR  MEMORY CONTENT                        OPERAND CODING      *
* SI1   16  .OC.OC.I2.I2.B1.D1.D1.D1.             D1(B1),I2           *
*                                                                     *
*  SI-FORMAT INSTRUCTIONS INCLUDE:                                    *
*       TM    MVI   NI    CLI   OI    XI    STNSM STOSM MC            *
*                                                                     *
* SPECIAL OPCFLAG1 FLAGS INCLUDE: X'80' (MC)                          *
* SPECIAL OPCFLAG2 FLAGS INCLUDE: NONE                                *
***********************************************************************
SIOPND   ST    R9,SI9                  SAVE RETURN ADDRESS
         TM    INSTFLG1,X'80'          THIS THE MC INSTRUCTION?
         BZ    SIFORMAT                NO, CONTINUE
         TM    INSTTEXT+1,X'F0'        BITS 8-11 ARE ZERO?
         BZ    SIFORMAT                YES
SINOTI   MVI   ISINST,0                NO, SHOW NOT AN INSTRUCTION
         B     SIXIT                   AND EXIT
SIFORMAT ICM   R1,3,INSTTEXT+2         PICK UP B1D1D1D1
         MVI   LENGTH,0                SHOW LENGTH IS N/A
         BAS   R9,BDOPND               GO FORMAT BASE-DISPL ADDRESS
         CLI   STAGE,1                 THIS STAGE 1?
         BE    SIXIT                   YES, SKIP IMMEDIATE OPND FORMAT
         MVC   0(3,R8),CMAXQT          FOLLOW WITH ",X'"
         UNPK  3(3,R8),INSTTEXT+1(2)   UNPACK I2I2
         TR    3(2,R8),TRCHAR-C'0'     MAKE PRINTABLE
         MVI   5(R8),C''''             MOVE ENDING APOSTROPHE
SIXIT    L     R9,SI9                  GET RETURN ADDRESS
         BR    R9                      EXIT
SI9      DC    A(0)                    RETURN ADDRESS
***********************************************************************
*              SS-FORMAT INSTRUCTION, TYPE 1 OPERANDS                 *
* THESE 6-BYTE INSTRUCTIONS HAVE SINGLE-BYTE OP-CODES.                *
*                                                                     *
* FMT  NBR  MEMORY CONTENT                        OPERAND CODING      *
* SS1   17  .OC.OC.LL.LL.B1.D1.D1.D1.B2.D2.D2.D2. D1(LL,B1),D2(B2)    *
*                                                                     *
*  SS-FORMAT TYPE 1 INSTRUCTIONS INCLUDE:                             *
*       MVN   MVC   MVZ   NC    CLC   OC    XC    TR    TRT           *
*       ED    EDMK  MVCIN                                             *
*                                                                     *
* SPECIAL OPCFLAG1 FLAGS INCLUDE: NONE                                *
* SPECIAL OPCFLAG2 FLAGS INCLUDE: NONE                                *
***********************************************************************
SS1OPND  ST    R9,SS19                 SAVE RETURN ADDRESS
         IC    R1,INSTTEXT+1           PICK UP LLLL
         LA    R1,1(R1)                ADD 1 FOR LENGTH
         STC   R1,LENGTH               SET OPERAND LENGTH
         ICM   R1,3,INSTTEXT+2         PICK UP B1D1D1D1
         BAS   R9,BDOPND               GO FORMAT THE D1(LL,B1) OPND
         MVI   0(R8),C','              SEPARATE OPERANDS
         LA    R8,1(R8)                STEP PAST THE COMMA
         ICM   R1,3,INSTTEXT+4         PICK UP B2D2D2D2
         MVI   LENGTH,0                SHOW LENGTH N/A
         BAS   R9,BDOPND               GO FORMAT THE D2(B2) OPND
SS1XIT   L     R9,SS19                 GET RETURN ADDRESS
         BR    R9                      EXIT
SS19     DC    A(0)                    RETURN ADDRESS
***********************************************************************
*              SS-FORMAT INSTRUCTION, TYPE 2 OPERANDS                 *
* THESE 6-BYTE INSTRUCTIONS HAVE SINGLE-BYTE OP-CODES.                *
*                                                                     *
* FMT  NBR  MEMORY CONTENT                        OPERAND CODING      *
* SS2   18  .OC.OC.L1.L2.B1.D1.D1.D1.B2.D2.D2.D2. D1(L1,B1),D2(L2,B2) *
*                                                                     *
*  SS-FORMAT TYPE 2 INSTRUCTIONS INCLUDE:                             *
*       MVO   PACK  UNPK  ZAP   CP    AP    SP    MP    DP            *
*                                                                     *
* SPECIAL OPCFLAG1 FLAGS INCLUDE: NONE                                *
* SPECIAL OPCFLAG2 FLAGS INCLUDE: NONE                                *
***********************************************************************
SS2OPND  ST    R9,SS29                 SAVE RETURN ADDRESS
         IC    R1,INSTTEXT+1           PICK UP L1L2
         SRL   R1,4                    SHIFT OUT L2
         N     R1,ZEROF                CLEAR ALL BUT L1
         LA    R1,1(R1)                ADD 1 FOR LENGTH
         STC   R1,LENGTH               SET OPERAND LENGTH
         ICM   R1,3,INSTTEXT+2         PICK UP B1D1D1D1
         BAS   R9,BDOPND               GO FORMAT THE D1(LL,B1) OPND
         MVI   0(R8),C','              SEPARATE OPERANDS
         LA    R8,1(R8)                STEP PAST THE COMMA
         IC    R1,INSTTEXT+1           PICK UP L1L2
         N     R1,ZEROF                CLEAR ALL BUT L2
         LA    R1,1(R1)                ADD 1 FOR LENGTH
         STC   R1,LENGTH               SET OPERAND LENGTH
         ICM   R1,3,INSTTEXT+4         PICK UP B2D2D2D2
         BAS   R9,BDOPND               GO FORMAT THE D2(L2,B2) OPND
SS2XIT   L     R9,SS29                 GET RETURN ADDRESS
         BR    R9                      EXIT
SS29     DC    A(0)                    RETURN ADDRESS
***********************************************************************
*              SS-FORMAT INSTRUCTION, TYPE 3 OPERANDS                 *
* THESE 6-BYTE INSTRUCTIONS HAVE SINGLE-BYTE OP-CODES.                *
*                                                                     *
* FMT  NBR  MEMORY CONTENT                        OPERAND CODING      *
* SS3   19  .OC.OC.R1.R3.B2.D2.D2.D2.B4.D4.D4.D4. R1,D2(B2),R3,D4(B4) *
*                                                                     *
*  SS-FORMAT TYPE 3 INSTRUCTIONS INCLUDE: PLO                         *
*                                                                     *
* SPECIAL OPCFLAG1 FLAGS INCLUDE: NONE                                *
* SPECIAL OPCFLAG2 FLAGS INCLUDE: NONE                                *
***********************************************************************
SS3OPND  ST    R9,SS39                 SAVE RETURN ADDRESS
         MVI   LENGTH,0                SHOW LENGTH N/A IN OPERANDS
         CLI   STAGE,1                 THIS STAGE 1?
         BE    SS3BDOP1                YES, SKIP R1 FORMAT
         IC    R1,INSTTEXT+1           PICK UP R1R3
         SRL   R1,4                    SHIFT OUT R3
         BAS   R9,REGOPNDS             GO FORMAT R1 OPERAND
         MVI   0(R8),C','              SEPARATE OPERANDS
         LA    R8,1(R8)                STEP PAST THE COMMA
SS3BDOP1 ICM   R1,3,INSTTEXT+2         PICK UP B2D2D2D2
         BAS   R9,BDOPND               GO FORMAT THE D2(B2) OPERAND
         CLI   STAGE,1                 THIS STAGE 1?
         BE    SS3BDOP2                YES, SKIP R3 FORMAT
         MVI   0(R8),C','              SEPARATE OPERANDS
         LA    R8,1(R8)                STEP PAST THE COMMA
         IC    R1,INSTTEXT+1           PICK UP R1R3
         BAS   R9,REGOPNDS             GO FORMAT R3 OPERAND
         MVI   0(R8),C','              SEPARATE OPERANDS
         LA    R8,1(R8)                STEP PAST THE COMMA
SS3BDOP2 ICM   R1,3,INSTTEXT+4         PICK UP B4D4D4D4
         BAS   R9,BDOPND               GO FORMAT THE D4(B4) OPERAND
SS3XIT   L     R9,SS39                 GET RETURN ADDRESS
         BR    R9                      EXIT
SS39     DC    A(0)                    RETURN ADDRESS
***********************************************************************
*              SS-FORMAT INSTRUCTION, TYPE 4 OPERANDS                 *
* THESE 6-BYTE INSTRUCTIONS HAVE SINGLE-BYTE OP-CODES.                *
*                                                                     *
* FMT  NBR  MEMORY CONTENT                        OPERAND CODING      *
* SS4   1A  .OC.OC.R1.R3.B1.D1.D1.D1.B2.D2.D2.D2. D1(R1,B1),D2(B2),R3 *
*                                                                     *
*  SS-FORMAT TYPE 4 INSTRUCTIONS INCLUDE: MVCK  MVCP  MVCS            *
*                                                                     *
* SPECIAL OPCFLAG1 FLAGS INCLUDE: NONE                                *
* SPECIAL OPCFLAG2 FLAGS INCLUDE: NONE                                *
***********************************************************************
SS4OPND  ST    R9,SS49                 SAVE RETURN ADDRESS
         MVI   LENGTH,0                SHOW OPERAND LENGTHS N/A
         IC    R1,INSTTEXT+1           PICK UP R1R3
         SLL   R1,12                   MOVE R1 TO 4TH NYBBLE OF R1
         ICM   R1,3,INSTTEXT+2         PICK UP B1D1D1D1
         BAS   R9,XBDOPND              GO FORMAT D1(R1,B1) OPERAND
         MVI   0(R8),C','              SEPARATE OPERANDS
         LA    R8,1(R8)                STEP PAST THE COMMA
         ICM   R1,3,INSTTEXT+4         PICK UP B2D2D2D2
         BAS   R9,BDOPND               GO FORMAT THE D2(B2) OPERAND
         CLI   STAGE,1                 NOW IN STAGE 1?
         BE    SS4XIT                  YES, SKIP R3 FORMAT
         MVI   0(R8),C','              SEPARATE OPERANDS
         LA    R8,1(R8)                STEP PAST THE COMMA
         IC    R1,INSTTEXT+1           PICK UP R1R3
         BAS   R9,REGOPNDS             GO FORMAT THE R3 OPERAND
SS4XIT   L     R9,SS49                 GET RETURN ADDRESS
         BR    R9                      EXIT
SS49     DC    A(0)                    RETURN ADDRESS
***********************************************************************
*              SS-FORMAT INSTRUCTION, TYPE 5 OPERANDS                 *
* THESE 6-BYTE INSTRUCTIONS HAVE SINGLE-BYTE OP-CODES.                *
*                                                                     *
* FMT  NBR  MEMORY CONTENT                        OPERAND CODING      *
* SS5   1B  .OC.OC.L1.I3.B1.D1.D1.D1.B2.D2.D2.D2. D1(L1,B1),D2(B2),I3 *
*                                                                     *
*  SS-FORMAT TYPE 5 INSTRUCTIONS INCLUDE: SRP                         *
* NOTES: SRP IS CONSIDERED AN INSTRUCTION ONLY IF THE I3 OPERAND IS 0 *
*        OR 5, AND THE INSTRUCTION BITS 32-41 ARE ZEROS, SINCE THE SRP*
*        INSTRUCTION USES THE D2(B2) ADDRESS AS A SHIFT AMOUNT WITH   *
*        NO B2 VALUE GIVEN. THE INTENT IS TO PREVENT TREATING THE     *
*        CHARACTER '0' (X'F0') AS THE OP-CODE FOR SRP WHEN IT REALLY  *
*        IS PART OF A CHARACTER STRING OR SOME OTHER CONSTRUCT.       *
*                                                                     *
* SPECIAL OPCFLAG1 FLAGS INCLUDE: NONE                                *
* SPECIAL OPCFLAG2 FLAGS INCLUDE: NONE                                *
***********************************************************************
SS5OPND  ST    R9,SS59                 SAVE RETURN ADDRESS
         IC    R1,INSTTEXT+1           PICK UP L1I3
         N     R1,ZEROF                CLEAR ALL BUT I3
         BZ    SS5SHFT                 OK IF ZERO
         CH    R1,H5                   CHECK ROUND=5
         BE    SS5SHFT                 OK IF 5
SS5NOTI  MVI   ISINST,0                INDICATE NOT AN INSTRUCTION
         B     SS5XIT                  AND EXIT
SS5SHFT  CLI   INSTTEXT+4,0            .B2.D2. BYTE IS ZERO?
         BNE   SS5NOTI                 NO, NOT AN INSTRUCTION
         TM    INSTTEXT+5,X'C0'        HI 2 BITS OF .D2.D2. ARE ZERO?
         BNZ   SS5NOTI                 NO, NOT AN INSTRUCTION
         IC    R1,INSTTEXT+1           PICK UP L1I3
         SRL   R1,4                    SHIFT OUT I3
         N     R1,ZEROF                CLEAR ALL BUT L1
         LA    R1,1(R1)                MAKE L1 INTO LENGTH
         STC   R1,LENGTH               SET OPERAND LENGTH
         ICM   R1,3,INSTTEXT+2         PICK UP B1D1D1D1
         BAS   R9,BDOPND               GO FORMAT D1(L1,B1) OPERAND
         MVI   0(R8),C','              SEPARATE OPERANDS
         LA    R8,1(R8)                STEP PAST THE COMMA
         SR    R1,R1                   CLEAR FOR INSERT
         ICM   R1,3,INSTTEXT+4         PICK UP SHIFT AMOUNT
         CH    R1,H32                  POSITIVE (RIGHT) SHIFT AMOUNT?
         BL    SS5SHFMT                YES, GO FORMAT
         MVC   0(3,R8),=CL3'64-'       SHOW LEFT SHIFT
         LA    R8,3(R8)                STEP PAST DELIMITER
         LA    R2,64                   COMPUTE THE
         SR    R2,R1                      VALUE TO
         LR    R1,R2                         BE SUBTRACTED
SS5SHFMT BAS   R9,DECMOPND             GO FORMAT SHIFT AMOUNT
         MVI   0(R8),C','              SEPARATE OPERANDS
         LA    R8,1(R8)                STEP PAST THE COMMA
         IC    R1,INSTTEXT+1           PICK UP L1I3
         N     R1,ZEROF                CLEAR ALL BUT I3
         BAS   R9,DECMOPND             GO FORMAT I3 OPERAND
SS5XIT   L     R9,SS59                 GET RETURN ADDRESS
         BR    R9                      EXIT
SS59     DC    A(0)                    RETURN ADDRESS
***********************************************************************
*              SSE-FORMAT INSTRUCTION OPERANDS                        *
* THESE 6-BYTE INSTRUCTIONS HAVE 2-BYTE OP-CODES WHOSE FIRST BYTE IS  *
* X'E5'.                                                              *
*                                                                     *
* FMT  NBR  MEMORY CONTENT                        OPERAND CODING      *
* SSE1  1C  .OC.OC.OC.OC.B1.D1.D1.D1.B2.D2.D2.D2. D1(B1),D2(B2)       *
*                                                                     *
* SSE-FORMAT INSTRUCTIONS INCLUDE:                                    *
*       LASP  TPROT MVCSK MVCDK                                       *
*                                                                     *
* SPECIAL OPCFLAG1 FLAGS INCLUDE: NONE                                *
* SPECIAL OPCFLAG2 FLAGS INCLUDE: NONE                                *
***********************************************************************
SSEOPND  ST    R9,SSE9                 SAVE RETURN ADDRESS
         MVI   LENGTH,0                SHOW OPERAND LENGTHS N/A
         ICM   R1,3,INSTTEXT+2         PICK UP B1D1D1D1
         BAS   R9,BDOPND               GO FORMAT D1(B1)
         MVI   0(R8),C','              SEPARATE OPERANDS
         LA    R8,1(R8)                STEP PAST THE COMMA
         ICM   R1,3,INSTTEXT+4         PICK UP B2D2D2D2
         BAS   R9,BDOPND               GO FORMAT THE D2(B2) OPERAND
SSEXIT   L     R9,SSE9                 GET RETURN ADDRESS
         BR    R9                      EXIT
SSE9     DC    A(0)                    RETURN ADDRESS
***********************************************************************
*              FORMAT REGISTER OPERAND                                *
* ON ENTRY, R8 POINTS TO THE OUTPUT LOCATION TO CONTAIN THE FORMATTED *
* REGISTER OPERAND. THE REGISTER NUMBER IS IN THE LOW-ORDER NYBBLE OF *
* R1. TO FORMAT, THE LETTER "R" IS MOVED TO THE ADDRESS POINTED TO BY *
* R8, THEN THE REGISTER NUMBER IS MOVED TO FOLLOW THE "R". FINALLY,   *
* R8 IS ADVANCED TO POINT TO THE BYTE FOLLOWING THIS OPERAND.         *
***********************************************************************
REGOPNDS ST    R9,RO9                  SAVE RETURN ADDRESS
         MVI   0(R8),C'R'              REGISTER DELIMITER
         N     R1,ZEROF                CLEAR ALL BUT THE REGISTER NBR
         CHI   R1,9                    SINGLE-DIGIT REGISTER NUMBER?
         BH    ROTWO                   NO, TWO-DIGIT REGISTER
         STC   R1,1(R8)                SET REGISTER NUMBER IN OUTPUT
         OI    1(R8),X'F0'             SET THE SIGN
         LA    R8,2(R8)                STEP PAST THE OPERAND
         B     ROXIT                   AND EXIT
ROTWO    MVI   1(R8),C'1'              SET TENS DIGIT IN OUTPUT
         SH    R1,H10                  DEDUCT TEN
         STC   R1,2(R8)                SET REGISTER NUMBER IN OUTPUT
         OI    2(R8),X'F0'             SET THE SIGN
         LA    R8,3(R8)                STEP PAST THE OPERAND
ROXIT    L     R9,RO9                  GET RETURN ADDRESS
         BR    R9                      EXIT
RO9      DC    A(0)                    RETURN ADDRESS
***********************************************************************
*              FORMAT DECIMAL OPERAND                                 *
* ON ENTRY, R8 POINTS TO THE OUTPUT LOCATION TO CONTAIN THE FORMATTED *
* DECIMAL OPERAND. THE OPERAND VALUE IS GIVEN BY THE LOW ORDER 12 BITS*
* OF R1 IN BINARY. IT IS CONVERTED TO DECIMAL AND PLACED AT THE       *
* ADDRESS IN R8. AFTER THIS, R8 IS UPDATED TO POINT PAST THE OPERAND. *
***********************************************************************
DECMOPND ST    R9,DO9                  SAVE RETURN ADDRESS
         N     R1,KEEPLO12             CLEAR ALL BUT LOW 12 BITS
         CVD   R1,DBLWD                CONVERT TO DECIMAL
         CP    DBLWD,PK999             4 DIGITS?
         BH    DO4                     YES
         CP    DBLWD,PK99              3 DIGITS?
         BH    DO3                     YES
         CP    DBLWD,PK9               2 DIGITS?
         BH    DO2                     YES
DO1      UNPK  0(1,R8),DBLWD           UNPACK SINGLE DIGIT
         OI    0(R8),X'F0'             CLEAR THE SIGN
         LA    R8,1(R8)                STEP PAST THE OPERAND
         B     DOXIT                   AND EXIT
DO2      UNPK  0(2,R8),DBLWD           UNPACK SINGLE DIGIT
         OI    1(R8),X'F0'             CLEAR THE SIGN
         LA    R8,2(R8)                STEP PAST THE OPERAND
         B     DOXIT                   AND EXIT
DO3      UNPK  0(3,R8),DBLWD           UNPACK SINGLE DIGIT
         OI    2(R8),X'F0'             CLEAR THE SIGN
         LA    R8,3(R8)                STEP PAST THE OPERAND
         B     DOXIT                   AND EXIT
DO4      UNPK  0(4,R8),DBLWD           UNPACK SINGLE DIGIT
         OI    3(R8),X'F0'             CLEAR THE SIGN
         LA    R8,4(R8)                STEP PAST THE OPERAND
DOXIT    L     R9,DO9                  GET RETURN ADDRESS
         BR    R9                      EXIT
DO9      DC    A(0)                    RETURN ADDRESS
***********************************************************************
*              FORMAT CONDITIONAL BRANCH OPERAND                      *
* ON ENTRY, R8 POINTS TO THE FIRST BYTE OF THE OUTPUT OPERAND FIELD.  *
* THE MASK VALUE IS IN THE LOW-ORDER NYBBLE OF R1. THE  MASK VALUE IS *
* USED AS AN INDEX TO THE LASTCCNT TABLE TO OBTAIN THE EXTENDED       *
* MNEMONIC TO BE USED. IF THE ENTRY FOUND IS ALPHABETIC, IT IS MOVED  *
* TO THE OUTPUT MNEMONIC FIELD (AN "R" IS APPENDED IF THIS IS A TWO-  *
* BYTE BRANCH INSTRUCTION) AND R8 IS LEFT AS-IS. WHEN THE ENTRY FOUND *
* CONTAINS A NUMERIC VALUE, IT IS MOVED TO THE OUTPUT OPERAND FIELD,  *
* R8 IS UPDATED TO POINT PAST THE MASK VALUE, AND THE MNEMONIC IS LEFT*
* AS-IS.                                                              *
***********************************************************************
CONDOPND ST    R9,CO9                  SAVE RETURN ADDRESS
         N     R1,ZEROF                CLEAR ALL BUT THE MASK VALUE
         MHI   R1,3                    COMPUTE TABLE OFFSET
         LA    R1,LASTCCNT(R1)         POINT TO COND CODE TABLE VALUE
         CLI   0(R1),C'0'              NUMERIC TABLE ENTRY?
         BNL   CONUM                   YES
         MVC   OUTMNEM(3),0(R1)        MOVE EXTENDED MNEMONIC
         MVC   OUTMNEM+3(2),BLANKS     CLEAR UNUSED BYTES
         CLI   INSTLENG,2              THIS A TWO-BYTE BRANCH INST?
         BNE   COXIT                   NO, FINISHED
         CLI   OUTMNEM+1,C' '          BYTE 2 IS BLANK?
         BNE   COTRY3                  NO
         MVI   OUTMNEM+1,C'R'          YES, MOVE APPENDING R TO BYTE 2
         B     COXIT                   AND EXIT
COTRY3   CLI   OUTMNEM+2,C' '          BYTE 3 IS BLANK?
         BNE   COIS4                   NO
         MVI   OUTMNEM+2,C'R'          YES, MOVE APPENDING R TO BYTE 3
         B     COXIT                   AND EXIT
COIS4    MVI   OUTMNEM+3,C'R'          MOVE APPENDING R TO BYTE 4
         B     COXIT                   AND EXIT
CONUM    MVC   0(2,R8),0(R1)           MOVE IN MASK DIGITS
         CLI   1(R8),C' '              SINGLE DIGIT MASK?
         BNE   COTWO                   NO, TWO DIGIT MASK
         MVI   1(R8),C','              MOVE IN COMMA SEPARATOR
         LA    R8,2(R8)                STEP PAST THE OPERAND
         B     COXIT                   AND EXIT
COTWO    MVI   2(R8),C','              MOVE IN COMMA SEPARATOR
         LA    R8,3(R8)                STEP PAST THE OPERAND
COXIT    L     R9,CO9                  GET RETURN ADDRESS
         BR    R9                      EXIT
CO9      DC    A(0)                    RETURN ADDRESS
***********************************************************************
*                INDEX-BASE-DISPLACEMENT ADDRESSES                    *
* ON ENTRY R8 POINTS TO THE NEXT BYTE OF THE OPERAND FIELD, R1'S LOW  *
* ORDER TWO BYTES CONTAIN THE BASE-DISPLACEMENT PORTION, AND ITS 4TH  *
* NYBBLE CONTAINS THE INDEX REGISTER NUMBER:                          *
*      R1 ON ENTRY: --.--.--.XX.BB.DD.DD.DD.                          *
* IF THIS IS STAGE 1, THE ADDLABEL ROUTINE IS CALLED TO BUILD A LABEL *
* TABLE ENTRY FOR THE OPERAND ADDRESS, FOR STAGE 2 THE ADDRESS IS     *
* FORMATTED EITHER AS DISP(INDX,BASE) OR AS LBL(INDX) IF A LABEL IS   *
* FOUND IN THE LABEL TABLE FOR THE BASE-DISPLACEMENT ADDRESS PORTION. *
***********************************************************************
XBDOPND  ST    R9,XO9                  SAVE RETURN ADDRESS
         STH   R1,DISPLAC              SAVE THE DISPLACEMENT
         NI    DISPLAC,X'0F'           CLEAR HIGH ORDER NYBBLE
         SRL   R1,12                   SHIFT OUT DISPLACEMENT
         STC   R1,BASE                 SAVE BASE REGISTER NUMBER
         NI    BASE,X'0F'              CLEAR HIGH ORDER NYBBLE
         CLI   STAGE,2                 IS THIS STAGE 2?
         BE    XOSTG2                  YES
         BAS   R9,ADDLABEL             NO, GO ADD NEW LABEL
         B     XOXIT                   AND THEN EXIT
XOSTG2   SRL   R1,4                    SHIFT OUT THE BASE REGISTER
         STC   R1,INDEX                SAVE INDEX REGISTER NUMBER
         NI    INDEX,X'0F'             CLEAR HIGH ORDER NYBBLE
         BAS   R9,GETLABEL             GO GET A LABEL
         CLI   0(R8),0                 WAS A LABEL FOUND?
         BE    XOEXPL                  NO, FORMAT EXPLICIT OPERAND
         CLI   INDEX,0                 IS THERE AN INDEX REGISTER?
         BE    XOXIT                   NO, EXIT
         MVI   0(R8),C'('              MOVE OPEN PAREN
         LA    R8,1(R8)                STEP PAST OPENING PAREN
         IC    R1,INDEX                PICK UP INDEX REGISTER NUMBER
         BAS   R9,REGOPNDS             GO FORMAT THE REGISTER NUMBER
         MVI   0(R8),C')'              MOVE CLOSING PARENTHESIS
         LA    R8,1(R8)                STEP PAST THE OPERAND
         B     XOXIT                   AND EXIT
XOEXPL   LH    R1,DISPLAC              PICK UP DISPLACEMENT
         CVD   R1,DBLWD                CONVERT IT TO PACKED DECIMAL
         CP    DBLWD,PK999             DISPLACEMENT IS 4 DIGITS?
         BH    XOGT1K                  YES
         CP    DBLWD,PK99              DISPLACEMENT IS 3 DIGITS?
         BH    XOGTHUND                YES
         CP    DBLWD,PK9               DISPLACEMENT IS 2 DIGITS?
         BH    XOGTTEN                 YES
         UNPK  0(1,R8),DBLWD           UNPACK 1-BYTE DISPLACEMENT
         OI    0(R8),X'F0'             MAKE SIGN VALID
         LA    R8,1(R8)                STEP PAST DISPLACEMENT
         B     XOCKANY                 CONTINUE
XOGT1K   UNPK  0(4,R8),DBLWD           UNPACK 1-BYTE DISPLACEMENT
         OI    3(R8),X'F0'             MAKE SIGN VALID
         LA    R8,4(R8)                STEP PAST DISPLACEMENT
         B     XOCKANY                 CONTINUE
XOGTHUND UNPK  0(3,R8),DBLWD           UNPACK 1-BYTE DISPLACEMENT
         OI    2(R8),X'F0'             MAKE SIGN VALID
         LA    R8,3(R8)                STEP PAST DISPLACEMENT
         B     XOCKANY                 CONTINUE
XOGTTEN  UNPK  0(2,R8),DBLWD           UNPACK 1-BYTE DISPLACEMENT
         OI    1(R8),X'F0'             MAKE SIGN VALID
         LA    R8,2(R8)                STEP PAST DISPLACEMENT
XOCKANY  CLI   INDEX,0                 IS THERE AN INDEX REGISTER?
         BNE   XOSETOPN                YES
         CLI   BASE,0                  IS THERE A BASE REGISTER?
         BE    XOXIT                   NO, ALL THRU
XOSETOPN MVI   0(R8),C'('              MOVE IN OPENING PARENTHESIS
         LA    R8,1(R8)                STEP PAST OPENING PARENTHESIS
         CLI   INDEX,0                 IS THERE AN INDEX REG?
         BE    XOXCKBAS                CONTINUE TO BASE
XOGOTIX  IC    R1,INDEX                GET INDEX REGISTER NUMBER
         BAS   R9,REGOPNDS             GO FORMAT INDEX REGISTER
XOXCKBAS CLI   BASE,0                  IS THERE A BASE REGISTER?
         BE    XOSETRPN                NO
         MVI   0(R8),C','              MOVE SEPARATING COMMA
         LA    R8,1(R8)                STEP PAST THE COMMA
XOGOTB   IC    R1,BASE                 GET BASE REGISTER NUMBER
         BAS   R9,REGOPNDS             GO FORMAT THE BASE REGISTER
XOSETRPN MVI   0(R8),C')'              MOVE CLOSING PARENTHESIS
         LA    R8,1(R8)                STEP PAST CLOSING PARENTHESIS
XOXIT    L     R9,XO9                  GET RETURN ADDRESS
         BR    R9                      EXIT
XO9      DC    A(0)                    RETURN ADDRESS
***********************************************************************
*                BASE-DISPLACEMENT ADDRESSES                          *
* ON ENTRY R8 POINTS TO THE NEXT BYTE OF THE OPERAND FIELD, R1'S LOW  *
* ORDER TWO BYTES CONTAIN THE BASE-DISPLACEMENT ADDRESS:              *
*      R1 ON ENTRY: --.--.--.--.BB.DD.DD.DD.                          *
*      LENGTH CONTAINS 0 IF N/A, ELSE THE OPERAND LENGTH              *
* IF THIS IS STAGE 1, THE ADDLABEL ROUTINE IS CALLED TO BUILD A LABEL *
* TABLE ENTRY FOR THE OPERAND ADDRESS.                                *
* FOR STAGE 2 THE LABEL TABLE IS SEARCHED FOR A LABEL AT THE BASE-    *
* DISPLACEMENT ADDRESS. IF FOUND, FORMAT IS LABEL(LENG) OTHERWISE     *
* EXPLICIT FORMAT IS USED: DISP(LENG,BASE). THE LENGTH PORTION IS     *
* OMITTED WHEN LENGTH=0.                                              *
***********************************************************************
BDOPND   ST    R9,BO9                  SAVE RETURN ADDRESS
         STH   R1,DISPLAC              SAVE THE DISPLACEMENT
         NI    DISPLAC,X'0F'           CLEAR HIGH ORDER NYBBLE
         SRL   R1,12                   SHIFT OUT DISPLACEMENT
         STC   R1,BASE                 SAVE BASE REGISTER NUMBER
         NI    BASE,X'0F'              CLEAR HIGH ORDER NYBBLE
         CLI   STAGE,2                 IS THIS STAGE 2?
         BE    BOSTG2                  YES
         BAS   R9,ADDLABEL             NO, GO ADD NEW LABEL
         B     BOXIT                   AND THEN EXIT
BOSTG2   BAS   R9,GETLABEL             GO GET A LABEL
         CLI   0(R8),0                 WAS A LABEL FOUND?
         BE    BOEXPL                  NO, FORMAT EXPLICIT OPERAND
         CLI   LENGTH,0                IS THERE A LENGTH SPECIFIED?
         BZ    BOXIT                   NO, EXIT
         MVI   0(R8),C'('              MOVE OPEN PAREN
         LA    R8,1(R8)                STEP PAST OPENING PAREN
         SR    R1,R1                   CLEAR FOR INSERT
         IC    R1,LENGTH               PICK UP LENGTH
         BAS   R9,DECMOPND             GO FORMAT THE LENGTH
         MVI   0(R8),C')'              MOVE CLOSING PARENTHESIS
         LA    R8,1(R8)                STEP PAST THE OPERAND
         B     BOXIT                   AND EXIT
BOEXPL   LH    R1,DISPLAC              PICK UP DISPLACEMENT
         BAS   R9,DECMOPND             GO FORMAT THE DISPLACEMENT
BOCKANY  CLI   LENGTH,0                IS THERE ANY LENGTH?
         BNE   BOSETOPN                YES
         CLI   BASE,0                  IS THERE A BASE REGISTER?
         BE    BOXIT                   NO, ALL THRU
BOSETOPN MVI   0(R8),C'('              MOVE IN OPENING PARENTHESIS
         LA    R8,1(R8)                STEP PAST OPENING PARENTHESIS
         CLI   LENGTH,0                IS THERE A LENGTH SPECIFIED
         BE    BOXCKBAS                CONTINUE TO BASE
BOGOTIX  SR    R1,R1                   CLEAR FOR INSERT
         IC    R1,LENGTH               GET LENGTH
         BAS   R9,DECMOPND             GO FORMAT THE LENGTH
         MVI   0(R8),C','              MOVE SEPARATING COMMA
         LA    R8,1(R8)                STEP PAST THE COMMA
BOXCKBAS CLI   BASE,0                  IS THERE A BASE REGISTER?
         BE    BOSETRPN                NO
BOGOTB   IC    R1,BASE                 GET BASE REGISTER NUMBER
         BAS   R9,REGOPNDS             GO FORMAT THE BASE REGISTER
BOSETRPN MVI   0(R8),C')'              MOVE CLOSING PARENTHESIS
         LA    R8,1(R8)                STEP PAST CLOSING PARENTHESIS
BOXIT    L     R9,BO9                  GET RETURN ADDRESS
         BR    R9                      EXIT
BO9      DC    A(0)                    RETURN ADDRESS
***********************************************************************
*             SEARCH THE LABEL TABLE FOR A LABEL                      *
* CALLER SETS THE BASE REGISTER NUMBER IN THE BASE FIELD AND THE      *
* DISPLACEMENT IN THE DISPLAC FIELD. THIS ROUTINE CHECKS TO SEE IF    *
* A USING HAS BEEN DECLARED FOR THE SPECIFIED BASE REGISTER. IF IT HAS*
* THE CSECT OFFSET IS COMPUTED AS USING VALUE + DISPLACEMENT VALUE,   *
* AND THE LABEL TABLE IS SEARCHED FOR A LABEL AT THIS LOCATION. IF    *
* FOUND, THE LABEL IS MOVED TO THE ADDRESS IN R8, AND R8 IS UPDATED TO*
* POINT TO THE NEXT BYTE FOLLOWING THE LABEL. IF NO LABEL IS FOUND, R8*
* WILL BE UNCHANGED, AND THE BYTE AT THE ADDRESS IN R8 WILL BE SET TO *
* X'00'.                                                              *
***********************************************************************
GETLABEL ST    R9,GL9                  SAVE RETURN ADDRESS
         MVI   0(R8),0                 SET NOT FOUND INDICATOR
         SR    R1,R1                   CLEAR FOR INSERT
         IC    R1,BASE                 GET BASE REGISTER NUMBER
         SLL   R1,2                    MULTIPLY BY 4
         LA    R1,USENTRY(R1)          POINT TO USING TABLE ENTRY
         ICM   R1,15,0(R1)             GET USING ELEMENT
         BZ    GLXIT                   NO USING, EXIT
         LA    R1,0(R1)                CLEAR HI BIT
         AH    R1,DISPLAC              COMPUTE CSECT OFFSET TO ADDR
         L     R15,LBLTBADR            POINT TO LABEL TABLE
         USING LBLDSECT,R15
GLCKLBND C     R15,LBLTBEND            PAST END OF TABLE?
         BNL   GLXIT                   YES, NO LABEL FOUND, EXIT
         C     R1,LBLOFSET             PAST ANY POSSIBLE ENTRY?
         BL    GLXIT                   YES, EXIT
         BH    GLSTEP                  NO, NOT FAR ENOUGH
         CLI   LBLTYPE,X'20'           POSSIBLY LABEL ENTRY?
         BL    GLSTEP                  NO
         CLI   LBLLABEL,C'A'           LABEL PRESENT?
         BNL   GLGOTONE                YES, GOT ONE
GLSTEP   LA    R15,L'LBLENTRY(R15)     NO, STEP TO NEXT ENTRY
         B     GLCKLBND                LOOP THROUGH THE TABLE
GLGOTONE MVC   0(8,R8),LBLLABEL        YES, MOVE LABEL TO OPERAND FIELD
         MVC   LABELENG,LBLRLDLN       SAVE ASSOCIATED LABEL LENGTH
         LA    R8,7(R8)                POINT TO 8TH BYTE OF LABEL
GLCKRHE  CLI   0(R8),C' '              AT A BLANK?
         BNE   GLLBIX                  NO, AT RIGHT END
         BCT   R8,GLCKRHE              LOOP TO FIND RHE
GLLBIX   LA    R8,1(R8)                STEP PAST THE LABEL
         DROP  R15
GLXIT    L     R9,GL9                  GET RETURN ADDRESS
         BR    R9                      EXIT
GL9      DC    A(0)                    RETURN ADDRESS
*********************************************************************
* BUILD UP THE CONSTANT IN PROGRESS, OR START ONE IF THERE IS NONE  *
* IN PROGRESS.                                                      *
*********************************************************************
BLDCONST ST    R9,BC9                  SAVE RETURN ADDRESS
         CLI   CONPROG,0               CONSTANT IN PROGRESS?
         BNE   BCCHKLEN                YES
BCNEW    L     R12,CURRTXTA            POINT TO CURRENT TEXT BYTE
         TRT   0(3,R12),CHKCHAR        3 CONSECUTIVE CHARACTERS?
         BZ    BCNEWC                  YES
         MVI   CONPROG,C'X'            NO, INDICATE HEX CONSTANT
         B     BCSETLEN                CONTINUE
BCNEWC   MVI   CONPROG,C'C'            INDICATE CHARACTER CONSTANT
BCSETLEN MVC   CONLENG,H1              SET CONSTANT LENGTH TO 0
         MVC   CONSTRTL,LOCATION       SAVE STARTING LOCATION
         MVC   CONSTANT(1),0(R12)      SAVE THE CONSTANT BYTE
         B     BCUPDATE                GO UPDATE POINTERS
BCCHKLEN CLC   CONLENG,H32             ALREADY HAVE 32 BYTES?
         BNL   BCFORCE                 YES, GO FORCE IT OUT
         CLI   CONPROG,C'C'            CHARACTER CONSTANT IN PROGRESS?
         BE    BCCHLBLL                YES
         CLC   CONLENG,H16             ALREADY HAVE 16 BYTES?
         BL    BCCHLBLL                NO, CONTINUE
BCFORCE  BAS   R9,FORCECON             YES, GO FORCE CURRENT ONE OUT
         B     BCNEW                   GO START ANOTHER
BCCHLBLL CLI   OUTLABEL,C' '           STATEMENT HAS A LABEL?
         BE    BCCKCTNU                NO
         CLC   LBLLENG,H0              LENGTH ASSOCIATED WITH LABEL?
         BE    BCCKCTNU                NO
         CLC   CONLENG,LBLLENG         CONSTANT LENGTH = LABEL LENGTH?
         BNE   BCCKCTNU                NO
         B     BCFORCE                 YES, GO FORCE CURRENT ONE OUT
BCCKCTNU L     R12,CURRTXTA            POINT TO CURRENT TEXT BYTE
         CLI   CONPROG,C'X'            HEX CONSTANT IN PROGRESS?
         BNE   BCCKCCTN                NO
         TRT   0(3,R12),CHKCHAR        3 CHARACTERS FOLLOW HERE?
         BNZ   BCTACKON                NO, CONTINUE WITH HEX
         B     BCFORCE                 YES, GO FORCE HEX CONST OUT
BCCKCCTN TRT   0(1,R12),CHKCHAR        THIS BYTE A CHARACTER?
         BZ    BCTACKON                YES, CONTINUE IN CHAR
         B     BCFORCE                 NO, GO FORCE CHAR CONST OUT
BCTACKON LH    R1,CONLENG              PICK UP CURRENT LENGTH
         LA    R1,CONSTANT(R1)         POINT TO CURRENT BYTE IN CONST
         L     R12,CURRTXTA            POINT TO CURRENT TEXT BYTE
         MVC   0(1,R1),0(R12)          MOVE BYTE TO CONSTANT IN PROG
         LH    R1,CONLENG              UPDATE
         LA    R1,1(R1)                   CONSTANT
         STH   R1,CONLENG                    LENGTH
BCUPDATE LA    R12,1(R12)              UPDATE CURRENT
         ST    R12,CURRTXTA               TEXT ADDRESS
         L     R1,LOCATION             UPDATE
         LA    R1,1(R1)                   CURRENT
         ST    R1,LOCATION                   LOCATION
BCXIT    L     R9,BC9                  GET RETURN ADDRESS
         BR    R9                      EXIT
BC9      DC    A(0)                    RETURN ADDRESS
*********************************************************************
* FORCE THE CURRENT CONSTANT IN PROGRESS OUT: WRITE THE SYSOUT      *
* SOURCE STATEMENT AND CLEAR STORAGE AREAS.                         *
*********************************************************************
FORCECON ST    R9,FC9
         CLI   STAGE,1                 NOW IN STAGE 1?
         BE    FCXIT                   YES, NOTHING TO DO NOW
         MVC   OUTMNEM(2),=CL2'DC'     MOVE MNEMONIC
         MVC   OUTOPND(1),CONPROG      BEGIN OPERAND WITH C OR X
         MVI   OUTOPND+1,C'L'          SET LENGTH DELIMITER
         LH    R2,CONLENG              GET CONSTANT LENGTH
         CVD   R2,DBLWD                CONVERT TO PACKED DECIMAL
         CP    DBLWD,PK9               OVER 9 BYTES?
         BH    FCOVR9                  YES
         UNPK  OUTOPND+2(1),DBLWD      UNPACK LENGTH
         OI    OUTOPND+2,X'F0'         AND CLEAR THE SIGN
         LA    R11,OUTOPND+3           POINT TO OPENING APOSTROPHE
         B     FCOPENIT                GO SET OPENING APOSTROPHE
FCOVR9   UNPK  OUTOPND+2(2),DBLWD      UNPACK LENGTH
         OI    OUTOPND+3,X'F0'         AND CLEAR THE SIGN
         LA    R11,OUTOPND+4           POINT TO OPENING APOSTROPHE
FCOPENIT MVI   0(R11),C''''            OPENING APOSTROPHE
         LA    R11,1(R11)              STEP PAST LEADING APOSTROPHE
         LA    R12,CONSTANT            POINT TO CONSTANT AREA
         LH    R15,CONLENG             GET CONSTANT LENGTH
         UNPK  OUTOFFST(7),CONSTRTL+1(4) UNPACK LOCATION
         MVI   OUTOFFST+6,C' '         CLEAR TRASH
         TR    OUTOFFST,TRCHAR-C'0'    MAKE PRINTABLE
         CLI   CONPROG,C'C'            THIS A CHARACTER CONSTANT?
         BE    FCCHARS                 YES
         ST    R11,WORKFWD             SAVE TEXT START ADDRESS
FCFMTHEX UNPK  0(3,R11),0(2,R12)       UNPACK
         MVC   2(2,R11),=C''' '        MOVE ENDING APOSTROPHE
         TR    0(2,R11),TRCHAR-C'0'    MAKE PRINTABLE
         LA    R11,2(R11)              TO NEXT OPERAND LOCATION
         LA    R12,1(R12)              TO NEXT CONSTANT BYTE
         BCT   R15,FCFMTHEX            LOOP TO BUILD TEXT
         L     R11,WORKFWD             POINT TO THE TEXT
         LH    R1,CONLENG              PICK UP CONSTANT LENGTH
         SLL   R1,1                    DOUBLE FOR HEX
         BCTR  R1,0                    COMPUTE LENGTH CODE
         CH    R1,H8                   TOO MUCH TO MOVE?
         BL    FCMOVIT                 NO
         LA    R1,7                    SET LENGTH MAX
         MVC   OUTTEXT+8(3),=CL3'...'  SHOW TEXT TRUNCATED
FCMOVIT  EX    R1,FCMVTXT              MOVE THE TEXT
         B     FCFINI                  FINISHED
FCCHARS  BCTR  R15,0                   GET MOVE LENGTH CODE
         EX    R15,FCMVCHAR            MOVE CHARACTERS
         AR    R11,R15                 POINT TO LAST BYTE MOVED
         MVC   1(2,R11),=C''' '        SET ENDING APOSTROPHE
         CH    R15,H3                  CONSTANT LESS THAN 4 BYTES?
         BL    FCCHLT4                 YES
         UNPK  OUTTEXT(9),0(5,R12)     UNPACK 4 BYTES TO PRINT
         MVI   OUTTEXT+8,C' '          CLEAR TRASH
         TR    OUTTEXT(8),TRCHAR-C'0'  MAKE IT PRINTABLE
         BE    FCFINI                  EXACTLY FOUR BYTES, ALL THROUGH
         MVC   OUTTEXT+8(3),=CL3'...'  SHOW TEXT TRUNCATED
         B     FCFINI                  ALL THROUGH
FCCHLT4  CH    R15,H2                  CONSTANT IS 3 BYTES?
         BL    FCCHLT3                 NO, LESS THAN 3
         UNPK  OUTTEXT(7),0(4,R12)     UNPACK 3 BYTES TO PRINT
         MVI   OUTTEXT+6,C' '          CLEAR TRASH
         TR    OUTTEXT(6),TRCHAR-C'0'  MAKE PRINTABLE
         B     FCFINI                  ALL THRU
FCCHLT3  CH    R15,H1                  CONSTANT IS 2 BYTES?
         BL    FCCHLT2                 NO, LESS THAN 2 BYTES
         UNPK  OUTTEXT(5),0(3,R12)     UNPACK 2 BYTES TO PRINT
         MVI   OUTTEXT+4,C' '          CLEAR TRASH
         TR    OUTTEXT(4),TRCHAR-C'0'  MAKE PRINTABLE
         B     FCFINI                  ALL THRU
FCCHLT2  UNPK  OUTTEXT(3),0(2,R12)     UNPACK 1 BYTE TO PRINT
         MVI   OUTTEXT+2,C' '          CLEAR TRASH
         TR    OUTTEXT(2),TRCHAR-C'0'  MAKE PRINTABLE
FCFINI   BAS   R9,OUTPUT               WRITE OUTPUT LINE
         MVI   CONPROG,0               RESET CON-IN-PROG SWITCH
         MVI   LAST,C'C'               SHOW LAST WAS CONSTANT
FCXIT    L     R9,FC9                  GET RETURN ADDRESS
         BR    R9                      EXIT
FC9      DC    A(0)                    RETURN ADDRESS
FCMVTXT  MVC   OUTTEXT(1),0(R11)       EXECUTED MOVE
FCMVCHAR MVC   0(1,R11),CONSTANT       EXECUTED MOVE
***********************************************************************
* TEST A BYTE OF TEXT TO SEE IF IT MAY BEGIN AN INSTRUCTION.          *
***********************************************************************
SRCHOC   ST    R9,SO9                  SAVE RETURN ADDRESS
         L     R12,CURRTXTA            POINT TO CURRENT TEXT BYTE
         MVI   ISINST,0                CLEAR INDICATOR
         SR    R1,R1                   CLEAR FOR INSERT
         IC    R1,0(R12)               PICK UP TEXT BYTE
         MHI   R1,L'OPCENTRY           MULTIPLY BY ENTRY LENGTH
         A     R1,OPCDTBLA             POINT TO GENERAL OP-CODE ENTRY
         USING OPCODES,R1
         MVC   INSTBYT1,OPCODE1        SAVE (1ST BYTE OF) OP-CODE
         CLI   OPCTWO2,C'2'            THIS A TWO-BYTE OP-CODE?
         BNE   SOGOT1                  NO, SINGLE BYTE OP-CODE
         ICM   R1,15,OPCSRCH2          GET 2-BYTE OP-CODE TABL ADDR
         CLI   INSTBYT1,X'ED'          IST BYTE OF OP-CODE IS X'ED'?
         BE    SOPLUS5                 YES, GO SEARCH
         CLI   INSTBYT1,X'A7'          IST BYTE OF OP-CODE IS X'A7'?
         BE    SOSRCHA7                YES, GO SEARCH
SOPLUS1  CLC   0(4,R1),HEXFFS          END OF TABLE?
         BE    SOXIT                   YES, NOT AN INSTRUCTION
         CLC   OPCODE2,1(R12)          FOUND THE OPCODE ENTRY?
         BE    SOGOT1                  YES
         BH    SOXIT                   NO, PAST IT
         LA    R1,L'OPCENTRY(R1)       STEP TO NEXT ENTRY
         B     SOPLUS1                 LOOP THRU TABLE
SOSRCHA7 SR    R2,R2                   CLEAR FOR INSERTS
SO1DOT5  CLC   0(4,R1),HEXFFS          END OF TABLE?
         BE    SOXIT                   YES, NOT AN INSTRUCTION
         PACK  WORK1(1),1(1,R12)       INVERT THE .R1.OC. BYTE
         NI    WORK1,X'F0'             LEAVE ONLY .OC. IN HIGH NYBBLE
         CLC   OPCODE2,WORK1           FOUND THE OPCODE ENTRY?
         BE    SOGOT1                  YES
         BH    SOXIT                   NO, PAST IT
         LA    R1,L'OPCENTRY(R1)       STEP TO NEXT ENTRY
         B     SO1DOT5                 LOOP THRU TABLE
SOPLUS5  CLC   0(4,R1),HEXFFS          END OF TABLE?
         BE    SOXIT                   YES, NOT AN INSTRUCTION
         CLC   OPCODE2,5(R12)          FOUND THE OPCODE ENTRY?
         BE    SOGOT1                  YES
         BH    SOXIT                   NO, PAST IT
         LA    R1,L'OPCENTRY(R1)       STEP TO NEXT ENTRY
         B     SOPLUS5                 LOOP THRU TABLE
SOGOT1   SR    R2,R2                   CLEAR FOR INSERT
         CLI   OPCMNEM,0               IS IT AN INSTRUCTION?
         BE    SOXIT                   NO, NOT AN INSTRUCTION
         MVC   INSTFMT,OPCFORMT        SAVE INSTRUCTION FORMAT CODE
         MVC   INSTFLG1,OPCFLAG1       SAVE FLAG BYTE 1
         MVC   INSTFLG2,OPCFLAG2       SAVE FLAG BYTE 2
         TM    INSTBYT1,X'C0'          TEST OPCODE LENGTH BITS
         BZ    SOLEN2                  BOTH ZERO: 2-BYTE INSTRUCTION
         BO    SOLEN6                  BOTH ONE: 6-BYTE INSTRUCTION
         MVI   INSTLENG,4              SET 4-BYTE LENGTH
         B     SOCLRTXT                CONTINUE
SOLEN6   MVI   INSTLENG,6              SET 6-BYTE LENGTH
         B     SOCLRTXT                CONTINUE
SOLEN2   MVI   INSTLENG,2              SET 2-BYTE LENGTH
SOCLRTXT XC    INSTTEXT,INSTTEXT       CLEAR INSTRUCTION TEXT
         SR    R2,R2                   CLEAR FOR INSERT
         IC    R2,INSTLENG             GET INSTRUCTION LENGTH
         BCTR  R2,0                    COMPUTE TEXT LENGTH
         EX    R2,SOMVTXT              MOVE INSTRUCTION TEXT
         MVC   INSTMNEM,OPCMNEM        SAVE MNEMONIC
         MVC   INSTFLAG,OPCFLAGS       SAVE FLAGS
         MVC   INSTCCNT,OPCNDCOD       SAVE CONDITION CODE ENTRY NBR
         MVI   ISINST,1                INDICATE TEXT IS INSTRUCTION
         DROP  R1
SOXIT    L     R9,SO9                  GET RETURN ADRESS
         BR    R9                      EXIT
SO9      DC    A(0)                    RETURN ADDRESS
SOMVTXT  MVC   INSTTEXT(1),0(R12)      EXECUTED MOVE
*********************************************************************
* ADD AN ENTRY TO THE LABEL TABLE. THE NEW ENTRY IS REPRESENTED BY  *
* A BASE-DISPLACEMENT ADDRESS, AND THE CALLER HAS FILLED IN THE BASE*
* AND DISPLAC FIELDS BEFORE CALLING THIS ROUTINE.                   *
* FIRST, THE USENTRY TABLE IS SEARCHED TO SEE IF THERE IS A CURRENT *
* USING STATEMENT IN EFFECT FOR THE BASE REGISTER SPECIFIED. IF NOT *
* THE NEW LABEL REQUEST IS IGNORED. NEXT, THE NEW LABEL ENTRY IS    *
* BUILT AT THE END OF THE TABLE, AND IS THEN SORTED IN CORRECT      *
* POSITION. IF A LABEL ALREADY EXISTS AT THIS LOCATION, THE NEW ONE *
* IS DROPPED.                                                       *
*********************************************************************
ADDLABEL ST    R9,AL9                  SAVE RETURN ADDRESS
         SR    R1,R1                   CLEAR FOR INSERT
         IC    R1,BASE                 GET BASE REGISTER NUMBER
         SLL   R1,2                    MULTIPLY BY 4
         LA    R1,USENTRY(R1)          POINT TO USING TABLE ENTRY
         ICM   R1,15,0(R1)             GET USING ELEMENT
         BZ    ALXIT                   NO USING, EXIT
         LA    R1,0(R1)                CLEAR HI ORDER BIT
         AH    R1,DISPLAC              COMPUTE CSECT OFFSET TO ADDR
         L     R15,CURRLABL            POINT TO NEW LABEL LOCATION
         USING LBLDSECT,R15
         XC    LBLENTRY,LBLENTRY       PRE-CLEAR THE ENTRY
         ST    R1,LBLOFSET             SAVE THE OFFSET
         MVI   LBLTYPE,X'30'           SET TYPE TO LABEL
         MVI   LBLLABEL,C'A'           FIRST CHARACTER OF LABEL
         UNPK  LBLLABEL+1(7),LBLOFSET+1(4) UNPACK LOCATION
         MVI   LBLLABEL+7,C' '         CLEAR TRASH
         TR    LBLLABEL+1(6),TRCHAR-C'0' MAKE HEX PRINTABLE
         DROP  R15
         L     R1,LBLTBADR             POINT TO FIRST TABLE ENTRY
         USING LBLDSECT,R1
         L     R2,CURRLABL             POINT TO NEW ENTRY
ALCHKEND CR    R1,R2                   PRESENTLY AT NEW ENTRY?
         BNL   ALADVANC                YES
         CLC   0(5,R2),LBLENTRY        AT INSERTION POINT?
         BE    ALXIT                   YES, LABEL ALREADY HERE, IGNORE
         BL    ALINSRT                 YES, NO LABEL HERE, INSERT
         LA    R1,L'LBLENTRY(R1)       NO, ADVANCE TO NEXT ENTRY
         B     ALCHKEND                LOOP TO FIND INSERTION POINT
ALINSRT  MVC   HOLDLABL,LBLENTRY       HOLD PRESENT ENTRY
         MVC   LBLENTRY,0(R2)          MOVE IN NEW ENTRY
         MVC   0(L'LBLENTRY,R2),HOLDLABL PREVIOUS ENTRY TO END
         LA    R1,L'LBLENTRY(R1)       STEP TO NEXT ENTRY
         CR    R1,R2                   PRESENTLY AT LAST ENTRY?
         BL    ALINSRT                 NO, CONTINUE INSERTION LOOP
ALADVANC LA    R2,L'LBLENTRY(R2)       STEP TO NEXT AVAILABLE SLOT
         ST    R2,CURRLABL             SAVE UPDATED TABLE ADDRESS
         C     R2,LBLTBEND             PAST END OF TABLE?
         BL    ALXIT                   NO
         MVC   PRT(37),=CL37'LABEL TABLE OF 32,768 ENTRIES IS FULL'
         BAS   R9,PRINT                PRINT ERROR MESSAGE
         WTO   'LABEL TABLE OVERFLOW, ABENDING',ROUTCDE=11
         ABEND 666,DUMP                TERMINATE IN ERROR
ALXIT    L     R9,AL9                  GET RETURN ADDRESS
         L     R2,CURRLABL             POINT TO CURRENT ENTRY
         XC    0(L'LBLENTRY,R2),0(R2)  CLEAR TO HEX ZEROS
         BR    R9                      EXIT
         DROP  R1
AL9      DC    A(0)                    RETURN ADDRESS
*********************************************************************
* PRINT ROUTINE                                                     *
*********************************************************************
PRINT    ST    R9,P9                   SAVE RETURN ADDRESS
         L     R9,PRNTDCBA             POINT TO SYSPRINT DCB
         PUT   0(R9),PRTLINE           WRITE PRINT LINE
         MVC   PRTLINE,BLANKS          CLEAR PRINT LINE
PXIT     L     R9,P9                   GET RETURN ADDRESS
         BR    R9                      RETURN
P9       DC    A(0)                    RETURN ADDRESS
*********************************************************************
* OUTPUT ROUTINE                                                    *
*********************************************************************
OUTPUT   ST    R9,OP9                  SAVE RETURN ADDRESS
         L     R9,OUTDCBA              POINT TO SYSOUT DCB
         PUT   0(R9),OUTREC            WRITE OUTPUT RECORD
         MVC   OUTREC,BLANKS           CLEAR OUTPUT RECORD
OPXIT    L     R9,OP9                  GET RETURN ADDRESS
         BR    R9                      RETURN
OP9      DC    A(0)                    RETURN ADDRESS
*********************************************************************
* RETURN TO CALLER                                                  *
*********************************************************************
RETURN   CLI   STAGE,1                 IN STAGE 1?
         BE    RETURN1                 YES
         ZAP   DBLWD(2),PK0            SET REG NBR TO ZERO
RETFMEQU MVI   OUTLABEL,C'R'           START REGISTER NAME
         MVC   OUTMNEM(3),=CL3'EQU'    SET IN MNEMONIC
         CP    DBLWD(2),PK9            GREATER THAN 9?
         BH    RETGT9                  YES
         UNPK  OUTLABEL+1(1),DBLWD+1(1) UNPACK REGISTER NUMBER
         OI    OUTLABEL+1,X'F0'        CLEAR SIGN
         B     RETREQND                CONTINUE
RETGT9   UNPK  OUTLABEL+1(2),DBLWD(2)  UNPACK REGISTER NUMBER
         OI    OUTLABEL+2,X'F0'        CLEAR SIGN
RETREQND MVC   OUTOPND(2),OUTLABEL+1   REGISTER NUMBER TO OPERAND
         BAS   R9,OUTPUT               GO WRITE THE EQU STATEMENT
         AP    DBLWD(2),PK1            INCREMENT REGISTER NUMBER
         CP    DBLWD(2),PK15           ALL THROUGH?
         BNH   RETFMEQU                NO
         MVC   OUTMNEM(3),=CL3'END'    SET MNEMONIC TO END
         BAS   R9,OUTPUT               WRITE END STATEMENT
RETURN1  L     R13,4(R13)              POINT TO CALLER'S SAVE AREA
         L     R1,24(R13)              GET CALLER'S PARM POINTER
         MVC   0(ENDPARMS-PARMAREA,R1),PARMAREA UPDATE PARMS
         LM    R14,R12,12(R13)         RESTORE CALLER'S REGISTERS
         SR    R15,R15                 SET RETURN CODE TO 0
         BR    R14                     RETURN
***********************************************************************
* WORKING STORAGE AND CONSTANTS                                       *
***********************************************************************
DBLWD    DS    D                       DOUBLEWORD WORK AREA
XZROS    DC    D'0'                    CONSTANT HEX ZEROS
CSECT    DS    CL8                     CSECT NAME
LOCATION DC    A(0)                    LOCATION COUNTER
CONSTRTL DC    A(0)                    LOCATION FOR CONSTANT START
CURRTXTA DC    A(0)                    CURRENT TEXT LOCATION
CURRLBLA DC    A(0)                    CURRENT LABEL TABLE ENTRY ADDR
ADCNVALU DC    F'0'                    SAVE FIELD FOR ADCON VALUE
WORKFWD  DC    F'0'                    WORK FIELD
ZEROF    DC    X'0000000F'             AND MASK: LEAVE ONLY LOW NYBBLE
KEEPLO12 DC    X'00000FFF'             AND MASK: LEAVE ONLY LOW 12 BITS
USENTRY  DC    16F'0'                  USING TABLE
HEXFFS   DC    4X'FF'                  HEX FF'S
LBLLENG  DS    H                       LABEL ASSOCIATED DATA LENGTH
CONLENG  DS    H                       CURRENT CONSTANT LENGTH
H0       DC    H'0'                    CONSTANT 0
H1       DC    H'1'                    CONSTANT 1
H2       DC    H'2'                    CONSTANT 2
H3       DC    H'3'                    CONSTANT 3
H4       DC    H'4'                    CONSTANT 4
H5       DC    H'5'                    CONSTANT 5
H8       DC    H'8'                    CONSTANT 8
H10      DC    H'10'                   CONSTANT 10
H16      DC    H'16'                   CONSTANT 16
H32      DC    H'32'                   CONSTANT 32
INDEX    DC    XL1'00'                 INDEX REGISTER NUMBER
BASE     DC    XL1'00'                 BASE REGISTER VALUE
DISPLAC  DC    XL2'0000'               DISPLACEMENT VALUE
LENGTH   DC    XL1'00'                 LENGTH FOR BDDD ADDRESS
LABEL    DC    CL8' '                  CURRENT LABEL
LABELENG DC    H'0'                    LABEL LENGTH
STAGE    DS    XL1                     STAGE INDICATOR
PK0      DC    P'0'                    CONSTANT 0
PK1      DC    P'1'                    CONSTANT 1
PK9      DC    P'9'                    CONSTANT 9
PK15     DC    P'15'                   CONSTANT 15
PK99     DC    P'99'                   CONSTANT 99
PK999    DC    P'999'                  CONSTANT 999
INDATA   DC    X'00'                   01=TEXT HERE IS DATA ONLY
CONPROG  DC    X'00'                   01=CONSTANT IN PROGRESS
LAST     DC    C'C'                    LAST OUTPUT INDICATOR
LASTCCNT DC    CL48'NOP1  2  3  4  5  6  7  8  9  10 11 12 13 14 B  '
REGS     DS    0CL3                    REGISTER OPERAND WORK AREA
REG1     DS    CL1                       R1 REGISTER NUMBER
REG2     DS    CL1                       R2 REGISTER AREA
REG3     DS    CL1                       R3 REGISTER AREA
*
CMAXQT   DC    CL3',X'''               LITERAL ",X'"
CMASTRP  DC    CL3',*+'                LITERAL ",*+"
WORK1    DS    CL1                     WORK FIELD
CONSTANT DC    CL32' '                 CONSTANT BUILD AREA
HOLDLABL DS    CL(L'LBLENTRY)          LABEL WORK AREA
BLANKS   DC    CL133' '                CONSTANT BLANKS
UNPKWORK DC    CL8' '                  WORK FIELD
TRCHAR   DC    CL16'0123456789ABCDEF'  TRANSLATE TABLE
FLTPTPR  DC    X'0000FFFF0000FFFF0000FFFF0000FFFF' FLT PNT PAIR TEST
VALIDM3  DC    X'000002030000000008090A0B0C0D0E0F' M3 MASK TEST
HOLDOUT  DC    CL80' '                 HOLD AREA FOR OUTPUT RECORD
*
CHKCHAR  DC    256X'FF'                TRT CHARACTER TEST
         ORG   CHKCHAR+C' '
         DC    XL1'00'
         ORG   CHKCHAR+C'¢'
         DC    XL5'00'                  C'¢.<(+'
         ORG   CHKCHAR+C'!'
         DC    XL5'00'                  C'!$*);'
         ORG   CHKCHAR+C'-'
         DC    XL2'00'                  C'-/'
         ORG   CHKCHAR+C','
         DC    XL2'00'                  C',%'
         ORG   CHKCHAR+C'>'
         DC    XL2'00'                  C'>?'
         ORG   CHKCHAR+C':'
         DC    XL6'00'                  C':#@''="'
         ORG   CHKCHAR+C'A'
         DC    XL9'00'                  C'ABCDEFGHI'
         ORG   CHKCHAR+C'J'
         DC    XL9'00'                  C'JKLMNOPQR'
         ORG   CHKCHAR+C'S'
         DC    XL8'00'                  C'STUVWXYZ'
         ORG   CHKCHAR+C'0'
         DC    XL10'00'                 C'0123456789'
         ORG
*
PRTLINE  DS    0CL133                  PRINT LINE
PCC      DC    CL1' '                     CARRIAGE CONTROL BYTE
PRT      DC    CL132' '                   PRINT DATA
*
OUTREC   DS    0CL80                   OUTPUT RECORD
OUTLABEL DC    CL8' '                  STATEMENT LABEL
         DC    CL1' '
OUTMNEM  DC    CL5' '                  STATEMENT MNEMONIC
         DC    CL1' '
OUTOPND  DC    CL36' '                 STATEMENT OPERANDS
         DC    CL1' '
OUTOFFST DC    CL6' '                  STATEMENT OFFSET
         DC    CL1' '
OUTTEXT  DC    CL12' '                 STATEMENT TEXT
OUTCTNU  DC    CL1' '                  CONTINUATION INDICATOR
OUTNBR   DC    CL8' '                  STATEMENT NUMBER
***********************************************************************
* INFORMATION ABOUT AN INSTRUCTION SET BY THE SRCHOC ROUTINE          *
***********************************************************************
ISINST   DC    X'00'                   01=TEXT MAY BE AN INSTRUCTION
INSTFLAG DS    XL1                     INSTRUCTION FLAG BITS:
*                                        40=FLOATING POINT
*                                        20=PRIVILEGED
INSTCCNT DS    XL1                     CONDITION CODE TABLE ENTRY NBR
INSTMNEM DS    XL5                     INSTRUCTION MNEMONIC
INSTLENG DS    XL1                     INSTRUCTION LENGTH
INSTFMT  DS    XL1                     INSTRUCTION FORMAT: 00=NOT INSTR
*                                        SEE OPCFORMT FOR LIST OF CODES
INSTFLG1 DS    XL1                     FLAGS. SEE OPCFLAG1
INSTFLG2 DS    XL1                     FLAGS. SEE OPCFLAG2
INSTTEXT DS    XL6                     INSTRUCTION TEXT
INSTBYT1 DS    XL1                     1ST BYTE OF 2-BYTE OP-CODE
***********************************************************************
* DESCRIBES THE INCOMING PARAMETER LIST PASSED BY THE RESOURCE PROGRAM*
***********************************************************************
PARMAREA DS    0A                      REBUILD PARAMETER LIST
STAGEA   DS    A                          STAGE INDICATOR POINTER
CSECTA   DS    A                          CSECT NAME POINTER
LBLTBADR DS    A                          LABEL TABLE STARTING ADDRESS
CURRLABL DC    A(0)                    ADDRESS OF CURRENT LABEL ENTRY
LBLTBEND DS    A                          ADDRESS OF END OF LABEL TABLE
TEXTADDR DS    A                          ADDRESS OF CSECT TEXT
TEXTENDA DS    A                          ADDRESS OF LAST BYTE OF TEXT
TEXTLENG DS    A                          TOTAL TEXT LENGTH
OPCDTBLA DS    A                          OP-CODE TABLE POINTER
PRNTDCBA DS    A                          SYSPRINT DCB ADDRESS
OUTDCBA  DS    A                          SYSOUT DCB ADDRESS
ENDPARMS EQU   *
***********************************************************************
* THIS IS THE CURRENT LABEL TABLE ENTRY                               *
***********************************************************************
         DS    0F
CURLBNT  DS    0CL16                   LABEL TABLE ENTRY
CURLBOFS DS    F                           CSECT OFFSET TO THE LABEL
CURLBTYP DS    X                           ENTRY TYPE
CURLDROP EQU   X'0C'                           DROP USING REGISTER
CURLUSNG EQU   X'10'                           SPECIFY USING REGISTER
CURLDTST EQU   X'18'                           DATA-ONLY START
CURLDTND EQU   X'1C'                           DATA-ONLY END
CURLABEL EQU   X'30'                           SIMPLE LABEL ENTRY
CURLADCN EQU   X'40'                           ADCON LOCATION
CURLVCON EQU   X'50'                           V-CON LOCATION
CURLBURG DS    X                           USING REGISTER
CURLBRLD DS    H                           LENGTH IF RLD ENTRY ELSE 0
CURLBLBL DS    0CL8                        LABEL
CURLBINU DS    XL4                         INITIAL REG VALUE FOR USING
         DS    XL4
***********************************************************************
*     ***** CONDITION CODE TABLE ENTRIES FOR THE CC COLUMN *****      *
* IN THE TABLE, NON-NUMERIC ENTRIES GIVE THE INSTRUCTION MNEMONIC TO  *
* BE USED WHEN THE MASK IN THE INSTRUCTION MATCHES THE COLUMN NUMBER. *
* WHEN THE ENTRY IS NUMERIC, IT IS THE CONDITION TO BE USED, AND THE  *
* MNEMONIC WILL BE BC OR BCR.                                         *
***********************************************************************
*            0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F           *
***********************************************************************
CCTBLNT  DC    0CL48          CONDITION CODE TABLE. 48-BYTE ENTRIES
CC01     DC    CL48'NOP1  2  3  4  5  6  7  8  9  10 11 12 13 14 B  '
CC02     DC    CL48'NOP1  BH 3  BL 5  6  BNEBE 9  10 BNL12 BNH14 B  '
CC03     DC    CL48'NOP1  2  3  4  5  6  BNZBZ 9  10 11 12 13 14 B  '
CC04     DC    CL48'NOP1  2  3  4  5  6  BNEBE 9  10 11 12 13 14 B  '
CC05     DC    CL48'NOP1  BH 3  BL 5  6  BNEBE 9  10 BNL12 13 14 B  '
CC06     DC    CL48'NOPBO BP 3  4  5  6  BNZBZ 9  10 11 12 13 14 B  '
CC07     DC    CL48'NOP1  2  3  BM 5  6  BNZBZ 9  10 11 12 13 14 B  '
CC08     DC    CL48'NOP1  BP 3  BM 5  6  BNZBZ 9  10 BNM12 BNP14 B  '
CC09     DC    CL48'NOPBO BP 3  BM 5  6  BNZBZ 9  10 BNM12 BNPBNOB  '
CC0A     DC    CL48'NOP1  BP 3  4  5  6  BNZBZ 9  10 11 12 13 14 B  '
CC0B     DC    CL48'NOPBO 2  3  BM 5  6  BNZBZ 9  10 BNM12 13 BNOB  '
CC0C     DC    CL48'NOPBO 2  3  4  5  6  BNZBZ 9  10 11 12 13 BNOB  '
CC0D     DC    CL48'NOP1  BH 3  BL 5  6  BNEBE 9  10 11 12 13 14 B  '
CC0E     DC    CL48'NOP1  BP 3  BM 5  6  BNZBZ 9  10 11 12 13 14 B  '
***********************************************************************
* THIS DSECT DESCRIBES AN ENTRY IN THE LABEL TABLE                    *
* THE TABLE ADDRESSES ARE LOCATED AT LBLTBADR, LBLTBEND, AND CURRLBLA.*
* IF THE LENGTH OF LBLENTRY CHANGES, CHANGE HOLDLABL, AS WELL.        *
***********************************************************************
LBLDSECT DSECT ,                       DESCRIBES A LABEL TABLE ENTRY
LBLENTRY DS    0CL16                   LABEL TABLE ENTRY
LBLOFSET DS    F                           CSECT OFFSET TO THE LABEL
LBLTYPE  DS    X                           ENTRY TYPE: 0C=DROP,10=USING
*                                            18=DATA START, 1C=DATA END
*                                            30=LABEL,40=ADCON,50=VCON
LBLUREG  DS    X                           USING REGISTER
LBLRLDLN DS    H                           LENGTH IF RLD ENTRY ELSE 0
LBLLABEL DS    0CL8                        LABEL
LBLINITU DS    XL4                         INITIAL REG VALUE FOR USING
         DS    XL4
***********************************************************************
* DESCRIBES AN ENTRY IN AN OP-CODE TABLE                              *
***********************************************************************
OPCODES  DSECT ,                       DESCRIBES AN OP-CODE TABLE ENTRY
OPCENTRY DS    0XL12                   OP-CODE TABLE ENTRY
OPCODE1  DS    XL1                        OP-CODE BYTE 1
OPCODE2  DS    XL1                        OP-CODE BYTE 2 OR ZERO
OPCMNEM  DS    0CL5                       MNEMONIC -OR-
OPCTWO2  DS    CL1                          '2' FOR 2-BYTE OP-CODES
*                                           X'00' IF NOT AN OP-CODE
OPCSRCH2 DS    AL4                          SRCH ADDRESS FOR 2-BYTE O-C
OPCFORMT DS    XL1                        INSTRUCTION FORMAT CODE
E1       EQU   X'01' OCOCOCOC                 <==> (NONE)
RI1      EQU   X'02' OCOCR1OCI2I2I2I2         <==> R1,I2
RR1      EQU   X'03' OCOCR1R2                 <==> R1,R2
RR2      EQU   X'04' OCOCI1I1                 <==> I1
RR3      EQU   X'05' OCOCR1--                 <==> R1
RRE1     EQU   X'06' OCOCOCOC----R1R2         <==> R1,R2
RRE2     EQU   X'07' OCOCOCOC----R1--         <==> R1
RRE3     EQU   X'08' OCOCOCOC--------         <==> (NONE)
RRF1     EQU   X'09' OCOCOCOCR1--R3R2         <==> R1,R3,R2
RRF2     EQU   X'0A' OCOCOCOCM3--R1R2         <==> R1,M3,R2
RRF3     EQU   X'0B' OCOCOCOCR3M4R1R2         <==> R1,R3,R2,M4
RS1      EQU   X'0C' OCOCR1R3B2D2D2D2         <==> R1,R3,D2(B2)
RS2      EQU   X'0D' OCOCR1--B2D2D2D2         <==> R1,D2(B2)
RS3      EQU   X'0E' OCOCR1M3B2D2D2D2         <==> R1,M3,D2(B2)
RSI1     EQU   X'0F' OCOCR1R3I2I2I2I2         <==> R1,R3,I2
RX1      EQU   X'10' OCOCR1X2B2D2D2D2         <==> R1,D2(X2,B2)
RX2      EQU   X'11' OCOCM1X2B2D2D2D2         <==> M1,D2(X2,B2)
RXE1     EQU   X'12' OCOCR1X2B2D2D2D2----OCOC <==> R1,D2(X2,B2)
RXF1     EQU   X'13' OCOCR3X2B2D2D2D2R1--OCOC <==> R1,R3,D2(X2,B2)
S1       EQU   X'14' OCOC----B2D2D2D2         <==> D2(B2)
S2       EQU   X'15' OCOCOCOC--------         <==> (NONE)
S3       EQU   X'1E' OCOCOCOCB2D2D2D2         <==> D2(B2)
SI1      EQU   X'16' OCOCI2I2B1D1D1D1         <==> D1(B1),I2
SS1      EQU   X'17' OCOCLLLLB1D1D1D1B2D2D2D2 <==> D1(LL,B1),D2(B2)
SS2      EQU   X'18' OCOCL1L2B1D1D1D1B2D2D2D2 <==> D1(L1,B1),D2(L2,B2)
SS3      EQU   X'19' OCOCR1R3B2D2D2D2B4D4D4D4 <==> R1,D2(B2),R3,D4(B4)
SS4      EQU   X'1A' OCOCR1R3B1D1D1D1B2D2D2D2 <==> D1(R1,B1),D2(B2),R3
SS5      EQU   X'1B' OCOCL1I3B1D1D1D1B2D2D2D2 <==> D1(L1,B1),D2(B2),I3
SSE1     EQU   X'1C' OCOCOCOCB1D1D1D1B2D2D2D2 <==> D1(B1),D2(B2)
OPCFLAGS DS    XL1                     FLAGS:
FP       EQU   X'40'                     FLOATING POINT INSTRUCTION
PR       EQU   X'20'                     PRIVILEGED INSTRUCTION
OPCNDCOD DS    XL1                     CONDITION CODE TABLE LINE
OPCFLAG1 DS    XL1                     FLAG BYTE:
*                         X'80'=UNUSUAL TEST REQUIRED
*                         X'01'=R2 MUST BE 0,1,4,5,8,9,12, OR 13
OPCFLAG2 DS    XL1                     FLAG BYTE
*                         X'80'=R1 MUST BE 0,1,4,5,8,9,12, OR 13
*                         X'40'=M3 MUST BE 0,1,4,5,6, OR 7
*                         X'20'=INSTRUCTION BITS 16-25 MUST BE 0'S
*                         X'10'=R1 MUST NOT EQUAL R2
*                         X'08'=R3 MUST BE AN EVEN NUMBERED REGISTER
*                         X'04'=R2 MUST BE AN EVEN NUMBERED REGISTER
*                         X'02'=R1 MUST BE AN EVEN NUMBERED REGISTER
*                         X'01'=IF R2=0, OUTPUT 0, NOT R0
REBUILD  CSECT
         LTORG
*
SVCOP    DS    0CL10                   SVC NAME TABLE
         DC    AL1(0),CL9'EXCP/XDAP'
         DC    AL1(1),CL9'WAIT(R)  '
         DC    AL1(2),CL9'POST/PRTO'
         DC    AL1(3),CL9'EXIT     '
         DC    AL1(4),CL9'GETMAIN  '
         DC    AL1(5),CL9'FREEMAIN '
         DC    AL1(6),CL9'LINK     '
         DC    AL1(7),CL9'XCTL     '
         DC    AL1(8),CL9'LOAD     '
         DC    AL1(9),CL9'DELETE   '
         DC    AL1(10),CL9'GET/FREE '
         DC    AL1(11),CL9'TIME     '
         DC    AL1(12),CL9'SYNCH    '
         DC    AL1(13),CL9'ABEND    '
         DC    AL1(14),CL9'SPIE     '
         DC    AL1(15),CL9'ERREXCP  '
         DC    AL1(16),CL9'PURGE    '
         DC    AL1(17),CL9'RESTORE  '
         DC    AL1(18),CL9'BLDL/FIN '
         DC    AL1(19),CL9'OPEN     '
         DC    AL1(20),CL9'CLOSE    '
         DC    AL1(21),CL9'STOW     '
         DC    AL1(22),CL9'OPEN  J  '
         DC    AL1(23),CL9'CLOSE T  '
         DC    AL1(24),CL9'DEVTYPE  '
         DC    AL1(25),CL9'TRKBAL   '
         DC    AL1(26),CL9'LOCATE   '
         DC    AL1(27),CL9'OBTAIN   '
         DC    AL1(28),CL9'CVOL     '
         DC    AL1(29),CL9'SCRATCH  '
         DC    AL1(30),CL9'RENAME   '
         DC    AL1(31),CL9'FEOV     '
         DC    AL1(32),CL9'NO MACRO '
         DC    AL1(33),CL9'IOHALT   '
         DC    AL1(34),CL9'MGCR/QED '
         DC    AL1(35),CL9'WTO/WTOR '
         DC    AL1(36),CL9'WTL      '
         DC    AL1(37),CL9'SEGLD/SEG'
         DC    AL1(39),CL9'LABEL    '
         DC    AL1(40),CL9'EXTRACT  '
         DC    AL1(41),CL9'IDENTIFY '
         DC    AL1(42),CL9'ATTACH   '
         DC    AL1(43),CL9'CIRB     '
         DC    AL1(44),CL9'CHAP     '
         DC    AL1(45),CL9'OVLYBRCH '
         DC    AL1(46),CL9'TTIMER   '
         DC    AL1(47),CL9'STIMER   '
         DC    AL1(48),CL9'DEQ      '
         DC    AL1(51),CL9'SNAP/SDUM'
         DC    AL1(52),CL9'RESTART  '
         DC    AL1(53),CL9'RELEX    '
         DC    AL1(54),CL9'DISABLE  '
         DC    AL1(55),CL9'EOV      '
         DC    AL1(56),CL9'ENQ/RESE '
         DC    AL1(57),CL9'FREEDBUF '
         DC    AL1(58),CL9'RELBUF   '
         DC    AL1(59),CL9'OLTEP    '
         DC    AL1(60),CL9'(E)STAE  '
         DC    AL1(61),CL9'IKJEGS6A '
         DC    AL1(62),CL9'DETACH   '
         DC    AL1(63),CL9'CHKPT    '
         DC    AL1(64),CL9'RDJFCB   '
         DC    AL1(66),CL9'BTAMTEST '
         DC    AL1(67),CL9'SYNADAF  '
         DC    AL1(68),CL9'SYNADRLS '
         DC    AL1(69),CL9'BSP      '
         DC    AL1(70),CL9'GSERV    '
         DC    AL1(71),CL9'ASGNBFR  '
         DC    AL1(72),CL9'CHATR    '
         DC    AL1(73),CL9'SPAR     '
         DC    AL1(74),CL9'DAR      '
         DC    AL1(75),CL9'DQUEUE   '
         DC    AL1(76),CL9'NO MACRO '
         DC    AL1(78),CL9'NO MACRO '
         DC    AL1(79),CL9'STATUS   '
         DC    AL1(81),CL9'SETPRT   '
         DC    AL1(82),CL9'DASDR    '
         DC    AL1(83),CL9'SMFWTM   '
         DC    AL1(84),CL9'GRAPHICS '
         DC    AL1(85),CL9'DDRSWAP  '
         DC    AL1(86),CL9'ATLAS    '
         DC    AL1(87),CL9'DOM      '
         DC    AL1(88),CL9'MOD88    '
         DC    AL1(91),CL9'VOLSTAT  '
         DC    AL1(92),CL9'TCBEXCP  '
         DC    AL1(93),CL9'TGET/TPU '
         DC    AL1(94),CL9'STCC     '
         DC    AL1(95),CL9'SYSEVENT '
         DC    AL1(96),CL9'STAX     '
         DC    AL1(97),CL9'TSO TEST '
         DC    AL1(98),CL9'PROTECT  '
         DC    AL1(99),CL9'DDDYNAM  '
         DC    AL1(100),CL9'IKJEFFIB '
         DC    AL1(101),CL9'QTIP     '
         DC    AL1(102),CL9'AQCTL    '
         DC    AL1(103),CL9'XLATE    '
         DC    AL1(104),CL9'TOPCTL   '
         DC    AL1(105),CL9'IMAGLIB  '
         DC    AL1(107),CL9'MODESET  '
         DC    AL1(109),CL9'ESR TYPE4'
         DC    AL1(110),CL9'DSTATUS  '
         DC    AL1(111),CL9'NO MACRO '
         DC    AL1(112),CL9'PGRLSE   '
         DC    AL1(113),CL9'PGFIX,CL9'
         DC    AL1(114),CL9'EXCPVR   '
         DC    AL1(116),CL9'ESR TYPE1'
         DC    AL1(117),CL9'DEBCHK   '
         DC    AL1(119),CL9'TESTAUTH '
         DC    AL1(120),CL9'GET/FREEM'
         DC    AL1(121),CL9'VSAM     '
         DC    AL1(122),CL9'EVENTS   '
         DC    AL1(123),CL9'PURGEDQ  '
         DC    AL1(124),CL9'TPIO     '
         DC    AL1(125),CL9'EVENTS   '
         DC    AL1(126),CL9'MSS INTFC'
         DC    X'FF'                   END OF TABLE
*********************************************************************
*             REGISTER EQUATES                                      *
*********************************************************************
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
