         TITLE '*** COMPRMEM: SUBROUTINE TO COMPARE PDS MEMBERS ***'
COMPRMEM CSECT
COMPRMEM AMODE 24
COMPRMEM RMODE 24
***********************************************************************
* COMPARES MEMBERS IN RECFM=FB,LRECL=80 PDS'S. ON RETURN, R15=0 IF THE*
* MEMBERS ARE IDENTICAL, OR R15=4 IF THEY ARE NOT IDENTICAL.          *
* CALLER PASSES A FIVE-ADDRESS PARAMETER LIST USING STANDARD LINKAGE  *
* CONVENTION. THE FIRST PARAMETER IS THE DDNAME FOR THE FIRST PDS,    *
* THE SECOND PARAMETER IS THE MEMBER NAME IN THE FIRST PDS, THE THIRD *
* PARAMETER IS THE DDNAME OF THE SECOND PDS, THE FOURTH IS THE MEMBER *
* NAME IN THE SECOND PDS, AND THE FIFTH IS A ONE-BYTE INDICATOR WHICH *
* WILL BE X'00' TO COMPARE ALL 80 BYTES OF THE RECORDS, OR X'01' TO   *
* COMPARE ONLY COL 1-72.                                              *
* FIRST, THE TWO PDS DATASETS ARE OPENED FOR INPUT AND CHECKED FOR    *
* RECFM=F OR RECFM=FB AND LRECL=80. IF EITHER FILE FAILS TO OPEN OR   *
* IS NOT THE EXPECTED FORMAT, RETURN WITH R15=4.                      *
* NEXT, THE TWO PDS'S ARE POSITIONED TO THE SPECIFIED MEMBERS, AND IF *
* EITHER MEMBER IS NOT FOUND, RETURN WITH R15=4.                      *
* FINALLY, BOTH MEMBERS ARE READ SEQUENTIALLY AND COMPARED, RECORD-FOR-
* RECORD. IF THERE IS A MISMATCH ON ANY RECORD PAIR, RETURN WITH R15=4*
* IF ALL RECORDS MATCH IN THE MEMBERS, RETURN WITH R15=0.             *
* AUTHOR R THORNTON SEP 1997                                          *
***********************************************************************
         USING COMPRMEM,R3             ESTABLIST ADDRESSABILITY
         STM   R14,R12,12(R13)         SAVE CALLING PROG REGISTERS
         LR    R3,R15                  INITIALIZE BASE REG
         ST    R13,SAVE+4              SAVE RETURN POINTER
         LA    R15,SAVE                GET SAVE AREA ADDR
         ST    R15,8(R13)              STORE FORWARD POINTER
         LR    R13,R15                 INITIALIZE SAVE AREA POINTER
         L     R12,0(R1)               GET FIRST PARAMETER ADDRESS
         MVC   PDS1+40(8),0(R12)       PUT DDNAME IN DCB FOR PDS2
         L     R12,4(R1)               POINT TO SECOND PARAMETER
         MVC   MEMBER1,0(R12)          PUT 1ST PDS MEMBER NAME IN FIND1
         L     R12,8(R1)               POINT TO THIRD PARAMETER
         MVC   PDS2+40(8),0(R12)       PUT DDNAME IN DCB FOR PDS2
         L     R12,12(R1)              POINT TO PARAMETER FOUR
         MVC   MEMBER2,0(R12)          PUT 2ND PDS MEMBER NAME IN FIND2
         L     R12,16(R1)              POINT TO PARAMETER FIVE
         MVC   C72,0(R12)              SAVE 72 COL COMPARE INDICATOR
         MVC   RETCODE,H4              ASSUME THE WORST
         XC    BLKADDR1(8),BLKADDR1    CLEAR GOTTEN STORAGE ADDRESS
         MVI   EOFPDS1,0               CLEAR PDS1 EOF INDICATOR
**********************************************************************
* OPEN FILES , VERIFY CHARACTERISTICS, AND GET BUFFER STORAGE        *
**********************************************************************
         OPEN  PDS1                    OPEN FILE FOR INPUT
         TM    PDS1+48,X'10'           OPEN WAS SUCCESSFUL?
         BZ    RETURN                  NO, ERROR
         TM    PDS1+26,X'02'           DSORG=PO?
         BZ    RETURN                  NO, ERROR
         TM    PDS1+36,X'80'           RECFM=F OR RECFM=FB?
         BZ    RETURN                  NO, ERROR
         TM    PDS1+36,X'40'           RECFM=F OR RECFM=FB?
         BO    RETURN                  NO, ERROR
         CLC   PDS1+82(2),H80          LRECL = 80?
         BNE   RETURN                  NO, ERROR
         LH    R12,PDS1+62             GET BLOCKSIZE
         GETMAIN EU,LV=(R12),A=BLKADDR1 GET STORAGE FOR BLOCK
         OPEN  PDS2                    OPEN FILE FOR INPUT
         TM    PDS2+48,X'10'           OPEN WAS SUCCESSFUL?
         BZ    RETURN                  NO, ERROR
         TM    PDS2+26,X'02'           DSORG=PO?
         BZ    RETURN                  NO, ERROR
         TM    PDS2+36,X'80'           RECFM=F OR RECFM=FB?
         BZ    RETURN                  NO, ERROR
         TM    PDS2+36,X'40'           RECFM=F OR RECFM=FB?
         BO    RETURN                  NO, ERROR
         CLC   PDS2+82(2),H80          LRECL = 80?
         BNE   RETURN                  NO, ERROR
         LH    R12,PDS2+62             GET BLOCKSIZE
         GETMAIN EU,LV=(R12),A=BLKADDR2 GET STORAGE FOR BLOCK
**********************************************************************
* POSITION THE PDS'S TO THEIR RESPECTIVE MEMBERS. IF EITHER IS      *
* MISSING, RETURN WITH R15=4.                                        *
**********************************************************************
         SR    R0,R0                   SET R0 TO ZERO
         STH   R0,REMBYTS1             SET REMAINING BLOCK COUNT
         STH   R0,REMBYTS2             SET REMAINING BLOCK COUNT
         FIND  PDS1,MEMBER1,D          FIND PDS1 MEMBER BY NAME
         LTR   R15,R15                 ANY ERROR?
         BNZ   RETURN                  YES, RETURN WITH R15=4
         FIND  PDS2,MEMBER2,D          FIND PDS2 MEMBER BY NAME
         LTR   R15,R15                 ANY ERROR?
         BNZ   RETURN                  YES, RETURN WITH R15=4
**********************************************************************
* READ BOTH PDS MEMBERS, RECORD-BY-RECORD, COMPARING THEM. IF A      *
* MISMATCH OCCURS, RETURN WITH R15=4. IF THE MEMBERS ARE IDENTICAL,  *
* PDS1 WILL GO TO END OF FILE AT LABEL EOF1 WHERE IT WILL ATTEMPT TO *
* READ PDS2, WHICH WILL ALSO GO TO END OF FILE IF THE MEMBERS ARE    *
* IDENTICAL.                                                         *
**********************************************************************
COMPARE  BAL   R9,READ1                READ A RECORD FROM PDS1
         BAL   R9,READ2                READ A RECORD FROM PDS2
         CLI   C72,1                   72 COLUMN COMPARE?
         BE    CHECK72                 YES
         CLC   RECORD1,RECORD2         ARE THE RECORDS IDENTICAL?
         BNE   RETURN                  NO, RETURN WITH R15=4
         B     COMPARE                 CONTINUE THROUGH THE FILES
CHECK72  CLC   RECORD1(72),RECORD2     ARE THE RECORDS IDENTICAL?
         BNE   RETURN                  NO, RETURN WITH R15=4
         B     COMPARE                 CONTINUE THROUGH THE FILES
**********************************************************************
* READ NEXT RECORD IN PDS1 INTO THE RECORD1 AREA                     *
**********************************************************************
READ1    LH    R12,REMBYTS1            GET NBR BYTES REMAINING IN BLOCK
         CH    R12,H80                 ANY RECORDS LEFT IN BLOCK
         BNL   SAMBLK1                 YES
         L     R12,BLKADDR1            GET BLOCK ADDRESS
         READ  INDECB1,SF,PDS1,(R12),'S' READ NEXT BLOCK IN PDS1
         CHECK INDECB1                 WAIT FOR COMPLETION
         L     R12,PDS1+68             GET IOB PREFIX ADDRESS
         MVC   REMBYTS1,22(R12)        RESIDUAL COUNT FROM IOB CSW
         LH    R12,PDS1+62             BLOCKSIZE FROM DCB
         SH    R12,REMBYTS1            RECORD LEN=BLKSIZE-RESID CT
         STH   R12,REMBYTS1            STORE CALCULATED RECORD LENGTH
         MVC   NEXREC1,BLKADDR1        MOVE BLOCK ADDRESS
SAMBLK1  LH    R12,REMBYTS1            GET NBR BYTES REMAINING
         SH    R12,H80                 SUBTRACT RECORD LENGTH
         STH   R12,REMBYTS1            STORE REMAINING BYTES IN BLOCK
         L     R12,NEXREC1             GET NEXT RECORD ADDRESS
         MVC   RECORD1,0(R12)          MOVE IT TO RECORD1 AREA
         LA    R12,80(R12)             COMPUTE NEXT RECD ADDR
         ST    R12,NEXREC1             STORE UPDATED RECORD ADDRESS
         BR    R9                      GO BACK TO CALLER
**********************************************************************
* READ NEXT RECORD IN PDS2 INTO THE RECORD2 AREA                     *
**********************************************************************
READ2    LH    R12,REMBYTS2            GET NBR BYTES REMAINING IN BLOCK
         CH    R12,H80                 ANY RECORDS LEFT IN BLOCK
         BNL   SAMBLK2                 YES
         L     R12,BLKADDR2            GET BLOCK ADDRESS
         READ  INDECB2,SF,PDS2,(R12),'S' READ NEXT BLOCK IN PDS1
         CHECK INDECB2                 WAIT FOR COMPLETION
         L     R12,PDS2+68             GET IOB PREFIX ADDRESS
         MVC   REMBYTS2,22(R12)        RESIDUAL COUNT FROM IOB CSW
         LH    R12,PDS2+62             BLOCKSIZE FROM DCB
         SH    R12,REMBYTS2            RECORD LEN=BLKSIZE-RESID CT
         STH   R12,REMBYTS2            STORE CALCULATED RECORD LENGTH
         MVC   NEXREC2,BLKADDR2        MOVE BLOCK ADDRESS
SAMBLK2  LH    R12,REMBYTS2            GET NBR BYTES REMAINING
         SH    R12,H80                 SUBTRACT RECORD LENGTH
         STH   R12,REMBYTS2            STORE REMAINING BYTES IN BLOCK
         L     R12,NEXREC2             GET NEXT RECORD ADDRESS
         MVC   RECORD2,0(R12)          MOVE IT TO RECORD2 AREA
         LA    R12,80(R12)             COMPUTE NEXT RECD ADDR
         ST    R12,NEXREC2             STORE UPDATED RECORD ADDRESS
         BR    R9                      GO BACK TO CALLER
**********************************************************************
* EOF ON PDS1. TRY TO READ PDS2. IF READ IS SUCCESSFUL, PDS2 HAS     *
* MORE RECORDS THAN PDS1, SO RETURN WITH R15=4                       *
**********************************************************************
EOF1     MVI   EOFPDS1,X'FF'           SHOW PDS1 IS AT EOF
         BAL   R9,READ2                TRY TO READ PDS2
         B     RETURN                  IF READ SUCCESSFUL, RETURN R15=4
**********************************************************************
* EOF ON PDS2. IF ALREADY AT EOF ON PDS1, MEMBERS COMPARED EQUAL, SO *
* RETURN WITH R15=0, OTHERWISE RETURN WITH R15=4                     *
**********************************************************************
EOF2     CLI   EOFPDS1,X'FF'           IS PDS1 IS AT EOF?
         BNE   RETURN                  NO, RETURN WITH R15=4
         XC    RETCODE,RETCODE         SET RETCODE=0
**********************************************************************
* CLOSE THE FILES, FREE GOTTEN STORAGE, AND FREE THE BUFFER POOLS    *
**********************************************************************
RETURN   TM    PDS1+48,X'10'           PDS1 IS OPEN?
         BZ    CHK2OPN                 NO
         LH    R12,PDS1+62             GET BLOCKSIZE
         FREEMAIN EU,LV=(R12),A=BLKADDR1 FREE GOTTEN STORAGE
         CLOSE PDS1                    CLOSE FILE
         FREEPOOL PDS1                 FREE THE BUFFER
CHK2OPN  TM    PDS2+48,X'10'           PDS2 IS OPEN?
         BZ    EXIT                    NO
         LH    R12,PDS2+62             GET BLOCKSIZE
         FREEMAIN EU,LV=(R12),A=BLKADDR2 FREE GOTTEN STORAGE
         CLOSE PDS2                    CLOSE FILE
         FREEPOOL PDS2                 FREE THE BUFFER
EXIT     L     R13,4(R13)              POINT TO CALLER'S SAVE AREA
         L     R14,12(R13)             GET CALLER'S RETURN ADDRESS
         L     R15,RETCODE             GET RETURN CODE
         LM    R0,R12,20(R13)          RESTORE CALLER'S R0-R12
         BR    R14                     RETURN TO CALLER
*
*
*
*                            *** DATA AND FILE AREAS ***
*
SAVE     DS    18F
RETCODE  DC    F'4'          RETURN CODE
H4       DC    H'4'          CONSTANT 4
H80      DC    H'80'         CONSTANT 80
*
BLKADDR1 DS    F             BUFFER ADDRESS FOR PDS1
REMBYTS1 DC    H'0'          REMAINING BYTES IN PDS1 BUFFER
NEXREC1  DS    F             ADDRESS OF NEXT RECORD IN PDS1 BUFFER
MEMBER1  DS    CL8           PDS1 MEMBER NAME
RECORD1  DS    CL80          CURRENT RECORD IN PDS1
EOFPDS1  DC    X'00'         EOF INDICATOR FOR PDS1
*
BLKADDR2 DS    F             BUFFER ADDRESS FOR PDS2
REMBYTS2 DC    H'0'          REMAINING BYTES IN PDS2 BUFFER
NEXREC2  DS    F             ADDRESS OF NEXT RECORD IN PDS2 BUFFER
MEMBER2  DS    CL8           MEMBER NAME IN PDS2
RECORD2  DS    CL80          CURRENT RECORD IN PDS2
EOFPDS2  DC    X'00'         EOF INDICATOR FOR PDS1
*
C72      DC    X'00'         72 COLUMN COMPARE INDICATOR
*
*
PDS1     DCB   DDNAME=PDS1,DSORG=PO,MACRF=R,EODAD=EOF1
PDS2     DCB   DDNAME=PDS2,DSORG=PO,MACRF=R,EODAD=EOF2
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
