         PRINT NOGEN
         TITLE '*****BUILDTBL: LOAD A FILE OF STRINGS INTO MEMORY ****'
BUILDTBL SVLNK R3
BUILDTBL AMODE 31
BUILDTBL RMODE 24
*
***********************************************************************
* THIS SUBROUTINE IS CALLED TO READ A FILE CONTAINING STRINGS INTO A  *
* TABLE IN MEMORY, SORT THE ENTRIES IN ASCENDING ORDER, AND SET UP A  *
* TRT TABLE THAT CAN BE USED TO EFFICIENTLY SCAN FOR THE STRINGS.     *
* CALLER PASSES ADDRESSES OF THE FOLLOWING:                           *
*  A. DDNAME OF THE STRING FILE TO BE READ. THIS MUST BE A PHYSICALLY *
*     SEQUENTIAL DATASET HAVING RECFM=FB,LRECL=80. EACH RECORD IS     *
*     EITHER A COMMENT LINE OR A STRING TO BE LOADED INTO THE TABLE.  *
*  B. A FULLWORD FIELD TO CONTAIN THE STARTING ADDRESS OF THE STRING  *
*     TABLE ON RETURN.                                                *
*  C. A FULLWORD FIELD TO CONTAIN THE ADDRESS OF THE LAST TABLE ENTRY *
*     ON RETURN.                                                      *
*  D. A FULLWORD FIELD TO CONTAIN THE ADDRESS OF THE TRT TABLE ON     *
*     RETURN.                                                         *
*  E. A FULLWORD FIELD TO CONTAIN THE ADDRESS OF THE STRING POINTERS  *
*     FOR EACH GROUP (FIRST "A", FIRST "B", ETC)                      *
* PROCESS FLOW IS AS FOLLOWS:                                         *
* 1. GET THE DDNAME PASSED BY THE CALLER, MOVE IT INTO THE STRINGS    *
*    DCB, AND OPEN THE STRINGS FILE FOR INPUT. THIS FILE MUST BE      *
*    RECFM=FB,LRECL=80, WHICH IS HARD-CODED.                          *
* 2. OBTAIN STORAGE TO CONTAIN THE STRING TABLE AND THE TRT TABLE AND *
*    SAVE THE ADDRESSES WHICH WILL BE USED FOR PROCESSING AND WILL BE *
*    PASSED BACK TO THE CALLER ON RETURN.                             *
* 3. READ THE STRINGS, COMPUTE THEIR LENGTHS, AND STORE BOTH IN THE   *
*    STRING TABLE. THE FOLLOWING CONSIDERATIONS APPLY:                *
*    A. UP TO 500 STRINGS MAY BE ENTERED.                             *
*    B. EACH STRING BEGINS IN COLUMN 1, WHICH MAY BE BLANK IF PRECED- *
*       ING BLANKS ARE DESIRED.                                       *
*    C. A STRING ENDS WITH COLUMN 71 OF THE RECORD OR THE LAST NON-   *
*       BLANK COLUMN BEFORE COLUMN 71, WHICHEVER IS SHORTER. IF THE   *
*       LAST NON-BLANK CHARACTER FOUND IS A "<", IT IS REMOVED, AND   *
*       THE STRING INCLUDES EVERYTHING UP TO THE "<". THIS PERMITS    *
*       TRAILING BLANKS TO BE INCLUDED IN THE STRING.                 *
*    D. A STRING CAN BE A MAXIMUM OF 71 BYTES LONG.                   *
*    E. EACH ENTRY IN THE STRING TABLE IS A ONE-BYTE LENGTH CODE FOLL-*
*       OWED BY THE STRING. EACH TABLE ENTRY IS 72 BYTES LONG.        *
* 4. SORT THE STRINGS READ IN ASCENDING ORDER.                        *
* 5. CHECK THE FIRST BYTE OF THE FIRST STRING IN THE TABLE. IF IT IS  *
*    LOWER THAN THE LETTER "A", PUT THE ADDRESS OF THE FIRST STRING   *
*    ENTRY IN THE LOWPTR FIELD FOR USE IN LATER SCANNING.  NEXT, MOVE *
*    IN THE LOWPTR FIELD FOR USE IN LATER SCANNING.  NEXT, MOVE THE   *
*    VALUE X'01' TO THE LOCATION IN THE TRTSCH TRT TABLE CORRESPOND-  *
*    ING TO THIS TO THIS VALUE. THIS WILL CAUSE THE SCANNING TRT TO   *
*    STOP WHEN THIS BYTE VALUE IS FOUND IN AN INPUT SOURCE RECORD.    *
*    CONTINUE TO SEARCH THROUGH THE STRING TABLE SO LONG AS THE       *
*    STRINGS BEGIN WITH VALUES LESS THAN THE LETTER "A". FOR ALL THOSE*
*    LESS THAN THE LETTER "A", SET THE CORRESPONDING TRT TABLE BYTE TO*
*    X'01'.                                                           *
* 6. ON ENTRY, R1 POINTS TO A STRING TABLE ENTRY. CHECK THE FIRST     *
*    BYTE OF THE STRING FOR ALPHABETIC. IF GREATER THAN THE LETTER "Z"*
*    GO TO GOTHIONE. THIS CODE SEARCHES THROUGH THE STRING TABLE UNTIL*
*    THE TABLE IS EXHAUSTED, OR A STRING IS FOUND HAVING A FIRST BYTE *
*    GREATER THAN THE LETTER "Z". FOR EACH NEW ALPHABETIC CHARACTER   *
*    FOUND THAT STARTS A STRING, THE ADDRESS OF THE FIRST STRING WITH *
*    THIS STARTING LETTER IS MOVED TO THE ADDRESS TABLE ENTRY (APTR   *
*    THROUGH ZPTR). IN ADDITION, A VALUE BETWEEN 01 AND 1B CORRESPOND-*
*    ING TO A-Z IS MOVED TO THE  SCANNING TABLE, TRTSCH, SO THAT THE  *
*    BYTE WILL STOP THE SCANNING TRT WHEN IT IS FOUND WITHIN A SOURCE *
*    PROGRAM LINE.                                                    *
* 7. ON ENTRY, R1 POINTS TO A STRING TABLE ENTRY. IF THE FIRST BYTE OF*
*    THE STRING IS GREATER THAN THE LETTER "Z", THE ADDRESS OF THIS   *
*    ENTRY IS MOVED TO THE HIPTR FIELD, AND THE VALUE X'1C' IS SET IN *
*    THE TRTSCH TRT TABLE AT THE LOCATION CORRESPONDING TO THE VALUE  *
*    OF THE STRING'S FIRST BYTE. THE REST OF THE STRING TABLE IS      *
*    SEARCHED, AND X'1C' IS MOVED TO THE TRTSCH TABLE FOR EACH DIFF-  *
*    ERENT STRING STARTING VALUE.                                     *
* AUTHOR R THORNTON APRIL 2001                                        *
***********************************************************************
***********************************************************************
* 1. GET THE DDNAME PASSED BY THE CALLER, MOVE IT INTO THE STRINGS    *
*    DCB, AND OPEN THE STRINGS FILE FOR INPUT. THIS FILE MUST BE      *
*    RECFM=FB,LRECL=80, WHICH IS HARD-CODED.                          *
***********************************************************************
         L     R1,4(R13)               POINT TO CALLER'S SAVE AREA
         L     R1,24(R1)               GET R1 PASSED BY CALLER
         L     R1,0(R1)                POINT TO DDNAME PASSED
         MVC   STRINGS+40(8),0(R1)     MOVE DD NAME INTO DCB
         OPEN  STRINGS                 OPEN THE STRINGS FILE FOR INPUT
***********************************************************************
* 2. OBTAIN STORAGE TO CONTAIN THE STRING TABLE AND THE TRT TABLE AND *
*    SAVE THE ADDRESSES TO BE PASSED BACK TO THE CALLER ON RETURN.    *
***********************************************************************
         STORAGE OBTAIN,LENGTH=4096,LOC=ANY GET STORAGE FOR STRINGS
         ST    R1,STRGSTRT             SAVE TABLE START ADDRESS
         ST    R1,STRGCURR             SAVE CURRENT TABLE ADDRESS
         A     R1,=F'4096'             COMPUTE TABLE END ADDRESS
         ST    R1,STRGEND              SAVE TABLE END ADDRESS
         STORAGE OBTAIN,LENGTH=256,LOC=ANY GET STORAGE FOR TRT TABLE
         ST    R1,TRTTABLE             SAVE TRT TABLE ADDRESS
         XC    0(256,R1),0(R1)         CLEAR TRT TABLE TO ALL ZEROS
         STORAGE OBTAIN,LENGTH=256,LOC=ANY GET STORAGE FOR POINTERS
         ST    R1,POINTERS             SAVE POINTER TABLE ADDRESS
***********************************************************************
* 3. READ THE STRINGS, COMPUTE THEIR LENGTHS, AND STORE BOTH IN THE   *
*    STRING TABLE. THE FOLLOWING CONSIDERATIONS APPLY:                *
*    A. UP TO 500 STRINGS MAY BE ENTERED.                             *
*    B. EACH STRING BEGINS IN COLUMN 1, WHICH MAY BE BLANK IF PRECED- *
*       ING BLANKS ARE DESIRED.                                       *
*    C. A STRING ENDS WITH COLUMN 71 OF THE RECORD OR THE LAST NON-   *
*       BLANK COLUMN BEFORE COLUMN 71, WHICHEVER IS SHORTER. IF THE   *
*       LAST NON-BLANK CHARACTER FOUND IS A "<", IT IS REMOVED, AND   *
*       THE STRING INCLUDES EVERYTHING UP TO THE "<". THIS PERMITS    *
*       TRAILING BLANKS TO BE INCLUDED IN THE STRING.                 *
*    D. A STRING CAN BE A MAXIMUM OF 71 BYTES LONG.                   *
*    E. EACH ENTRY IN THE STRING TABLE IS A ONE-BYTE LENGTH CODE FOLL-*
*       OWED BY THE STRING. EACH TABLE ENTRY IS 72 BYTES LONG.        *
***********************************************************************
STRGREAD GET   STRINGS                 READ STRING FILE RECORD
         L     R2,STRGCURR             POINT TO CURRENT ENTRY
         C     R2,STRGEND              PAST END OF TABLE?
         BH    EXCEED2                 YES, ERROR
         MVC   1(71,R2),0(R1)          MOVE STRING TO TABLE ENTRY
         LA    R15,70                  GET MAX POSSIBLE LENGTH CODE
         LA    R14,70(R2)              POINT TO LAST POSSIBLE BYTE
CRDLNBK  CLI   0(R14),C' '             FOUND LAST NON-BLANK COLUMN?
         BNE   LASNONBK                YES
         BCTR  R15,0                   NO, DECREMENT STRING LENGTH CODE
         BCT   R14,CRDLNBK             DECREMENT POINTER AND LOOP
LASNONBK CLI   0(R14),C'<'             GOT THE TERMINATOR SIGN?
         BNE   SAVELENG                NO
         BCTR  R15,0                   YES, DON'T INCLUDE IN LENGTH
SAVELENG STC   R15,0(R2)               SAVE STRING LENGTH
         LA    R2,72(R2)               ADVANCE TO NEXT ENTRY
         ST    R2,STRGCURR             SAVE CURRENT ENTRY POINTER
         B     STRGREAD                CONTINUE
EXCEED2  WTO   'TOO MANY STRING RECORDS, 500 MAX PER FILE',ROUTCDE=11
         ABEND 111,DUMP                TERMINATE IN ERROR
***********************************************************************
* 4. SORT THE STRINGS READ IN ASCENDING ORDER.                        *
***********************************************************************
ENDSTRGS L     R2,STRGCURR             GET NEXT TABLE ADDRESS
         MVI   0(R2),X'00'             SET END ENTRY LENGTH = 1
         MVI   1(R2),X'FF'             SET END ENTRY DATA = FF
         ST    R2,STRGEND              SET ACTUAL TABLE END
         L     R1,STRGSTRT             POINT TO TABLE START
NEXPASS  LR    R2,R1                   POINT TO 1ST PASS ENTRY
NEXNTRY  LA    R2,72(R2)               POINT TO NEXT ENTRY
         C     R2,STRGEND              PAST END OF TABLE?
         BH    ENDPASS                 YES
         CLC   1(71,R2),1(R1)          2ND ENTRY IS LOW?
         BL    SRTSWCH                 YES, GO SWITCH
         B     NEXNTRY                 NO, CONTINUE PASS
SRTSWCH  MVC   STRGHOLD,0(R1)          SAVE 1ST ENTRY
         MVC   0(72,R1),0(R2)          MOVE 2ND TO 1ST
         MVC   0(72,R2),STRGHOLD       MOVE 1ST TO SECOND
         B     NEXNTRY                 CONTINUE PASS
ENDPASS  LA    R1,72(R1)               POINT TO NEXT TABLE ENTRY
         C     R1,STRGEND              PAST END OF TABLE?
         BL    NEXPASS                 NO
***********************************************************************
* 5. CLEAR THE POINTER TABLE ADDRESSES BEFORE PROCESSING.             *
***********************************************************************
         LA    R1,LOWPTR               POINT TO 1ST POINTER ELEMENT
CKPTRND  CLI   0(R1),0                 END OF POINTER TABLE?
         BE    CKLOWRA                 YES
         XC    1(4,R1),1(R1)           NO, ZERO OUT THE ADDRESS
         LA    R1,5(R1)                STEP TO NEXT ENTRY
         B     CKPTRND                 LOOP THRU THE TABLE
***********************************************************************
* 6. CHECK THE FIRST BYTE OF THE FIRST STRING IN THE TABLE. IF IT IS  *
*    LOWER THAN THE LETTER "A", PUT THE ADDRESS OF THE FIRST STRING   *
*    ENTRY IN THE LOWPTR FIELD FOR USE IN LATER SCANNING.  NEXT, MOVE *
*    IN THE LOWPTR FIELD FOR USE IN LATER SCANNING.  NEXT, MOVE THE   *
*    VALUE X'01' TO THE LOCATION IN THE TRTSCH TRT TABLE CORRESPOND-  *
*    ING TO THIS TO THIS VALUE. THIS WILL CAUSE THE SCANNING TRT TO   *
*    STOP WHEN THIS BYTE VALUE IS FOUND IN AN INPUT SOURCE RECORD.    *
*    CONTINUE TO SEARCH THROUGH THE STRING TABLE SO LONG AS THE       *
*    STRINGS BEGIN WITH VALUES LESS THAN THE LETTER "A". FOR ALL THOSE*
*    LESS THAN THE LETTER "A", SET THE CORRESPONDING TRT TABLE BYTE TO*
*    X'01'.                                                           *
***********************************************************************
CKLOWRA  L     R1,STRGSTRT             POINT TO TABLE START
         CLI   1(R1),C'A'              1ST STRING BEGINS < A?
         BNL   ALFACHEK                NO, CONTINUE WITH ALPHABETICS
SETLOWAD STCM  R1,15,LOWPTR+1          YES, SET BEGIN SRCH ADDRESS
FINDALFA CLI   1(R1),C'A'              FOUND FIRST ALPHA?
         BNL   ALFACHEK                PERHAPS
         SR    R14,R14                 CLEAR FOR INSERT
         IC    R14,1(R1)               PICK UP 1ST BYTE OF STRING
         A     R14,TRTTABLE            POINT TO TRT TABLE BYTE
         MVI   0(R14),X'01'            SET STOP FOR THIS BYTE
         LA    R1,72(R1)               STEP TO NEXT ENTRY
         C     R1,STRGEND              PAST END OF TABLE?
         BH    RETURN                  YES
         B     FINDALFA                ELSE CONTINUE SEARCH
***********************************************************************
* 6. ON ENTRY, R1 POINTS TO A STRING TABLE ENTRY. CHECK THE FIRST     *
*    BYTE OF THE STRING FOR ALPHABETIC. IF GREATER THAN THE LETTER "Z"*
*    GO TO GOTHIONE. THIS CODE SEARCHES THROUGH THE STRING TABLE UNTIL*
*    THE TABLE IS EXHAUSTED, OR A STRING IS FOUND HAVING A FIRST BYTE *
*    GREATER THAN THE LETTER "Z". FOR EACH NEW ALPHABETIC CHARACTER   *
*    FOUND THAT STARTS A STRING, THE ADDRESS OF THE FIRST STRING WITH *
*    THIS STARTING LETTER IS MOVED TO THE ADDRESS TABLE ENTRY (APTR   *
*    THROUGH ZPTR). IN ADDITION, A VALUE BETWEEN 01 AND 1B CORRESPOND-*
*    ING TO A-Z IS MOVED TO THE  SCANNING TABLE, TRTSCH, SO THAT THE  *
*    BYTE WILL STOP THE SCANNING TRT WHEN IT IS FOUND WITHIN A SOURCE *
*    PROGRAM LINE.                                                    *
***********************************************************************
ALFACHEK CLI   1(R1),C'Z'              IS IT AN ALPHABETIC?
         BH    GOTHIONE                NO
         LA    R15,APTR                POINT TO LOAD ADDR TABLE
NEWALFA  CLC   1(1,R1),0(R15)          FOUND ADDRESS ENTRY?
         BE    SAVALFAD                YES
NEWSTEP  LA    R15,5(R15)              ADVANCE TO NEXT ENTRY
         CLI   0(R15),X'00'            PAST END OF TABLE?
         BH    RETURN                  YES
         B     NEWALFA                 NO, CONTINUE SEARCH
SAVALFAD STCM  R1,15,1(R15)            SET ADDRESS IN ENTRY
         SR    R2,R2                   CLEAR FOR INSERT
         IC    R2,1(R1)                GET 1ST BYTE OF STRING
         A     R14,TRTTABLE            POINT TO TRT TABLE BYTE
         CLI   1(R1),C'R'              ALPHA S-Z?
         BNL   GOTSZ                   YES
         CLI   1(R1),C'J'              ALPHA J-R?
         BNL   GOTJR                   YES
         LA    R2,65(R2)               CONVERT A-I TO 02-0A
         B     SETTABL                 GO SET IN TABLE
GOTJR    LA    R2,58(R2)               CONVERT J-R TO 0B-13
         B     SETTABL                 GO SET IN TABLE
GOTSZ    LA    R2,50(R2)               CONVERT S-Z TO 14-1B
SETTABL  STC   R2,0(R14)               SET BYTE IN TRT TABLE
ALFASTEP LA    R1,72(R1)               STEP TO NEXT STRING IN TABLE
         C     R1,STRGEND              PAST END OF TABLE?
         BH    RETURN                  YES
         CLC   1(1,R1),0(R15)          1ST STRING BYTE SAME AS LAST?
         BE    ALFASTEP                YES, CONTINUE
         CLI   1(R1),C'Z'              STILL ALPHABETIC?
         BH    GOTHIONE                NO, GO FINISH
         B     NEWSTEP                 CONTINUE
***********************************************************************
* 7. ON ENTRY, R1 POINTS TO A STRING TABLE ENTRY. IF THE FIRST BYTE OF*
*    THE STRING IS GREATER THAN THE LETTER "Z", THE ADDRESS OF THIS   *
*    ENTRY IS MOVED TO THE HIPTR FIELD, AND THE VALUE X'1C' IS SET IN *
*    THE TRTSCH TRT TABLE AT THE LOCATION CORRESPONDING TO THE VALUE  *
*    OF THE STRING'S FIRST BYTE. THE REST OF THE STRING TABLE IS      *
*    SEARCHED, AND X'1C' IS MOVED TO THE TRTSCH TABLE FOR EACH DIFF-  *
*    ERENT STRING STARTING VALUE.                                     *
***********************************************************************
GOTHIONE STCM  R1,7,HIPTR+1            SET LOAD ADDRESS POINTER
HICLEAR  SR    R2,R2                   CLEAR FOR INSERT
         IC    R2,1(R1)                PICK UP STARTING BYTE
         A     R14,TRTTABLE            POINT TO BYTE IN TRT TABLE
         MVI   0(R14),X'1C'            SET TRT STOP
         LA    R1,72(R1)               STEP TO NEXT STRING
         C     R1,STRGEND              PAST END OF TABLE?
         BNH   HICLEAR                 NO, CONTINUE
***********************************************************************
* 8. END OF PROCESSING RETURN TO CALLER WITH AREA ADDRESSES.          *
***********************************************************************
RETURN   CLOSE STRINGS                 CLOSE STRING FILE
         L     R1,POINTERS             POINT TO TABLE
         MVC   0(256,R1),LOWPTR        MOVE PTR TABLE TO GOTTEN STORAGE
         L     R13,4(R13)              GET CALLER'S SAVE ADDRESS
         L     R1,24(R13)              GET CALLER'S R1 VALUE
         MVC   4(12,R1),RETADDRS       MOVE ADDRESSES TO CALLER
         LM    R14,R12,12(R13)         RESTORE CALLER'S REGISTERS
         SR    R15,R15                 ZERO RETURN CODE
         BR    R14                     RETURN TO CALLER
***********************************************************************
*        STORAGE AND FILE AREAS                                       *
***********************************************************************
RETADDRS DS    0F                 RETURN ADDRESSES: KEEP ALL 3 TOGETHER
STRGSTRT DC    A(0)                  *  TABLE START ADDRESS
STRGEND  DC    A(0)                  *  TABLE END ADDRESS
TRTTABLE DC    A(0)                  *  TRT TABLE ADDRESS
POINTERS DC    A(0)                  *  STRING POINTER TABLE ADDRESS
*
STRGCURR DC    A(0)                    TABLE CURRENT ADDRESS
STRGHOLD DS    CL72                    SORT HOLD AREA
*
LOWPTR   DC    X'C0',AL4(0)            FOR STRINGS < "A"
APTR     DC    C'A',AL4(0)             FOR STRINGS STARTING "A"
BPTR     DC    C'B',AL4(0)             FOR STRINGS STARTING "B"
CPTR     DC    C'C',AL4(0)             FOR STRINGS STARTING "C"
DPTR     DC    C'D',AL4(0)             FOR STRINGS STARTING "D"
EPTR     DC    C'E',AL4(0)             FOR STRINGS STARTING "E"
FPTR     DC    C'F',AL4(0)             FOR STRINGS STARTING "F"
GPTR     DC    C'G',AL4(0)             FOR STRINGS STARTING "G"
HPTR     DC    C'H',AL4(0)             FOR STRINGS STARTING "H"
IPTR     DC    C'I',AL4(0)             FOR STRINGS STARTING "I"
JPTR     DC    C'J',AL4(0)             FOR STRINGS STARTING "J"
KPTR     DC    C'K',AL4(0)             FOR STRINGS STARTING "K"
LPTR     DC    C'L',AL4(0)             FOR STRINGS STARTING "L"
MPTR     DC    C'M',AL4(0)             FOR STRINGS STARTING "M"
NPTR     DC    C'N',AL4(0)             FOR STRINGS STARTING "N"
OPTR     DC    C'O',AL4(0)             FOR STRINGS STARTING "O"
PPTR     DC    C'P',AL4(0)             FOR STRINGS STARTING "P"
QPTR     DC    C'Q',AL4(0)             FOR STRINGS STARTING "Q"
RPTR     DC    C'R',AL4(0)             FOR STRINGS STARTING "R"
SPTR     DC    C'S',AL4(0)             FOR STRINGS STARTING "S"
TPTR     DC    C'T',AL4(0)             FOR STRINGS STARTING "T"
UPTR     DC    C'U',AL4(0)             FOR STRINGS STARTING "U"
VPTR     DC    C'V',AL4(0)             FOR STRINGS STARTING "V"
WPTR     DC    C'W',AL4(0)             FOR STRINGS STARTING "W"
XPTR     DC    C'X',AL4(0)             FOR STRINGS STARTING "X"
YPTR     DC    C'Y',AL4(0)             FOR STRINGS STARTING "Y"
ZPTR     DC    C'Z',AL4(0)             FOR STRINGS STARTING "Z"
HIPTR    DC    X'FF',AL4(0)            FOR STRINGS STARTING > "Z"
LDADEND  DC    X'00',4X'FF'            END OF POINTER TABLE
*
STRINGS  DCB   DSORG=PS,MACRF=GL,DDNAME=STRINGS,                       X
               RECFM=FB,LRECL=80,EODAD=ENDSTRGS
         END
