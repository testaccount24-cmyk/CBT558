         TITLE '    ***** ARCHVDMP - ARCHIVE SYS1.DUMP DATASETS *****'
         PRINT NOGEN
ARCHVDMP CSECT
         REQU
         USING ARCHVDMP,R3
***********************************************************************
* THIS PROGRAM SEARCHES IT'S TIOT FOR DD CARDS WHOSE NAMES BEGIN WITH *
* DUMP. WHEN FOUND, THE DDNAME IS MOVED TO THE DUMP DCB DDNAME FIELD, *
* AND THE DUMP DATASET IS OPENED. NEXT, THE LAST FOUR CHARACTERS OF   *
* THE DUMP DDNAME ARE MOVED TO THE LAST FOUR CHARACTERS OF THE TAPE   *
* DCB DDNAME, AND THE TAPE OUTPUT FILE IS OPENED. THE FIRST RECORD OF *
* THE DUMP DATASET IS READ. IF THE FILE IS EMPTY, THIS RESULTS IN AN  *
* IMMEDIATE JUMP TO THE ENDFILE ROUTINE, WHICH CLOSES BOTH FILES AND  *
* RETURNS TO THE MAINLINE TO SEARCH FOR THE NEXT DD CARD WHOSE DDNAME *
* BEGINS WITH THE LETTERS "DUMP". THE FIRST FOUR CHARACTERS OF THE    *
* TAPE OUTPUT DDNAMES MUST BE "TAPE", AND THE LAST FOUR CHARACTERS    *
* MUST MATCH THE LAST FOUR CHARACTERS OF THE CORRESPONDING INPUT DUMP *
* DATASET.                                                            *
*                                                                     *
* THE FIRST RECORD IN THE DUMP DATASET IS READ, THE DUMP SOURCE,      *
* TIME STAMP, DUMP TITLE, AND ORIGINAL DUMP DSNAME ARE MOVED TO A     *
* RECORD AND WRITTEN TO THE ARCHIVE FILE, THEN THE DUMP DATASET IS    *
* COPIED TO THE TAPE FILE USING NORMAL QSAM I/O.                      *
*                                                                     *
* THE ARCHIVE OUTPUT FILE CONTAINS ONE RECORD FOR EACH DUMP DATASET   *
* COPIED TO TAPE. THE INFORMATION IS THE SAME AS THAT PRINTED, AND    *
* MAY BE USED FOR HISTORICAL TRACKING.                                *
*                                                                     *
* THE PARM FIELD ON THE EXEC STATEMENT MUST CONTAIN EITHER "CLEAR" OR *
* "NOCLR". IF "CLEAR" IS SPECIFIED, EACH INPUT DISK DATASET IS CLEARED*
* AFTER THE COPY. IF "NOCLR" IS SPECIFIED, ALL DUMP DATASETS ARE LEFT *
* INTACT AFTER THE COPY RUN.                                          *
*                                                                     *
* R THORNTON JUN 1992                                                 *
***********************************************************************
*
***********************************************************************
*        CHECK PARM FIELD FOR "CLEAR" OR "NOCLR" AND SET PROCESSING   *
*        SWITCH APPROPRIATELY OR ABEND IF PARM IS INVALID.            *
***********************************************************************
         STM   R14,R12,12(R13)         SAVE CALLER'S REGISTERS
         LR    R3,R15                  INITIALIZE BASE REGISTER
         LA    R15,SAVE                GET SAVE AREA ADDRESS
         ST    R15,8(R13)              STORE FORWARD POINTER
         ST    R13,SAVE+4              STORE BACK POINTER
         LR    R13,R15                 INITIALIZE SAVE POINTER
         L     R2,0(R1)                POINT TO PARM DATA
         CLC   0(2,R2),=H'5'           5 BYTES OF PARM DATA?
         BNE   BADPARM                 NO
         CLC   2(5,R2),=CL5'CLEAR'     REQUEST TO CLEAR DUMP DATASETS?
         BNE   CKNOCLR                 NO
         MVI   CLEAR,1                 YES, INDICATE CLEAR REQUESTED
         B     OPENS                   CONTINUE
CKNOCLR  CLC   2(5,R2),=CL5'NOCLR'     REQUEST TO NOT CLEAR DATASETS?
         BE    OPENS                   YES
BADPARM  WTO   'ARCHVDMP: INVALID PARM, USE CLEAR OR NOCLR',ROUTCDE=11
         ABEND 777,DUMP
***********************************************************************
*        OPEN THE PRINT AND ARCHIVE OUTPUT FILES                      *
***********************************************************************
OPENS    OPEN  (ARCHIVE,OUTPUT,PRINT1,OUTPUT) OPEN ARCHIVE, PRINT FILES
***********************************************************************
*        LOCATE THE TIOT SO THAT DD STATEMENTS CAN BE FOUND           *
***********************************************************************
         L     R1,16                   GET CVT ADDRESS
         L     R1,0(R1)                GET CVTTCBP
         L     R1,0(R1)                GET TCB ADDRESS
         L     R1,12(R1)               GET TIOT ADDRESS
         LA    R1,24(R1)               GET ADDRESS OF 1ST DD ENTRY
         ST    R1,TIOTDD               SAVE TIOT DD ENTRY ADDRESS
***********************************************************************
*        PRINT THE LEGEND GIVING SAMPLE RESTORE JCL                   *
***********************************************************************
         LA    R10,LEGEND              POINT TO LEGEND START
PRTLGND  MVC   PRT+10(60),0(R10)       MOVE LEGEND LINE
         BAS   R9,PRINT                PRINT IT
         LA    R10,60(R10)             ADVANCE TO NEXT LINE
         CLI   0(R10),X'FF'            END OF LEGEND AREA?
         BNE   PRTLGND                 NO, LOOP TO PRINT LEGEND
**********************************************************************
*  SEARCH TIOT FOR NEXT DDNAME BEGINNING WITH "DUMP". IF NO MORE ARE *
*  FOUND, GO TO END OF JOB.                                          *
**********************************************************************
SRCHTIOT L     R1,TIOTDD               GET TIOT DD ENTRY ADDRESS
         SR    R2,R2                   CLEAR WORK REG
CKLSTDD  CLI   0(R1),0                 LAST TIOT DD ENTRY
         BE    EOJ                     YES
         CLC   4(4,R1),=C'DUMP'        DDNAME BEGINS WITH DUMP
         BE    GOTDD                   YES, USE IT
         IC    R2,0(R1)                GET DD ENTRY LENGTH
         AR    R1,R2                   STEP TO NEXT DD ENTRY
         B     CKLSTDD                 GO CK NEXT DD
**********************************************************************
*  FOUND TIOT DD ENTRY FOR DDNAME DUMP____. MOVE LAST 4 CHARACTERS OF*
*  DDNAME TO THE DUMP AND TAPE DCB DDNAME FIELDS. OPEN BOTH FILES.   *
**********************************************************************
GOTDD    MVC   DDNAME,4(R1)            SAVE ENTIRE DDNAME
         MVC   DUMP+44(4),8(R1)        DDNAME TO DUMP DCB
         MVC   TAPE+44(4),8(R1)        DDNAME TO TAPE DCB
         IC    R2,0(R1)                GET DD ENTRY LENGTH
         AR    R1,R2                   STEP TO NEXT DD ENTRY
         ST    R1,TIOTDD               SAVE IT'S ADDRESS
         OPEN  DUMP                    OPEN THE INPUT DUMP FILE
         TM    DUMP+48,X'10'           DID IT OPEN O.K.?
         BO    DUMPOPEN                YES
         MVC   OFDDNM,DDNAME           DDNAME TO MESSAGE
         MVC   PRTLINE,OPENFAIL        MESSAGE TO PRINT LINE
         BAS   R9,PRINT                PRINT MESSAGE
         WTO   'ARCHVDMP: OPEN FAILED FOR DUMP DATASET: SEE PRINTOUT', X
               ROUTCDE=11
         ABEND 777,DUMP                TERMINATE WITH ERROR
DUMPOPEN OPEN  (TAPE,OUTPUT)           OPEN THE OUTPUT TAPE FILE
         TM    TAPE+48,X'10'           DID IT OPEN O.K.?
         BO    RDJFCB                  YES
         MVC   OFDDNM,DDNAME           DDNAME TO MESSAGE
         MVC   PRTLINE,OPENFAIL        MESSAGE TO PRINT LINE
         BAS   R9,PRINT                PRINT MESSAGE
         WTO   'ARCHVDMP: OPEN FAILED FOR TAPE DATASET: SEE PRINTOUT', X
               ROUTCDE=11
         ABEND 777,DUMP                TERMINATE WITH ERROR
RDJFCB   RDJFCB TAPE                   READ JFCB FOR OUTPUT TAPE FILE
         MVC   OUTDSN,JFCBDSNM         SAVE THE DSNAME
         ZAP   TAPERECS,=P'0'          CLEAR OUTPUT RECORD COUNT
**********************************************************************
*  READ THE FIRST (HEADER) RECORD FROM THE INPUT DUMP DATASET. IF    *
*  A RECORD IS READ, FORMAT AN ARCHIVE RECORD AND WRITE IT, THEN COPY*
*  ALL DUMP DATASET RECORDS TO THE TAPE OUTPUT FILE.                 *
**********************************************************************
READFRST GET   DUMP                    READ FIRST DUMP DATASET RECORD
         ST    R1,SAVR12               COPY DUMP DATASET RECORD ADDRESS
         MVC   SOURCE,64(R1)           COPY SOURCE TO ARCHIVE RECORD
         MVC   TODSTAMP,72(R1)         COPY TOD CLOCK VALUE TO ARCHIVE
         BAS   R9,TIMECONV             GO CONVERT TO READABLE DATE-TIME
         MVC   TITLE,88(R1)            COPY DUMP TITLE TO ARCHIVE
         MVC   INDSNM,444(R1)          COPY DSNAME TO ARCHIVE
**********************************************************************
*  COPY THE INPUT DUMP DATASET TO THE OUTPUT TAPE. COUNT RECORDS.    *
**********************************************************************
         L     R12,SAVR12              POINT TO RECORD
COPY     PUT   TAPE,0(R12)             WRITE DUMP RECORD TO TAPE
         AP    TAPERECS,=P'1'          ADD 1 TO OUTPUT RECORD COUNT
         GET   DUMP                    READ NEXT DUMP FILE RECORD
         LR    R12,R1                  COPY DUMP DATASET RECORD ADDRESS
         B     COPY                    LOOP TO COPY THE FILE
**********************************************************************
*  END OF DUMP DATASET, CLOSE DUMP AND TAPE FILES. WRITE ARCHIVE     *
*  RECORD AND PRINTED REPORT.                                        *
**********************************************************************
EOF      CLOSE (TAPE,,DUMP)            CLOSE TAPE AND DUMP FILES
         CLI   CLEAR,0                 CLEAR INPUT DUMP DATASETS?
         BE    EDITCNT                 NO
         OPEN  (DUMP,OUTPUT)           OPEN DUMP FILE FOR OUTPUT
         CLOSE DUMP                       AND CLOSE TO WRITE EOF RECORD
EDITCNT  MVC   PRTOUT,EDCNT            EDIT OUTPUT
         ED    PRTOUT,TAPERECS            RECORD COUNT
         MVC   P4LIT,P4CON            LITERAL TO PRINT LINE
         MVC   PRTOUTD,OUTDSN          OUTPUT DSNAME TO PRINT
         CLI   PRTOUT,C' '             NEED TO LEFT JUSTIFY?
         BNE   CHKMTY                  NO
         LA    R15,P4END+12            END OF JUSTIFICATION AREA
         LA    R1,PRTOUT               BEGIN JUSTIFICATION AREA
         LA    R2,PRTOUT+1             START SEARCH FOR SOLID CHAR
FINDSOLD CLI   0(R2),C' '              FOUND SOLID CHARACTER?
         BNE   JUSTMOVE                YES
         LA    R2,1(R2)                NO, STEP OVER ONE BYTE
         B     FINDSOLD                CONTINUE
JUSTMOVE MVC   0(1,R1),0(R2)           MOVE TO JUSTIFY
         LA    R1,1(R1)                ADVANCE 1
         LA    R2,1(R2)                ADVANCE 1
         CR    R2,R15                  MOVE COMPLETE?
         BL    JUSTMOVE                YES
CHKMTY   ZAP   TAPERECS,TAPERECS       WAS DUMP DATASET EMPTY?
         BZ    EMPTY                   YES
         PUT   ARCHIVE,ARCREC          WRITE THE ARCHIVE RECORD
         MVC   PRTDDN,DDNAME           DDNAME TO PRINT
         MVC   PRTINDSN,INDSNM         INPUT DSNAME TO PRINT
         MVC   PRTTITL,TITLE           TITLE TO PRINT
         MVC   PRTYEAR,GREGYR          YEAR TO PRINT
         MVC   PRTMTH,GREGMO           DAY TO PRINT
         MVC   PRTDAY,GREGDAY          DAY TO PRINT
         MVC   PRTHOUR,HOUR            HOUR TO PRINT
         MVC   PRTMIN,MINUTE           MINUTE TO PRINT
         MVC   PRTSEC,SECOND           SECONDS TO PRINT
         MVC   PRTSRCE,SOURCE          SOURCE OF DUMP TO PRINT
         MVC   PRTLINE,PLINE1          MOVE PRINT LINE
         BAS   R9,PRINT                PRINT DATA LINE
         MVC   PRTLINE,PLINE2          MOVE PRINT LINE
         BAS   R9,PRINT                PRINT DATA LINE
         MVC   PRTLINE,PLINE3          MOVE PRINT LINE
         BAS   R9,PRINT                PRINT DATA LINE
         MVC   PRTLINE,PLINE4          MOVE PRINT LINE
         BAS   R9,PRINT                PRINT DATA LINE
         ZAP   DBLWD,TAPERECS          COMPUTE
         DP    DBLWD,P150                 3390
         AP    DBLWD(6),P1                   CYLINDERS
         MVC   DISKCYLS,DCEDIT                  NEEDED
         ED    DISKCYLS,DBLWD+3                     TO RESTORE
         MVC   P5LIT,P5CON            LITERAL TO PRINT LINE
         CLI   DISKCYLS,C' '           NEED TO LEFT JUSTIFY?
         BNE   PRT5                    NO
         LA    R15,P5END+7             END OF JUSTIFICATION AREA
         LA    R1,DISKCYLS             BEGIN JUSTIFICATION AREA
         LA    R2,DISKCYLS+1           START SEARCH FOR SOLID CHAR
FINDSOL2 CLI   0(R2),C' '              FOUND SOLID CHARACTER?
         BNE   JUSTMOV2                YES
         LA    R2,1(R2)                NO, STEP OVER ONE BYTE
         B     FINDSOL2                CONTINUE
JUSTMOV2 MVC   0(1,R1),0(R2)           MOVE TO JUSTIFY
         LA    R1,1(R1)                ADVANCE 1
         LA    R2,1(R2)                ADVANCE 1
         CR    R2,R15                  MOVE COMPLETE?
         BL    JUSTMOV2                YES
PRT5     MVC   PRTLINE,PLINE5          MOVE PRINT LINE
         BAS   R9,PRINT                PRINT BLANK LINE TO SEPARATE
         BAS   R9,PRINT                PRINT BLANK LINE TO SEPARATE
         B     SRCHTIOT                CONTINUE PROGRAM LOOP
EMPTY    MVC   MTDDNM,DDNAME           DDNAME TO PRINT
         MVC   PRTLINE,MTLINE          MOVE PRINT LINE
         BAS   R9,PRINT                PRINT THE LINE
         MVC   PRTLINE,PLINE4          MOVE PRINT LINE
         BAS   R9,PRINT                PRINT THE LINE
         BAS   R9,PRINT                PRINT BLANK LINE
         B     SRCHTIOT                AND GO PROCESS NEXT DD
***********************************************************************
*        PRINT ROUTINE                                                *
***********************************************************************
PRINT    PUT   PRINT1,PRTLINE
         MVC   PRT,PRTCC               CLEAR PRINT LINE
         BR    R9                      RETURN TO CALLER
**********************************************************************
*        CONVERTS A HEX TOD TIMESTAMP IN A DOUBLEWORD FIELD CALLED   *
* TODSTAMP TO AN 12-CHARACTER FIELD CALLED DATETIME WHICH WILL HAVE  *
* THE DATE AND TIME AS YYMMDDHHMMSS.                                 *
**********************************************************************
TIMECONV LA    R2,TODSTAMP              POINT TO USER'S TOD VALUE
         MVO   HEX,0(7,R2)              SAVE TOD CLOCK VALUE
         SR    R15,R15                  CLEAR FOR INSERTS
COMPUT6  ZAP   PTOD,PWR6                GET FIRST MULTIPLIER
         IC    R15,HEX                  GET HIGH ORDER BYTE OF 7
         CVD   R15,DBLWD                CONVERT TO PACKED
         MP    PTOD,DBLWD               FIND DECIMAL EQUIVALENT
COMPUT5  ZAP   PMUL,PWR5                GET NEXT MULTIPLIER
         IC    R15,HEX+1                GET NEXT LOWER BYTE OF 7
         CVD   R15,DBLWD                CONVERT TO PACKED
         MP    PMUL,DBLWD               FIND DECIMAL EQUIVALENT
         AP    PTOD,PMUL                ADD TO TOTAL
COMPUT4  ZAP   PMUL,PWR4                GET NEXT MULTIPLIER
         IC    R15,HEX+2                GET NEXT LOWER BYTE OF 7
         CVD   R15,DBLWD                CONVERT TO PACKED
         MP    PMUL,DBLWD               FIND DECIMAL EQUIVALENT
         AP    PTOD,PMUL                ADD TO TOTAL
COMPUT3  ZAP   PMUL,PWR3                GET NEXT MULTIPLIER
         IC    R15,HEX+3                GET NEXT LOWER BYTE OF 7
         CVD   R15,DBLWD                CONVERT TO PACKED
         MP    PMUL,DBLWD               FIND DECIMAL EQUIVALENT
         AP    PTOD,PMUL                ADD TO TOTAL
ADDLST3  ICM   R15,7,HEX+4              GET LAST 3 BYTES OF 7
         CVD   R15,DBLWD                CONVERT TO PACKED
         AP    PTOD,DBLWD               ADD TO TOTAL
         OI    PTOD+12,X'0F'            CHOP OFF MICROSECONDS
         ZAP   PTOD,PTOD(13)            RIGHT JUSTIFY WHOLE SECONDS
         DP    PTOD,P60                 COMPUTE SECONDS PAST MIN
         ZAP   SECCALC,PTOD+14(2)       MOVE SECONDS PAST MIN
         ZAP   PTOD,PTOD(14)            RIGHT JUSTIFY WHOLE MINUTES
         DP    PTOD,P60                 COMPUTE MINUTES PAST HR
         ZAP   MINCALC,PTOD+14(2)       MOVE MINUTES PAST HR
         ZAP   PTOD,PTOD(14)            RIGHT JUSTIFY WHOLE HOURS
         DP    PTOD,P24                 COMPUTE HOURS PAST MIDNITE
         ZAP   HOURCALC,PTOD+14(2)      MOVE HOURS PAST MIDNITE
         ZAP   PTOD,PTOD(14)            RIGHT JUSTIFY WHOLE DAYS
         AP    PTOD,P1                  ADJUST FOR NON-LEAP 1900
         CP    PTOD,P365                PAST END OF 1900?
         BH    COMPQ                    YES
         CP    PTOD,P58                 PAST FEB 28, 1900?
         BH    COMPQ                    YES
         SP    PTOD,P1                  NO, READJUST IN 1900
COMPQ    DP    PTOD,P1461               COMPUTE QUAD-YEARS
         MP    PTOD(13),P4              TOTAL YEARS IN QUAD-YEARS
         ZAP   YEARCALC,PTOD(13)        YEARS IN QUAD-YEARS
         XC    PTOD(13),PTOD            DAYS OVER A QUAD-YEAR
         CP    PTOD,P365                MORE THAN 1 YEAR?
         BH    OVR1YR                   YES
         B     SETDAYS                  CONTINUE
OVR1YR   AP    YEARCALC,P1              ADD 1 FOR THE LEAP YEAR
         SP    PTOD,P366                DEDUCT THE LEAP YEAR
         CP    PTOD,P364                MORE THAN A YEAR LEFT?
         BNH   SETDAYS                  NO
OVR2YR   AP    YEARCALC,P1              ADD FOR SECOND YEAR
         SP    PTOD,P365                DEDUCT FOR SECOND YEAR
         CP    PTOD,P364                MORE THAN A YEAR LEFT?
         BNH   SETDAYS                  NO
OVR3YR   AP    YEARCALC,P1              ADD FOR THIRD YEAR
         SP    PTOD,P365                DEDUCT FOR THIRD YEAR
SETDAYS  ZAP   DAYCALC,PTOD             COPY DAY OF YEAR
         AP    DAYCALC,P1               MAKE RELATIVE TO 1
         UNPK  JULYR,YEARCALC           BUILD
         OI    JULYR+1,C'0'               JULIAN
         UNPK  JULDAY,DAYCALC               DATE
         OI    JULDAY+2,C'0'                  FIELD
         UNPK  HOUR,HOURCALC            BUILD
         OI    HOUR+1,C'0'                CLOCK
         UNPK  MINUTE,MINCALC               TIME
         OI    MINUTE+1,C'0'                  FIELD
         UNPK  SECOND,SECCALC                   .
         OI    SECOND+1,C'0'                    .
         PACK  WORK,JULYR              PACK YEAR FOR LEAP YEAR TEST
         DP    WORK,PFOUR              DIVIDE BY 4
         ZAP   REMDR,REMDR             ANY REMAINDER
         BZ    LEAPYR                  NO, IT'S LEAP YEAR
         ZAP   FEB,P28                 SET NON-LEAP YEAR FEBRUARY
         B     CALCGREG                GO COMPUTE DATE
LEAPYR   ZAP   FEB,P29                 SET LEAP YEAR FEBRUARY
CALCGREG ZAP   MTHCTR,PONE             INITIALIZE MONTH COUNTER
         PACK  WORK,JULDAY             PACK JULIAN DAY FOR CALCULATION
         LA    R12,MTHTBL              GET TABLE START ADDRESS
DAYCPR   CP    WORK,0(2,R12)           DAYS : TABLE DAYS
         BNH   MVGREG                  NOT HIGH, FOUND MONTH
         AP    MTHCTR,PONE             ADD 1 TO MONTH COUNTER
         SP    WORK,0(2,R12)           SUBTRACT TABLE DAYS FROM DAYS
         LA    R12,2(R12)              STEP TO NEXT TABLE ENTRY
         B     DAYCPR                  CONTINUE SEARCH
MVGREG   MVC   GREGYR,JULYR            MOVE YEAR TO GREGORIAN DATE
         UNPK  GREGMO,MTHCTR           UNPACK MONTH TO GREG. DATE
         OI    GREGMO+1,C'0'           CLEAR SIGN ON MONTH
         UNPK  GREGDAY,WORK            UNPACK DAY OF MONTH TO GREG. DAT
         OI    GREGDAY+1,C'0'          CLEAR SIGN ON DAYS
         BR    R9                      RETURN TO CALLER
***********************************************************************
*        END OF JOB                                                   *
***********************************************************************
EOJ      CLOSE (ARCHIVE,,PRINT1)       CLOSE OUTPUT FILES
         L     R13,SAVE+4              GET CALLER'S SAVE AREA ADDRESS
         LM    R14,R12,12(R13)         RESTORE CALLER'S REGISTERS
         SR    R15,R15                 CLEAR RETURN CODE
         BR    R14                     RETURN TO CALLER
***********************************************************************
*        *** DATA, WORK, FILE, AND STORAGE AREAS ***                  *
***********************************************************************
         LTORG
*
SAVE     DS    18F                     REGISTER SAVE AREA
DCEDIT   DC    XL7'4020206B202020'
P4CON    DC    CL23' RECORDS COPIED TO DSN='
P5CON    DC    CL49' CYLINDERS OF 3390 DISK WILL BE NEEDED TO RESTORE'
SAVR12   DS    F                       SAVE AREA FOR R12
TIOTDD   DS    F                       ADDRESS OF NEXT DD ENTRY IN TIOT
EDCNT    DC    XL12'402020206B2020206B202120'
TODSTAMP DS    D                       TOD TIME STAMP
P150     DC    P'150'                  MULTIPLY AREA
PMUL     DC    PL16'0'                 MULTIPLY AREA
PTOD     DC    PL16'0'                 DECIMAL EQUIVALENT TOD VALUE
HEX      DC    XL8'00'                 HEX TOD CLOCK AREA
DBLWD    DC    D'0'                    DOUBLEWORD WORK AREA
PWR3     DC    PL5'16777216'           VALUE FOR 256**3
PWR4     DC    PL6'4294967296'         VALUE FOR 256**4
PWR5     DC    PL7'1099511627776'      VALUE FOR 256**5
PWR6     DC    PL8'281474976710656'    VALUE FOR 256**6
YEARCALC DC    PL2'0'                   YEARS
DAYCALC  DC    PL2'0'                   DAYS
HOURCALC DC    PL2'0'                   HOURS
MINCALC  DC    PL2'0'                   MINUTES
SECCALC  DC    PL2'0'                   SECONDS
P1       DC    PL1'1'                   CONSTANT 1
P4       DC    PL4'4'                   CONSTANT 4
P58      DC    PL2'58'                  CONSTANT 58
P60      DC    PL2'60'                  CONSTANT 60
P24      DC    PL2'24'                  CONSTANT 24
P364     DC    PL2'364'                 CONSTANT 364
P365     DC    PL2'365'                 CONSTANT 365
P366     DC    PL2'366'                 CONSTANT 366
P1461    DC    PL3'1461'                CONSTANT 1461
WORK     DS    0PL4                    WORK AREA
         DS    PL3
REMDR    DS    PL1                     REMAINDER AFTER DIVIDE
MTHCTR   DS    PL2                     MONTH COUNTER
PFOUR    DC    P'4'                    CONSTANT 4
P28      DC    P'28'                   NBR DAYS IN FEB., NON-LEAP YR
P29      DC    P'29'                   NBR DAYS IN FEB., LEAP YR
REGYR    DC    C'365'                  NBR DAYS IN NON-LEAP YR
LPYR     DC    CL3'366'                NBR DAYS IN LEAP YEAR
PONE     DC    P'1'                    CONSTANT 1
MTHTBL   DS    0PL2                    TABLE OF DAYS PER MONTH
         DC    PL2'31'                 NBR DAYS IN JANUARY
FEB      DS    PL2                     NBR DAYS IN FEBRUARY
         DC    PL2'31'                 NBR DAYS IN MARCH
         DC    PL2'30'                 NBR DAYS IN APRIL
         DC    PL2'31'                 NBR DAYS IN MAY
         DC    PL2'30'                 NBR DAYS IN JUNE
         DC    PL2'31'                 NBR DAYS IN JULY
         DC    PL2'31'                 NBR DAYS IN AUGUST
         DC    PL2'30'                 NBR DAYS IN SEPTEMBER
         DC    PL2'31'                 NBR DAYS IN OCTOBER
         DC    PL2'30'                 NBR DAYS IN NOVEMBER
         DC    PL2'31'                 NBR DAYS IN DECEMBER
CLEAR    DC    XL1'00'                 01=CLEAR INPUT DUMP DATASETS
*
JULDATE  DS    0CL5                    JULIAN DATE PASSED BY CALLER
JULYR    DS    CL2                     YEAR
JULDAY   DS    CL3                     DAY
*
ARCREC   DS    0CL200                  ARCHIVE RECORD
DATETIME DS    0CL12                   DATE/TIME FIELD
GREGDATE DS    0CL6                      GREGORIAN DATE
GREGYR   DS    CL2                         YEAR
GREGMO   DS    CL2                         MONTH
GREGDAY  DS    CL2                         DAY
CLKTIME  DS    0CL6                      CLOCK TIME
HOUR     DS    CL2                         HOUR
MINUTE   DS    CL2                         MINUTE
SECOND   DS    CL2                         SECOND
TAPERECS DS    PL5                     OUTPUT TAPE RECORD COUNTER
DDNAME   DS    CL8                     DDNAME
INDSNM   DS    CL11                    DUMP DSNAME (SYS1.DUMPNN)
TITLE    DS    CL100                   DUMP TITLE
OUTDSN   DS    CL44                    TAPE DSNAME
SOURCE   DS    CL8                     DUMP SOURCE (E.G. IEAVTSDT)
         DS    CL12
*
PRTLINE  DS    0CL133                  PRINT LINE OUTPUT
PRTCC    DC    C' '                    CARRIAGE CONTROL CHARACTER
PRT      DC    CL132' '                PRINT LINE
*
MTLINE   DS    0CL133
         DC    C' '
MTDDNM   DS    CL8
         DC    CL33': REFERS TO AN EMPTY DUMP DATASET'
MTOUTD   DS    CL44
         DC    CL47' '
*
PLINE1   DS    0CL133
         DC    CL1' '
PRTDDN   DS    CL8                     DDNAME
PRTCTIT  DC    CL8': TITLE='
PRTTITL  DS    CL100                   DUMP TITLE
         DC    CL16' '
*
PLINE2   DS    0CL133
         DC    CL11' '
         DC    CL17'ORIGINAL DSNAME= '
PRTINDSN DS    CL11                    ORIGINAL INPUT DSNAME
         DC    CL94' '
*
PLINE3   DS    0CL133
         DC    CL11' '
         DC    CL11'CREATED ON '
PRTMTH   DS    CL2                     MONTH
         DC    CL1'/'
PRTDAY   DS    CL2                     DAY
         DC    CL1'/'
PRTYEAR  DS    CL2                     YEAR
         DC    CL4' AT '
PRTHOUR  DS    CL2                     HOUR
         DC    CL1':'
PRTMIN   DS    CL2                     MINUTE
         DC    CL1':'
PRTSEC   DS    CL2                     SECOND
         DC    CL4' BY '
PRTSRCE  DS    CL8                     DUMP SOURCE
         DC    CL79' '
*
PLINE4   DS    0CL133
         DC    CL11' '
PRTOUT   DS    CL12                    OUTPUT RECORD COUNT
P4LIT    DC    CL23' RECORDS COPIED TO DSN='
PRTOUTD  DS    CL44                    OUTPUT DSNAME
P4END    DC    CL44' '
*
PLINE5   DS    0CL133
         DC    CL11' '
DISKCYLS DC    XL7'4020206B202020'
P5LIT    DC    CL49' CYLINDERS OF 3390 DISK WILL BE NEEDED TO RESTORE'
P5END    DC    CL66' '
*
OPENFAIL DS    0CL133                  OPEN FAIL MESSAGE
         DC    CL1'0'
         DC    CL23'OPEN FAILED FOR DDNAME '
OFDDNM   DS    CL8                     DDNAME
         DC    CL101' '
*
JFCBEXIT DS    0F                      DCB EXIT LIST
         DC    X'87'                   RDJFCB ENTRY, LAST ENTRY
         DC    AL3(JFCB)               ADDRESS OF JFCB AREA
*
         JFCBDEF DSECT=NO
*
DUMP     DCB   DDNAME=DUMP,MACRF=(GL,PM),DSORG=PS,EODAD=EOF
*
TAPE     DCB   DDNAME=TAPE,MACRF=PM,DSORG=PS,EXLST=JFCBEXIT
*
ARCHIVE  DCB   DSORG=PS,MACRF=PM,DDNAME=ARCHIVE,RECFM=FB,              X
               LRECL=200
*
PRINT1   DCB   DSORG=PS,MACRF=PM,RECFM=FB,LRECL=133,BLKSIZE=133,       X
               DDNAME=PRINT1
*
         LTORG
*
LEGEND   DS    0CL60
 DC CL60'************************************************************'
 DC CL60'************************************************************'
 DC CL60'** The sample JCL below can be used to restore an archived**'
 DC CL60'** dump from tape to disk.                                **'
 DC CL60'************************************************************'
 DC CL60'**                                                        **'
 DC CL60'** //RESTORE  EXEC PGM=IEBGENER                           **'
 DC CL60'** //SYSPRINT DD   SYSOUT=*                               **'
 DC CL60'** //SYSIN    DD   DUMMY                                  **'
 DC CL60'** //SYSUT1   DD   DSN=tape.dsname.GnnnnV00,DISP=OLD      **'
 DC CL60'** //SYSUT2   DD   DSN=your.disk.dsname,DISP=(,CATLG),    **'
 DC CL60'** //         UNIT=DISK,SPACE=(CYL,(primary,5),RLSE),     **'
 DC CL60'** //         RECFM=F,LRECL=4160,BLKSIZE=4160             **'
 DC CL60'************************************************************'
 DC CL60'** The DSN for SYSUT1 and primary space in cylinders can  **'
 DC CL60'** be obtained from the detail below for the desired dump.**'
 DC CL60'************************************************************'
 DC CL60'************************************************************'
 DC CL60' '
ENDLGN   DC    X'FF'
         END
