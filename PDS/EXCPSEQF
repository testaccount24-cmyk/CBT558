         TITLE '***** READ SYSIN FILE SEQUENTIALLY USING EXCP *****'
*        PRINT NOGEN
EXCPSEQF CSECT
         STM   R14,R12,12(R13)         SAVE CALLER'S REGS
         LR    R3,R15                  COPY THE PROGRAM BASE REG
         USING EXCPSEQF,R3
         B     INIT1                   GO TO INITIALIZATION
         DC    CL8'EXCPSEQF'           PROGRAM NAME
SAVE     DS    18F                     REGISTER SAVE AREA
INIT1    LA    R15,SAVE                POINT TO MY SAVE AREA
         ST    R15,8(R13)              CHAIN FORWARD
         ST    R13,SAVE+4              CHAIN BACKWARD
         LR    R13,R15                 POINT R13 TO MY SAVE
*
**********************************************************************
*  READ A SEQUENTIAL DATASET USING EXCP AND WRITE EACH LOGICAL RECORD*
*  TO THE SYSOUT DATASET. BOTH SYSIN AND SYSOUT MUST BE PHYSICALLY   *
*  SEQUENTIAL DATASETS.                                              *
*                                                                    *
*  OF PRINCIPAL VALUE IN WRITING EXCP ROUTINES.                      *
*                                                                    *
*  AUTHOR R. THORNTON AUG 1985                                       *
**********************************************************************
*
*
***********************************************************************
*        INITIALIZATION                                               *
***********************************************************************
*
         OPEN  (SYSOUT,OUTPUT,SYSPRINT,OUTPUT,SYSIN) OPEN FILES
         TM    SYSIN+48,X'10'          DID IT OPEN?
         BO    GETJFC                  YES
         MVC   PRT,BADOPEN             MESSAGE TO PRINT
         BAL   R9,PRINT                GO PRINT MESSAGE
         ABEND 111,DUMP                TERMINATE
GETJFC   RDJFCB SYSIN                  READ THE JFCB
         LTR   R15,R15                 SUCCESSFUL READ?
         BZ    GETEXT                  YES
         MVC   PRT,BADJFCB             NO, MOVE MESSAGE
         BAL   R9,PRINT                PRINT IT
         ABEND 444,DUMP                AND ABEND THE JOB
GETEXT   L     R1,SYSIN+44             POINT TO THE DEB
         MVC   DEBNMEXT+1(1),16(R1)    SAVE NUMBER OF EXTENTS
         LA    R1,32(R1)               POINT TO FIRST DEB EXTENT
         ST    R1,DEBNXEXT             SAVE NEXT EXTENT ADDRESS
         TM    SYSIN+36,X'C0'          SYSIN RECFM=U?
         BO    BADRCFM                 YES, ERROR
         BZ    BADRCFM                 INVALID RECFM, ERROR
         TM    SYSIN+36,X'40'          SYSIN RECFM=V
         BO    BADRCFM                 YES, ERROR
         TM    SYSOUT+36,X'C0'         SYSOUT RECFM=U?
         BO    BADRCFM                 YES, ERROR
         BZ    BADRCFM                 INVALID RECFM, ERROR
         TM    SYSOUT+36,X'40'         SYSOUT RECFM=V
         BNZ   BADRCFM                 YES, ERROR
         BAL   R9,ENDXTNT              NO, GET 1ST EXTENT
         B     MAINLINE                GO BEGIN PROCESSING
BADRCFM  MVC   PRT,RCFMER              MOVE ERROR MESSAGE
         BAL   R9,PRINT                PRINT IT
         ABEND 666,DUMP                AND ABEND
*
***********************************************************************
*        MAINLINE PROCESSING: READ BLOCKS FROM THE SYSIN DATASET,     *
*        WRITE THEM TO THE SYSOUT DATASET, AND MAINTAIN COUNTS.       *
***********************************************************************
*
MAINLINE BAL   R9,READRECD             READ NEXT SYSIN RECORD
         CLI   ENDOFILE,1              EXHAUSTED ALL EXTENTS?
         BE    EOJ                     YES
         CLI   EOFRECD,1               IS THIS AN EOF RECORD?
         BNE   WRITRECD                NO
         MVC   RECORD,EOFRCRD          YES, MOVE SPECIAL EOF RECORD
WRITRECD PUT   SYSOUT,RECORD           NO, WRITE OUTPUT FROM INPUT FILE
         AP    RECORDS,P1              INCREMENT RECORD COUNT
         B     MAINLINE                CONTINUE
*
***********************************************************************
*        READRECD CONTROLS PROCESSING TO OBTAIN THE NEXT INPUT RECORD *
*        FROM THE SYSIN DATASET. IF THE CURRENT BLOCK IS EMPTY, THE   *
*        EXCPREAD ROUTINE IS CALLED FOR THE NEXT BLOCK. WHEN A BLOCK  *
*        CONTAINING RECORDS IS AVAILABLE, THE NEXT RECORD IN THE BLOCK*
*        IS MOVED TO THE FIELD CALLED RECORD, AND THE NEXTRECD FIELD  *
*        IS UPDATED TO ADDRESS THE NEXT RECORD IN THE BLOCK. IF EITHER*
*        THE  OF THE SWITCHES ENDOFILE OR EOFRECD ARE SET, EXIT TO THE*
*        CALLER WITH NO FURTHER ACTION.                               *
***********************************************************************
*
READRECD ST    R9,RR9                  SAVE RETURN ADDRESS
         CLC   NEXTRECD,ENDOBLK        END OF BLOCK?
         BL    SAMEBLOK                NO
READBLOK BAL   R9,EXCPREAD             YES, READ ANOTHER BLOCK
         CLI   ENDOFILE,1              ANY MORE EXTENTS?
         BE    RRXIT                   NO, EXIT
         CLI   EOFRECD,1               GOT AN EOF RECORD?
         BE    RRXIT                   YES
         L     R1,BLKSIZE              GET THIS BLOCK'S LENGTH
         SR    R0,R0                   CLEAR FOR DIVIDE
         LH    R2,JFCLRECL             GET LRECL
         DR    R0,R2                   DIVIDE BY LRECL SIZE
         LTR   R0,R0                   ANY REMAINDER?
         BZ    SAMEBLOK                NO, MULTIPLE OF LRECL
         MVC   PRT,LENGERR             MOVE ERROR MESSAGE
         BAL   R9,PRINT                PRINT ERROR
         ABEND 333,DUMP                AND ABEND
SAMEBLOK L     R1,NEXTRECD             POINT TO NEXT RECORD IN BLOCK
         MVC   RECORD,0(R1)            MOVE RECORD TO OUTPUT AREA
         AH    R1,JFCLRECL             ADVANCE TO NEXT RECORD ADDRESS
         ST    R1,NEXTRECD             UPDATE NEXT RECORD POINTER
RRXIT    L     R9,RR9                  GET RETURN ADDRESS
         BR    R9                      RETURN TO CALLER
*
***********************************************************************
*        ENDXTNT SETS UP TO PROCESS THE NEXT EXTENT IN THE DEB: THE   *
*        EXTENT NUMBER (M OF THE MBBCCHHR ADDRESS) IS INCREMENTED,    *
*        AND THE SEARCH ADDRESS IS SET TO THE BEGINNING OF THE NEW    *
*        EXTENT, AT RECORD 1. IF NO MORE EXTENTS EXIST FOR THE FILE,  *
*        THE ENDOFILE SWITCH IS SET.                                  *
***********************************************************************
*
ENDXTNT  ST    R9,XT9                  SAVE RETURN ADDRESS
         MVI   ENDOXTNT,0              RESET INDICATOR
         IC    R1,DAEXTM               PICK UP CURRENT EXTENT NBR
         LA    R1,1(R1)                INCREMENT EXTENT NBR
         STC   R1,DAEXTM               UPDATE THE EXTENT NUMBER
         L     R1,DEBNXEXT             GET ADDRESS OF NEXT DEB EXTENT
         MVC   RCOUNT(4),6(R1)         NEW STARTING CCHH TO SRCH
         MVI   RCNTREC,1               BEGIN WITH RECORD=01
         MVI   RCNTDL,1                INSURE EOF RECORD NOT INDICATED
         LA    R1,16(R1)               ADVANCE TO NEXT DEB EXTENT
         ST    R1,DEBNXEXT             SAVE NEXT EXTENT ADDRESS
         LH    R1,DEBNMEXT             PICK UP NBR EXTENTS REMAINING
         LTR   R1,R1                   ARE THERE ANY MORE?
         BZ    SETEND                  NO
         BCTR  R1,0                    YES, DEDUCT 1
         STH   R1,DEBNMEXT             UPDATE REMAINING COUNT
         MVI   SRCHCCW,X'39'           SET TO SRCH HOME ADDR EQUAL
         MVI   SRCHCCW+7,4             SET LENGTH TO 4
         B     XTXIT                   AND EXIT TO CALLER
SETEND   MVI   ENDOFILE,1              SHOW END OF ALL EXTENTS
XTXIT    L     R9,XT9                  GET RETURN ADDRESS
         BR    R9                      EXIT TO CALLER
*
***********************************************************************
*        EXCPREAD PHYSICALLY READS THE NEXT BLOCK FROM THE INPUT FILE *
*        AND MAKES IT AVAILABLE FOR PROCESSING. IF AN EOF RECORD IS   *
*        READ, THE EOFRECD SWITCH IS SET. IF END OF EXTENT IS FOUND,  *
*        THE ENDOXTNT SWITCH IS SET. IF A REAL I/O ERROR OCCURS, A    *
*        MESSAGE IS WRITTEN, AND THE PROGRAM ABENDS.                  *
***********************************************************************
*
EXCPREAD ST    R9,ER9                  SAVE RETURN ADDRESS
EXCPRSTR MVI   EOFRECD,0               RESET INDICATOR
DOEXCP   MVC   DASRCH,RCOUNT           SET SEARCH ADDRESS IN IOB
         EXCP  DAIOB                   ISSUE EXCP FOR NEXT BLOCK
         WAIT  ECB=DAECB               AWAIT COMPLETION
         MVI   SRCHCCW,X'31'           RESET TO SRCH ID EQUAL
         MVI   SRCHCCW+7,5             RESET LENGTH TO 5
         CLI   DAECB,X'7F'             GOOD READ?
         BNE   TESTERR1                NO, TEST FURTHER
         AP    EXCPS,P1                INCREMENT EXCP COUNT
GOODREAD LH    R1,RCNTDL               GET BLOCK LENGTH FROM COUNT
         ST    R1,BLKSIZE              SAVE THIS BLOCK'S LENGTH
         LA    R1,BLOCK                YES, GET BLOCK ADDRESS
         ST    R1,NEXTRECD             SAVE AS NEXT RECORD ADDRESS
         A     R1,BLKSIZE              ADD BLOCK LENGTH
         ST    R1,ENDOBLK              SAVE END OF BLOCK ADDRESS
         B     EXXIT                   AND EXIT
TESTERR1 CLI   DAECB,X'42'             END OF EXTENT?
         BNE   TESTERR2                NO
         BAL   R9,ENDXTNT              YES, GO SWITCH EXTENTS
         CLI   ENDOFILE,1              ANY MORE EXTENTS?
         BE    EXXIT                   NO, EXIT
         B     EXCPRSTR                YES, GO READ NEW EXTENT
TESTERR2 CLI   DAECB,X'41'             I/O ERROR INDICATED?
         BNE   HARDERR                 NO
         TM    DAUNST,1                IS IT AN EOF RECORD?
         BZ    HARDERR                 NO
         MVI   EOFRECD,1               AND INDICATE EOF RECORD
         B     GOODREAD                GO SET ADDRESSES
EXXIT    L     R9,ER9                  GET RETURN ADDRESS
         BR    R9                      EXIT
*
***********************************************************************
*        HARDERR PRINTS A MESSAGE WHEN A HARD I/O ERROR IS FOUND BY   *
*        EXCP. THE JOB IS THEN TERMINATED ABNORMALLY                  *
***********************************************************************
*
HARDERR  ST    R9,HE9                  SAVE RETURN ADDRESS
         MVC   PRT,HARDIOER            ERROR MESSAGE TO PRINT
         BAL   R9,PRINT                GO PRINT MESSAGE
         UNPK  ECBCMPCD(3),DAECB(2)    UNPACK TO MAKE PRINTABLE
         MVI   ECBCMPCD+2,C' '         CLEAR GARBAGE
         TR    ECBCMPCD,TRCHAR-C'0'    MAKE PRINTABLE HEX
         UNPK  CSWLEFT(9),DACSW(5)     UNPACK TO MAKE PRINTABLE
         MVI   CSWLEFT+8,C' '          CLEAR GARBAGE
         TR    CSWLEFT,TRCHAR-C'0'     MAKE PRINTABLE
         UNPK  CSWRIGHT(9),DACSW+4(5)  UNPACK TO MAKE PRINTABLE
         MVI   CSWRIGHT+8,C' '         CLEAR GARBAGE
         TR    CSWRIGHT,TRCHAR-C'0'    MAKE PRINTABLE
         UNPK  SRCHADDR(11),DASRCH(6)  UNPACK TO MAKE PRINTABLE
         MVI   SRCHADDR+10,C' '        CLEAR GARBAGE
         TR    SRCHADDR,TRCHAR-C'0'    MAKE PRINTABLE
         MVC   PRT,ECBCSW              MOVE LINE TO PRINT
         BAL   R9,PRINT                PRINT THE ECB/CSW/SRCH LINE
         UNPK  CCWADRS(9),DACCWAD(5)   UNPACK TO MAKE PRINTABLE
         MVI   CCWADRS+8,C':'          CLEAR GARBAGE
         TR    CCWADRS,TRCHAR-C'0'     MAKE PRINTABLE
         L     R12,DACCWAD             POINT TO COMMAND CHAIN
EDCCWS   UNPK  CCWLEFT(9),0(5,R12)     UNPACK TO MAKE PRINTABLE
         MVI   CCWLEFT+8,C' '          CLEAR GARBAGE
         TR    CCWLEFT,TRCHAR-C'0'     MAKE PRINTABLE
         UNPK  CCWRIGHT(9),4(5,R12)    UNPACK TO MAKE PRINTABLE
         MVI   CCWRIGHT+8,C' '         CLEAR GARBAGE
         TR    CCWRIGHT,TRCHAR-C'0'    MAKE PRINTABLE
         MVC   PRT,CCWLINE             MOVE CCW LINE TO PRINT
         BAL   R9,PRINT                PRINT CCW LINE
         TM    4(R12),X'C0'            THIS COMMAND CHAINED?
         BNZ   MORECCWS                YES
         CLI   0(R12),X'08'            NO, IS IT A TIC?
         BNE   FORMCNT                 NO
MORECCWS MVC   CCWLINE,BLANX           YES, CLEAR THE LINE
         LA    R12,8(R12)              ADVANCE TO NEXT CCW
         B     EDCCWS                  LOOP TO PRINT THE CHAIN
FORMCNT  LA    R1,RCOUNT               GET COUNT ADDRESS
         ST    R1,DBLWD                STORE FOR UNPK
         UNPK  CNTADR(9),DBLWD(5)      UNPACK TO MAKE PRINTABLE
         MVI   CNTADR+8,C':'           CLEAR GARBAGE
         TR    CNTADR,TRCHAR-C'0'      MAKE PRINTABLE
         UNPK  CNTLEFT(9),RCOUNT(5)    UNPACK TO MAKE PRINTABLE
         MVI   CNTLEFT+8,C' '          CLEAR GARBAGE
         TR    CNTLEFT,TRCHAR-C'0'     MAKE PRINTABLE
         UNPK  CNTRIGHT(9),RCOUNT+4(5) UNPACK TO MAKE PRINTABLE
         MVI   CNTRIGHT+8,C' '         CLEAR GARBAGE
         TR    CNTRIGHT,TRCHAR-C'0'    MAKE PRINTABLE
         MVC   PRT,CNTLINE             MOVE COUNT LINE TO PRINT
         BAL   R9,PRINT                PRINT COUNT LINE
         ABEND 222,DUMP                TERMINATE ABNORMALLY
HEXIT    L     R9,HE9                  GET RETURN ADDRESS
         BR    R9                      RETURN TO CALLER
***********************************************************************
*        PRINT SUBROUTINE                                             *
***********************************************************************
*
PRINT    PUT   SYSPRINT,PRT            WRITE THE PRINT LINE
         MVC   PRT,BLANX               CLEAR PRINT LINE
         BR    R9                      RETURN
*
***********************************************************************
*        END OF JOB                                                   *
***********************************************************************
*
EOJ      ED    EOFXCPT,EXCPS           EDIT TOTAL EXCPS TO MESSAGE
         MVC   PRT,EOFEXCP             MOVE TOTAL EXCP MESSAGE
         BAL   R9,PRINT                PRINT TOTAL EXCP MESSAGE
         ED    EOFRECS,RECORDS         TOTAL RECORDS TO MESSAGE
         MVC   PRT,EOFRCDS             MOVE TOTAL RECORDS MESSAGE
         BAL   R9,PRINT                PRINT TOTAL RECORDS MESSAGE
         CLOSE (SYSPRINT,,SYSIN,,SYSIN) CLOSE FILES
         L     R13,4(R13)              POINT TO CALLER'S SAVE AREA
         L     R14,12(R13)             PICK UP RETURN ADDRESS
         L     R15,RETCODE             GET RETURN CODE
         LM    R0,R12,20(R13)          RESTORE CALLER'S REGS
         BR    R14                     RETURN TO CALLER
*
*
***********************************************************************
*        DATA DEFINITIONS                                             *
***********************************************************************
*
RETCODE  DC    F'0'                    RETURN CODE
BLKSIZE  DC    F'0'                    BLOCKSIZE OF LAST BLOCK READ
RR9      DS    F                       RETURN ADDRESS FOR READRECD
ER9      DS    F                       RETURN ADDRESS FOR EXCPREAD
HE9      DS    F                       RETURN ADDRESS FOR  HARDERR
XT9      DS    F                       RETURN ADDRESS FOR ENDXTNT
NEXTRECD DC    A(1)                    ADDRESS OF NEXT RECORD IN BLOCK
ENDOBLK  DC    A(0)                    ADDRESS OF END OF BLOCK
EXLST    DS    0A                      EXIT LIST FOR SYSIN DCB
         DC    X'87'                   RDJFCB EXIT, END OF LIST
         DC    AL3(JFCB)               JFCB AREA ADDRESS
EOFRECD  DC    XL1'00'                 END OF FILE RECORD READ = 01
ENDOXTNT DC    XL1'01'                 END OF EXTENT = 01
ENDOFILE DC    XL1'00'                 END OF FILE = 01
*
RECORD   DS    CL80                    OUTPUT RECORD AREA
EOFRCRD  DC    CL80'1EOF'              SPECIAL EOF RECORD
*
*
PRT      DC    CL80' '                 PRINT DATA
LENGERR  DC    CL80'*****ERROR: BLOCK NOT A MULTIPLE OF 80 *****'
BADOPEN  DC    CL80'*****ERROR: UNABLE TO OPEN SYSIN FILE *****'
HARDIOER DC    CL80'*****ERROR: HARD I/O ERROR ON SYSIN FILE *****'
RCFMER   DC    CL80'*****ERROR: SYSIN AND SYSOUT MUST BE RECFM=F/FB'
BADJFCB  DC    CL80'*****ERROR: UNABLE TO READ JFCB FOR SYSIN'
ECBCSW   DS    0CL80                   ECB, CSW, SRCH ADDR LINE
         DC    CL21'ECB COMPLETION CODE: '
ECBCMPCD DS    CL2                     ECB COMPLETION CODE
         DC    CL7', CSW: '
CSWLEFT  DS    CL8                     LEFT HALF OF CSW
         DC    CL1' '
CSWRIGHT DS    CL8                     RIGHT HALF OF CSW
         DC    CL17', CCHHR ADDRESS: '
SRCHADDR DS    CL10                    SEARCH ADDRESS CCHHR
         DC    CL6' '
CCWLINE  DS    0CL80                   CCW LINE
         DC    CL24'COMMAND CHAIN STARTS AT '
CCWADRS  DS    CL8                     CCW START ADDRESS
         DC    CL2': '
CCWLEFT  DS    CL8                     LEFT HALF OF CCW
         DC    CL1' '
CCWRIGHT DS    CL8                     RIGHT HALF OF CCW
         DC    CL29' '
CNTLINE  DS    0CL80                   COUNT RECORD LINE
         DC    CL26'LAST COUNT RECORD READ AT '
CNTADR   DS    CL8                     COUNT ADDRESS
         DC    CL2': '                 DELIMITER
CNTLEFT  DC    CL8' '                  LEFT HALF OF COUNT RECORD
         DC    CL1' '
CNTRIGHT DC    CL8' '                  RIGHT HALF OF COUNT RECORD
         DC    CL27' '
EOFEXCP  DS    0CL80                   EOF EXCP TOTAL LINE
EOFXCPT  DC    XL12'402020206B2020206B202020' TOTAL SYSIN EXCPS
         DC    CL68' TOTAL SYSIN EXCPS'
EOFRCDS  DS    0CL80                   EOF SYSOUT RECORD TOTAL LINE
EOFRECS  DC    XL12'402020206B2020206B202020' TOTAL SYSOUT RECORDS
         DC    CL68' TOTAL SYSOUT RECORDS'
*
RECORDS  DC    PL5'0'                  NUMBER RECORDS WRITTEN
EXCPS    DC    PL5'0'                  NUMBER SYSIN EXCP'S
WORK     DS    PL3                     WORK AREA
XZROS    DC    F'0'                    BINARY ZEROS
DBLWD    DS    D                       DOUBLEWORD WORK AREA
P0       DC    P'0'                    CONSTANT 0
P1       DC    P'1'                    CONSTANT 1
BLANX    DC    CL80' '                 CONSTANT BLANKS
TRCHAR   DC    CL16'0123456789ABCDEF'  MAKE PRINTABLE HEX
*
***********************************************************************
*        JFCB FOR SYSIN                                               *
***********************************************************************
*
JFCB     DS    0CL176   *** JFCB DESCRIPTION ***
JFCBDSNM DS    CL44          DATA SET NAME (ALL HEX 04'S FOR FMT 4 DSCB
JFCBELNM DS    CL8           ELEMENT NAME, GENERATION NBR, OR ISAM
*                              TYPE OF AREA
JFCBTSDM DS    XL1           JOB MGMT/DATA MGMT INTERFACE
*                              BIT0-CATALOGUED
*                              BIT1-VOL SER LIST WAS CHANGED
*                              BIT2-SYSIN OR SYSOUT DATA SET
*                              BIT3-JOB STEP TO BE RESTARTED
*                              BIT4-NO JFCB WRITE-BACK DURING OPEN
*                              BIT5-NO DSCB OR LABEL MERGE TO JFCB
*                            BIT6-NO DCB MERGE TO JFCB
*                              BIT7-THE PATTERNING DSCB IS COMPLETE
JFCBDSCB DS    XL3           TTR OF FORMAT 1 DSCB ON FIRST VOLUME
JFCFBID  DS    CL4           FORMS CONTROL BUFFER IMAGE FOR 3211
         DS    CL6           RESERVED
JFCBLTYP DS    XL1           LABEL TYPE
JFCBUFOF DS    XL1           TAPE DATA SET BUFFER OFFSET
JFCBFLSQ DS    XL2           TAPE FILE SEQ NBR
JFCBVLSQ DS    XL2           VOLUME SEQ NBR
JFCBMASK DS    XL8           DATA MANAGEMENT MASK
JFCBCRDT DS    XL3           CREATION DATE, BINARY, YDD
JFCBXPDT DS    XL3           EXPIRATION DATE, BINARY, YDD
JFCBIND1 DS    XL1           INDICATOR BYTE, BIT6-GEN MEM, BUT7-PDS MEM
JFCBIND2 DS    XL1           INDICATOR BYTE, BITS01=01-OLD,
*                              BITS01=10-MOD DATA SET,
*                              BITS01=11-NEW DATA SET
*                              BITS23-PASSWORD, BIT4-SHARED, BIT5-DELET
*                              THIS JFCB BEFORE RESTART, BIT6-STORAGE V
*                              VOLUME REQ, BIT7-TEMPORARY DATA SET
JFCBUFNO DS    XL1           NUMBER BUFFERS
JFCBFTEK DS    XL1           BUFFERING TECHNIQUE
JFCBUFL  DS    XL2           BUFFER LENGTH
JFCEROPT DS    XL1           ERROR OPTION, BIT0-ACCEPT, BIT1-SKIP,
*                              BIT2-ABEND
JFCKEYLE DS    XL1           KEY LENGTH FOR DASD, UNIQUE BY DEVICE
JFCDEN   DS    XL1           TAPE DENSITY
JFCLIMCT DS    XL3           BDAM SEARCH LIMIT
JFCDSORG DS    XL1           DATA SET ORGANIZATION, BIT0-I S, BIT1-PS,
*                              BIT2-DA, BIT6-PO, BIT7-UNMOVABLE
         DS    XL1           BIT1-GAM
JFCRECFM DS    XL1           RECORD FORMAT
*                              BITS01=10-FIXED, BITS01=01-VARIABLE,
*                              BITS01=11-UNDEFINED, BIT2-TRK OFLO,
*                              BIT3-BLOCKED, BIT4-F(B)S OR VS,
*                              BITS56=10-ASA CTL CHR, BITS56=01-MACH CT
*                              CHAR, BITS56=00-NO CTL CHAR
JFCOPTCD DS    XL1           OPTION CODES
JFCBLKSI DS    XL2           MAXIMUM BLOCK SIZE
JFCLRECL DS    XL2           LOGICAL RECORD LENGTH
JFCNCP   DS    XL1           NUMBER OF CHANNEL PROGRAMS
JFCNTM   DS    XL1           NUMBER MASTER INDEX TRACKS
JFCRKP   DS    XL2           RELATIVE KEY POSITION
JFCCYLOF DS    XL1           NBR TRKS OVERFLOW PER CYL FOR I S
         DS    XL1           RESERVED
JFCINTVL DS    XL1           QTAM NBR SECONDS INTENTIONAL DELAY
JFCOUTL1 DS    XL3           SMF SYSOUT LIMIT
         DS    XL1           RESERVED
JFCBNVOL DS    XL1           NBR VOLUMES SER NBRS TO FOLLOW
JFCBVOLS DS    5CL6          UP TO 5 VOL SER NBRS
JFCBEXTL DS    XL1           RESERVED
JFCBEXAD DS    XL3           TTR OF FIRST JFCB EXTENSION
JFCBPQTY DS    XL3           PRIMARY DASD SPACE REQUIRED
JFCBCTRI DS    XL1           SPACE PARAMETERS, BITS01=00-ABSTR,
*                              BITS01=01-BLOCKS, BITS01=10-TRACKS,
*                              BITS01=11-CYL, BIT4-CONTIG, BIT5-MXIG,
*                              BIT6-ALX, BIT7-ROUND
JFCBSQTY DS    XL3           SECONDARY QUANTITY
         DS    XL1           RESERVED
JFCBDQTY DS    XL3           DIRECTORY QUANTITY
JFCBSPNM DS    XL3           DATA MGMT ADDRESS
JFCBABST DS    XL2           TTR OF FIRST TRK ALLOCATED
JFCBSBNM DS    XL3           DATA MANAGEMENT ADDRESS
JFCBDRLH DS    XL3           AVERAGE BLOCK LENGTH
JFCBVLCT DS    XL1           VOLUME COUNT
JFCBSPTN DS    XL1           NBR TRKS USED FOR SPLIT CYL
*
*
*
*
***********************************************************************
*        FILE DEFINITIONS                                             *
***********************************************************************
*
SYSIN    DCB   MACRF=(E),DDNAME=SYSIN,EXLST=EXLST
SYSPRINT DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,                      X
               RECFM=FB,LRECL=80
SYSOUT   DCB   DSORG=PS,MACRF=PM,DDNAME=SYSOUT
*
***********************************************************************
*        EXCP DATA AREAS                                              *
***********************************************************************
*
DEBNXEXT DS    A                       ADDR OF NEXT EXTENT
DEBNMEXT DC    H'0'                    NBR EXTENTS REMAINING
*
CMDCHN   DS    0D                      COMMAND CHAIN TO READ DISK
SRCHCCW  CCW   X'31',RCOUNT,X'40',5    SEARCH FOR RECORD
         CCW   8,*-8,0,0               LOOP OF NOT FOUND
         CCW   X'9E',BLOCK,X'20',32720 READ COUNT, KEY, DATA (M-T)
*
DAECB    DC    F'0'                    EVENT CONTROL BLOCK
*                       *** INPUT/OUTPUT BLOCK FOR DISK USING EXCP
*
*
         DS    0F                      ALIGN TO FULLWORD BOUNDARY
DAIOB    DS    0XL40                   IOB START, 40 BYTES
DAFLAGS  DC    X'42'                   COMMAND CHAIN + UNRELATED
         DC    X'00'                   SYSTEM FLAGS BYTE
DAUCSNS  DC    XL2'00'                 FIRST 2 SENSE BYTES AFTER UNT CH
*                                      BYTE 1 -
*                                        BIT 0 = COMMAND REJECT
*                                        BIT 3 = EQUIPMENT CHECK
*                                        BIT 4 = DATA CHECK
*                                        BIT 5 = OVERRUN
*                                        BIT 6 = TRK CONDITION CHK
*                                        BIT 7 = SEEK CHECK
*                                      BYTE 2 -
*                                        BIT 0 = DATA CHK IN COUNT
*                                        BIT 1 = WRITE TRAK OVERRUN
*                                        BIT 2 = END OF CYLINDER ON M-T
*                                        BIT 3 = INVALID COMMAND SEQ
*                                        BIT 4 = NO RECORD FOUND
*                                        BIT 5 = FILE PROTECTED
*                                        BIT 6 = MISSING ADDRESS MARKER
*                                        BIT 7 = OVERFLOW INCOMPLETE
DAECBCC  DS    0XL1                    ECB COMPLETION CODE
*                                        7F = GOOD I/O COMPLETION
*                                        41 = PERM I/O ERROR, CSW 0/GOO
*                                        42 = EXTENT VIOL NO CSW
*                                        44 = INTERCEPTED NO CSW
*                                        OTHER - HARD ERRORS
DAECBAD  DC    A(DAECB)               ECB ADDRESS
DACSW    DS    0XL8                    CHANNEL STATUS WORD
DANXCCW  DC    A(0)                    ADDR OF LAST EXEC COMM + 8
DAUNST   DC    XL1'00'              *** UNIT STATUS BYTE
*                                      BIT 0 = ATTENTION
*                                      BIT 1 = STATUS MODIFIER
*                                      BIT 2 = CONTROL UNIT END
*                                      BIT 3 = BUSY
*                                      BIT 4 = CHANNEL END
*                                      BIT 5 = DEVICE END
*                                      BIT 6 = UNIT CHECK (ERROR)
*                                      BIT 7 = UNIT EXCEPTION (EOF)
DACHST   DC    XL1'00'              *** CHANNEL STATUS BYTE
*                                      BIT 0 = PCI
*                                      BIT 1 = WRONG LENGTH RECORD
*                                      BIT 2 = CHANNEL PROGRAM CHECK
*                                      BIT 3 = PROTECTION CHECK
*                                      BIT 4 = CHANNEL DATA CHECK
*                                      BIT 5 = CHANNEL CONTROL CHECK
*                                      BIT 6 = INTERFACE CONTROL CHK
*                                      BIT 7 = CHAINING CHECK
DARESID  DC   H'0'                    RESIDUAL COUNT
DASIOCC  DS   0XL1                    COND CODE AFTER SIO COMMAND
DACCWAD  DC   A(CMDCHN)               ADDRESS OF CHANNEL PROGRAM
DADCBAD  DC   A(SYSIN)                ADDRESS OF DCB
         DC    A(0)                   SYSTEM RESTART FIELD
         DC    H'0'                   RESERVED
DARET    DC   H'0'                    NBR RETRIES DURING ERRECOV
DAEXTM   DC   XL1'FF'                 EXTENT NBR (ADD 1 = 00 1ST TIME)
DASEEK   DS   0XL6                    SEEK ADDRESS
DABIN    DC   XL2'00'                 BIN NBR
DASRCH   DS   0XL5                    SEARCH ADDRESS
DACYL    DC   XL2'00'                 CYLINDER NBR
         DC   X'00'                   FIRST BYTE OF HEAD NBR, ZERO
DAHEAD   DC   XL1'00'                 HEAD NBR
DAREC    DC   X'01'                   RECORD NBR
*
***********************************************************************
*        LARGE AREA TO READ BLOCK                                     *
***********************************************************************
*
         LTORG
*
RCOUNT   DS    0XL8                    COUNT RECORD FOR NEXT RECORD
RCNTCYL  DC    H'0'                    CYLINDER NUMBER
RCNTHD   DC    H'0'                    HEAD (TRACK) NUMBER
RCNTREC  DC    X'01'                   RECORD NUMBER ON TRACK
RCNTKL   DC    X'00'                   KEY LENGTH
RCNTDL   DC    H'0'                    DATA LENGTH
*
BLOCK    DS    CL32720                 DATA BLOCK FROM PDS
*
***********************************************************************
*        REGISTER EQUATES                                             *
***********************************************************************
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
