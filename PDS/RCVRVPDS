         TITLE '***** READ CLOBBERED PDS AND SAVE DATA *****'
*        PRINT NOGEN
RCVRVPDS CSECT
         STM   R14,R12,12(R13)         SAVE CALLER'S REGS
         LR    R3,R15                  COPY THE PROGRAM BASE REG
         USING RCVRVPDS,R3
         B     INIT1                   GO TO INITIALIZATION
         DC    CL8'RCVRVPDS '          PROGRAM NAME
SAVE     DS    18F                     REGISTER SAVE AREA
INIT1    LA    R15,SAVE                POINT TO MY SAVE AREA
         ST    R15,8(R13)              CHAIN FORWARD
         ST    R13,SAVE+4              CHAIN BACKWARD
         LR    R13,R15                 POINT R13 TO MY SAVE
*
**********************************************************************
*  READ A PDS WHOSE DIRECTORY HAS BEEN CLOBBERED, AND WRITE THE DATA *
*  RECORDS OUT TO A SEQUENTIAL FILE FOR FURTHER PROCESSING AND       *
*  RECONSTRUCTION.                                                   *
*                                                                    *
*  THE DAMAGED PDS IS READ BLOCK BY BLOCK USING EXCP. THE PDS IS     *
*  ASSUMED TO BE RECFM=VB, AND THE FIRST 4 BYTES OF EACH RECORD ARE  *
*  ASSUMED TO BE VALID RDW'S WITH LENGTHS OF 5-255 BYTES. NO CHECKS  *
*  ARE MADE FOR THIS, AND ABEND S002 WILL OCCUR IF THIS IS UNTRUE.   *
*  DATA BLOCKS ARE UN-BLOCKED AND WRITTEN TO THE SYSOUT DATASET IN   *
*  THE ORDER READ IN. AN IEBUPDTE ADD CONTROL RECORD IS WRITTEN      *
*  AS THE FIRST RECORD OF EACH MEMBER WRITTEN TO THE SEQUENTIAL      *
*  SYSOUT FILE. THE OUTPUT DATASET IS ALSO WRITTEN AS RECFM=VB.      *
*                                                                    *
*  WHEN AN END-OF-FILE RECORD IS READ, AN INDICATOR IS SET SO THAT   *
*  A ./ ADD NAME=MBRNNNNN RECORD WILL BE WRITTEN TO THE SYSOUT       *
*  DATASET BEFORE THE NEXT RECORD IS WRITTEN FROM THE SYSIN DATASET. *
*  THIS APPROACH PERMITS A CODE CHANGE TO BASE THE NAME= PARAMETER   *
*  OF THE ./ ADD RECORD ON DATA IN THE FIRST RECORD OF THE NEW MEMBER*
*  IF DESIRED. THE DEFAULT MEMBER NAME MBRNNNNN IS MADE UP OF THE    *
*  PREFIXING LETTERS "MBR" FOLLOWED BY A 5-DIGIT NUMBER WHICH STARTS *
*  AT ONE FOR THE FIRST MEMBER, AND IS INCREMENTED BY ONE FOR EACH   *
*  SUCCEEDING MEMBER.                                                *
*                                                                    *
*  JCL REQUIREMENTS ARE AS FOLLOWS:                                  *
*    SYSPRINT : MESSAGE OUTPUT. SPECIFY BLKSIZE A MULTIPLE OF 80     *
*    SYSIN    : THE DAMAGED INPUT PDS                                *
*    SYSOUT   : THE SEQUENTIAL OUTPUT DATASET WHICH WILL CONTAIN THE *
*               RECORDS RECOVERED FROM SYSIN. SPECIFY BLKSIZE > 258  *
*                                                                    *
*  AUTHOR R. THORNTON AUG 1990                                       *
**********************************************************************
*
*
***********************************************************************
*        INITIALIZATION                                               *
***********************************************************************
*
         OPEN  (SYSOUT,OUTPUT,SYSPRINT,OUTPUT,SYSIN) OPEN FILES
         TM    SYSIN+48,X'10'          DID CLOBBERED PDS OPEN?
         BO    GETEXT                  YES
         MVC   PRT,BADOPEN             MESSAGE TO PRINT
         BAL   R9,PRINT                GO PRINT MESSAGE
         ABEND 111,DUMP                TERMINATE
GETEXT   L     R1,SYSIN+44             POINT TO THE DEB
         MVC   DEBNMEXT+1(1),16(R1)    SAVE NUMBER OF EXTENTS
         LA    R1,32(R1)               POINT TO FIRST DEB EXTENT
         ST    R1,DEBNXEXT             SAVE NEXT EXTENT ADDRESS
         BAL   R9,ENDXTNT              YES, PROCESS END OF EXTENT
PASSDIR  BAL   R9,EXCPREAD             READ NEXT DIRECTORY BLOCK
         CLI   ENDOFILE,1              EXHAUSTED ALL EXTENTS?
         BE    EOJ                     YES
         CLI   EOFRECD,1               IS THIS AN EOF RECORD?
         BNE   PASSDIR                 NO, SKIP DIRECTORY BLOCK
*
***********************************************************************
*        MAINLINE PROCESSING READ RECORDS FROM THE DATA PORTION OF    *
*        THE PDS AND WRITE THEM TO AN OUTPUT DATASET.                 *
***********************************************************************
*
MAINLINE BAL   R9,READRECD             READ NEXT SYSIN RECORD
         CLI   ENDOFILE,1              EXHAUSTED ALL EXTENTS?
         BE    EOJ                     YES
         CLI   EOFRECD,1               IS THIS AN EOF RECORD?
         BNE   CHKNEW                  NO, GO CHECK NEW MEMBER
         MVI   NEWMBR,1                YES, INDICATE NEW MEMBER
         B     MAINLINE                AND GO READ AGAIN
CHKNEW   CLI   NEWMBR,1                THIS STARTS A NEW MEMBER?
         BNE   WRITRECD                NO
         PACK  WORK,MBRNBR             YES, PACK THE MEMBER NUMBER
         AP    WORK,P1                 INCREMENT MEMBER NUMBER
         UNPK  MBRNBR,WORK             UNPACK MEMBER NUMBER
         OI    MBRNBR+4,C'0'           CLEAR THE SIGN
         PUT   SYSOUT,ADDCARD          WRITE THE ./ADD CARD
         AP    MEMBERS,P1              INCREMENT MEMBER COUNT
         MVI   NEWMBR,0                RESET NEW MEMBER SWITCH
WRITRECD PUT   SYSOUT,RECORD           NO, WRITE THE RECORD
         AP    RECORDS,P1              INCREMENT RECORD COUNT
         B     MAINLINE                CONTINUE
*
***********************************************************************
*        READRECD CONTROLS PROCESSING TO READ THE NEXT INPUT RECORD   *
*        AND PREPARE IT FOR OUTPUT IN THE FIELD NAMED RECORD.         *
***********************************************************************
*
READRECD ST    R9,RR9                  SAVE RETURN ADDRESS
         CLC   NEXTRECD,ENDOBLK        END OF BLOCK?
         BL    SAMEBLOK                NO
         CLI   ENDOXTNT,1              END OF EXTENT?
         BNE   READBLOK                NO
         BAL   R9,ENDXTNT              YES, PROCESS END OF EXTENT
         CLI   ENDOFILE,1              ANY MORE EXTENTS?
         BE    RRXIT                   NO, EXIT
READBLOK BAL   R9,EXCPREAD             YES, READ ANOTHER BLOCK
         CLI   EOFRECD,1               READ AN END-OF-FILE RECORD?
         BE    RRXIT                   YES, EXIT
         CLI   ENDOFILE,1              EXHAUSTED ALL EXTENTS?
         BE    EOJ                     YES
SAMEBLOK L     R1,NEXTRECD             POINT TO NEXT RECORD IN BLOCK
         LH    R2,0(R1)                PICK UP RDW
         CH    R2,=H'5'                VALID RDW?
         BL    READBLOK                NO
         CH    R2,=H'255'               VALID RDW?
         BH    READBLOK                NO
         BCTR  R2,0                    COMPUTE LENGTH CODE
         EX    R2,MOVEREC              MOVE RECORD TO OUTPUT
         LA    R1,1(R1,R2)             ADVANCE TO NEXT RECORD ADDRESS
         ST    R1,NEXTRECD             UPDATE NEXT RECORD POINTER
RRXIT    L     R9,RR9                  GET RETURN ADDRESS
         BR    R9                      RETURN TO CALLER
MOVEREC  MVC   RECORD(1),0(R1)         MOVE RECORD TO OUTPUT AREA
*
***********************************************************************
*        ENDXTNT SETS UP TO PROCESS THE NEXT EXTENT IN THE DEB: THE   *
*        EXTENT NUMBER (M OF THE MBBCCHHR ADDRESS) IS INCREMENTED,    *
*        AND THE SEARCH ADDRESS IS SET TO THE BEGINNING OF THE NEW    *
*        EXTENT, AT RECORD 1. IF NO MORE EXTENTS EXIST FOR THE FILE,  *
*        THE ENDOFILE SWITCH IS SET.                                  *
***********************************************************************
*
ENDXTNT  ST    R9,XT9                  SAVE RETURN ADDRESS
         MVI   ENDOXTNT,0              RESET INDICATOR
         IC    R1,DAEXTM               PICK UP CURRENT EXTENT NBR
         LA    R1,1(R1)                INCREMENT EXTENT NBR
         STC   R1,DAEXTM               UPDATE THE EXTENT NUMBER
         L     R1,DEBNXEXT             GET ADDRESS OF NEXT DEB EXTENT
         MVC   RCOUNT(4),6(R1)         NEW STARTING CCHH TO SRCH
         MVI   RCNTREC,1               BEGIN WITH RECORD=01
         LA    R1,16(R1)               ADVANCE TO NEXT DEB EXTENT
         ST    R1,DEBNXEXT             SAVE NEXT EXTENT ADDRESS
         LH    R1,DEBNMEXT             PICK UP NBR EXTENTS REMAINING
         LTR   R1,R1                   ARE THERE ANY MORE?
         BZ    SETEND                  NO
         BCTR  R1,0                    YES, DEDUCT 1
         STH   R1,DEBNMEXT             UPDATE REMAINING COUNT
         MVI   SRCHCCW,X'39'           CHANGE TO SRCH HOME ADDR
         MVI   SRCHCCW+7,X'04'         AND LENGTH TO 4
         B     XTXIT                   AND EXIT TO CALLER
SETEND   MVI   ENDOFILE,1              SHOW END OF ALL EXTENTS
         MVI   EOFRECD,1               INDICATE EOF RECORD, TOO
XTXIT    L     R9,XT9                  GET RETURN ADDRESS
         BR    R9                      EXIT TO CALLER
*
***********************************************************************
*        EXCPREAD PHYSICALLY READS THE NEXT BLOCK FROM THE INPUT FILE *
*        AND MAKES IT AVAILABLE FOR PROCESSING. IF AN EOF RECORD IS   *
*        READ, THE EOFRECD SWITCH IS SET. IF END OF EXTENT IS FOUND,  *
*        THE ENDOXTNT SWITCH IS SET. IF A REAL I/O ERROR OCCURS, A    *
*        MESSAGE IS WRITTEN, AND THE PROGRAM ABENDS.                  *
***********************************************************************
*
EXCPREAD ST    R9,ER9                  SAVE RETURN ADDRESS
EXCPRSTR MVI   EOFRECD,0               RESET INDICATOR
DOEXCP   MVC   DASRCH,RCOUNT           SET SEARCH ADDRESS IN IOB
         EXCP  DAIOB                   ISSUE EXCP FOR NEXT BLOCK
         WAIT  ECB=DAECB               AWAIT COMPLETION
         CLI   DAECB,X'7F'             GOOD READ?
         BNE   TESTERR1                NO, TEST FURTHER
         AP    EXCPS,P1                INCREMENT EXCP COUNT
GOODREAD LH    R1,RCNTDL               GET BLKSIZE FROM COUNT RECORD
         ST    R1,BLKSIZE              SAVE THIS BLOCK'S LENGTH
         LA    R1,BLOCK+4              YES, GET BLOCK ADDRESS
         ST    R1,NEXTRECD             SAVE AS NEXT RECORD ADDRESS
         A     R1,BLKSIZE              ADD BLOCK LENGTH
         ST    R1,ENDOBLK              SAVE END OF BLOCK ADDRESS
         B     EXXIT                   AND EXIT
TESTERR1 CLI   DAECB,X'42'             END OF EXTENT?
         BNE   TESTERR2                NO
         BAL   R9,ENDXTNT              YES, SWITCH TO NEXT EXTENT
         CLI   ENDOFILE,1              IS IT END OF FILE?
         BNE   EXCPRSTR                NO
         B     EXXIT                   YES, EXIT
TESTERR2 CLI   DAECB,X'41'             I/O ERROR INDICATED?
         BNE   HARDERR                 NO
         TM    DAUNST,1                IS IT AN EOF RECORD?
         BZ    HARDERR                 NO
         MVI   EOFRECD,1               YES, INDICATE EOF RECORD
EXXIT    MVI   SRCHCCW,X'31'           RESET SRCH ID EQUAL COMMAND
         MVI   SRCHCCW+7,5             CORRECT SEARCH LENGTH
         L     R9,ER9                  GET RETURN ADDRESS
         BR    R9                      EXIT
*
***********************************************************************
*        HARDERR PRINTS A MESSAGE WHEN A HARD I/O ERROR IS FOUND BY   *
*        EXCP. THE JOB IS THEN TERMINATED ABNORMALLY                  *
***********************************************************************
*
HARDERR  ST    R9,HE9                  SAVE RETURN ADDRESS
         MVC   PRT,HARDIOER            ERROR MESSAGE TO PRINT
         BAL   R9,PRINT                GO PRINT MESSAGE
         UNPK  ECBCMPCD(3),DAECB(2)    UNPACK TO MAKE PRINTABLE
         MVI   ECBCMPCD+2,C' '         CLEAR GARBAGE
         TR    ECBCMPCD,TRCHAR-C'0'    MAKE PRINTABLE HEX
         UNPK  CSWLEFT(9),DACSW(5)     UNPACK TO MAKE PRINTABLE
         MVI   CSWLEFT+8,C' '          CLEAR GARBAGE
         TR    CSWLEFT,TRCHAR-C'0'     MAKE PRINTABLE
         UNPK  CSWRIGHT(9),DACSW+4(5)  UNPACK TO MAKE PRINTABLE
         MVI   CSWRIGHT+8,C' '         CLEAR GARBAGE
         TR    CSWRIGHT,TRCHAR-C'0'    MAKE PRINTABLE
         UNPK  SRCHADDR(11),DASRCH(6)  UNPACK TO MAKE PRINTABLE
         MVI   SRCHADDR+10,C' '        CLEAR GARBAGE
         TR    SRCHADDR,TRCHAR-C'0'    MAKE PRINTABLE
         MVC   PRT,ECBCSW              MOVE LINE TO PRINT
         BAL   R9,PRINT                PRINT THE ECB/CSW/SRCH LINE
         UNPK  CCWADRS(9),DACCWAD(5)   UNPACK TO MAKE PRINTABLE
         MVI   CCWADRS+8,C' '          CLEAR GARBAGE
         TR    CCWADRS,TRCHAR-C'0'     MAKE PRINTABLE
         L     R12,DACCWAD             POINT TO COMMAND CHAIN
EDCCWS   UNPK  CCWLEFT(9),0(5,R12)     UNPACK TO MAKE PRINTABLE
         MVI   CCWLEFT+8,C' '          CLEAR GARBAGE
         TR    CCWLEFT,TRCHAR-C'0'     MAKE PRINTABLE
         UNPK  CCWRIGHT(9),4(5,R12)    UNPACK TO MAKE PRINTABLE
         MVI   CCWRIGHT+8,C' '         CLEAR GARBAGE
         TR    CCWRIGHT,TRCHAR-C'0'    MAKE PRINTABLE
         MVC   PRT,CCWLINE             MOVE CCW LINE TO PRINT
         BAL   R9,PRINT                PRINT CCW LINE
         TM    4(R12),X'C0'            THIS COMMAND CHAINED?
         BNZ   MORECCWS                YES
         CLI   0(R12),X'08'            NO, IS IT A TIC?
         BNE   ABND222                 NO
MORECCWS MVC   CCWLINE,BLANX           YES, CLEAR THE LINE
         LA    R12,8(R12)              ADVANCE TO NEXT CCW
         B     EDCCWS                  LOOP TO PRINT THE CHAIN
ABND222  ABEND 222,DUMP                TERMINATE ABNORMALLY
HEXIT    L     R9,HE9                  GET RETURN ADDRESS
         BR    R9                      RETURN TO CALLER
***********************************************************************
*        PRINT SUBROUTINE                                             *
***********************************************************************
*
PRINT    PUT   SYSPRINT,PRT            WRITE THE PRINT LINE
         MVC   PRT,BLANX               CLEAR PRINT LINE
         BR    R9                      RETURN
*
***********************************************************************
*        END OF JOB                                                   *
***********************************************************************
*
EOJ      ED    EOFXCPT,EXCPS           EDIT TOTAL EXCPS TO MESSAGE
         MVC   PRT,EOFEXCP             MOVE TOTAL EXCP MESSAGE
         BAL   R9,PRINT                PRINT TOTAL EXCP MESSAGE
         ED    EOFMBRS,MEMBERS         EDIT TOTAL MEMBERS TO MESSAGE
         MVC   PRT,EOFMEMBR            MOVE TOTAL MEMBER MESSAGE
         BAL   R9,PRINT                PRINT TOTAL MEMBER MESSAGE
         ED    EOFRECS,RECORDS         TOTAL RECORDS TO MESSAGE
         MVC   PRT,EOFRCDS             MOVE TOTAL RECORDS MESSAGE
         BAL   R9,PRINT                PRINT TOTAL RECORDS MESSAGE
         CLOSE (SYSPRINT,,SYSIN,,SYSIN) CLOSE FILES
         L     R13,4(R13)              POINT TO CALLER'S SAVE AREA
         L     R14,12(R13)             PICK UP RETURN ADDRESS
         L     R15,RETCODE             GET RETURN CODE
         LM    R0,R12,20(R13)          RESTORE CALLER'S REGS
         BR    R14                     RETURN TO CALLER
*
*
***********************************************************************
*        DATA DEFINITIONS                                             *
***********************************************************************
*
RETCODE  DC    F'0'                    RETURN CODE
EIGHTY   DC    F'80'                   CONSTANT 80
BLKSIZE  DC    F'0'                    BLOCKSIZE OF LAST BLOCK READ
F32K     DC    F'32720'                LENGTH OF READ FOR  CCW
RR9      DS    F                       RETURN ADDRESS FOR READRECD
ER9      DS    F                       RETURN ADDRESS FOR EXCPREAD
HE9      DS    F                       RETURN ADDRESS FOR  HARDERR
XT9      DS    F                       RETURN ADDRESS FOR ENDXTNT
NEXTRECD DC    A(1)                    ADDRESS OF NEXT RECORD IN BLOCK
ENDOBLK  DC    A(0)                    ADDRESS OF END OF BLOCK
EOFRECD  DC    XL1'00'                 END OF FILE RECORD READ = 01
ENDOXTNT DC    XL1'01'                 END OF EXTENT = 01
NEWMBR   DC    XL1'01'                 START OF NEW MEMBER = 01
ENDOFILE DC    XL1'00'                 END OF FILE = 01
*
RECORD   DS    CL256                   OUTPUT RECORD AREA
*
ADDCARD  DS    0CL84                   ADD RECORD TO START NEW MEMBER
         DC    AL2(84),AL2(0)
         DC    CL17'./ ADD   NAME=MBR'
MBRNBR   DC    CL5'00000'              MEMBER NAME = MBR00000
         DC    CL58' '
*
PRT      DC    CL80' '                 PRINT DATA
LENGERR  DC    CL80'*****ERROR: BLOCK NOT A MULTIPLE OF 80 *****'
BADOPEN  DC    CL80'*****ERROR: UNABLE TO OPEN SYSIN FILE *****'
HARDIOER DC    CL80'*****ERROR: HARD I/O ERROR ON SYSIN FILE *****'
ECBCSW   DS    0CL80                   ECB, CSW, SRCH ADDR LINE
         DC    CL21'ECB COMPLETION CODE: '
ECBCMPCD DS    CL2                     ECB COMPLETION CODE
         DC    CL7', CSW: '
CSWLEFT  DS    CL8                     LEFT HALF OF CSW
         DC    CL1' '
CSWRIGHT DS    CL8                     RIGHT HALF OF CSW
         DC    CL17', CCHHR ADDRESS: '
SRCHADDR DS    CL10                    SEARCH ADDRESS CCHHR
         DC    CL6' '
CCWLINE  DS    0CL80                   CCW LINE
         DC    CL24'COMMAND CHAIN STARTS AT '
CCWADRS  DS    CL8                     CCW START ADDRESS
         DC    CL1':'
CCWLEFT  DS    CL8                     LEFT HALF OF CCW
         DC    CL1' '
CCWRIGHT DS    CL8                     RIGHT HALF OF CCW
         DC    CL30' '
EOFEXCP  DS    0CL80                   EOF EXCP TOTAL LINE
EOFXCPT  DC    XL12'402020206B2020206B202020' TOTAL SYSIN EXCPS
         DC    CL68' TOTAL SYSIN EXCPS'
EOFMEMBR DS    0CL80                   EOF SYSOUT MEMBER TOTAL LINE
EOFMBRS  DC    XL7'4020206B202020'     TOTAL SYSOUT MEMBERS
         DC    CL73' TOTAL SYSOUT MEMBERS'
EOFRCDS  DS    0CL80                   EOF SYSOUT RECORD TOTAL LINE
EOFRECS  DC    XL12'402020206B2020206B202020' TOTAL SYSOUT RECORDS
         DC    CL68' TOTAL SYSOUT RECORDS'
*
MEMBERS  DC    PL3'0'                  NUMBER MEMBERS WRITTEN
RECORDS  DC    PL5'0'                  NUMBER RECORDS WRITTEN
EXCPS    DC    PL5'0'                  NUMBER SYSIN EXCP'S
WORK     DS    PL3                     WORK AREA
XZROS    DC    F'0'                    BINARY ZEROS
DBLWD    DS    D                       DOUBLEWORD WORK AREA
P0       DC    P'0'                    CONSTANT 0
P1       DC    P'1'                    CONSTANT 1
BLANX    DC    CL80' '                 CONSTANT BLANKS
TRCHAR   DC    CL16'0123456789ABCDEF'  MAKE PRINTABLE HEX
*
***********************************************************************
*        FILE DEFINITIONS                                             *
***********************************************************************
*
SYSIN    DCB   MACRF=(E),DDNAME=SYSIN
SYSPRINT DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,                      X
               RECFM=FB,LRECL=80
SYSOUT   DCB   DSORG=PS,MACRF=PM,DDNAME=SYSOUT,                        X
               RECFM=VB,LRECL=255
*
***********************************************************************
*        EXCP DATA AREAS                                              *
***********************************************************************
*
DEBNXEXT DS    A                       ADDR OF NEXT EXTENT
DEBNMEXT DC    H'0'                    NBR EXTENTS REMAINING
*
CMDCHN   DS    0D                      COMMAND CHAIN TO READ DISK
SRCHCCW  CCW   X'31',RCOUNT,X'40',5    SEARCH FOR RECORD
         CCW   8,*-8,0,0               LOOP IF NOT FOUND
         CCW   X'9E',RCOUNT,X'20',32720 READ COUNT, KEY, AND DATA
*
DAECB    DC    F'0'                    EVENT CONTROL BLOCK
*                       *** INPUT/OUTPUT BLOCK FOR DISK USING EXCP
*
*
         DS    0F                      ALIGN TO FULLWORD BOUNDARY
DAIOB    DS    0XL40                   IOB START, 40 BYTES
DAFLAGS  DC    X'42'                   COMMAND CHAIN + UNRELATED
         DC    X'00'                   SYSTEM FLAGS BYTE
DAUCSNS  DC    XL2'00'                 FIRST 2 SENSE BYTES AFTER UNT CH
*                                      BYTE 1 -
*                                        BIT 0 = COMMAND REJECT
*                                        BIT 3 = EQUIPMENT CHECK
*                                        BIT 4 = DATA CHECK
*                                        BIT 5 = OVERRUN
*                                        BIT 6 = TRK CONDITION CHK
*                                        BIT 7 = SEEK CHECK
*                                      BYTE 2 -
*                                        BIT 0 = DATA CHK IN COUNT
*                                        BIT 1 = WRITE TRAK OVERRUN
*                                        BIT 2 = END OF CYLINDER ON M-T
*                                        BIT 3 = INVALID COMMAND SEQ
*                                        BIT 4 = NO RECORD FOUND
*                                        BIT 5 = FILE PROTECTED
*                                        BIT 6 = MISSING ADDRESS MARKER
*                                        BIT 7 = OVERFLOW INCOMPLETE
DAECBCC  DS    0XL1                    ECB COMPLETION CODE
*                                        7F = GOOD I/O COMPLETION
*                                        41 = PERM I/O ERROR, CSW 0/GOO
*                                        42 = EXTENT VIOL NO CSW
*                                        44 = INTERCEPTED NO CSW
*                                        OTHER - HARD ERRORS
DAECBAD  DC    A(DAECB)               ECB ADDRESS
DACSW    DS    0XL8                    CHANNEL STATUS WORD
DANXCCW  DC    A(0)                    ADDR OF LAST EXEC COMM + 8
DAUNST   DC    XL1'00'              *** UNIT STATUS BYTE
*                                      BIT 0 = ATTENTION
*                                      BIT 1 = STATUS MODIFIER
*                                      BIT 2 = CONTROL UNIT END
*                                      BIT 3 = BUSY
*                                      BIT 4 = CHANNEL END
*                                      BIT 5 = DEVICE END
*                                      BIT 6 = UNIT CHECK (ERROR)
*                                      BIT 7 = UNIT EXCEPTION (EOF)
DACHST   DC    XL1'00'              *** CHANNEL STATUS BYTE
*                                      BIT 0 = PCI
*                                      BIT 1 = WRONG LENGTH RECORD
*                                      BIT 2 = CHANNEL PROGRAM CHECK
*                                      BIT 3 = PROTECTION CHECK
*                                      BIT 4 = CHANNEL DATA CHECK
*                                      BIT 5 = CHANNEL CONTROL CHECK
*                                      BIT 6 = INTERFACE CONTROL CHK
*                                      BIT 7 = CHAINING CHECK
DARESID  DC   H'0'                    RESIDUAL COUNT
DASIOCC  DS   0XL1                    COND CODE AFTER SIO COMMAND
DACCWAD  DC   A(CMDCHN)               ADDRESS OF CHANNEL PROGRAM
DADCBAD  DC   A(SYSIN)                ADDRESS OF DCB
         DC    A(0)                   SYSTEM RESTART FIELD
         DC    H'0'                   RESERVED
DARET    DC   H'0'                    NBR RETRIES DURING ERRECOV
DAEXTM   DC   XL1'FF'                 EXTENT NBR (ADD 1 = 00 1ST TIME)
DASEEK   DS   0XL6                    SEEK ADDRESS
DABIN    DC   XL2'00'                 BIN NBR
DASRCH   DS   0XL5                    SEARCH ADDRESS
DACYL    DC   XL2'00'                 CYLINDER NBR
         DC   X'00'                   FIRST BYTE OF HEAD NBR, ZERO
DAHEAD   DC   XL1'00'                 HEAD NBR
DAREC    DC   X'01'                   RECORD NBR
*
***********************************************************************
*        LARGE AREA TO READ BLOCK                                     *
***********************************************************************
*
         LTORG
*
RCOUNT   DS    0XL8                    COUNT RECORD
RCNTCYL  DC    H'0'                    CYLINDER NUMBER
RCNTHD   DC    H'0'                    HEAD (TRACK) NUMBER
RCNTREC  DC    X'01'                   RECORD NUMBER ON TRACK
RCNTKL   DC    X'00'                   KEY LENGTH
RCNTDL   DC    H'0'                    DATA LENGTH
BLOCK    DS    CL32720                 DATA BLOCK FROM PDS
*
***********************************************************************
*        REGISTER EQUATES                                             *
***********************************************************************
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
