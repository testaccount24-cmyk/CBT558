         PRINT NOGEN
ABEND878 CSECT                         NAME OF PROGRAM
         USING ABEND878,R3,R4              ESTABLISH ADDRESSABILITY
         STM   R14,R12,12(R13)
         LR    R3,R15
         LA    R4,4095(R3)
         LA    R4,1(R4)
         CNOP  0,4
         BAL   R15,SAVEAREA+72         BRANCH AROUND SAVE AREA
SAVEAREA DS    18F                     REGISTER SAVE AREA
         ST    R15,8(R13)
         ST    R13,SAVEAREA+4
         LR    R13,R15
         B     *+28
         DC    CL8'ABEND878'           PROGRAM NAME IDENTIFIER
         DC    CL8'&SYSDATE'           ASSEMBLY DATE
         DC    CL8'&SYSTIME'           ASSEMBLY TIME
**********************************************************************
* PROGRAM TO PRODUCE A PRIVATE AREA STORAGE MAP FROM AN IPCS OUTPUT  *
* LISTING CONTAINING A SUMMARY FORMAT AND VERBX VSMDATA. INPUT FILE  *
* IS EXPECTED TO BE RECFM=VBA, LRECL=137                             *
* OUTPUT IS WRITTEN AS RECFM=FBA, LRECL=133.                         *
*                                                                    *
* AUTHOR R THORNTON DEC 1991                                         *
**********************************************************************
*
**********************************************************************
* 1. INITIALIZATION: OPEN FILES, GET STORAGE FOR TABLES              *
**********************************************************************
         OPEN  (PRINT1,OUTPUT,INPUT1)  OPEN FILES
         LA    R2,CDENTLN              GET CDE ENTRY LENGTH
         MH    R2,CDETBLSZ             TABLE SIZE IS 500 ENTRIES
         STORAGE OBTAIN,LENGTH=(2),ADDR=(R12),SP=0 GET CDE TABLE
         ST    R12,CDEBEGIN            SAVE TABLE START ADDRESS
         ST    R12,CDECURR             SET CURRENT ADDRESS
         MVC   0(4,R12),TBLEND         SET END VALUE
         AR    R12,R2                  COMPUTE CDE TABLE END ADDR
         ST    R12,CDEEND              AND SAVE IT
         LA    R2,DQENTLN              GET DQE TABLE LENGTH
         MH    R2,DQETBLSZ             TABLE SIZE IS 1000 ENTRIES
         STORAGE OBTAIN,LENGTH=(2),ADDR=(R12),SP=0 GET DQE TABLE
         ST    R12,DQEBEGIN            SAVE TABLE START ADDRESS
         ST    R12,DQECURR             SET CURRENT ADDRESS
         MVC   0(4,R12),TBLEND         SET END VALUE
         AR    R12,R2                  COMPUTE DQE TABLE END ADDR
         ST    R12,DQEEND              AND SAVE IT
         MVC   PRTLINE,BLANKS          CLEAR PRINT LINE
**********************************************************************
* 2. LOCATE DUMP TITLE AND SAVE IT                                   *
**********************************************************************
DPTSTART BAS   R9,GETLINE              GET A LINE OF THE IPCS LISTING
         CLC   LINEDATA+1(12),DUMPTITL LOOK FOR DUMP TITLE
         BE    DPTSAVE                 BRANCH IF FOUND
         CLC   LINEDATA+5(9),EPHEADER  IS IT THE EP....... HEADER?
         BE    CDESTART                YES
         CLC   LINEDATA+1(12),LDAHDR   IS IT THE LDA HEADER?
         BE    LDASTART                YES
         CLC   LINEDATA+1(15),SPQEHDR  IS IT THE SPQE HEADER?
         BE    SPQSTART                YES
         CLC   LINEDATA+1(14),DQEHDR   IS IT THE DQE HEADER?
         BE    DQESTART                YES
         B     DPTSTART                NONE OF THESE, KEEP LOOKING
DPTSAVE  MVC   DUMPNAME,BLANKS         CLEAR TITLE LINE
         LH    R1,LINELENG             GET LINE LENGTH
         SH    R1,H17                  DEDUCT RDW, CONSTANT LENGTH
         LA    R2,LINEDATA+13          POINT TO BEGINNING OF TITLE
         EX    R1,MOVTITL              SAVE THE TITLE
         B     DPTSTART                CONTINUE
MOVTITL  MVC   DUMPNAME+1(1),0(R2)     SAVE DUMP TITLE
**********************************************************************
* 3. PROCESS CDE DATA FOLLOWING EACH EP....... HEADER                *
**********************************************************************
CDESTART L     R12,CDECURR             POINT TO NEXT AVAILABLE ENTRY
         USING CDETBL,R12
         MVC   CDENAME,LINEDATA+15     MOVE CDENAME TO TABLE
         MVC   CDELENG,QUESTION        INITIALIZE LENGTH
         MVC   CDELDPT,QUESTION        INITIALIZE LOAD POINT
         ZAP   CTR,P0                  RESET READ COUNTER
GETCDE1  BAS   R9,GETLINE              READ 2ND LINE OF DATA
         CLC   LINEDATA+5(9),ENTPTHDR  IS IT THE ENTPT.... HEADER?
         BE    GOTCDE1                 YES
         CP    CTR,P9                  NO, LOOKED THROUGH 9 LINES?
         BL    GETCDE1                 NO, CONTINUE
         B     DPTSTART                YES, SKIP THIS ENTRY
GOTCDE1  MVC   CDEUSE,LINEDATA+55      MOVE CDEUSE TO TABLE
         MVC   CDESPID,LINEDATA+75     MOVE CDESPID TO TABLE
         MVC   CDEATTR,BLANKS          CLEAR ATTRIBUTE FIELD
         LA    R10,CDEATTR             POINT TO START OF ATTR DATA
         ZAP   CTR,P0                  RESET READ COUNTER
GETCDE2  BAS   R9,GETLINE              NEXT LINE OF MODULE DATA
         CLC   LINEDATA+5(9),LNTHHDR   IS IT THE LNTH..... HEADER?
         BE    CDELNTH                 YES
         CP    CTR,P9                  NO, LOOKED THROUGH 9 LINES?
         BNL   DPTSTART                YES, SKIP THIS ENTRY
         LA    R14,LINEDATA+5          POINT TO FIRST BYTE OF ATTRS
         LA    R15,LINEDATA+132        POINT TO END OF INPUT LINE
         LA    R1,CDEATTR+91           POINT TO END OF ATTR DATA
         CR    R10,R1                  PAST END ON ATTR DATA?
         BNL   GETCDE2                 YES
MOVATTR  MVC   0(1,R10),0(R14)         MOVE ATTRIBUTE BYTE
         LA    R10,1(R10)              STEP OVER 1 BYTE
         CLC   0(5,R14),BLANKS         FOUND BLANKS IN INPUT?
         BE    GETCDE2                 YES, END OF ATTRIBUTES
         LA    R14,1(R14)              STEP OVER 1 INPUT BYTE
         CR    R14,R15                 PAST END OF LINE?
         BL    MOVATTR                 NO
         B     GETCDE2                 YES, END OF ATTRIBUTES
CDELNTH  LA    R11,LINEDATA+15         POINT TO MODULE LENGTH
         BAS   R9,CHAR2HEX             CONVERT TO REAL HEX
         MVC   CDELENG,HEX+1           MOVE HEX VALUE OF MODULE LENG
         LA    R11,LINEDATA+55         POINT TO MODULE LOAD POINT
         BAS   R9,CHAR2HEX             CONVERT TO REAL HEX
         NI    HEX,X'7F'               TURN OFF HI ORDER BIT
         MVC   CDELDPT,HEX+1           MOVE MODULE LOAD POINT
         A     R12,CDENTLNG            STEP TO NEXT ENTRY
         ST    R12,CDECURR             UPDATE CURRENT POINTER
         C     R12,CDEEND              PAST END OF TABLE?
         BNL   CDERROR                 YES, ERROR
CDERESET MVC   0(4,R12),TBLEND         SET TABLE END INDICATOR
         B     DPTSTART                CONTINUE
CDERROR  WTO   'CDE TABLE OVERFLOW, EXPAND AND RERUN',ROUTCDE=11
         ABEND 111,DUMP                TERMINATE WITH ERROR
         DROP  R12
**********************************************************************
* 6. LOCATE THE VSM LOCAL DATA AREA HEADER, SAVE LDA DATA            *
**********************************************************************
LDASTART CLC   LINEDATA+5(17),=CL17'+003C  STRTA.... ' 5TH LINE?
         BE    LDAGOT5                 YES
         CLC   LINEDATA+5(17),=CL17'+008C  ESTRR.... ' 9TH LINE?
         BE    LDAGOT9                 YES
         CLC   LINEDATA+5(17),=CL17'+00CC  REGRQ.... ' 12TH LINE?
         BE    LDAGOT12                YES
         CLC   LINEDATA+1(15),SPQEHDR  IS IT THE SPQE HEADER?
         BE    SPQSTART                YES
         CLC   LINEDATA+1(14),DQEHDR   IS IT THE DQE HEADER?
         BE    DQESTART                YES
LDAGET   BAS   R9,GETLINE              NONE OF THESE, KEEP LOOKING
         B     LDASTART                CONTINUE
LDAGOT5  MVC   PVTSTART,LINEDATA+22    SAVE PRIVATE AREA START ADDR
         MVC   PVTSIZE,LINEDATA+42     SAVE PRIVATE AREA SIZE
         B     LDAGET                  CONTINUE
LDAGOT9  MVC   PVTTOP,LINEDATA+82      SAVE PRIVATE AREA CURR TOP
         B     LDAGET                  CONTINUE
LDAGOT12 MVC   PVTRGNSZ,LINEDATA+22    SAVE REGION SIZE FROM JOB
         B     LDAGET                  CONTINUE
**********************************************************************
* 8. AT EACH SPQE AT ADRESS HEADER, SAVE INFO                        *
**********************************************************************
SPQSTART CLC   LINEDATA+54(5),=CL5'SPQA '  SPQE LINE 1?
         BE    SPQEGOT1                YES
         CLC   LINEDATA+17(10),=CL10'+12  KEY  ' SPQE LINE 2?
         BE    SPQEGOT2                YES
         CLC   LINEDATA+11(14),DQEHDR  IS IT THE DQE HEADER?
         BE    DQESTART                YES
SPQGET   BAS   R9,GETLINE              NONE OF THESE, KEEP LOOKING
         B     SPQSTART                CONTINUE
SPQEGOT1 MVC   SPQSPID,LINEDATA+107    SAVE SPQE SUB-POOL ID
         B     SPQGET                  CONTINUE
SPQEGOT2 MVC   SPQPKEY,LINEDATA+27     SAVE SPQE PROTECT KEY
         B     SPQGET                  CONTINUE
**********************************************************************
* 7. FOR EACH DQE, SAVE AREA ADDRESS AND SIZE WITH SPQE INFO IN TABLE*
*    DROP DQE'S OF ZERO SIZE                                         *
**********************************************************************
DQESTART CLC   LINEDATA+107(5),=CL5'SIZE ' IS IT A DQE LINE?
         BE    DQECHEX                 YES
         CLC   LINEDATA+1(15),SPQEHDR  IS IT THE SPQE HEADER?
         BE    SPQSTART                YES
DQEGET   BAS   R9,GETLINE              NONE OF THESE, KEEP LOOKING
         B     DQESTART                CONTINUE
DQECHEX  CLC   LINEDATA+112(8),ZEROS   ANY AREA RESERVED?
         BE    DQEGET                  NO
         CLC   LINEDATA+90(5),=CL5'AREA' IS IT REALLY A DQE?
         BNE   DQEGET                  NO
GOTDQE   L     R12,DQECURR             POINT TO NEXT AVAILABLE ENTRY
         USING DQETBL,R12
         MVC   DQESPID,SPQSPID         MOVE SPQE SPID TO TABLE
         MVC   DQEPKEY,SPQPKEY         MOVE SPQE PROT KEY TO TABLE
         LA    R11,LINEDATA+95         POINT TO DQEAREA
         BAS   R9,CHAR2HEX             CONVERT TO REAL HEX
         NI    HEX,X'7F'               TURN OFF HI BIT
*        CLI   HEX,0                   THIS AREA BELOW THE 16M LINE?
*        BNE   DQEGET                  NO, DROP IT
         MVC   DQEAREA,HEX             AREA ADDRESS TO TABLE ENTRY
         LA    R11,LINEDATA+112        POINT TO DQESIZE
         BAS   R9,CHAR2HEX             CONVERT TO REAL HEX
         MVC   DQESIZE,HEX             AREA ADDRESS TO TABLE ENTRY
         A     R12,DQENTLNG            STEP TO NEXT ENTRY
         ST    R12,DQECURR             UPDATE CURRENT POINTER
         C     R12,DQEEND              PAST END OF TABLE?
         BNL   DQERROR                 YES, ERROR
         MVC   0(4,R12),TBLEND         SET TABLE END INDICATOR
         B     DQEGET                  CONTINUE
DQERROR  WTO   'CDE TABLE OVERFLOW, EXPAND AND RERUN',ROUTCDE=11
         ABEND 222,DUMP                TERMINATE WITH ERROR
         DROP  R12
**********************************************************************
* 8. END OF INPUT DATA. FIRST SORT THE CDE TABLE IN LOAD POINT ORDER *
*    DROP DUPLICATES AND THOSE ABOVE THE 16M LINE                    *
**********************************************************************
SORTCDE  CLC   CDEBEGIN,CDECURR        ANYTHING IN TABLE?
         BE    SORTDQE                 NO
         L     R12,CDEBEGIN            POINT TO 1ST ENTRY
         USING CDETBL,R12
SCSTRTP  LA    R11,CDENTLN(R12)        POINT TO 2ND ENTRY
SCDCKND  C     R11,CDECURR             FINISHED A PASS?
         BL    SCPASS                  NO
         LA    R12,CDENTLN(R12)        YES, STEP TO NEXT ENTRY
         C     R12,CDECURR             END OF SORT?
         BL    SCSTRTP                 NO, START ANOTHER PASS
         B     SORTDQE                 YES, GO SORT DQE TABLE
SCPASS   CLC   CDELDPT-CDENTRY(4,R11),QUESTION VALID LOAD POINT?
         BE    SCBAD                   NO
*        CLI   CDELDPT-CDENTRY(R11),0  IS MODULE ABOVE THE 16M LINE?
*        BNE   SCBAD                   YES
         CLC   CDELENG-CDENTRY(4,R11),QUESTION VALID MODULE LENGTH?
         BE    SCBAD                   NO
         CLC   CDELDPT,CDELDPT-CDENTRY(R11) FIRST:SECOND
         BH    SCSWITCH                FIRST HIGH, SWITCH
         BL    SCADVNC                 FIRST LOW, NO SWITCH
SCBAD    MVC   CDENAME-CDENTRY(16,R11),HIVAL INVALIDATE THE ENTRY
         B     SCADVNC                 FIRST LOW, NO SWITCH
SCSWITCH MVC   CDEHOLD,CDENTRY         MOVE FIRST TO SAVE
         MVC   CDENTRY(CDENTLN),0(R11) COPY SECOND TO FIRST LOCATION
         MVC   0(CDENTLN,R11),CDEHOLD  COPY SAVED FIRST TO SECOND
SCADVNC  LA    R11,CDENTLN(R11)        ADVANCE ONE ENTRY
         B     SCDCKND                 CONTINUE PASS
         DROP  R12
**********************************************************************
* 9. SORT THE DQE TABLE IN AREA ADDRESS ORDER                        *
**********************************************************************
SORTDQE  CLC   DQEBEGIN,DQECURR        ANYTHING IN TABLE?
         BE    STARTRPT                NO
         L     R12,DQEBEGIN            POINT TO 1ST ENTRY
         USING DQETBL,R12
DQSTRTP  LA    R11,DQENTLN(R12)        POINT TO 2ND ENTRY
DQDCKND  C     R11,DQECURR             FINISHED A PASS?
         BL    DQPASS                  NO
         LA    R12,DQENTLN(R12)        YES, STEP TO NEXT ENTRY
         C     R12,DQECURR             END OF SORT?
         BL    DQSTRTP                 NO, START ANOTHER PASS
         B     STARTRPT                YES, GO START REPORT
DQPASS   CLC   DQEAREA-DQENTRY(4,R11),QUESTION VALID AREA ADDRESS?
         BE    DQBAD                   NO
         CLC   DQESIZE-DQENTRY(4,R11),QUESTION VALID AREA SIZE?
         BE    DQBAD                   NO
         CLC   DQEAREA,DQEAREA-DQENTRY(R11) FIRST:SECOND
         BH    DQSWITCH                FIRST HIGH, SWITCH
         BL    DQADVNC                 FIRST LOW, NO SWITCH
DQBAD    MVC   DQEAREA-DQENTRY(4,R11),TBLEND INVALIDATE THE ENTRY
         B     DQADVNC                 FIRST LOW, NO SWITCH
DQSWITCH MVC   DQEHOLD,DQENTRY         MOVE FIRST TO SAVE
         MVC   DQENTRY(DQENTLN),0(R11) COPY SECOND TO FIRST LOCATION
         MVC   0(DQENTLN,R11),DQEHOLD  COPY SAVED FIRST TO SECOND
DQADVNC  LA    R11,DQENTLN(R11)        ADVANCE ONE ENTRY
         B     DQDCKND                 CONTINUE PASS
         DROP  R12
**********************************************************************
* 10. BEGIN PRINTING THE REPORT, FIXED FIELDS FIRST                  *
**********************************************************************
STARTRPT MVC   PRT(12),DUMPTITL        BUILD
         MVI   PCC,C'1'                   DUMP TITLE
         MVC   PRT+13(120),DUMPNAME          PRINT LINE
         BAS   R9,PRINT                         AND PRINT IT
         MVI   PCC,C'0'                BUILD
         MVC   PRT(24),=CL24'PRIVATE AREA STARTS AT: '
         MVC   PRT+25(8),PVTSTART            PRINT LINE
         BAS   R9,PRINT                         AND PRINT IT
         MVI   PCC,C'0'                BUILD
         MVC   PRT(19),=CL19'PRIVATE AREA SIZE: '
         MVC   PRT+20(8),PVTSIZE             PRINT LINE
         BAS   R9,PRINT                         AND PRINT IT
         MVI   PCC,C'0'                BUILD
         MVC   PRT(24),=CL24'PRIVATE AREA TOP IS AT: '
         MVC   PRT+25(8),PVTTOP              PRINT LINE
         BAS   R9,PRINT                         AND PRINT IT
         MVI   PCC,C'0'                BUILD
         MVC   PRT(30),=CL30'REGION SIZE FROM JOB CARD IS: '
         MVC   PRT+31(8),PVTSIZE             PRINT LINE
         BAS   R9,PRINT                         AND PRINT IT
         LA    R12,LEGEND               POINT TO TABLE
LGNDLOOP CLI   0(R12),X'FF'             END OF LEGEND LINE TABLE?
         BE    DQEREPT                  YES
         MVC   PRTLINE,0(R12)           NO, MOVE LINE TO PRINT
         BAS   R9,PRINT                 PRINT IT
         LA    R12,133(R12)             ADVANCE TO NEXT LINE
         B     LGNDLOOP                 CONTINUE
**********************************************************************
* 11. PRINT DQE PORTION OF REPORT                                    *
**********************************************************************
DQEREPT  BAS   R9,HEADING              PRINT HEADING
         CLC   DQEBEGIN,DQECURR        ANYTHING IN TABLE?
         BNE   DQEINIT                 NO
         MVC   PRT,NODQEMSG            PRINT NO DQE
         BAS   R9,PRINT                   MESSAGE AND
         B     CDEREPT                       SKIP THE PRINTOUT
DQEINIT  L     R12,DQEBEGIN            POINT TO FIRST DQE ENTRY
         USING DQETBL,R12
NEXTDQE  LA    R11,DQEAREA             CONVERT AREA
         BAS   R9,HEX2CHAR                ADDRESS TO CHARACTERS
         MVC   PRTAREA,CHARS                AND MOVE TO PRINT
         LA    R11,DQESIZE             CONVERT AREA LENGTH
         BAS   R9,HEX2CHAR                ADDRESS TO CHARACTERS
         MVC   PRTSIZE,CHARS                AND MOVE TO PRINT
         MVC   PRTSPID,DQESPID         SUBPOOL ID TO PRINT
         MVC   PRTPKEY,DQEPKEY         PROT KEY TO PRINT
         BAS   R9,PRINT                PRINT THE LINE
         L     R1,DQEAREA              GET THIS AREA ADDRESS
         A     R1,DQESIZE              COMPUTE NEXT AREA SIZE
         LA    R12,DQENTLN(R12)        STEP TO NEXT ENTRY
         CLC   DQEAREA,TBLEND          END OF DQE TABLE?
         BE    CDEREPT                 YES
         C     R1,DQEAREA              THIS AREA CONTINUOUS TO NEXT?
         BE    NEXTDQE                 YES
         ST    R1,DBLWD                SAVE ADDRESS
         L     R1,DQEAREA              GET NEXT ADDRESS
         S     R1,DBLWD                COMPUTE LENGTH
         ST    R1,DBLWD+4              SAVE IT
         LA    R11,DBLWD               CONVERT AREA
         BAS   R9,HEX2CHAR                ADDRESS TO CHARACTERS
         MVC   PRTAREA,CHARS                AND MOVE TO PRINT
         LA    R11,DBLWD+4             CONVERT AREA LENGTH
         BAS   R9,HEX2CHAR                ADDRESS TO CHARACTERS
         MVC   PRTSIZE,CHARS                AND MOVE TO PRINT
         MVC   PRTSPID,QUESTION        SUBPOOL ID IS UNKNOWN
         MVC   PRTPKEY,QUESTION        PROT KEY IS UNKNOWN
         BAS   R9,PRINT                PRINT THE LINE
         B     NEXTDQE                 CONTINUE
         DROP  R12
**********************************************************************
* 12. PRINT CDE PORTION OF REPORT                                    *
**********************************************************************
CDEREPT  MVC   HEADER1,CDEHDRLN        SET UP HEADINGS
         BAS   R9,HEADING              PRINT HEADING
         CLC   CDEBEGIN,CDECURR        ANYTHING IN TABLE?
         BNE   CDEINIT                 NO
         MVC   PRT,NOCDEMSG            PRINT NO CDE
         BAS   R9,PRINT                   MESSAGE AND
         B     EOJ                           SKIP THE PRINTOUT
CDEINIT  L     R12,CDEBEGIN            POINT TO FIRST CDE ENTRY
         USING CDETBL,R12
NEXTCDE  CLC   CDENAME,HIVAL           INVALID ENTRY?
         BE    EOJ                     YES
         CLC   CDENAME,BLANKS          INVALID ENTRY?
         BE    RPTSTPC                 YES
         MVC   PRTNAME,CDENAME         MODULE NAME TO PRINT
         LA    R11,CDELDPT             CONVERT LOAD POINT
         BAS   R9,HEX2CHAR                ADDRESS TO CHARACTERS
         MVC   PRTLDPT,CHARS                AND MOVE TO PRINT
         LA    R11,CDELENG-1           CONVERT AREA LENGTH
         BAS   R9,HEX2CHAR                ADDRESS TO CHARACTERS
         MVC   PRTLENG,CHARS+2              AND MOVE TO PRINT
         MVC   PRTSPID2,CDESPID        SUBPOOL ID TO PRINT
         MVC   PRTUSE,CDEUSE           USE COUNT TO PRINT
         MVC   PRTATTR,CDEATTR         ATTRIBUTES TO PRINT LINE
         BAS   R9,PRINT                PRINT THE LINE
RPTSTPC  SR    R1,R1                   COMPUTE
         ICM   R1,7,CDELENG               NEXT
         A     R1,CDELDPT                    AVAILABLE ADDRESS
         LA    R12,CDENTLN(R12)        STEP TO NEXT ENTRY
         C     R12,CDECURR             END OF CDE TABLE?
         BNL   EOJ                     YES
         C     R1,CDELDPT              THIS AREA CONTINUOUS TO NEXT?
         BE    NEXTCDE                 YES
         ST    R1,DBLWD                SAVE ADDRESS
         L     R1,CDELDPT              GET NEXT ADDRESS
         S     R1,DBLWD                COMPUTE LENGTH
         ST    R1,DBLWD+4              SAVE IT
         LA    R11,DBLWD               CONVERT AREA
         BAS   R9,HEX2CHAR                ADDRESS TO CHARACTERS
         MVC   PRTLDPT,CHARS                AND MOVE TO PRINT
         LA    R11,DBLWD+4             CONVERT AREA LENGTH
         BAS   R9,HEX2CHAR                ADDRESS TO CHARACTERS
         MVC   PRTLENG,CHARS+2              AND MOVE TO PRINT
         BAS   R9,PRINT                PRINT LINE
         B     NEXTCDE                 CONTINUE
         DROP  R12
**********************************************************************
* 13. END OF JOB                                                     *
**********************************************************************
EOJ      CLOSE (PRINT1,,INPUT1)        CLOSE FILES
         L     R13,4(R13)              GET CALLERS SAVE POINTER
         LM    R14,R12,12(R13)         RESTORE HIS REGS
         SR    R15,R15                 RETURN CODE = 0
         BR    R14                     RETURN TO CALLER
**********************************************************************
* CONVERT PRINTABLE HEX TO REAL HEX. R11 POINTS TO 8-BYTE CHARACTER  *
* STRING CONTAINING 0-9, A-F. RESULT MOVED TO FIELD NAMED HEX. IF    *
* ANY INVALID CHARACTERS IN INPUT, HEX=????                          *
**********************************************************************
CHAR2HEX TRT   0(8,R11),CHEKHEX        TEST INPUT STRING
         BZ    GOODHEX                 OK, CONTINUE
         MVC   HEX,QUESTION            ERROR, MOVE ????
         BR    R9                      AND RETURN
GOODHEX  TR    0(8,R11),MAKEHEX        MAKE C1-C6 INTO FA-FF
         PACK  HEX(5),0(9,R11)         MAKE TRUE HEX VALUE
         BR    R9
**********************************************************************
* CONVERT PRINTABLE HEX TO REAL HEX. R11 POINTS TO 2-BYTE CHARACTER  *
* STRING CONTAINING 0-9, A-F. RESULT MOVED TO 1ST BYTE OF FIELD NAMED*
* HEX. IF INVALID, HEX+1=?                                           *
**********************************************************************
CHAR2BYT TRT   0(2,R11),CHEKHEX        TEST INPUT STRING
         BZ    GOODBYT                 OK, CONTINUE
         MVC   HEX,QUESTION            ERROR, MOVE ????
         BR    R9                      AND RETURN
GOODBYT  TR    0(2,R11),MAKEHEX        MAKE C1-C6 INTO FA-FF
         PACK  HEX(2),0(3,R11)         MAKE TRUE HEX VALUE
         MVI   HEX+1,0                 CLEAR HEX+1
         BR    R9
**********************************************************************
* CONVERT REAL HEX TO PRINTABLE CHARACTERS. ON ENTRY, R11 POINTS TO  *
* A FIELD CONTAINING 4 BYTES OF HEX DATA. ON RETURN, THE CHARACTER   *
* EQUIVALENT IS IN THE FIELD CHARS (8 BYTES).                        *
**********************************************************************
HEX2CHAR UNPK  CHARS(9),0(5,R11)       UNPACK HEX
         TR    CHARS,MAKECHAR-C'0'        AND MAKE PRINTABLE
         BR    R9
**********************************************************************
*        READ A LINE FROM THE IPCS LISTING                           *
**********************************************************************
GETLINE  MVC   IPCSLINE,BLANKS         CLEAR OUT PRECEDING LINE (VRBL)
         GET   INPUT1,IPCSLINE         READ A LINE OF LISTING
         AP    CTR,P1                  ADD TO COUNTER
         BR    R9                      RETURN
**********************************************************************
*        PRINT A LINE                                                *
**********************************************************************
PRINT    PUT   PRINT1,PRTLINE          PRINT A LINE
         MVC   PRTLINE,BLANKS          CLEAR PRINT LINE
         AP    LINECT,P1               ADD 1 TO LINE COUNTER
         CP    LINECT,ENDPAGE          END OF PAGE?
         BNL   HEADING                 YES, DO A HEADING
         BR    R9                      RETURN
**********************************************************************
*        PRINT HEADING FOR REPORTS                                   *
**********************************************************************
HEADING  PUT   PRINT1,HEADER1          PRINT HEADER LINE 1
         ZAP   LINECT,P3               RESET LINE COUNTER
         MVC   PRTLINE,BLANKS          CLEAR PRINT LINE
         MVI   PCC,C'0'                SET DOUBLE SPACING
         BR    R9                      RETURN
**********************************************************************
*        DATA AREAS                                                  *
**********************************************************************
*              *** TITLES, HEADERS, ETC ***
DUMPTITL DC    XL12'C4A4949740E389A393857A40'
LDAHDR   DC    CL14'VSM LOCAL DATA'
EPHEADER DC    CL9'EP.......'
LNTHHDR  DC    CL9'LNTH.....'          LNTH HEADER
ENTPTHDR DC    CL9'ENTPT....'
SPQEHDR  DC    CL15'SPQE AT ADDRESS'
DQEHDR   DC    CL14'DQE AT ADDRESS'
CTR      DC    PL2'0'                  COUNTER
DUMPNAME DC    CL133' NO DUMP TITLE FOUND '
NOCDEMSG DC    CL133' *********** CDE TABLE EMPTY, LISTING SKIPPED ***'
NODQEMSG DC    CL133' *********** DQE TABLE EMPTY, LISTING SKIPPED ***'
LEGEND   DS    0CL133
L1       DC    CL50'0IN THE FIRST REPORT BELOW, THE COLUMN HEADED "STO'
         DC    CL50'RAGE CONTAINS THE BEGINNING ADDRESS OF A STORAGE A'
         DC    CL33'REA (THE REPORT IS IN ASCENDING  '
L2       DC    CL50' STORAGE ADDRESS ORDER), THE LENGTH COLUMN CONTAIN'
         DC    CL50'S THE LENGTH OF THE AREA, SPID IS THE SUBPOOL ID, '
         DC    CL33'AND PKEY IS THE PROTECT KEY USED.'
L3       DC    CL50' ALL DATA IS GIVEN IN HEXADECIMAL. WHEN THE SPID A'
         DC    CL50'ND PKEY COLUMNS CONTAIN ??, THE AREA IS NOT IN USE'
         DC    CL33', AND MIGHT BE AVAILABLE FOR A   '
L4       DC    CL50' GETMAIN. SEE MANUAL LY28-1011, CHAPTER 6 FOR A LI'
         DC    CL50'ST OF PROTECT KEYS AND SUBPOOL IDS. AT 12/30/91, T'
         DC    CL33'HE PROTECT KEYS ARE ASSIGNED AS  '
L5       DC    CL50' FOLLOWS: (0) SUPERVISOR AND SYSTEM USE, (1) JOB S'
         DC    CL50'CHEDULER AND JES2, (2) VSPC, (3) AVM (AVAILABILITY'
         DC    CL33' MANAGER), (4) RESERVED, (5) DATA'
L6       DC    CL50' MANAGEMENT INCLUDING OPEN/CLOSE/EOV, (6) TCAM AND'
         DC    CL50' VTAM, (7) IMS, (8) ALL V=V PROGRAMS, (9-15) V=R P'
         DC    CL33'ROGRAMS.                          '
L7       DC    CL50'0SOME OF THE MORE COMMON SUBPOOLS ARE: (0-7F) FOR '
         DC    CL50'PROBLEM PROGRAM USE, (CB-CD) PRIVATE ELSQA, (D5-D7'
         DC    CL33') PRIVATE ELSQA, (DF-E1) PRIVATE  '
L8       DC    CL50' ELSQA, (E2) COMMON SQA, (E3-E4) COMMON CSA/ECSA, '
         DC    CL50'(E5-E6) PRIVATE HIGH, ((E7) COMMON CSA/ECSA,      '
         DC    CL33'(E9-EB) PRIVATE LSQA/ELSQA,      '
L9       DC    CL50' (EC-ED) PRIVATE HIGH, (EF) COMMON SQA/ESQA, (F0) '
         DC    CL50'PRIVATE LOW, (F1) COMMON CSA/ECSA), (F5) COMMON SQ'
         DC    CL33'A/ESQA, (F7) COMMON ESQA,        '
L10      DC    CL50' (F8) COMMON ESQA, (FA-FC) PRIVATE LOW, (FD-FF) PR'
         DC    CL50'IVATE LSQA/ELSQA.                                 '
         DC    CL33'                                 '
L11      DC    CL50'0THE SECOND REPORT SHOWS THE MODULES LOADED IN STO'
         DC    CL50'RAGE. THIS REPORT IS IN ASCENDING ORDER BY STRTADD'
         DC    CL33'R. ALL DATA EXCEPT **NAME** IS IN'
L12      DC    CL50' HEX. THE COLUMN HEADED **NAME** IS THE MODULE NAM'
         DC    CL50'E, STRTADDR IS THE LOAD POINT ADDRESS, AND LENGTH '
         DC    CL33'IS THE MODULE LENGTH IN BYTES.   '
L13      DC    CL50' SPID IS SUBPOOL ID, #USE IS THE MODULE USE COUNT.'
         DC    CL50'THE ATTRB, ATTR, ATTR2, AND ATTR3 COLUMNS CONTAIN '
         DC    CL33'VARIOUS MODULE ATTRIBUTES AND    '
L14      DC    CL50' INDICATORS. FOR A FULL DESCRIPTION OF THESE FIELD'
         DC    CL50'S, SEE THE MANUAL LY28-1043, THE DESCRIPTION OF TH'
         DC    CL33'E CDE: CDATTRB, CDATTR, ETC.     '
         DC    X'FFFFFFFF'      END OF LEGEND LINE TABLE
*              *** MISCELLANEOUS AREAS ***
DBLWD    DC    D'0'                    DOUBLEWORD WORK AREA
BLANKS   DC    CL133' '                BLANKS
MAKECHAR DC    C'0123456789ABCDEF'     HEX2CHAR TR TABLE
H17      DC    H'17'
FOUND    DC    X'00'                   1=FOUND
XLMISS   DC    PL3'0'                  #UNMATCHED XL'S
P0       DC    PL1'0'
P1       DC    PL1'1'
P3       DC    PL1'3'
P9       DC    P'9'                    CONSTANT 9
LINECT   DC    PL2'0'
ENDPAGE  DC    PL2'58'
HEX      DC    F'0'                    REAL HEX FIELD
         DC    X'00'                   DO NOT MOVE: MUST FOLLOW HEX
CHARS    DS    CL8                     CHARACTER HEX FIELD
         DC    X'00'                   DO NOT MOVE: MUST FOLLOW CHARS
TBLEND   DC    X'FFFFFFFF'             END OF TABLE VALUE
HIVAL    DC    80X'FF'                 HEX FF'S
ZEROS    DC    CL8'00000000'           CHARACTER ZEROS
QUESTION DC    C'????'
*              *** SPQE DATA FIELDS ***
SPQSPID  DC    CL2'??'                 SUBPOOL ID FROM SPQE
SPQPKEY  DC    CL2'??'                 SUBPOOL PROT KEY FROM SPQE
*              *** DQE TABLE PROCESSING FIELDS ***
DQENTLNG DC    A(DQENTLN)              DQE ENTRY LENGTH
DQETBLSZ DC    H'4000'                 NBR DQE TABLE ENTRIES
DQEBEGIN DC    A(0)                    DQE TABLE START POINTER
DQEEND   DC    A(0)                    DQE TABLE END POINTER
DQECURR  DC    A(0)                    DQE TABLE CURRENT POINTER
DQEHOLD  DS    CL(DQENTLN)             DQE ENTRY HOLD FOR SORT
*              *** CDE TABLE PROCESSING FIELDS ***
CDENTLNG DC    A(CDENTLN)               LENGTH OF CDE TABLE ENTRY
CDETBLSZ DC    H'2000'                 NBR CDE TABLE ENTRIES
CDEBEGIN DC    A(0)                    CDE TABLE START POINTER
CDEEND   DC    A(0)                    CDE TABLE END POINTER
CDECURR  DC    A(0)                    CDE TABLE CURRENT POINTER
CDEHOLD  DS    CL(CDENTLN)             CDE ENTRY HOLD FOR SORT
*              *** DATA FROM THE LDA ***
PVTSTART DC    CL8'????????'           PRIVATE AREA START FROM LDA
PVTSIZE  DC    CL8'????????'           PRIVATE AREA SIZE FROM LDA
PVTTOP   DC    CL8'????????'           PRIVATE AREA TOP FROM LDA
PVTRGNSZ DC    CL8'????????'           REGION SIZE FROM LDA
*              *** TRT SCAN TABLE TO VALIDATE CHARACTER HEX ***
CHEKHEX  DC    256X'FF'                VALIDATE CHARACTER HEX
         ORG   CHEKHEX+C'A'
         DC    6X'00'
         ORG   CHEKHEX+C'0'
         DC    10X'00'
         ORG
*              *** TR TABLE TO CONVERT C1-C6 TO FA-FF ***
MAKEHEX  DC    256X'FF'                CREATE FA-FF FROM C1-C6
         ORG   MAKEHEX+C'A'
         DC    6X'FAFBFCFDFEFF'
         ORG   MAKEHEX+C'0'
         DC    CL10'0123456789'
         ORG
*              *** PRINT LINE FOR REPORT ***
PRTLINE  DS    0CL133
PCC      DC    CL1'1'
PRT      DS    0CL132
PRTAREA  DS    CL8                     DQEAREA
         DS    CL2
PRTSIZE  DS    CL8                     DQESIZE
         DS    CL2
         DS    CL1
PRTSPID  DS    CL2                     DQESPID
         DS    CL1
         DS    CL2
         DS    CL1
PRTPKEY  DS    CL2                     DQEPKEY
         DS    CL1
         DS    CL103
         ORG   PRT
PRTNAME  DS    CL8                     CDENAME
         DS    CL2
PRTLDPT  DS    CL8                     CDELDPT
         DS    CL2
PRTLENG  DS    CL6                     CDELENG
         DS    CL2
         DS    CL1
PRTSPID2 DS    CL2                     CDESPID
         DS    CL1
         DS    CL2
PRTUSE   DS    CL4                     CDEUSE
         DS    CL2
PRTATTR  DS    CL92                    CDEATTR
         ORG
*              *** DQE HEADER LINE ***
HEADER1  DS    0CL133
         DC    CL1'1'
         DS    0CL133
         DC    CL8' STORAGE'           DQEAREA
         DC    CL2' '
         DC    CL8'  LENGTH'           DQESIZE
         DC    CL2' '
         DC    CL4'SPID'               DQESPID
         DC    CL2' '
         DC    CL4'PKEY'               DQEPKEY
         DC    CL102' '
*              *** CDE HEADER LINE ***
CDEHDRLN DS    0CL133
         DC    CL1'1'
         DS    0CL133
         DC    CL8'**NAME**'           CDENAME
         DC    CL2' '
         DC    CL8'STRTADDR'           CDELDPT
         DC    CL2' '
         DC    CL6'LENGTH'             CDELENG
         DC    CL2' '
         DC    CL4'SPID'               CDESPID
         DC    CL2' '
         DC    CL4'#USE'               CDEUSE
         DC    CL2' '
         DC    CL92'ATTRIBUTES'
*              *** DATA LINE FROM THE INPUT IPCS LISTING ***
         DS    0H
IPCSLINE DS    0CL137
LINELENG DS    H                       LENGTH OF LINE
         DS    H
LINEDATA DS    0CL133                  LISTING LINE
LINECC   DS    CL1                     ASA CTL CHAR
LINEINFO DS    CL132                   LISTING LINE DATA
*              *** FILE DEFINITIONS ***
PRINT1   DCB   DSORG=PS,MACRF=PM,DDNAME=PRINT1,                        X
               RECFM=FBA,LRECL=133
INPUT1   DCB   DSORG=PS,MACRF=GM,DDNAME=INPUT1,EODAD=SORTCDE,          X
               RECFM=VBA,LRECL=137
         LTORG
*              *** CDE TABLE ENTRY DEFINITION ***
CDETBL   DSECT
CDENTRY  DS    0C
CDENAME  DS    CL8                      MODULE NAME
CDEUSE   DS    CL4                      MODULE USE COUNT
CDESPID  DS    CL2                      SUBPOOL ID
CDELDPT  DS    XL4                      MODULE LOAD POINT
CDELENG  DS    XL3                      MODULE LENGTH
CDEATTR  DS    CL92                     MODULE ATTRIBUTES
CDENTLN  EQU   *-CDENTRY
*              *** DQE TABLE ENTRY DEFINITION ***
DQETBL   DSECT
DQENTRY  DS    0C
DQEAREA  DS    XL4                      BEGIN ADDRESS OF AREA
DQESIZE  DS    XL4                      SIZE OF AREA
DQESPID  DS    CL2                      SUBPOOL ID FROM SPQE
DQEPKEY  DS    CL2                      PROT KEY FROM SPQE
DQENTLN  EQU   *-DQENTRY
*
ABEND878 CSECT
*
***REGISTER EQUATES***
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
