         TITLE '*** ENDVDATA: GET DATA FOR ENDEVOR ELEMENTS ***'
ENDVDATA CSECT
ENDVDATA AMODE 24
ENDVDATA RMODE 24
*********************************************************************
* READS THE ENDEVOR STAGE1 AND STAGE2 VSAM DATA FILES FOR AN        *
* ENDEVOR ENVIRONMENT AND EXTRACTS ELEMENT DATA. ALSO INPUT IS A    *
* FILE OF INFORMATION CONCERNING GENERATE PROCESSORS THAT IS CREATED*
* BY PROGRAM PROCSCAN. I/O FOR THE STAGE1 AND STAGE2 FILES IS VIA   *
* THE STAGE1IO AND STAGE2IO SUBROUTINES.                            *
*                                                                   *
* THE FILES ARE OPENED, AND THE PROCESSRS FILE IS LOADED INTO GOTTEN*
* STORAGE FOR USE IN IDENTIFYING THE COMPILER USED FOR THE PROGRAM. *
*                                                                   *
* THE STAGE2 FILE IS OPENED AND POSITIONED TO THE FIRST ELEMENT     *
* RECORD. FROM THERE, ALL RECORDS ARE READ AND PROCESSED TO THE END *
* OF THE FILE. FOR EACH ELEMENT RECORD WHOSE TYPE IS ASSEM OR COBOL *
* AN OUTPUT RECORD WILL BE WRITTEN. TO DETERMINE THE GENERATE       *
* PROCESSOR USED, A RANDOM READ IS MADE TO THE STAGE1 FILE USING    *
* THE SYSTEM-TYPE#-PROCESSOR_GROUP FROM THE ELEMENT RECORD. THE     *
* RESULTING PROCESSOR NAME IS USED AS AN ARGUMENT TO SEARCH THE     *
* PROCESSOR NAME TABLE FOR THE COMPILER DESCRIPTION.                *
*                                                                   *
* OUTPUT RECORDS CONTAIN THE ELEMENT NAME, COMPILER DESCRIPTOR,     *
* ENVIRONMENT NAME, SYSTEM NAME, SUB-SYSTEM NAME, TYPE NAME,        *
* PROCESSOR GROUP NAME, AND PROCESSOR NAME.                         *
*                                                                   *
* AUTHOR R THORNTON OCT 2000                                        *
*********************************************************************
*
*********************************************************************
*        SAVE REGISTERS, SET UP BASE REGS, CHAIN SAVE AREAS         *
*        R6 POINTS TO ENDEVOR RECORD WORK AREA AT ALL TIMES.        *
*********************************************************************
         USING ENDVDATA,R3,R4
         STM   R14,R12,12(R13)         SAVE CALLER'S REGS
         LR    R3,R15                  SET UP BASE FIRST BASE REG
         LA    R4,4095(R3)             SET UP SECOND
         LA    R4,1(R4)                    BASE REGISTER
         LA    R15,MYSAVE              POINT TO MY REGISTER SAVE AREA
         ST    R15,8(R13)              SET LSA IN CALLER'S SAVE
         ST    R13,4(R15)              SET HSA IN MY SAVE AREA
         LR    R13,R15                 SET UP SAVE AREA POINTER
         LA    R6,RECDWORK             SET UP BASE FOR ENDEVOR RECORDS
         B     OPENS                   BRANCH AROUND CONSTANTS
         DC    CL8'ENDVDATA'           PROGRAM NAME IDENTIFIER
         DC    CL8'&SYSDATE'           ASSEMBLY DATE
         DC    CL8'&SYSTIME'           ASSEMBLY TIME
MYSAVE   DS    18F                     MY REGISTER SAVE AREA
*********************************************************************
*        OPEN FILES. CALL STAGE2IO AND STAGE1IO SUBROUTINES TO OPEN *
*        THE ENDEVOR STAGE FILES. POSITION THE STAGE2 FILE TO ITS   *
*        FIRST ELEMENT RECORD. LOAD THE PROCESRS FILE DATA INTO     *
*        GOTTEN STORAGE AS THE PROCTABL.                            *
*********************************************************************
OPENS    OPEN  (OUTPUT1,OUTPUT,PROCESRS) OPEN THE FILES
         LA    R1,STG1PARM             POINT TO OPEN PARMS
         CALL  STAGE1IO                GO OPEN THE STAGE1 FILE
         LA    R1,STG2PARM             POINT TO OPEN PARMS
         CALL  STAGE2IO                GO OPEN THE STAGE2 FILE
         MVI   REQUEST2,POSITREQ       SET STAGE2 REQUEST TO POSITION
         USING EEKEY,R6
         MVC   EEKEY(28),BLANKS        SET KEY TO ALL BLANKS
         LA    R1,STG2PARM             POINT TO POSITION PARMS
         CALL  STAGE2IO                POSITION TO THE BLANK RECORD
         CLI   EXCIND,OK               SUCCESSFUL?
         BE    TBLDST                  YES
         WTO   'ENDVDATA: POSITIONING TO BLANK RECORD FAILED',         C
               ROUTCDE=11
         ABEND 111,DUMP                TERMINATE IN ERROR
TBLDST   L     R11,PTLENG              LENGTH FOR 200 ENTRIES
TABLOAD  STORAGE OBTAIN,LENGTH=(R11),ADDR=(R12),SP=0 GET TABLE STORAGE
         ST    R12,PTADDR              SAVE TABLE ADDRESS FOR SEARCHES
         AR    R11,R12                 R11 POINTS PAST END OF TABLE
         USING PROCTABL,R12
TABLREAD GET   PROCESRS                GET A PROCESSOR RECORD
         CLI   0(R1),C'*'              COMMENT RECORD?
         BE    TABLREAD                YES
         MVC   0(L'PTENTRY,R12),0(R1)  PUT ENTRY IN TABLE
         LA    R12,L'PTENTRY(R12)      STEP TO NEXT ENTRY
         CR    R12,R11                 PAST END OF TABLE?
         BL    TABLREAD                NO, CONTINUE LOADING
         WTO   'ENDVDATA: TOO MANY PROCESRS ENTRIES, TABLE FULL',      X
               ROUTCDE=11
         ABEND 555,DUMP                TERMINATE IN ERROR
TBLDEND  MVC   0(8,R12),HEXFFS         SET TABLE STOPPER
         DROP  R12
TSTBLNK  MVI   REQUEST2,SEQRDREQ       SET STAGE2 REQUEST TO SEQNTL RD
         MVI   REQUEST1,RANRDREQ       SET STAGE1 REQUEST TO RANDOM RD
         CLC   EEKEY(28),BLANKS        READ BLANK RECORD?
         BNE   GOTREC                  NO, AT FIRST SYSTEM RECORD
*********************************************************************
*        MAINLINE PROCESSING                                        *
*********************************************************************
MAINLINE LA    R1,STG2PARM             POINT TO SEQUENTIAL READ PARMS
         CALL  STAGE2IO                READ NEXT SEQUENTIAL RECORD
         CLI   EXCIND,OK               SUCCESSFUL?
         BE    GOTREC                  YES
         CLI   EXCIND,ENDOFIL          END OF FILE?
         BE    EOJ                     YES, ALL THROUGH
         WTO   'ENDVDATA: ERROR READING THE STAGE2IO',ROUTCDE=11
         ABEND 333,DUMP                TERMINATE IN ERROR
GOTREC   CLC   EEKTYPNO,=C'S '         THIS A SYSTEM RECORD?
         BE    MAINLINE                YES
         CLC   EEKTYPNO,=C'ST'         THIS A 2ND SYSTEM RECORD?
         BE    MAINLINE                YES
         CLC   EEKTYPNO,=C'SS'         THIS A SUBSYSTEM RECORD?
         BE    MAINLINE                YES
         CLI   EEKSUBSY,X'0D'          THIS A DATASET NAME RECORD?
         BE    MAINLINE                YES
         MVZ   TSTNUM,EEKTYPNO         MOVE ZONES FOR TEST
         CLC   TSTNUM,ZEROS            TYPE NUMBER ZONED DECIMAL?
         BNE   MAINLINE                NO, UNIDENTIFIED RECORD
         CLC   EEKELEM,BLANKS          THIS AN ELEMENT RECORD?
         BE    MAINLINE                NO, A TYPE RECORD
         CLC   EEFMTYPE,=CL8'COBOL'    THIS A COBOL ELEMENT?
         BE    FORMAT                  YES
         CLC   EEFMTYPE,=CL8'ASSEM'    THIS AN ASSEMBLER ENTRY?
         BNE   MAINLINE                NO
FORMAT   MVC   OENV,EEFMENV            ENVIRONMENT NAME TO OUTPUT
         MVC   OSYS,EEFMSYST           SYSTEM NAME TO OUTPUT
         MVC   OSUB,EEFMSUBS           SUBSYSTEM NAME TO OUTPUT
         MVC   OELE,EEFMELEM           ELEMENT NAME TO OUTPUT
         MVC   OTYPE,EEFMTYPE          TYPE NAME TO OUTPUT
         MVC   OPRCGRP,EEPRCGRP        PROCESSOR GROUP NAME TO OUTPUT
         MVC   OPROC,QUESTNS           FILL PROCESSOR NAME WITH ?'S
         MVC   OCOMP,QUESTNS           FILL COMPILER DESC WITH ?'S
         MVC   KEYAREA(2),=X'00CD'     BUILD
         MVC   KEYAREA+2(8),EEFMSYST     STAGE1
         MVC   KEYAREA+10(2),EEKTYPNO      KEY
         MVC   KEYAREA+12(8),EEPRCGRP        TO READ
         MVI   KEYAREA+20,X'01'                 THE GENERATE
         MVC   KEYAREA+21(7),HEX00S                   PROCESSOR RECORD
RETRY1   LA    R1,STG1PARM             POINT TO STAGE1IO PARMS
         CALL  STAGE1IO                GO READ THE PROCESSOR RECORD
         CLI   EXCIND,OK               SUCCESSFUL?
         BE    GETGNP                  YES
         CLC   KEYAREA+10(2),=CL2'99'  ALL TYPE NUMBERS ALREADY READ?
         BE    PUTOUT                  YES
         PACK  WORK,KEYAREA+10(2)      NO,
         AP    WORK,=P'1'                ADD 1
         UNPK  KEYAREA+10(2),WORK          AND
         OI    KEYAREA+11,X'F0'              CLEAR SIGN
         B     RETRY1                          THEN GO TRY AGAIN
         DROP  R6
         USING EPKEY,R6
GETGNP   MVC   OPROC,EPPRCNAM          GENERATE PROCESSOR NAME TO OUT
         DROP  R6
         L     R1,PTADDR               POINT TO PROCESSOR TABLE
         USING PROCTABL,R1
FINDPROC CLI   PTENTRY,X'FF'           END OF TABLE?
         BE    PUTOUT                  YES, NO RECORD FOUND
         CLC   PTPROC,OPROC            FOUND THE TABLE ENTRY?
         BE    GOTPROC                 YES
         LA    R1,L'PTENTRY(R1)        NO, STEP TO NEXT TABLE ENTRY
         B     FINDPROC                LOOP TO FIND PROCESSOR ENTRY
GOTPROC  MVC   OCOMP,PTDESC            MOVE PROCESSOR DESCRIPTOR
         DROP  R1
PUTOUT   PUT   OUTPUT1,OUTREC          WRITE OUTPUT RECORD
         B     MAINLINE                GO READ NEXT RECORD
*********************************************************************
*        END OF JOB. CLOSE FILES AND TERMINATE PROCESSING           *
*********************************************************************
EOJ      CLOSE (OUTPUT1,,PROCESRS)     CLOSE FILES
         MVI   REQUEST1,CLOSEREQ       SET STAGE1 REQUEST TO CLOSE
         LA    R1,STG1PARM             POINT TO CLOSE PARMS
         CALL  STAGE1IO                GO CLOSE THE STAGE1 FILE
         MVI   REQUEST2,CLOSEREQ       SET STAGE2 REQUEST TO CLOSE
         LA    R1,STG2PARM             POINT TO CLOSE PARMS
         CALL  STAGE2IO                GO CLOSE THE STAGE2 FILE
         L     R13,4(R13)              POINT TO CALLER'S SAVE AREA
         LM    R14,R12,12(R13)         RESTORE CALLER'S REGS
         SR    R15,R15                 SET RETURN CODE TO ZERO
         BR    R14                     RETURN
*********************************************************************
*        STORAGE AND FILE AREAS                                     *
*********************************************************************
DBLWD    DS    D                       DOUBLEWORD WORK AREA
PTADDR   DC    A(0)                    PROCESSOR TABLE ADDRESS
PTLENG   DC    A(200*L'PTENTRY)        PROCESSOR TABLE LENGTH
BLANKS   DC    CL80' '                 CONSTANT BLANKS
HEXFFS   DC    XL8'FFFFFFFFFFFFFFFF'   CONSTANT HEX FF'S
HEX00S   DC    XL8'0000000000000000'   CONSTANT HEX 00'S
QUESTNS  DC    11C'?'                  CONSTANT QUESTION MARKS
TSTNUM   DC    CL2'00'                 ZONED DECIMAL TEST AREA
ZEROS    DC    CL2'00'                 ZONED DECIMAL ZEROS
WORK     DS    CL2                     WORK FIELD
*********************************************************************
*  STAGE_IO SUBROUTINE PARAMETERS AND FIELDS                        *
*********************************************************************
STG1PARM DS    0F                      OPEN PARMS FOR STAGE2IO
         DC    A(REQUEST1)               REQUEST CODE
         DC    A(KEYAREA)                KEY AREA (NOT USED HERE)
         DC    A(RECDWORK)               RECORD WORK AREA (NOT USED)
         DC    AL1(128),AL3(EXCIND)      EXCEPTION INDICATOR
STG2PARM DS    0F                      OPEN PARMS FOR STAGE2IO
         DC    A(REQUEST2)               REQUEST CODE
         DC    A(KEYAREA)                KEY AREA (NOT USED HERE)
         DC    A(RECDWORK)               RECORD WORK AREA (NOT USED)
         DC    AL1(128),AL3(EXCIND)      EXCEPTION INDICATOR
REQUEST1 DC    CL1'O'                  STAGE1IO REQUEST (INIT TO OPEN)
REQUEST2 DC    CL1'O'                  STAGE2IO REQUEST (INIT TO OPEN)
OPENREQ  EQU   C'O'                    OPEN REQUEST INDICATOR
RANRDREQ EQU   C'R'                    RANDOM READ REQUEST
POSITREQ EQU   C'P'                    POSITION REQUEST
CLOSEREQ EQU   C'C'                    CLOSE REQUEST
SEQRDREQ EQU   C'S'                    SEQUENTIAL READ REQUEST
RECDWORK DS    0CL1017                 ENDEVOR DATA RECORD AREA
KEYAREA  DS    CL28                      RECORD KEY
DATAAREA DS    CL989                     RECORD DATA
EXCIND   DC    CL1' '                  STAGE2IO EXCEPTION INDICATOR
OK       EQU   C' '                      SUCCESSFUL OPERATION
NORECFD  EQU   C'N'                      NO RECORD FOUND (RANDOM)
ENDOFIL  EQU   C'E'                      END OF FILE (SEQUENTIAL)
***********************************************************************
*  OUTPUT FILE: RECORD AREA AND DCB                                   *
***********************************************************************
OUTREC   DS    0CL80           OUTPUT RECORD
OELE     DC    CL8' '            ELEMENT NAME
         DC    CL1' '
OCOMP    DC    CL11' '           COMPILER DESCRIPTOR
         DC    CL1' '
OENV     DC    CL8' '            ENVIRONMENT NAME
         DC    CL1' '
OSYS     DC    CL8' '            SYSTEM NAME
         DC    CL1' '
OSUB     DC    CL8' '            SUBSYSTEM NAME
         DC    CL1' '
OTYPE    DC    CL5' '            TYPE NAME
         DC    CL1' '
OPRCGRP  DC    CL8' '            PROCESSOR GROUP NAME
         DC    CL1' '
OPROC    DC    CL8' '            PROCESSOR NAME
         DC    CL9' '
*
OUTPUT1  DCB   DSORG=PS,MACRF=PM,DDNAME=OUTPUT1,                       X
               RECFM=FB,LRECL=80
*
PROCESRS DCB   DSORG=PS,MACRF=GL,DDNAME=PROCESRS,EODAD=TBLDEND,        X
               RECFM=FB,LRECL=80
***********************************************************************
*  RECORD DESCRIPTION FOR ELEMENT RECORDS OF EADMIN.ENDEVOR.STAGE1/2  *
***********************************************************************
***********************************************************************
*  RECORD DESCRIPTION FOR ELEMENT RECORDS OF EADMIN.ENDEVOR.STAGE1/2  *
*  FIRST RECORD IN THE DATASET HAS KEY ALL HEX 00'S AND IS NOT DEFINED*
*  HERE. ALSO, THE RECORD PRECEDING THE FIRST SYSTEM RECORD IS ALL    *
*  BLANKS (KEY AND DATA), AND IT IS NOT DEFINED HERE, EITHER.         *
***********************************************************************
ENDVSTGS DSECT ,             STAGE1/2 RECORDS (640-1017 BYTES)
***********************************************************************
* APPROVER GROUP DEFINITION RECORDS: DEFINES THE VALID USERIDS IN     *
* THE SPECIFIED APPROVER GROUP. ONE RECORD PER APPROVER GROUP NAME.   *
***********************************************************************
EAKEY    DSECT ,               RECORD KEY
EAKEYF1  DS  XL2                 HEX'00C8'
EAKEYF2  DS  CL3                 BLANKS
EAKAPGNM DS  CL8                 APPROVER GROUP NAME
EAKEYF4  DS  CL15                BLANKS
*
EADATA   DS  0C                RECORD DATA
EAENVNM  DS  CL8                 ENVIRONMENT NAME
         DS  XL18
EAUSRID1 DS  CL8                 USERID
EADESCR  DS  CL50                APPROVER GROUP DESCRIPTION
EAVALIDS DS  0CL8                VALID USER IDS TABLE
         DS  112CL8                 "
         DS  CL1
***********************************************************************
* APPROVER GROUP NAME RECORDS: PROVIDES THE APPROVER GROUP NAME FOR   *
* A SPECIFIED SYSTEM-SUBSYSTEM-TYPE. ANY OR ALL THESE SPECIFICATIONS  *
* MAY BE A NAME OR AN ASTERISK TO INDICATE ALL SYSTEMS AND/OR SUB-    *
* SYSTEMS AND/OR TYPES. THERE IS AT LEAST ONE RECORD FOR EACH SYSTEM- *
* SUBSYSTEM-TYPE COMBINATION. HOWEVER, SINCE A GIVEN COMBINATION MAY  *
* PERMIT MULTIPLE APPROVER GROUPS, SEVERAL RECORDS MAY EXIST FOR A    *
* COMBINATION. THESE ARE MADE UNIQUE BY THE ENSUBNO KEY FIELD.        *
***********************************************************************
ENKEY    DSECT ,               RECORD KEY
ENKEYF1  DS  XL2                 HEX'00C9'
ENKSYSTM DS  CL8                 SYSTEM NAME OR *
ENKSUBSY DS  CL8                 SUBSYSTEM NAME OR *
ENKTYPE  DS  CL8                 TYPE NAME OR *
         DS  CL1                 CHAR'2'
ENKSUBNO DS  XL1                 SEQ ASCENDING NUMBER BEGINNING HEX'00'
*
ENDATA   DS  0C                RECORD DATA
ENENVNM  DS  CL8                 ENVIRONMENT NAME
         DS  XL14
ENUSRID1 DS  CL8                 USERID
ENAPGNM  DS  CL8                 APPROVER GROUP NAME
***********************************************************************
* PROCESSOR GROUP RECORDS: THERE IS ONE OF THESE RECORDS FOR EACH     *
* SYSTEM-TYPE_NUMBER-PROCESSOR_GROUP_NAME, AND IT IS FOLLOWED BY THE  *
* PROCESSOR RECORDS.                                                  *
***********************************************************************
EGKEY    DSECT ,               RECORD KEY
EGKEYF1  DS  XL2                 HEX'00CD'
EGKSYSTM DS  CL8                 SYSTEM NAME
EGKTYPNO DS  CL2                 TYPE NUMBER
EGKPGNM  DS  CL8                 PROCESSOR GROUP NAME
EGKEYF4  DS  XL8                 HEX'00'S
*
EGDATA   DS  0C                RECORD DATA
         DS  XL4
EGUSRID1 DS  CL8                 USERID
         DS  XL7
EGDATIM1 DS  CL12                DDMMMYYHH:MM
EGDESCR  DS  CL50                DESCRIPTION
EGPGRPNM DS  CL8                 PROCESSOR GROUP NAME
         DS  CL900
***********************************************************************
* PROCESSOR RECORDS: THERE ARE THREE PROCESSOR RECORDS THAT FOLLOW    *
* EACH PROCESSOR GROUP RECORD. THEY ARE DISTINGUISHED BY THE EPKEYID  *
* FIELD. THE HEX'01' RECORD IS FOR THE GENERATE PROCESSOR, THE HEX'02'*
* RECORD IS FOR THE DELETE PROCESSOR, AND THE HEX'03' RECORD IS FOR   *
* THE MOVE PROCESSOR. EACH PROCESSOR RECORD MAY CONTAIN OVERRIDE      *
* VALUES FOR SYMBOLICS DEFINED IN THE PROCESSOR GROUP.                *
***********************************************************************
EPKEY    DSECT ,               RECORD KEY
         DS  XL2                 HEX'00CD'
EPKSYSTM DS  CL8                 SYSTEM NAME
EPKTYPNO DS  CL2                 ENDEVOR TYPE NUMBER
EPKPGRNM DS  CL8                 PROCESSOR GROUP NAME
EPKEYID  DS  XL1                 HEX'01'=GENERATE PROCESSOR RECORD,
*                                HEX'02'=DELETE PROCESSOR RECORD,
*                                HEX'03'=MOVE PROCESSOR RECORD,
EPKEYF6  DS  XL7                 HEX'00'S
*
EPDATA   DS  0C                RECORD DATA
EPPRCNAM DS  CL8                 PROCESSOR NAME
         DS  CL1
         DS  XL39
EPNBRPRS DS  XL2                 NUMBER SYMBOLIC OVERRIDE PAIRS
EPVRBLPR DS  0X                  VARIABLE DATA: SYMBOLIC/VALUE PAIRS
EPSYMLN  DS  0XL1                  LENGTH OF FOLLOWING SYMBOLIC NAME
EPSYMNAM DS  0XL8                  SYMBOLIC NAME BEING OVERRIDDEN
EPVALLN  DS  0XL1                  LENGTH OF FOLLOWING VALUE
EPVALUE  DS  0X                    VALUE FOR THE OVERIDING SYMBOLIC
         DS  XL939
***********************************************************************
* SYSTEM RECORDS: THERE IS ONE OF THESE RECORDS FOR EACH SYSTEM NAME. *
* A SECOND SYSTEM RECORD FOLLOWS THE FIRST, WHICH HAS THE LETTER 'T'  *
* IN THE LAST BYTE OF THE KEY. IT IS NOT DESCRIBED HERE.              *
***********************************************************************
ESKEY    DSECT ,               RECORD KEY
ESKSYSTM DS  CL8                 SYSTEM NAME
ESKEYF2  DS  XL18                HEX'00'S
ESKEYF3  DS  CL1                 CHAR'S'
ESKEYF4  DS  CL1                 BLANK
*
ESDATA   DS  0C                RECORD DATA
         DS  XL8
ESUSRID1 DS  CL8                 USERID
ESDESCR  DS  CL50                DESCRIPTION
         DS  CL2
ESPRLDS  DS  CL44                DSNAME FOR PROCESSOR LOAD MODULES
ESLSTDS  DS  CL44                DSNAME FOR LISTINGS LIBRARY
         DS  CL2
         DS  XL12
ESSYSTEM DS  CL8                 SYSTEM NAME
         DS  XL16
         DS  CL795
***********************************************************************
* DATASET NAME RECORDS: THERE ARE UP TO 100 OF THESE RECORDS WHICH    *
* CONTAIN DATASET NAMES FOR VARIOUS FILES USED BY ENDEVOR PROCESSES.  *
***********************************************************************
EDKEY    DSECT ,               RECORD KEY
EDKSYSTM DS  CL8                 SYSTEM NAME
EDKEYF2  DS  XL1                 HEX'0D'
EDKEYF3  DS  CL17                17 BLANKS
EDKFILNO DS  CL2                 ZONED DECIMAL FILE NUMBER 00-99
*
EDDATA   DS  0C                RECORD DATA
         DS  CL2
EDDSNAME DS  CL44                DSNAME
EDUSRID  DS  CL8                 USERID
EDDATIM  DS  CL12                DDMMMYYHH:MM
         DS  XL6
         DS  CL917
***********************************************************************
* TYPE RECORDS. THERE IS ONE TYPE RECORD FOR EACH ENDEVOR TYPE THAT   *
*               IS DEFINED TO A SYSTEM.                               *
***********************************************************************
ETKEY    DSECT ,               RECORD KEY
ETKSYSTM DS  CL8                 SYSTEM NAME
ETKFLD2  DS  CL18                18 BLANKS
ETKTYPNO DS  CL2                 ENDEVOR TYPE NUMBER
*
ETDATA   DS  0C                RECORD DATA
ETYPNAM1 DS  CL8                 TYPE NAME
         DS  ZL4
         DS  CL2
ETPROCNM DS  CL8                 PROCESSOR NAME OR *NOPROC*
         DS  CL75
         DS  XL6
ETUSRID1 DS  CL8                 USERID
         DS  XL6
ETDATIM1 DS  CL12                DATE/TIME DDMMMYYHH:MM
ETYPNAM2 DS  CL8                 TYPE NAME
ETYPNAM3 DS  CL8                 TYPE NAME
ETYPNAM4 DS  CL8                 TYPE NAME
         DS  ZL8
         DS  XL33
         DS  CL1
         DS  CL2
ETDESCR  DS  CL50                TYPE DESCRIPTION
         DS  XL19
         DS  XL723
***********************************************************************
* SUBSYSTEM RECORDS: THERE IS ONE SUB-SYSTEM RECORD FOR EACH SUBSYSTEM*
*                    DEFINED TO ENDEVOR UNDER A SYSTEM.               *
***********************************************************************
EUKEY    DSECT ,               RECORD KEY
EUKSYSTM DS  CL8                 SYSTEM NAME
EUKSUBSY DS  CL8                 SUBSYSTEM NAME
EUKFLD3  DS  XL10                HEX'00'S
EUKFLD4  DS  CL2                 CHAR'SS'
*
EUDATA   DS  0C                RECORD DATA
         DS  XL8
EUUSRID1 DS  CL8                 USER ID
EUDESCR  DS  CL50                SUBSYSTEM DESCRIPTION
         DS  XL2                 THIS AND FOLLOWING DATA MAY NOT BE
*                                   PRESENT
EUSUBSYS DS  CL8                 SUB-SYSTEM NAME
         DS  XL913
***********************************************************************
* ELEMENT RECORDS                                                     *
***********************************************************************
EEKEY    DSECT ,               RECORD KEY
EEKSYSTM DS  CL8                 SYSTEM NAME
EEKSUBSY DS  CL8                 SUBSYSTEM NAME
EEKELEM  DS  CL8                 ELEMENT NAME
         DS  CL2                 BLANKS
EEKTYPNO DS  CL2                 ELEMENT TYPE NUMBER
*
EEDATA   DS  0C                RECORD DATA
         DS  CL28
EEBASEDT DS  CL10                YYMMDDHHMM: BASE DATE/TIME
         DS  CL7
EELASTDT DS  CL10                YYMMDDHHMM: LAST ACTION DATE/TIME
         DS  CL6
EECURSDT DS  CL10                YYMMDDHHMM: CURRENT SOURCE DT/TIME
EECURSUI DS  CL8                 CURRENT SOURCE USERID
         DS  CL18
EEVERSN  DS  XL2                 CURRENT VERSION
EELEVEL  DS  XL2                 CURRENT SOURCE LEVEL
EECSDLTA DS  CL1                 CURRENT SOURCE DELTA FORMAT
         DS  CL1
EELACCID DS  CL12                LAST ACTION CCID
EELAUID  DS  CL8                 LAST ACTION USERID
         DS  CL28
EELAACTN DS  CL8                 LAST ACTION NAME
EELAACPG DS  CL8                 LAST ACTION PROCESSOR GROUP NAME
         DS  CL3
EELAPRC  DS  XL2                 LAST ACTION PROCESSOR RETCODE
         DS  XL1
EELADT2  DS  CL10                YYMMDDHHMM: LAST ACTION DATE/TIME
EELAUID2 DS  CL8                 LAST ACTION USERID
EELACOMT DS  CL40                LAST ACTION COMMENT
EELADESC DS  CL40                LAST ACTION DESCRIPTION
EECSCOMT DS  CL40                CURRENT SOURCE COMMENT
EEGENCMT DS  CL40                GENERATE COMMENT
EEBASUID DS  CL8                 BASE USERID
EEGENUID DS  CL8                 GENERATE USERID
EEGENDT  DS  CL10                YYMMDDHHMM: GENERATE DATE/TIME
EECSFRMD DS  CL44                CURRENT SOURCE FROM DSNAME
EECSFRMM DS  CL8                 CURRENT SOURCE FROM MEMBER NAME
         DS  CL2
EERETV2D DS  CL44                RETRIEVE TO DSNAME
         DS  CL62
EEGENDLF DS  CL1                  GENERATE DELTA FORMAT
         DS  CL31
EEFMENV  DS  CL8                  FROM ENDEVOR ENVIRONMENT
EEFMSYST DS  CL8                  FROM ENDEVOR SYSTEM
EEFMSUBS DS  CL8                  FROM ENDEVOR SUBSYSTEM
EEFMELEM DS  CL8                  FROM ENDEVOR ELEMENT
         DS  CL2
EEFMTYPE DS  CL8                  FROM ENDEVOR TYPE
EEFMSTAG DS  CL1                  FROM ENDEVOR STAGE
EESRCPKG DS  CL8                  SOURCE PACKAGE ID
         DS  CL16
EEOUTPKG DS  CL8                  PACKAGE ID OUTPUT
         DS  CL16
EEPRCGRP DS  CL8                  PROCESSOR GROUP
EELEACMT DS  CL40                 LAST ELEMENT ACTION COMMENT
EECSCCID DS  CL12                 CURRENT SOURCE CCID
         DS  CL8
EELEADT  DS  CL10                 YYMMDDHHMM: LAST ELEMENT ACTN D/T
EEGENCCD DS  CL12                 GENERATE CCID
EERETCCD DS  CL12                 RETRIEVE CCID
EESIGNID DS  CL8                  SIGNOUT USERID
EELEAACT DS  CL8                  LAST ELEMENT ACTION ACTION
         DS  CL210
*
*        PROCESSOR TABLE RECORD DESCRIPTION
PROCTABL DSECT ,               PROCESSOR TABLE ENTRY DESCRIPTION
PTENTRY  DS    0CL72
PTPROC   DS    CL8               PROCESSOR NAME
PTCOMP   DS    CL8               PROGRAM NAME FOR THE COMPILER
PTDESC   DS    CL11              COMPILER DESCRIPTOR
PTFLAG   DS    CL1               *=STEPLIB, BLANK=LNKLST
PTDSNAME DS    CL44              DSNAME OF THE COMPILER LIBRARY
ENDVDATA CSECT
         LTORG
*********************************************************************
*             REGISTER EQUATES                                      *
*********************************************************************
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
