         PRINT NOGEN
COB2ASM  SVLNK R3,R4
******************************************************************
* PROGRAM TO CREATE AN ASSEMBLER RECORD DESCRIPTION USING A COBOL*
* RECORD DESCRIPTION AS INPUT. THE INPUT FILE IS EXPECTED TO BE A*
* VALID PORTION OF A COBOL PROGRAM WITH THE FORMAT:              *
*  COL  1-6  LINE NUMBER OR BLANK                                *
*  COL   7   CONTINUATION/COMMENT INDICATOR. AN * HERE INDICATES *
*            A COMMENT STATEMENT (WHICH IS IGNORED). ANY OTHER   *
*            VALUE IN THIS FIELD WILL RESULT IN AN ERROR MESSAGE *
*            AND U0888 ABEND.                                    *
*  COL  8-11 MARGIN A. THE FIRST NON-COMMENT RECORD IN THE INPUT *
*            FILE MUST CONTAIN "01  " IN MARGIN A. ALL OTHER NON-*
*            COMMENT STATEMENTS ON INPUT MUST CONTAIN BLANKS IN  *
*            MARGIN A OR THE PROGRAM WILL WRITE AN ERROR MESSAGE *
*            AND ABEND WITH U0888.                               *
*  COL 12-72 MARGIN B. CONTAINS VALID COBOL DATA DIVISION STATE- *
*            MENTS. AFTER THE INITIAL 01 LEVEL, ONLY LEVELS 02-49*
*            AND 88 ARE VALID. ANY OTHER LEVEL NUMBER WILL CAUSE *
*            AN ERROR MESSAGE AND U0888 ABEND.                   *
*  COL 73-80 UNUSED. MAY CONTAIN ANY DESIRED DATA.               *
*                                                                *
* ONLY A SINGLE RECORD DESCRIPTION IS PROCESSED, AND THE FIRST   *
* NON-COMMENT INPUT RECORD MUST CONTAIN 01 IN COLUMNS 8 AND 9,   *
* AND BLANKS IN COLUMNS 10 AND 11. THE INPUT MUST CONTAIN THIS   *
* INITIAL 01 LEVEL ITEM, AND AN ERROR MESSAGE WILL BE WRITTEN    *
* FOLLOWED BY A U0888 ABEND IF IT IS MISSING. IF A COBOL COPY    *
* BOOK WITHOUT AN 01 LEVEL IS TO BE PROCESSED, ADD AN 01 ITEM.   *
*                                                                *
* THE 66 LEVEL IS NOT ACCEPTABLE AS INPUT AND SHOULD BE REMOVED  *
* BEFORE PROCESSING.                                             *
*                                                                *
* REDEFINES STATEMENTS ARE ACCEPTABLE AS INPUT, BUT WILL BE      *
* IGNORED, WITH ASSEMBLER OUTPUT STATEMENTS PRODUCED ONLY FOR THE*
* INITIAL FIELD DEFINITION.                                      *
*                                                                *
* 88 CONDITION NAME ENTRIES WILL CAUSE GENERATION OF ASSEMBLER   *
* EQU STATEMENTS ONLY FOR THOSE HAVING 1-BYTE VALUE CLAUSES.     *
* THIS MEANS SINGLE DIGIT OR CHARACTER VALUES, AND DOES NOT      *
* INCLUDE THE WORDS ZERO(S) OR SPACE(S).                         *
*                                                                *
* FOR ITEMS CONTAINING OCCURS IN THE DESCRIPTION, THE OCCURRING  *
* ITEM IS DESCRIBED ONCE IN THE OUTPUT FILE, AS-IS, THEN IS      *
* THEN IS FOLLOWED BY AN ITEM WHOSE SIZE IS THAT OF THE OCCURRING*
* ITEM, AND WITH A REPLICATION FACTOR ONE LESS THAN THE ORIGINAL *
* ITEM.                                                          *
*                                                                *
* THE ASSEMBLER OUTPUT WILL CONTAIN ONE STATEMENT FOR EACH INPUT *
* LEVEL NUMBER EXCEPT REDEFINES STATEMENTS. PROCESSING WILL      *
* TERMINATE ABNORMALLY WITH AN ERROR MESSAGE IF A 66 LEVEL IS    *
* FOUND, IF MULTIPLE 01 LEVELS ARE FOUND, IF COLUMN 7 CONTAINS   *
* OTHER THAN AN *, OR IF MARGIN A IS NON-BLANK.                  *
*                                                                *
* THE INPUT FILE IS EXPECTED TO CONTAIN ONLY CLEAN, SYNTACTICALLY*
* CORRECT COBOL DATA DIVISION STATEMENTS AS NOTED ABOVE. SOME    *
* PROTECTIVE EDITING IS DONE, BUT INCORRECT COBOL STATEMENTS WILL*
* CREATE UNPREDICTABLE OUTPUT OR U0888 ABENDS WITH A MESSAGE.    *
*                                                                *
* A MAXIMUM OF 1,000 INPUT STATEMENTS CAN BE PROCESSED, THOUGH   *
* THIS CAN BE INCREASED BY INCREASING THE SIZE OF THE GETMAIN.   *
*                                                                *
* ASSEMBLER OUTPUT STATEMENTS WILL CONTAIN A BLANK LABEL FIELD   *
* WHICH MUST BE SUPPLIED BY THE USER IN A LATER EDIT SESSION.    *
* THE OP-CODE FIELD WILL CONTAIN DS FOR LEVELS 01-49, AND EQU FOR*
* LEVEL 88. FOR GROUP ITEMS, THE OPERAND FIELD WILL CONTAIN 0CL  *
* FOLLOWED BY THE LENGTH OF THE GROUP ITEM. ELEMENTARY ITEMS WILL*
* CONTAIN CL, XL, OR PL FOLLOWED BY THE FIELD LENGTH OR MERELY   *
* H, F, OR 2F DEPENDING ON THE PICTURE. THE COMMENT FIELD WILL   *
* CONTAIN THE COBOL LEVEL NUMBER, DATANAME, AND NUMBER OF OCCURS *
* IF MORE THAN 1. COLUMNS 72-80 WILL BE BLANK.                   *
*                                                                *
* AUTHOR R THORNTON APRIL 1988                                   *
*                                                                *
******************************************************************
*
         OPEN  (OUTPUT1,OUTPUT,PRINT1,OUTPUT,INPUT1)
         GETMAIN R,LV=44000            ROOM FOR 1,000 OUTPUT LINES
         ST    R1,TBLSTART             SAVE BEGINNING ADDRESS
         LR    R6,R1                   COPY TO BASE REG
         A     R1,=F'44000'            COMPUTE END ADDRESS
         ST    R1,TBLEND               AND SAVE IT
         USING CHARTBL,R6
         L     R6,TBLSTART             POINT TO TABLE START
INITTBL  MVC   CHARNTRY,CHARBLNK       INITIALIZE ENTRY
         LA    R6,L'CHARNTRY(R6)       ADVANCE TO NEXT ENTRY
         C     R6,TBLEND               AT END?
         BL    INITTBL                 NO
         L     R6,TBLSTART             POINT TO BEGINNING
         ZAP   LEVEL,=P'01'            SET UP FIRST LINE
         BAL   R9,GETCOB               READ FIRST COBOL CARD
         CLC   COBAMGN(3),=C'01 '      LEVEL 01?
         BE    BALDNAM                 YES
         MVC   PRT(21),=C'MISSING LEVEL 01 ITEM'
ABTERM   BAL   R9,PRINT                PRINT ERROR MESSAGE
         MVC   PRT(80),COBIN           INPUT RECORD TO PRINT
         BAL   R9,PRINT                PRINT ERROR MESSAGE
         ABEND 888,DUMP                TERMINATE IN ERROR
***************************************************************
* MAINLINE PROCESSING                                         *
***************************************************************
MAINLINE BAL   R9,GETCOB               READ NEXT COBOL CARD
         CLC   COBAMGN,=CL4' '         ANYTHING IN A MARGIN?
         BNE   BADAMGN                 YES
         MVI   PERIOD,C' '             CLEAR END OF STATEMENT IND
         BAL   R9,GETLEVL              GET LEVEL NUMBER
BALDNAM  BAL   R9,GETDNAM              GET DATA NAME
         CLI   PERIOD,C'.'             END OF STATEMENT?
         BE    ADVOUT                  YES
         BAL   R9,CLAUSES              PROCESS CLAUSES
ADVOUT   LA    R6,L'CHARNTRY(R6)       ADVANCE TO NEXT ENTRY
         B     MAINLINE                CONTINUE
BADAMGN  MVC   PRT(23),=C'ERROR: DATA IN A MARGIN'
         B     ABTERM                  GO TERMINATE
******************************************************************
*        GET LEVEL NUMBER                                        *
******************************************************************
GETLEVL  ST    R9,GL9                  SAVE RETURN ADDRESS
         BAL   R9,GETFLD               GET NEXT FIELD FROM INPUT
         CLI   PERIOD,C'.'             END OF STATEMENT?
         BE    BADLEVL                 YES, ERROR
         CLI   FLDLEN,1                TWO-BYTE FIELD?
         BNE   BADLEVL                 NO
         BAL   R9,TESTNUM              TEST FOR NUMERIC FIELD
         CLI   NUMSW,0                 IS FIELD NUMERIC?
         BE    BADLEVL                 NO
         CLC   FIELD(2),=C'88'         LEVEL 88?
         BNE   TSTLVL49                NO
         MVI   GRPELEM,C'C'            INDICATE CONDITIONAL ITEM
         B     MOVLEVL                 YES
TSTLVL49 CLC   FIELD(2),=C'49'         VALID LEVEL NUMBER?
         BH    BADLEVL                 NO
         CLC   FIELD(2),=C'02'         VALID LEVEL NUMBER?
         BL    BADLEVL                 NO
MOVLEVL  PACK  LEVEL,FIELD(2)          YES, MOVE TO OUTPUT
GTLVXIT  L     R9,GL9                  RESTORE RETURN ADDRESS
         BR    R9                      AND EXIT
BADLEVL  MVC   PRT(27),=C'ERROR: INVALID LEVEL NUMBER'
         B     ABTERM                  GO TERMINATE
******************************************************************
*        GET DATANAME                                            *
******************************************************************
GETDNAM  ST    R9,GN9                  SAVE RETURN ADDRESS
         BAL   R9,GETFLD               GET NEXT FIELD
         CLI   WORDNO,0                COBOL RESERVED WORD?
         BNE   BADDNAM                 YES, ERROR
         CLI   FLDLEN,29               OVER 30 BYTES LONG?
         BH    BADDNAM                 YES, ERROR
         IC    R15,FLDLEN              GET FIELD LENGTH
         EX    R15,EXMVDNM             MOVE DATA NAME TO OUTPUT
GETDXIT  L     R9,GN9                  RESTORE RETURN ADDRESS
         BR    R9                      RETURN
BADDNAM  MVC   PRT(24),=C'ERROR: INVALID DATA NAME'
         B     ABTERM                  GO TERMINATE
EXMVDNM  MVC   DATANAME(1),FIELD       EXECUTED MOVE
******************************************************************
*        PROCESS CLAUSES (PIC, OCCURS, ETC)                      *
******************************************************************
CLAUSES  ST    R9,CL9                  SAVE RETURN ADDRESS
NEXTCL   BAL   R9,GETFLD               GET NEXT FIELD
GOTCL    MVI   GFSW,0                  CLEAR GOTTEN FIELD SWITCH
         CLI   WORDNO,1                IS IT REDEFINES?
         BNE   TEST6                   NO
         MVI   REDEFINS,C'R'           INDICATE REDEFINES IN TBL
         B     TESTSTND                AND GET NEXT CLAUSE
TEST6    CLI   WORDNO,6                IS IT OCCURS?
         BNE   TEST7                   NO
         BAL   R9,OCCURCLS             PROCESS OCCURS CLAUSE
         B     TESTSTND                CONTINUE
TEST7    CLI   WORDNO,7                IS IT PICTURE?
         BNE   TEST8                   NO
         BAL   R9,PICTURE              PROCESS PICTURE CLAUSE
         B     TESTSTND                CONTINUE
TEST8    CLI   WORDNO,8                IS IT SIGN?
         BNE   TEST9                   NO
         BAL   R9,SIGN                 PROCESS SIGN CLAUSE
         B     TESTSTND                CONTINUE
TEST9    CLI   WORDNO,9                IS IT SYNC?
         BNE   TEST11                  NO
         MVI   SYNCH,C'S'              INDICATE SYNCHRONIZED
         B     TESTSTND                GET NEXT CLAUSE
TEST11   CLI   WORDNO,11               IS IT VALUE?
         BNE   TEST21                  NO
         BAL   R9,VALUE                PROCESS VALUE CLAUSE
         B     TESTSTND                CONTINUE
TEST21   CLI   WORDNO,21               GOT INDEX?
         BNE   TEST22                  NO
         ZAP   FIELDLEN,9              LENGTH FOR FULLWORD
         B     SETBIN                  GO INDICATE BINARY
TEST22   CLI   WORDNO,22               GOT COMP?
         BE    SETBIN                  YES
         CLI   WORDNO,24               GOT COMP-4?
         BNE   TEST23                  NO
SETBIN   MVI   USAGE,C'B'              INDICATE BINARY
         MVI   GRPELEM,C'E'            INDICATE ELEMENTARY ITEM
         B     TESTSTND                CONTINUE
TEST23   CLI   WORDNO,23               GOT COMP-3?
         BNE   TESTSTND                NO
         MVI   USAGE,C'P'              INDICATE PACKED DECIMAL
TESTSTND CLI   PERIOD,C'.'             END OF STATEMENT?
         BE    CLSXIT                  YES, EXIT
         CLI   GFSW,0                  NEXT FIELD GOTTEN?
         BE    NEXTCL                  NO
         B     GOTCL                   YES
CLSXIT   L     R9,CL9                  GET RETURN ADDRESS
         BR    R9                      RETURN
******************************************************************
*        PROCESS PIC(TURE) CLAUSE                                *
******************************************************************
PICTURE  ST    R9,PI9                  SAVE RETURN ADDRESS
         CLI   PERIOD,C'.'             END OF SENTENCE?
         BE    BADPICT                 YES, ERROR
         BAL   R9,GETFLD               GET NEXT FIELD
         CLI   WORDNO,13               GOT IS?
         BNE   CHKPSTRG                NO
         CLI   PERIOD,C'.'             END OF SENTENCE?
         BE    BADPICT                 YES, ERROR
         BAL   R9,GETFLD               GET NEXT FIELD
CHKPSTRG CLI   WORDNO,0                GOT COBOL WORD?
         BNE   BADPICT                 YES, ERROR
         MVI   GRPELEM,C'E'            INDICATE ELEMENTARY ITEM
         SR    R15,R15                 CLEAR FOR INSERT
         IC    R15,FLDLEN              GET FIELD LENGTH CODE
         LA    R15,1(R15)              COMPUTE ACTUAL LENGTH
         LA    R14,FIELD               POINT TO FIELD
         MVI   NUMPIC,C'9'             INDICATE NUMERIC PICTURE
CKNXCHAR SR    R2,R2                   CLEAR FOR TRANSLATE
         TRT   0(1,R14),PICTBL         CHECK TABLE
         BZ    STPNXCH                 UNCOUNTABLE CHAR
BRTBL    B     BRTBL(R2)               PROCESS PIC STRING CHAR
         B     CKCRDB                  CHECK CR AND DB
         B     NOTNUMRC                CHECK CR AND DB
         B     ALLSIZE                 CHECK CR AND DB
NOTNUMRC MVI   NUMPIC,C'C'             INDICATE NON-NUMERIC PICTURE
ALLSIZE  CLI   1(R14),C'('             NBR BYTES IN PARENS?
         BNE   PICADD1                 NO
         BAL   R9,PICPAREN             YES, GO COMPUTE SIZE
         B     STPNXCH                 CONTINUE
PICADD1  AP    FIELDLEN,P1             INCREMENT FIELD LENGTH
STPNXCH  LA    R14,1(R14)              ADVANCE TO NEXT PIC CHAR
         BCT   R15,CKNXCHAR            LOOP THRU PIC STRING
PICXIT   L     R9,PI9                  RESTORE RETURN ADDRESS
         BR    R9                      EXIT
CKCRDB   CLC   0(2,R14),=C'CR'         IS IT CR?
         BE    GOTCRDB                 YES
         CLC   0(2,R14),=C'DB'         IS IT DB?
         BNE   STPNXCH                 NEITHER
GOTCRDB  MVI   NUMPIC,C'C'             MAKE PIC CHAR
         AP    FIELDLEN,P2             ADD TO SIZE
         B     PICXIT                  AND EXIT
BADPICT  MVC   PRT(37),=C'ERROR: SYNTAX ERROR IN PICTURE CLAUSE'
         B     ABTERM                  GO TERMINATE
******************************************************************
*        PICTURE SIZE IN PARENTHESES, COMPUTE AND ADD TO SIZE    *
******************************************************************
PICPAREN LR    R2,R15                  COPY REMAINING LENGTH
         SH    R2,H3                   COMPUTE SCAN LENGTH CODE
         EX    R2,TRTTRT               CHECK SIZE FIELD
         BZ    BADSIZE                 NOT NUM OR NO ENDING PAREN
         CLI   0(R1),C')'              RIGHT PAREN AT END?
         BNE   BADSIZE                 NO, ERROR
         LR    R2,R1                   COPY PAREN ADDRESS
         SR    R2,R14                  COMPUTE LENGTH INCL PARENS
         SH    R2,H3                   COMPUTE LENGTH CODE OF SIZE
         EX    R2,TRTPK                PACK THE SIZE
         AP    FIELDLEN,DBLWD          ADD TO FIELD LENGTH TOTAL
         LA    R14,3(R14,R2)           POINT TO RIGHT PAREN
PPXIT    BR    R9                      EXIT
BADSIZE  MVC   PRT(35),=C'ERROR: SYNTAX ERROR IN PICTURE SIZE'
         B     ABTERM                  GO TERMINATE
TRTTRT   TRT   2(1,R14),PICTRT         CHECK FIELD FOR NNNNN)
TRTPK    PACK  DBLWD,2(1,R14)          EXECUTED PACK
******************************************************************
*        PROCESS OCCURS CLAUSE                                   *
******************************************************************
OCCURCLS ST    R9,OC9                  SAVE RETURN ADDRESS
         BAL   R9,GETFLD               GET NEXT FIELD
         BAL   R9,TESTNUM              CHECK FOR NUMERIC
         CLI   NUMSW,1                 IS IT NUMERIC?
         BNE   BADOCCU                 NO, ERROR
         IC    R15,FLDLEN              GET LENGTH CODE
         EX    R15,PACKOCC             PACK INTO TABLE
         CLI   PERIOD,C'.'             END OF SENTENCE?
         BE    OCCXIT                  YES
         BAL   R9,GETFLD               GET NEXT FIELD
         CLI   WORDNO,27               GOT TIMES?
         BE    OCCXIT                  YES
         CLI   WORDNO,32               GOT TO?
         BNE   BADOCCU                 NO, ERROR
         BAL   R9,GETFLD               GET NEXT FIELD
         BAL   R9,TESTNUM              CHECK FOR NUMERIC
         CLI   NUMSW,1                 IS IT NUMERIC?
         BNE   BADOCCU                 NO, ERROR
         IC    R15,FLDLEN              GET LENGTH CODE
         EX    R15,PACKOCC             PACK INTO TABLE
OCCXIT   L     R9,OC9                  RESTORE RETURN ADDRESS
         BR    R9                      EXIT
BADOCCU  MVC   PRT(36),=C'ERROR: SYNTAX ERROR IN OCCURS CLAUSE'
         B     ABTERM                  GO TERMINATE
PACKOCC  PACK  OCCURS,FIELD(1)         PACK NUMBER OCCURRENCES
******************************************************************
*        PROCESS SIGN CLAUSE                                     *
******************************************************************
SIGN     ST    R9,SI9                  SAVE RETURN ADDRESS
         CLI   PERIOD,C'.'             END OF STATEMENT?
         BE    BADSIGN                 YES, ERROR
         BAL   R9,GETFLD               GET NEXT FIELD
         CLI   WORDNO,13               GOT IS?
         BNE   STSTLDG                 NO
         CLI   PERIOD,C'.'             END OF STATEMENT?
         BE    BADSIGN                 YES, ERROR
         BAL   R9,GETFLD               GET NEXT FIELD
STSTLDG  CLI   WORDNO,14               GOT LEADING?
         BE    STSTGDND                YES
         CLI   WORDNO,15               GOT TRAILING?
         BNE   BADSIGN                 NEITHER, ERROR
STSTGDND CLI   PERIOD,C'.'             END OF SENTENCE?
         BE    SIGXIT                  YES
         BAL   R9,GETFLD               GET NEXT FIELD
         CLI   WORDNO,16               GOT SEPARATE?
         BNE   SSETGFSW                NO
         AP    FIELDLEN,P1             YES, ADD TO FIELD SIZE
         MVI   USAGE,C'C'              SET DATA TYPE
         B     SIGXIT                  YES
SSETGFSW MVI   GFSW,1                  SHOW NEXT FLD ALREADY GOTTEN
SIGXIT   L     R9,SI9                  RESTORE RETURN ADDRESS
         BR    R9                      EXIT
BADSIGN  MVC   PRT(34),=C'ERROR: SYNTAX ERROR IN SIGN CLAUSE'
         B     ABTERM                  GO TERMINATE
******************************************************************
*        PROCESS VALUE CLAUSE                                    *
******************************************************************
VALUE    ST    R9,VL9                  SAVE RETURN ADDRESS
         CP    LEVEL,=P'88'            88 LEVEL?
         BNE   VALXIT                  NO
VALNDTST CLI   PERIOD,C'.'             END OF STATEMENT?
         BE    BADVALU                 YES
VALGET   BAL   R9,GETFLD               GET NEXT DATA FIELD
         CLI   WORDNO,13               GOT IS?
         BE    VALNDTST                YES
         CLI   WORDNO,25               GOT ARE?
         BE    VALNDTST                YES
         CLI   FLDLEN,0                ONE-BYTE VALUE?
         BE    GOT1DIG                 YES, SINGLE DIGIT
         CLI   FLDLEN,2                THREE-BYTE VALUE?
         BNE   VALXIT                  NO
         CLI   FIELD,C''''             1ST BYTE IS QUOTE?
         BNE   VALXIT                  NO
GOT1CHR  MVC   VALUE1,FIELD+1          YES, MOVE CHARACTER VALUE
         B     VALXIT                  GO EXIT
GOT1DIG  MVC   VALUE1,FIELD            MOVE 1-BYTE VALUE
VALXIT   L     R9,VL9                  RESTORE RETURN ADDRESS
         BR    R9                      EXIT
BADVALU  MVC   PRT(35),=C'ERROR: SYNTAX ERROR IN VALUE CLAUSE'
         B     ABTERM                  GO TERMINATE
******************************************************************
*        GET FIELD FROM INPUT                                    *
******************************************************************
GETFLD   ST    R9,GF9                  SAVE RETURN ADDRESS
GFCLEAR  MVC   FIELD,=CL80' '          CLEAR FIELD AREA
         LR    R1,R7                   COPY CURRENT ADDRESS
         CLI   0(R7),C' '              FOUND LEADING BYTE?
         BNE   GOTLHE                  YES
         MVI   TRTFF+C' ',0            DON'T STOP AT BLANKS
         TRT   0(60,R7),TRTFF          LHE SEARCH
         MVI   TRTFF+C' ',X'FF'        RESET TABLE
         BZ    GETAGIN                 BRANCH IF NOT FOUND
         C     R1,COBEND               PAST END OF RECORD?
         BL    GOTLHE                  YES
GETAGIN  BAL   R9,GETCOB               READ NEXT COBOL RECORD
         B     GFCLEAR                 CONTINUE
GOTLHE   LR    R7,R1                   COPY FIELD LHE ADDRESS
         CLI   0(R7),C''''             QUOTED STRING?
         BNE   NOTQUOT                 NO
         MVI   TRT00+C'''',X'FF'       STOP ONLY ON QUOTE
         TRT   1(60,R1),TRT00          LOCATE ENDING QUOTE
         MVI   TRT00+C'''',X'00'       RESET TRT TABLE
         BNZ   GOTENDQT                BRANCH IF FOUND
MISNDQT  MVC   PRT(27),=C'ERROR: MISSING ENDING QUOTE'
         B     ABTERM                  GO TERMINATE
GOTENDQT C     R7,COBEND               WITHIN RECORD?
         BNL   MISNDQT                 YES
NOTQUOT  MVI   TRT00+C' ',X'FF'        STOP ONLY ON BLANK
         TRT   1(60,R1),TRT00          LOCATE ENDING BLANK
         MVI   TRT00+C' ',X'00'        RESET TRT TABLE
         LR    R15,R1                  SAVE NEXT SCAN ADDRESS
         BCTR  R1,0                    BACK UP TO RIGHT END
         CLI   0(R1),C'.'              PERIOD TERMINATES WORD?
         BNE   TRYCMA                  NO
         MVI   PERIOD,C'.'             YES, INDICATE END OF RECORD
         B     BACK1MOR                CONTINUE
TRYCMA   CLI   0(R1),C','              COMMA FOLLOWS WORD?
         BE    BACK1MOR                YES
         CLI   0(R1),C';'              SEMICOLON FOLLOWS WORD?
         BNE   COMPLENG                NO
BACK1MOR BCTR  R1,0                    BACK PAST PRD OR COMMA
COMPLENG SR    R1,R7                   COMPUTE LENGTH CODE
         STC   R1,FLDLEN               SAVE LENGTH
         EX    R1,MVCFLD               MOVE WORD TO FIELD
         LR    R7,R15                  UPDATE SCAN POINTER
         MVI   WORDNO,0                ASSUME NOT COBOL WORD
         LA    R14,COBWORDS            POINT TO COBOL WORD TABLE
         IC    R15,FLDLEN              GET FIELD LENGTH CODE
TSTWDND  CLI   0(R14),X'FF'            END OF TABLE?
         BE    GFXIT                   YES, NOT FOUND
         CLC   1(1,R14),FLDLEN         TABLE LENG = FIELD LENG?
         BNE   ADVWDNT                 NO
         EX    R15,CPRWDS              YES, COMPARE THE WORDS
         BNE   ADVWDNT                 BRANCH IF NOT EQUAL
SETWDNO  MVC   WORDNO,0(R14)           EQUAL, MOVE WORD NUMBER
GFXIT    L     R9,GF9                  GET RETURN ADDRESS
         BR    R9                      AND EXIT
ADVWDNT  LA    R14,17(R14)             ADVANCE TO NEXT ENTRY
         B     TSTWDND                 CONTINUE SEARCH
CPRWDS   CLC   FIELD(1),2(R14)         EXECUTED COMPARE
MVCFLD   MVC   FIELD(1),0(R7)          EXECUTED MOVE
******************************************************************
*        TEST INPUT FIELD FOR NUMERICS                           *
******************************************************************
TESTNUM  MVI   NUMSW,0                 CLEAR NUMERIC INDICATOR
         SR    R15,R15                 CLEAR FOR INSERT
         IC    R15,FLDLEN              GET FIELD LENGTH
         EX    R15,TRTNUM              TEST FOR NUMERIC
         BNZ   TSTNXIT                 BRANCH IF NOT NUMERIC
         MVI   NUMSW,1                 INDICATE NUMERIC
TSTNXIT  BR    R9                      AND EXIT
TRTNUM   TRT   FIELD(1),NUMERIC        EXECUTED TRT
******************************************************************
*        GET NEXT COBOL RECORD                                   *
******************************************************************
GETCOB   GET   INPUT1,COBIN            READ NEXT COBOL RECORD
         MVC   COBAUD,=CL80' '         CLEAR AUDIT TRAIL, ETC
         MVI   PERIOD,C' '             CLEAR STATEMENT END INDIC
         LA    R7,COBBMGN              POINT TO B MARGIN
         CLI   COBCC,C'*'              COMMENT?
         BE    GETCOB                  YES, IGNORE IT
         CLI   COBCC,C'-'              CONTINUATION RECORD?
         BE    HYPHN7                  NO, RETURN
GTCBXIT  BR    R9                      EXIT
HYPHN7   MVC   PRT(25),=C'ERROR: HYPHEN IN COLUMN 7'
         B     ABTERM                  GO TERMINATE
******************************************************************
*        WRITE PRINT LINE                                        *
******************************************************************
PRINT    PUT   PRINT1,PRT              WRITE OUTPUT LINE
         MVC   PRT,BLANX               CLEAR PRINT LINE
PRNTXIT  BR    R9                      RETURN
******************************************************************
*        WRITE ASSEMBLER OUTPUT FILE                             *
******************************************************************
PUTASM   PUT   OUTPUT1,ASMLINE         WRITE OUTPUT LINE
         MVC   ASMLINE,BLANX           CLEAR OUTPUT LINE
PTASMXIT BR    R9                      RETURN
******************************************************************
*        REMOVE REDEFINITIONS FROM CHARACTERISTICS TABLE         *
******************************************************************
REDFNSCR L     R6,TBLSTART             POINT TO FIRST TBL ENTRY
         LR    R1,R6                   COPY ADDRESS
CKREDEF  CLI   REDEFINS,C'R'           AT A REDEFINITION?
         BNE   SCRMVBAK                NO
         ZAP   SAVELVL,LEVEL           SAVE LEVEL NUMBER
PASSRDFN LA    R6,L'CHARNTRY(R6)       STEP TO NEXT ENTRY
         CP    LEVEL,SAVELVL           END OF REDEFINITION?
         BH    PASSRDFN                NO, SKIP ENTRY
         B     CKREDEF                 ELSE CONTINUE
SCRMVBAK MVC   0(L'CHARNTRY,R1),CHARNTRY MOVE ENTRY BACK
         LA    R1,L'CHARNTRY(R1)       STEP TO NEXT ENTRY
         LA    R6,L'CHARNTRY(R6)       STEP TO NEXT ENTRY
         CP    LEVEL,P0                END OF TABLE?
         BNE   CKREDEF                 NO, CONTINUE
         ST    R1,TBLLST               SET NEW TABLE END
RDFREZRO MVC   0(L'CHARNTRY,R1),CHARBLNK CLEAR ENTRY
         LA    R1,L'CHARNTRY(R1)       STEP TO NEXT ENTRY
         CR    R1,R6                   PAST END?
         BNH   RDFREZRO                NO
         BR    R9                      YES, EXIT
******************************************************************
*        REPLICATE GROUP USAGE CLAUSES THRU ELEMENTARY ITEMS     *
******************************************************************
REPLGRP  L     R6,TBLSTART             POINT TO FIRST TBL ENTRY
CKENDP1  CP    LEVEL,P0                END OF REPLICATION PASS?
         BER   R9                      YES, EXIT
         CLI   GRPELEM,C'G'            AT A GROUP ITEM?
         BE    GP1CKTYP                YES
STPGRP1  LA    R6,L'CHARNTRY(R6)       STEP TO NEXT ENTRY
         B     CKENDP1                 CONTINUE GROUP PROCESSING
GP1CKTYP CLI   USAGE,C'P'              PACKED DECIMAL GROUP?
         BE    PNTGRP                  YES
         CLI   USAGE,C'B'              BINARY GROUP?
         BNE   STPGRP1                 NO
PNTGRP   LR    R12,R6                  SAVE POINTER TO GROUP
STPGRP1A LA    R6,L'CHARNTRY(R6)       STEP TO NEXT ENTRY
         CP    LEVEL,LEVEL-CHARNTRY(L'LEVEL,R12) END OF GROUP?
         BNH   CKENDP1                 YES
         CLI   GRPELEM,C'E'            IS IT AN ELEMENTARY ITEM?
         BNE   STPGRP1A                NO, SKIP IT
         CLI   NUMPIC,C'9'             NUMERIC PICTURE?
         BNE   GRPELERR                NO, ERROR
         MVC   USAGE,USAGE-CHARNTRY(R12) COPY GROUP USAGE
         B     STPGRP1A                CONTINUE
GRPELERR MVC   PRT(19),=C'ERROR: GROUP NAMED '
         MVC   PRT+20(30),DATANAME-CHARNTRY(R12) GROUP NAME TO MSG
         MVC   PRT+51(9),=C'USAGE IS '
         MVC   PRT+60(1),USAGE-CHARNTRY(R12)
         BAL   R9,PRINT
         MVC   PRT+20(30),DATANAME     ELEMENTARY NAME TO MSG
         MVC   PRT+51(9),=C'USAGE IS '
         MVC   PRT+60(1),USAGE
         BAL   R9,PRINT                PRINT ERROR MESSAGE
         ABEND 888,DUMP                TERMINATE IN ERROR
******************************************************************
*     PASS THE TABLE, CALCULATING THE TRUE LENGTH OF ALL ELEMEN- *
*     TARY PACKED DECIMAL OR BINARY ITEMS. WHERE THE SYNCHRONIZED*
*     CLAUSE IS USED FOR BINARY ITEMS, SET THE TYPE TO H, F, OR D*
*     ELSE TO X.                                                 *
******************************************************************
NUMERSIZ L     R6,TBLSTART             POINT TO FIRST TBL ENTRY
CKENDP2  CP    LEVEL,P0                END OF ELEM SIZE/TYPE PASS?
         BER   R9                      YES, EXIT
         CLI   GRPELEM,C'E'            AT AN ELEMENTARY ITEM?
         BE    GP2CKTYP                YES
         MVI   USAGE,C'C'              ALL GROUPS ARE TYPE C
STPGRP2  LA    R6,L'CHARNTRY(R6)       STEP TO NEXT ENTRY
         B     CKENDP2                 CONTINUE
GP2CKTYP CLI   USAGE,C'P'              PACKED DECIMAL FIELD?
         BE    P2PACKED                YES
         CLI   USAGE,C'B'              BINARY FIELD?
         BE    P2BINARY                YES
         CLI   NUMPIC,C'9'             PICTURE IS NUMERIC?
         BNE   STPGRP2                 NO
         MVI   USAGE,C'Z'              YES, SET TYPE = Z
         B     STPGRP2                 CONTINUE
P2PACKED ZAP   DBLWD,FIELDLEN          COPY FIELD LENGTH TO WORK
         DP    DBLWD,P2                DIVIDE BY 2
         AP    DBLWD(7),P1             ADD 1
         ZAP   FIELDLEN,DBLWD(7)       RESET PACKED FIELD SIZE
         B     STPGRP2                 CONTINUE
P2BINARY MVI   USAGE,C'X'              ASSUME NOT SYNCHRONIZED
         CP    FIELDLEN,P5             HALFWORD SIZE?
         BL    P2HWRD                  YES
         CP    FIELDLEN,P10            FULLWORD SIZE?
         BL    P2FULWRD                YES
         ZAP   FIELDLEN,P8             DOUBLEWORD, SET LENGTH=8
         CLI   SYNCH,C'S'              SYNCHRONIZED?
         BNE   STPGRP2                 NO
         MVI   USAGE,C'D'              YES, SET TYPE = D
         MVI   SYNCSW,1                SHOW COMP SYNC FIELDS FOUND
         B     STPGRP2                 CONTINUE
P2FULWRD ZAP   FIELDLEN,P4             FULLWORD, SET LENGTH=4
         CLI   SYNCH,C'S'              SYNCHRONIZED?
         BNE   STPGRP2                 NO
         MVI   USAGE,C'F'              YES, SET TYPE = F
         MVI   SYNCSW,1                SHOW COMP SYNC FIELDS FOUND
         B     STPGRP2                 CONTINUE
P2HWRD   ZAP   FIELDLEN,P2             HALFWORD, SET LENGTH=2
         CLI   SYNCH,C'S'              SYNCHRONIZED?
         BNE   STPGRP2                 NO
         MVI   USAGE,C'H'              YES, SET TYPE = H
         MVI   SYNCSW,1                SHOW COMP SYNC FIELDS FOUND
         B     STPGRP2                 CONTINUE
******************************************************************
*     PASS THE TABLE, CALCULATING THE LENGTHS OF ALL GROUP ITEMS.*
******************************************************************
GROUPSIZ L     R6,TBLSTART             POINT TO FIRST TBL ENTRY
CKENDP3  CP    LEVEL,P0                END OF GROUP SIZE PASS?
         BER   R9                      YES, EXIT
         CLI   GRPELEM,C'G'            AT A GROUP ITEM?
         BE    GP3CKSIZ                YES
STPGRP3  LA    R6,L'CHARNTRY(R6)       STEP TO NEXT ENTRY
         B     CKENDP3                 CONTINUE GROUP PROCESSING
GP3CKSIZ CP    FIELDLEN,P0             SIZE ESTABLISHED?
         BNE   STPGRP3                 YES
PNTGRP3  LR    R12,R6                  SAVE POINTER TO GROUP
STPGRP3A LA    R6,L'CHARNTRY(R6)       STEP TO NEXT ENTRY
RCHEND3  CP    LEVEL,LEVEL-CHARNTRY(L'LEVEL,R12) END OF GROUP?
         BNH   TESTGRPL                YES, TEST SIZE
         CLI   GRPELEM,C'E'            IS IT AN ELEMENTARY ITEM?
         BE    ELEMSIZ                 YES
         CLI   GRPELEM,C'G'            IS IT A GROUP ITEM?
         BNE   STPGRP3A                NO, CONDITIONAL
         CP    FIELDLEN,P0             SIZE ESTABLISHED?
         BE    LOWERGRP                NO
         CP    OCCURS,P1               SINGLE OCCURRENCE?
         BE    STPGRP3A                YES
         ZAP   DBLWD,OCCURS            YES, COPY OCCURRENCES
         SP    DBLWD,P1                DEDUCT 1
         B     OCCMULT                 AND GO COMPUTE SIZE
LOWERGRP ZAP   FIELDLEN-CHARNTRY(L'FIELDLEN,R12),P0 RESET LENGTH
         B     PNTGRP3                 AND GO DO THIS GROUP
ELEMSIZ  ZAP   DBLWD,OCCURS            YES, MOVE FOR MULTIPLY
OCCMULT  MP    DBLWD,FIELDLEN          COMPUTE TOTAL FIELD LENGTH
         AP    FIELDLEN-CHARNTRY(L'FIELDLEN,R12),DBLWD ADD TO TOTAL
         B     STPGRP3A                CONTINUE
TESTGRPL CP    FIELDLEN-CHARNTRY(L'FIELDLEN,R12),P0 ANY SIZE?
         BNE   GROUPSIZ                YES, CONTINUE
         MVC   PRT(19),=C'ERROR: GROUP NAMED '
         MVC   PRT+20(30),DATANAME-CHARNTRY(R12) GROUP NAME TO MSG
         MVC   PRT+51(15),=C'HAS ZERO LENGTH'
         BAL   R9,PRINT                PRINT ERROR MESSAGE
         ABEND 888,DUMP                TERMINATE IN ERROR
******************************************************************
*     SCAN THE TABLE FOR OCCURRING ITEMS. FOR EACH ITEM FOUND,   *
*     SET ITS NUMPIC FIELD TO 'O' AND CREATE A NEW ENTRY WITH ONE*
*     LESS OCCURRENCE AT THE END OF THE FIRST OCCURRENCE.        *
******************************************************************
OCCURFLD L     R6,TBLSTART             POINT TO FIRST TBL ENTRY
P4CKEND  CP    LEVEL,P0                END OF TABLE?
         BER   R9                      YES
         CP    OCCURS,P1               ITEM OCCURS?
         BE    P4STPNXT                NO
         CLC   DATANAME,REMENTS        THIS A REMAINING ENTRY?
         BNE   P4GOTOCC                NO
P4STPNXT LA    R6,L'CHARNTRY(R6)       STEP TO NEXT ENTRY
         B     P4CKEND                 CONTINUE
P4GOTOCC LR    R12,R6                  SAVE ENTRY ADDRESS IN R12
P4STPOCC LA    R6,L'CHARNTRY(R6)       STEP TO NEXT ENTRY
         CP    LEVEL,LEVEL-CHARNTRY(L'LEVEL,R12) END OCCURRING ITEM?
         BH    P4STPOCC                NO
         L     R15,TBLLST              POINT TO LAST ENTRY +1
         LR    R14,R15                 COPY ADDRESS
P4CKHOLE CR    R14,R6                  AT DESIRED HOLE?
         BE    P4ATHOLE                YES
         SH    R14,ENTRYLEN            BACK UP ONE ENTRY
         MVC   0(L'CHARNTRY,R15),0(R14) MOVE ENTRY FORWARD 1
         SH    R15,ENTRYLEN            BACK UP ONE ENTRY
         B     P4CKHOLE                CONTINUE
P4ATHOLE MVC   CHARNTRY,0(R12)         COPY OCCURRING ENTRY
         SP    OCCURS,P1               DEDUCT 1 OCCURRENCE
         MVI   GRPELEM,C'E'            INDICATE ELEMENTARY
         MVI   USAGE,C'C'              INDICATE CHARACTER FIELD
         MVC   DATANAME,REMENTS        REMAINING ... TO DATANAME
         MVI   NUMPIC-CHARNTRY(R12),C'O' SHOW OCCURS
         LR    R6,R12                  RESET POINTER
         L     R15,TBLLST              GET END POINTER
         LA    R15,L'CHARNTRY(R15)     STEP OVER ONE ENTRY
         ST    R15,TBLLST              UPDATE POINTER
         B     P4STPNXT                CONTINUE
******************************************************************
*     RUN THE TABLE AND WRITE AN OUTPUT FILE CONTAINING THE      *
*     EQUIVALENT ASSEMBLER RECORD DESCRIPTION INSTRUCTIONS. AN   *
*     88 LEVEL ITEM IS WRITTEN OUT ONLY IF IT HAS A VALUE IN ITS *
*     VALUE1 FIELD.                                              *
******************************************************************
WRTOUTFL ST    R9,WO9                  SAVE RETURN ADDRESS
         CLI   SYNCSW,1                COMP SYNC ITEMS FOUND?
         BNE   STARTOUT                NO
         MVC   ASMLINE,WARNSYNC        YES, MOVE WARNING MSG
         BAL   R9,PUTASM               WRITE TO OUTPUT
         MVC   ASMLINE,WARNSYN2        MOVE 2ND WARNING MSG
         BAL   R9,PUTASM               WRITE TO OUTPUT
STARTOUT L     R6,TBLSTART             POINT TO FIRST TBL ENTRY
P5CHKND  CP    LEVEL,P0                END OF TABLE?
         BNE   FORMOUT                 NO, GO FORMAT
         L     R9,WO9                  GET RETURN ADDRESS
         BR    R9                      EXIT
FORMOUT  MVC   ASMLINE,BLANX           CLEAR OUTPUT LINE
         MVC   ASMMNE(2),=C'DS'        SET MNEMONIC TO DS
         UNPK  ASMLVL,LEVEL            COBOL LEVEL TO OUTPUT
         OI    ASMLVL+1,C'0'           CLEAR SIGN
         MVC   ASMDNAM,DATANAME        COBOL NAME TO OUTPUT
         CP    LEVEL,P88               88 LEVEL ITEM?
         BE    P5LEV88                 YES
         MVC   ASMRED,REDEFINS         REDEFINITION INDIC
         MVC   ASMSYNC,SYNCH           SYNCHRONIZED INDIC
         CLI   NUMPIC,C'O'             THIS AN OCCURRING ITEM?
         BNE   P5GE                    NO
         MVI   ASMOCC,C'O'             YES, INDICATE IT
         UNPK  ASMNBR,OCCURS           NUMBER OCCURRENCES
         OI    ASMNBR+7,C'0'           CLEAR SIGN
P5GE     CLI   GRPELEM,C'E'            ELEMENTARY ITEM?
         BE    P5ELEM                  YES
         MVC   ASMOPND(3),=C'0CL'      OPERAND PREFIX
         ZAP   DBLWD,FIELDLEN          COPY FIELD LENGTH
         LA    R15,ASMOPND+3           POINT TO DESTINATION
         BAL   R9,MOVNUMBR             GO MOVE NUMBER
         B     WRTNEXT                 CONTINUE
P5ELEM   CP    OCCURS,P1               THIS SHOWS OCCURRENCES?
         BE    P5PICT                  NO
         CLI   NUMPIC,C'O'             THIS THE OCCURRING ITEM?
         BE    P5PICT                  YES
         ZAP   DBLWD,OCCURS            COPY REMAINING OCCURRENCES
         LA    R15,ASMOPND             POINT TO DESTINATION
         BAL   R9,MOVNUMBR             GO MOVE NUMBER
         MVC   0(2,R15),=C'CL'         DELIMIT OPERAND
         ZAP   DBLWD,FIELDLEN          COPY FIELD LENGTH
         LA    R15,2(R15)              POINT TO DESTINATION
         BAL   R9,MOVNUMBR             GO MOVE NUMBER
         B     WRTNEXT                 GO WRITE TO OUTPUT
P5PICT   MVC   ASMOPND(1),USAGE        START OPERAND WITH TYPE
         CLI   ASMOPND,C'D'            DOUBLEWORD?
         BNE   P5CHKFW                 NO
         MVC   ASMOPND(2),=CL2'2F'     COBOL USES 2F, NOT D
         B     WRTNEXT                 YES
P5CHKFW  CLI   ASMOPND,C'F'            FULLWORD?
         BE    WRTNEXT                 YES
         CLI   ASMOPND,C'H'            HALFWORD?
         BE    WRTNEXT                 YES
         MVI   ASMOPND+1,C'L'          LENGTH DELIMITER
         ZAP   DBLWD,FIELDLEN          MOVE FIELD LENGTH
         LA    R15,ASMOPND+2           POINT TO DESTINATION
         BAL   R9,MOVNUMBR             GO MOVE NUMBER
         B     WRTNEXT                 GO WRITE TO OUTPUT
P5LEV88  CLI   VALUE1,0                ANY VALUE?
         BE    P5STEP                  NO
         MVC   ASMMNE(3),=C'EQU'       SET MNEMONIC
         MVC   ASMOPND(4),=C'C'' '''   SET OPERAND
         MVC   ASMOPND+2(1),VALUE1     MOVE IN VALUE
WRTNEXT  BAL   R9,PUTASM               GO WRITE TO OUTPUT
P5STEP   LA    R6,L'CHARNTRY(R6)       ADVANCE TO NEXT LINE
         B     P5CHKND                 CONTINUE
******************************************************************
*        END OF JOB                                              *
* (1) WRITE THE TABLE OF FIELD CHARACTERISTICS TO A FILE.        *
* (2) REMOVE ALL REDEFINITIONS FROM THE TABLE.                   *
* (3) REPLICATE GROUP LEVEL USAGE CLAUSES THRU ELEMENTARY ITEMS  *
*     IN THE GROUP.                                              *
* (4) COMPUTE SIZES OF ALL PACKED DECIMAL AND BINARY ELEMENTARY  *
*     ITEMS.                                                     *
* (5) PASS THE TABLE, CALCULATING THE LENGTHS OF ALL GROUP ITEMS.*
* (6) SCAN THE TABLE FOR OCCURRING ITEMS. FOR EACH ITEM FOUND,   *
*     SET ITS NUMPIC FIELD TO 'O' AND CREATE A NEW ENTRY WITH ONE*
*     LESS OCCURRENCE AT THE END OF THE FIRST OCCURRENCE.        *
* (7) RUN THE TABLE AND WRITE AN OUTPUT FILE CONTAINING THE      *
*     EQUIVALENT ASSEMBLER RECORD DESCRIPTION INSTRUCTIONS. AN   *
*     88 LEVEL ITEM IS WRITTEN OUT ONLY IF IT HAS A VALUE IN ITS *
*     VALUE1 FIELD.                                              *
*                                                                *
******************************************************************
EOJ      ST    R6,TBLLST               POINT TO LAST ENTRY + 1
         BAL   R9,REDFNSCR             REMOVE REDEFINITIONS
         BAL   R9,REPLGRP              REPLICATE GROUP USAGE
         BAL   R9,NUMERSIZ             COMPUTE PACKED/BINARY SIZES
         BAL   R9,GROUPSIZ             COMPUTE GROUP ITEM SIZES
         BAL   R9,OCCURFLD             PROCESS OCCURRING ITEMS
         BAL   R9,WRTOUTFL             WRITE OUTPUT FILE
EOJ2     CLOSE (OUTPUT1,,PRINT1,,INPUT1) CLOSE FILES
         L     R13,4(R13)              GET CALLERS SAVE POINTER
         LM    R14,R12,12(R13)         RESTORE HIS REGS
         SR    R15,R15                 CLEAR RETURN CODE
         BR    R14                     RETURN TO CALLER
******************************************************************
*        MOVE A NUMBER LEFT JUSTIFIED WITH NO LEADING ZEROS      *
******************************************************************
MOVNUMBR ZAP   DBLWD,DBLWD             IS NUMBER ZERO?
         BNE   CLRSIGN                 NO
         MVI   0(R15),C'0'             SET TO ZERO
         LA    R15,1(R15)              STEP PAST THE ZERO
         BR    R9                      AND EXIT
CLRSIGN  OI    DBLWD+7,X'0F'           CLEAR SIGN
         UNPK  WORK,DBLWD              UNPACK INTO WORK AREA
         LA    R14,WORK                POINT TO WORK
MNCKEND  CLI   0(R14),C'0'             LEADING ZERO?
         BNE   MNMOVE                  NO, GO MOVE
         LA    R14,1(R14)              ADVANCE 1 BYTE
         B     MNCKEND                 LOOP
MNMOVE   MVC   0(1,R15),0(R14)         MOVE A BYTE
         LA    R14,1(R14)              ADVANCE 1 BYTE
         LA    R15,1(R15)              ADVANCE 1 BYTE
         CLI   0(R14),0                FINISHED?
         BNE   MNMOVE                  NO, CONTINUE MOVE
         BR    R9                      EXIT
******************************************************************
*        MISCELLANEOUS DATA FIELDS                               *
******************************************************************
DBLWD    DS    D                       DOUBLEWORD WORK AREA
TBLSTART DS    F                       START OF CHARACTERISTIC TBL
TBLEND   DS    F                       END OF TABLE
TBLLST   DS    F                       LAST REAL ENTRY +1
COBEND   DC    A(COBAUD)               END OF COBOL RECORD
US9      DS    F                       USAGE RETURN ADDRESS
WO9      DS    F                       WRTOUT RETURN ADDRESS
VL9      DS    F                       VALUE RETURN ADDRESS
SY9      DS    F                       SYNC RETURN ADDRESS
SI9      DS    F                       SIGN RETURN ADDRESS
PI9      DS    F                       PICTURE RETURN ADDRESS
OC9      DS    F                       OCCURS RETURN ADDRESS
JU9      DS    F                       JUST RETURN ADDRESS
RE9      DS    F                       REDEFINES RETURN ADDRESS
BL9      DS    F                       BLANK RETURN ADDRESS
GL9      DS    F                       GETLEVL RETURN ADDR
GF9      DS    F                       GETFLD RETURN ADDR
GN9      DS    F                       GETDNAM RETURN ADDR
CL9      DS    F                       CLAUSES RETURN ADDR
CHARSIZE DC    A(1000*L'CHARNTRY)      SIZE OF CHARACTERISTIC TABLE
ENTRYLEN DC    AL2(L'CHARNTRY)         LENGTH OF CHAR.TBL ENTRY
H3       DC    H'3'                    CONSTANT 3
P0       DC    P'0'
P1       DC    PL1'1'                  CONSTANT 1
P2       DC    P'2'
P4       DC    P'4'
P5       DC    P'5'
P8       DC    P'8'
P10      DC    P'10'
P88      DC    P'88'
SAVELVL  DS    PL2                     LEVEL NUMBER SAVE
PRT      DC    CL80' '                 PRINT LINE
BLANX    DC    CL80' '                 BLANKS
CNVWRK   DC    CL6'0'                  NUMERIC CONVERSION FIELD
QUOT     DC    X'00'                   QUOTED STRING INDIC
PERIOD   DC    CL1' '                  END OF STATEMENT INDIC
NUMSW    DC    X'00'                   NUMERIC TEST SWITCH
GFSW     DC    X'00'                   GOT NEXT FIELD SWITCH
FIELD    DC    CL60' '                 INPUT COBOL FIELD
WORK     DS    CL16                    WORK FIELD
         DC    X'00'                   WORK TERMINATOR CHAR
SYNCSW   DC    X'00'                   01= COMP SYNC FIELDS FOUND
WARNSYNC DC    CL40'WARNING: INPUT CONTAINED COMP SYNC ITEMS'
         DC    CL40' WHICH MAY RESULT IN ADDED BYTES DUE TO '
WARNSYN2 DC    CL40'         BOUNDARY ALIGNMENT. THIS CAN CA'
         DC    CL40'USE INCORRECT GROUP ITEM SIZES: DS 0CL--'
REMENTS  DC    CL30'***** REMAINING ENTRIES *****'
FLDLEN   DC    XL1'00'                 INPUT COBOL FIELD LENGTH -1
WORDNO   DC    AL1(0)                  COBOL RESERVED WORD NUMBER
NUMERIC  DC    CL256' '                TRT TABLE TO TEST FOR NUMERIC
         ORG NUMERIC+C'0'
         DC    10X'00'                 CLEAR THE NUMBER VALUES
         ORG
TRTFF    DC    256X'FF'                TRT TABLE
TRT00    DC    256X'00'                TRT TABLE
PICTRT   DC    256X'FF'                PICTURE SIZE CHECK
         ORG   PICTRT+C')'
RPRN     DC    X'01'                   STOP COMPLETE ON RT PAREN
         ORG   PICTRT+C'0'
         DC    10X'00'                 DON'T STOP ON F0-F9
         ORG
******************************************************************
*        ASSEMBLER OUTPUT LINE                                   *
******************************************************************
ASMLINE  DS    0CL80                   ASSEMBLER OUTPUT LINE
ASMLBL   DS    CL8                     LABEL
         DS    CL1
ASMMNE   DS    CL5                     OP-CODE MNEMONIC
         DS    CL1
ASMOPND  DS    CL9                     OPERAND
         DS    CL1
ASMLVL   DS    CL2                     COBOL LEVEL NUMBER
         DS    CL1
ASMDNAM  DS    CL30                    COBOL DATANAME
         DS    CL1
ASMRED   DS    CL1                     REDEFINES INDIC
ASMSYNC  DS    CL1                     SYNC INDIC
ASMOCC   DS    CL1
ASMNBR   DS    CL8                     OCCURS INFO
         DS    CL1
         DS    CL9
******************************************************************
*        COBOL INPUT LINE                                        *
******************************************************************
COBIN    DS    0CL80                   COBOL INPUT RECORD
COBNUM   DS    CL6                     STATEMENT NUMBER
COBCC    DS    CL1                     COMMENT/CONTINUATION
COBAMGN  DS    CL4                     A MARGIN
COBBMGN  DS    CL60                    B MARGIN
COBAUD   DS    CL9                     AUDIT TRAIL, ETC
******************************************************************
*        BLANK TABLE ENTRY                                       *
******************************************************************
CHARBLNK DS    0CL44                   ASSEMBLER DATA
         DC    PL2'0'                  COBOL LEVEL NUMBER
         DC    PL3'0'                  FIELD LENGTH (DIGITS)
         DC    PL3'1'                  NUMBER OF OCCURRENCES
         DC    CL1'G'                  G(ROUP) OR E(LEMENTARY)
         DC    CL1' '                  R(EDEFINITION)
         DC    CL1' '                  S(YNCHRONIZED)
         DC    CL1'C'                  C(HR),B(IN),P(ACKED)
         DC    CL1'9'                  9=NUMERIC PICTURE STRING
         DC    XL1'00'                 VALUE IF ONE-BYTE 88
         DC    CL30' '                 COBOL DATANAME
******************************************************************
*        COBOL RESERVED WORDS TABLE                              *
*           BYTE 1 IS WORD NUMBER (IDENTIFIER)                   *
*           BYTE 2 IS LENGTH-1 OF WORD                           *
*           BYTES 3-17 CONTAIN THE WORD, LEFT JUSTIFIED          *
*           LAST ENTRY HAS HEX FF'S IN 1ST 2 BYTES               *
******************************************************************
COBWORDS DC    AL1(1),AL1(8),CL15'REDEFINES'
         DC    AL1(2),AL1(4),CL15'BLANK'
         DC    AL1(3),AL1(3),CL15'WHEN'
         DC    AL1(4),AL1(3),CL15'ZERO'
         DC    AL1(5),AL1(3),CL15'JUST'
         DC    AL1(5),AL1(8),CL15'JUSTIFIED'
         DC    AL1(6),AL1(5),CL15'OCCURS'
         DC    AL1(7),AL1(2),CL15'PIC'
         DC    AL1(7),AL1(6),CL15'PICTURE'
         DC    AL1(8),AL1(3),CL15'SIGN'
         DC    AL1(9),AL1(3),CL15'SYNC'
         DC    AL1(9),AL1(11),CL15'SYNCHRONIZED'
         DC    AL1(10),AL1(4),CL15'USAGE'
         DC    AL1(11),AL1(4),CL15'VALUE'
         DC    AL1(11),AL1(5),CL15'VALUES'
         DC    AL1(12),AL1(4),CL15'RIGHT'
         DC    AL1(13),AL1(1),CL15'IS'
         DC    AL1(14),AL1(6),CL15'LEADING'
         DC    AL1(15),AL1(7),CL15'TRAILING'
         DC    AL1(16),AL1(7),CL15'SEPARATE'
         DC    AL1(17),AL1(8),CL15'CHARACTER'
         DC    AL1(18),AL1(3),CL15'LEFT'
         DC    AL1(19),AL1(6),CL15'DISPLAY'
         DC    AL1(20),AL1(6),CL15'INDEXED'
         DC    AL1(21),AL1(4),CL15'INDEX'
         DC    AL1(22),AL1(3),CL15'COMP'
         DC    AL1(22),AL1(12),CL15'COMPUTATIONAL'
         DC    AL1(23),AL1(14),CL15'COMPUTATIONAL-3'
         DC    AL1(23),AL1(5),CL15'COMP-3'
         DC    AL1(24),AL1(14),CL15'COMPUTATIONAL-4'
         DC    AL1(24),AL1(5),CL15'COMP-4'
         DC    AL1(25),AL1(2),CL15'ARE'
         DC    AL1(26),AL1(6),CL15'THROUGH'
         DC    AL1(26),AL1(3),CL15'THRU'
         DC    AL1(27),AL1(4),CL15'TIMES'
         DC    AL1(28),AL1(8),CL15'ASCENDING'
         DC    AL1(29),AL1(9),CL15'DESCENDING'
         DC    AL1(30),AL1(2),CL15'KEY'
         DC    AL1(31),AL1(1),CL15'BY'
         DC    AL1(32),AL1(1),CL15'TO'
         DC    AL1(33),AL1(8),CL15'DEPENDING'
         DC    AL1(34),AL1(1),CL15'ON'
         DC    AL1(255),AL1(255),AL1(255)
******************************************************************
*        PICTURE STRING CHARACTER TABLE                          *
******************************************************************
PICTBL   DC    256X'00'                PICTURE STRING TABLE
         ORG   PICTBL+C'.'
         DC    X'08'
         ORG   PICTBL+C'A'
         DC    X'08'
         ORG   PICTBL+C'B'
         DC    X'08'
         ORG   PICTBL+C'X'
         DC    X'08'
         ORG   PICTBL+C'Z'
         DC    X'08'
         ORG   PICTBL+C'9'
         DC    X'0C'
         ORG   PICTBL+C'0'
         DC    X'08'
         ORG   PICTBL+C'/'
         DC    X'08'
         ORG   PICTBL+C','
         DC    X'08'
         ORG   PICTBL+C'+'
         DC    X'08'
         ORG   PICTBL+C'-'
         DC    X'08'
         ORG   PICTBL+C'*'
         DC    X'08'
         ORG   PICTBL+C'$'
         DC    X'08'
         ORG   PICTBL+C'C'
         DC    X'04'
         ORG   PICTBL+C'D'
         DC    X'04'
         ORG
******************************************************************
*        FILE DEFINITIONS                                        *
******************************************************************
OUTPUT1  DCB   DSORG=PS,MACRF=PM,DDNAME=OUTPUT1,                       X
               RECFM=FB,LRECL=80
PRINT1   DCB   DSORG=PS,MACRF=PM,DDNAME=PRINT1,                        X
               RECFM=FB,LRECL=80
INPUT1   DCB   DSORG=PS,MACRF=GM,DDNAME=INPUT1,EODAD=EOJ,              X
               RECFM=FB,LRECL=80
         LTORG
******************************************************************
*        FIELD CHARACTERISTICS TABLE                             *
******************************************************************
CHARTBL  DSECT ,
CHARNTRY DS    0CL44                   FIELD CHARACTERISTICS
LEVEL    DS    PL2                     COBOL LEVEL NUMBER
FIELDLEN DS    PL3                     FIELD LENGTH
OCCURS   DS    PL3                     NUMBER OF OCCURRENCES
GRPELEM  DS    CL1                     G(ROUP) E(LEMENTARY) C(OND)
REDEFINS DS    CL1                     R(EDEFINITION)
SYNCH    DS    CL1                     S(YNCHRONIZED)
USAGE    DS    CL1                     C(HAR), B(INARY), P(ACKED)
*                                      AT END, C(HAR), Z(ONED DEC),
*                                      P(ACKED DEC), (HE)X, H(ALFWORD),
*                                      F(ULLWORD), D(OUBLEWORD)
NUMPIC   DS    CL1                     9=NUMERIC PICTURE STRING
*                                      AT END O(CCURRING ITEM)
VALUE1   DS    CL1                     VALUE IF ONE-BYTE 88 ELSE HEX 0
DATANAME DS    CL30                    COBOL DATANAME
COB2ASM  CSECT
         END
