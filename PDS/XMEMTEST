         PRINT NOGEN
         TITLE 'XMEMTEST: TEST THE XMEMGET SUBROUTINE'
*
**********************************************************************
* THIS PROGRAM IS USED TO TEST THE XMEMGET SUBROUTINE BY OBTAINING   *
* A 256-BYTE AREA OF MEMORY FROM THE JES2 ADDRESS SPACE.             *
* AUTHOR R THORNTON AUG 1985                                         *
**********************************************************************
*
*
**********************************************************************
*         INITIALIZE REGISTERS, CHAIN SAVE AREAS, AND POINT TO THE   *
*         PARAMETER LIST PASSED BY THE CALLER.                       *
**********************************************************************
*
XMEMTEST CSECT
         STM   R14,R12,12(R13)         SAVE CALLER'S REGS
         LR    R3,R15                  COPY THE PROGRAM BASE REG
         USING XMEMTEST,R3
         B     INIT1                   GO TO INITIALIZATION
         DC    CL8'XMEMTEST'           PROGRAM NAME
SAVE     DS    18F                     REGISTER SAVE AREA
INIT1    LA    R15,SAVE                POINT TO MY SAVE AREA
         ST    R15,8(R13)              CHAIN FORWARD
         ST    R13,SAVE+4              CHAIN BACKWARD
         LR    R13,R15                 POINT R13 TO MY SAVE
         OPEN  (SYSPRINT,OUTPUT)       OPEN PRINT FILE
*
**********************************************************************
*         BUILD THE PARAMETER LIST FOR XMEMGET                       *
**********************************************************************
*
         USING PSA,R0
         L     R15,FLCCVT              GET CVT ADDRESS
         DROP  R0
         USING CVT,R15
         L     R15,CVTASVT             GET ASVT ADDRESS
         DROP  R15
         USING ASVT,R15                ADDRESS SPACE VECTOR TABLE
         L     R14,ASVTMAXU            LOAD MAX NBR ASIDS
ASIDLOOP TM    ASVTENTY,ASVTAVAL       IS THIS ASID IN USE?
         BZ    CHKJOBN                 YES, MIGHT BE TARGET
USENEXTV LA    R15,L'ASVTENTY(,R15)    NO, POINT TO NEXT ASVT ENTRY
         BCT   R14,ASIDLOOP            AND RETRY
         WTO   'XMEMTEST: JES2 NOT IN THE SYSTEM',ROUTCDE=11
         ABEND 111,DUMP                AND TERMINATE
CHKJOBN  L     R1,ASVTENTY             POINT TO THE ASCB
         USING ASCB,R1
         L     R2,ASCBJBNI             LOAD INIT JNAME ADDRESS
         CLC   XMJOBNM,0(R2)           IS THIS THE RIGHT JOBNAME?
         BE    GETASXB                 YES, GO GET ASXB ADDRESS
         L     R2,ASCBJBNS             NO, USE STC/TSO ID POINTER
CHECKNAM CLC   XMJOBNM,0(R2)           IS THIS THE ASID?
         BNE   USENEXTV                NO, REENTER LOOP
         DROP  R15
         MVC   XMADDR,ASCBASXB         MOVE ASXB ADDRESS TO PARMS
         DROP  R1
*
**********************************************************************
*         CALL XMEMGET TO GET THE ASXB                               *
**********************************************************************
*
GETASXB  MVC   XMLENG,H8               NBR BYTES OF ASXB NEEDED
         CALL  XMEMGET,(XMPARM)        CALL TO GET JES2'S DATA
         CLI   XMINDIC,C' '            WAS IT SUCCESSFUL?
         BE    GOTASXB                 YES
         WTO   'XMEMTEST: NO ASXB RETURNED BY XMEMGET',ROUTCDE=11
         ABEND 222,DUMP                TERMINATE ABNORMALLY
*
**********************************************************************
*        GET THE ADDRESS OF THE FIRST TCB ON THE DISPATCHING QUEUE   *
*        FROM THE ASXB AND USE IT FOR THE NEXT CALL TO XMEMGET       *
**********************************************************************
*
GOTASXB  GETMAIN R,LV=32               GET STORAGE FOR ASXB
         ST    R1,ANCHOR               SAVE BEGIN ADDRESS
         ST    R1,ENDCHAIN             SAVE END ADDRESS
         MVC   0(4,R1),=XL4'00000000'  SET FORWARD POINTER
         MVC   4(4,R1),=C'ASXB'        IDENTIFY CONTENTS
         MVC   8(24,R1),XMPARM         MOVE ASXB TO GOTTEN STORAGE
         LA    R1,XMAREA               POINT TO THE GOTTEN MEMORY
         USING ASXB,R1
         MVC   XMADDR,ASXBFTCB         MOVE TCB ADDRESS TO PARMS
         DROP  R1
*
**********************************************************************
*         CALL XMEMGET TO GET THE TCB                                *
**********************************************************************
*
GETTCB   MVC   XMLENG,H140             NBR TCB BYTES NEEDED
         CALL  XMEMGET,(XMPARM)        CALL TO GET JES2'S DATA
         CLI   XMINDIC,C' '            WAS IT SUCCESSFUL?
         BE    GOTTCB                  YES
         WTO   'XMEMTEST: NO TCB RETURNED BY XMEMGET',ROUTCDE=11
         ABEND 333,DUMP                TERMINATE ABNORMALLY
*
**********************************************************************
*        GET THE ADDRESS OF THE TIOT FROM THE TCB AND USE IT FOR THE *
*        NEXT CALL TO XMEMGET                                        *
**********************************************************************
*
GOTTCB   GETMAIN R,LV=164              GET STORAGE FOR TCB
         L     R2,ENDCHAIN             GET CURRENT END OF CHAIN
         ST    R1,4(R2)                SET FORWARD POINTER IN LAST
         ST    R1,ENDCHAIN             SAVE NEW END ADDRESS
         MVC   0(4,R1),=XL4'00000000'  SET FORWARD POINTER
         MVC   4(4,R1),=C'TCB '        IDENTIFY CONTENTS
         MVC   8(156,R1),XMPARM        MOVE TCB TO GOTTEN STORAGE
         LA    R1,XMAREA               POINT TO THE GOTTEN MEMORY
         USING TCB,R1
         MVC   NEXTCB,TCBTCB           SAVE NEXT TCB ADDRESS
         MVC   XMADDR,TCBTIO           MOVE TIOT ADDRESS TO PARMS
         DROP  R1
*
**********************************************************************
*         CALL XMEMGET TO GET THE TIOT                               *
**********************************************************************
*
         MVC   XMLENG,H80              NBR BYTES OF TIOT NEEDED
         CALL  XMEMGET,(XMPARM)        CALL TO GET JES2'S DATA
         CLI   XMINDIC,C' '            WAS IT SUCCESSFUL?
         BE    GOTTIOT                 YES
         WTO   'XMEMTEST: NO TIOT RETURNED BY XMEMGET',ROUTCDE=11
         ABEND 333,DUMP                TERMINATE ABNORMALLY
*
**********************************************************************
*         CALL XMEMGET TO GET THE TIOT                               *
**********************************************************************
*
GOTTIOT  GETMAIN R,LV=104              GET STORAGE FOR TIOT
         L     R2,ENDCHAIN             GET CURRENT END OF CHAIN
         ST    R1,4(R2)                SET FORWARD POINTER IN LAST
         ST    R1,ENDCHAIN             SAVE NEW END ADDRESS
         MVC   0(4,R1),=XL4'00000000'  SET FORWARD POINTER
         MVC   4(4,R1),=C'TIOT'        IDENTIFY CONTENTS
         MVC   8(96,R1),XMPARM         MOVE TCB TO GOTTEN STORAGE
         LA    R1,XMAREA               POINT TO THE TIOT
         USING TIOT,R1
         CLC   TIOCNJOB,XMJOBNM        THIS THE RIGHT TCB/TIOT?
         BE    DSPYTIOT                YES
         MVC   XMADDR,NEXTCB           NO, USE NEXT TCB ADDRESS
         B     GETTCB                  AND GO GET IT
         DROP  R1
*
**********************************************************************
*         DISPLAY THE BEGINNING OF THE TIOT                          *
**********************************************************************
*
DSPYTIOT PUT   SYSPRINT,XMAREA         DISPLAY PART OF TIOT
*
**********************************************************************
*        END OF JOB, RETURN TO OPERATING SYSTEM                      *
**********************************************************************
*
EOJ      CLOSE SYSPRINT                CLOSE PRINT FILE
         L     R13,4(R13)              POINT TO CALLER'S SAVE AREA
         LM    R14,R12,12(R13)         RESTORE CALLER'S REGS
         SR    R15,R15                 CLEAR RETURN CODE
         BR    R14                     RETURN TO CALLER
*
**********************************************************************
*        FILE DEFINITIONS                                            *
**********************************************************************
*
SYSPRINT DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,                      X
               RECFM=FB,LRECL=80,BLKSIZE=80
*
**********************************************************************
*        MISCELLANEOUS AREAS                                         *
**********************************************************************
*
ANCHOR   DC    A(0)                    ANCHOR FOR GETMAINS
ENDCHAIN DC    A(0)                    END OF GETMAIN CHAIN
NEXTCB   DS    A                       ADDRESS OF NEXT JES2 TCB
H8       DC    H'8'                    CONSTANT 8
H80      DC    H'80'                   CONSTANT 80
H140     DC    H'140'                  CONSTANT 140
*
**********************************************************************
*        PARAMETER AREA PASSED TO XMEMGET                            *
**********************************************************************
*
XMPARM   DS    0F                      PARMS FOR XMEMGET
XMJOBNM  DC    CL8'JES2'               OTHER ADDRESS SPACE JOBNAME
XMADDR   DC    A(0)                    OTHER ADDRESS SPACE ADDRESS
XMINDIC  DC    CL1' '                  INDICATOR, ' '=SUCCESSFUL
*                                        'S'=MEMORY SWAPPED OUT
*                                        'P'=PROTECTION EXCEPTION
         DS    CL1                     RESERVED
XMLENG   DS    H                       MOVE LENGTH, 0001-0100
XMAREA   DC    CL256' '                1-256 BYTES OF DATA
*
**********************************************************************
*        PREFIXED STORAGE AREA                                       *
*        IHAPSA                                                      *
**********************************************************************
*
PSA      DSECT ,                       LOW 4K MEMORY AREA
FLCCVT   EQU   PSA+16,4                CVT POINTER
PSAAOLD  EQU   PSA+548,4               ASCB OLD POINTER
*
**********************************************************************
*        COMMUNICATIONS VECTOR TABLE                                 *
*        CVT  DSECT=YES                                              *
**********************************************************************
*
CVT      DSECT ,                       COMMUNICATIONS VECTOR TABLE
CVTBRET  EQU   CVT+82,2                RETURN TO CALLER (BAL INSTR)
CVTASVT  EQU   CVT+556,4               POINTER TO ASVT
*
**********************************************************************
*        ADDRESS SPACE VECTOR TABLE                                  *
*        IHAASVT                                                     *
**********************************************************************
*
ASVT     DSECT ,                       ADDRESS SPACE VECTOR TABLE
ASVTMAXU EQU   ASVT+516,4              MAX NUMBER OF ADDRESS SPACES
ASVTENTY EQU   ASVT+528,4              POINTER TO ASCB
ASVTAVAL EQU   X'80'                   1=ASID AVAILABLE, 0=ASSIGNED
*
**********************************************************************
*        ADDRESS SPACE CONTROL BLOCK                                 *
*        IHAASCB                                                     *
**********************************************************************
*
ASCB     DSECT ,                       ADDRESS SPACE CONTROL BLOCK
ASCBASID EQU   ASCB+36,2               ADDRESS SPACE IDENTIFIER
ASCBDP   EQU   ASCB+43,1               DISPATCHING PRIORITY (0-255)
ASCBASXB EQU   ASCB+108,4              POINTER TO ASXB
ASCBJBNI EQU   ASCB+172,4              POINTER TO JOBNAME (INITIATED)
ASCBJBNS EQU   ASCB+176,4              POINTER TO JOBNAME (STARTED)
*
**********************************************************************
*        ADDRESS SPACE EXTENSION BLOCK                               *
*        IHAASXB                                                     *
**********************************************************************
*
ASXB     DSECT ,                       ADDRESS SPACE EXTENSION BLOCK
ASXBFTCB EQU   ASXB+4,4                ADDRESS OF FIRST TCB ON QUEUE
*
**********************************************************************
*        TASK CONTROL BLOCK                                          *
*        IKJTCB                                                      *
**********************************************************************
*
TCB      DSECT ,                       TASK CONTROL BLOCK
TCBTIO   EQU   TCB+12,4                ADDRESS OF THE TIOT
TCBTCB   EQU   TCB+116,4               ADDRESS OF NEXT TCB ON READY Q
*
**********************************************************************
*        TASK INPUT OUTPUT TABLE                                     *
*        IEFTIOT1                                                    *
**********************************************************************
*
TIOT     DSECT ,                       TASK INPUT OUTPUT TABLE
TIOCNJOB EQU   TIOT+0,8                JOB NAME
TIOCSTEP EQU   TIOT+8,16               STEP NAME OR PROC STEP NAME AND
*                                        STEP NAME
XMEMTEST CSECT
*
***********************************************************************
*        REGISTER EQUATES                                             *
***********************************************************************
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
