***********************************************************************
*                                                                     *
*                           G T R A N D O M                           *
*                                                                     *
*    THE FOLLOWING SUBROUTINE WILL GENERATE PSEUDO-RANDOM NUMBERS     *
* BASED ON A "SEED" VALUE AND PREDEFINED LIMITS SET BY THE CALLING    *
* PROGRAM.  THIS SUBROUTINE FOLLOWS STANDARD LINKAGE CONVENTIONS AND  *
* CAN BE CALLED BY A COBOL PROGRAM.                                   *
*                                                                     *
*    THIS SUBROUTINE IS REUSABLE, REENTERABLE, AND REFRESHABLE.  IT   *
* HAS NOT BEEN TESTED WITH ANY ATTRIBUTE OTHER THAN AMODE/RMODE 24.   *
*                                                                     *
*    THE CALLING PROGRAM MUST PASS A FOUR-WORD PARAMETER LIST THAT    *
* CONTAINS CONTROL VALUES IN THE FOLLOWING FORMAT:                    *
*                                                                     *
*              BYTES 00-03 - THE RANDOM NUMBER "SEED" VALUE.          *
*              BYTES 04-07 - THE ORIGIN OF THE SELECTION RANGE.       *
*              BYTES 08-11 - THE LIMIT OF THE SELECTION RANGE.        *
*              BYTES 12-15 - THE RANDOM NUMBER RETURNED.              *
*                                                                     *
* (ALL PARAMETERS ARE SIGNED, TWO'S-COMPLEMENT BINARY NUMBERS, AND,   *
* EXCEPT FOR THE "SEED", MUST BE POSITIVE.)                           *
*                                                                     *
*    IF A ZERO VALUE IS SPECIFIED FOR THE RANDOM SEED, THE "GTRANDOM" *
* SUBROUTINE WILL INITIALIZE THE WORK AREA TO AN APPROPRIATE VALUE,   *
* EXTRACTED FROM THE TOD (TIME-OF-DAY) CLOCK VIA THE "STCK" NON-      *
* PRIVILEGED INSTRUCTION.                                             *
*                                                                     *
*    THE SUBROUTINE USES LEHMER'S RANDOM NUMBER ALGORITHM (CACM,      *
* JUN '66, PP 432.) TO SELECT A NUMBER AT RANDOM FROM AN INCLUSIVE    *
* RANGE OF:                                                           *
*              (RANGE ORIGIN),                                        *
*                 THROUGH AND INCLUDING,                              *
*                    (THE RANGE LIMIT).                               *
*                                                                     *
*    "GTRANDOM" RETURNS A VALUE IN REGISTER 15, WHICH MAY BE EXAMINED *
* DIRECTLY OR VIA THE COBOL "RETURN-CODE" SPECIAL REGISTER, THAT      *
* INDICATES WHETHER OR NOT THE RESULTING PARAMETER LIST IS VALID:     *
*                                                                     *
*              RC=00 - SUCCESSFUL COMPLETION.                         *
*              RC=04 - RANDOM SEED WAS SET BY THE SUBROUTINE.         *
*              RC=08 - (NOT USED).                                    *
*              RC=12 - PARAMETER LIST VALUES ARE NOT POSITIVE.        *
*              RC=16 - INVALID PARAMETER LIST.                        *
*                                                                     *
* IF THE RETURN CODE IS 4 OR LESS, A RANDOM NUMBER IS PRESENT IN WORD *
* 4 OF THE PARAMETER LIST AND A NEW SEED VALUE HAS BEEN STORED IN THE *
* FIRST WORD OF THE PARAMETER LIST.  IF THE RETURN CODE IS GREATER    *
* THAN 4, THE PARAMETER LIST IS LEFT UNCHANGED.                       *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*    TO CALL THIS SUBROUTINE FROM A COBOL PROGRAM, THE FOLLOWING MUST *
* APPEAR IN THE WORKING-STORAGE SECTION OF THE DATA DIVISION:         *
*                                                                     *
*        01  GTRANDOM-PARAMETER-LIST.                                 *
*            05  RANDOM-SEED                 PIC S9(9) COMP SYNC.     *
*            05  RANDOM-ORIGIN               PIC S9(9) COMP SYNC.     *
*            05  RANDOM-LIMIT                PIC S9(9) COMP SYNC.     *
*            05  RANDOM-RESULT               PIC S9(9) COMP SYNC.     *
*                                                                     *
* AND THE FOLLOWING MAY BE USED AS AN EXAMPLE OF THE PROCEDURE        *
* DIVISION STATEMENTS REQUIRED TO GENERATE A RANDOM NUMBER BETWEEN    *
* 15 AND 5000, INCLUSIVE:                                             *
*                                                                     *
*        GET-RANDOM-NUMBER.                                           *
*            MOVE ZERO TO RANDOM-SEED.                                *
*            MOVE 15 TO RANDOM-ORIGIN.                                *
*            MOVE 5000 TO RANDOM-LIMIT.                               *
*            CALL 'GTRANDOM'                                          *
*                USING RANDOM-SEED, RANDOM-ORIGIN,                    *
*                    RANDOM-LIMIT, RANDOM-RESULT.                     *
*            IF RETURN-CODE IS GREATER THAN 4,                        *
*                PERFORM KNASH-TEETH-PULL-HAIR-AND-CURSE-LOUDLY.      *
*                                                                     *
*    AT THIS POINT, "RANDOM-RESULT" HAS THE RANDOM NUMBER.  IT IS     *
* VERY IMPORTANT TO REMEMBER NOT TO DISTURB THE "RANDOM-SEED" FIELD   *
* AFTER THE FIRST "GTRANDOM" CALL, OR THE VALIDITY OF THE RANDOM      *
* NUMBER SERIES WILL BE COMPROMISED.                                  *
*                                                                     *
*    AS A LAST NOTE, A GOOD THING TO USE TO INITIALIZE THE RANDOM     *
* SEED VALUE IS AN EXTRACTION FROM THE TIME-OF-DAY (TOD) CLOCK, IF    *
* AVAILABLE (VIA AN STCK NON-PRIVILEGED INSTRUCTION), OR THE LOW-     *
* ORDER 3 BYTES OF THE CURRENT TIME (FOR COBOL PROGRAMS).  IF         *
* DESIRED, THE CALLER MAY LEAVE THE "SEED" FIELD SET TO ZERO AND      *
* THE SUBROUTINE WILL EXTRACT A SEED FROM THE TOD CLOCK.
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*    FOR THE CURIOUS SOULS AMONG YOU, LEHMER'S ALGORITHM IS:          *
*                                                                     *
*              N = P MOD QL                                           *
*                                                                     *
* WHERE:                                                              *
*                                                                     *
*          "N" IS THE NEXT NUMBER IN THE "RANDOM" SERIES.             *
*          "P" IS (2 RAISED TO THE 31ST POWER)-1.                     *
*          "Q" IS 7 RAISED TO THE 5TH POWER.                          *
*          "L" IS THE LAST NUMBER IN THE "RANDOM" SERIES (THE SEED).  *
*        "MOD" IS AN OPERATION THAT DIVIDES THE RIGHT VALUE BY THE    *
*              LEFT AND RETURN THE REMAINDER.                         *
*                                                                     *
*    THIS SUBROUTINE WORKS BECAUSE LEHMER'S ALGORITHM WILL RETURN A   *
* NUMBER EVENLY SPACED BETWEEN ZERO AND "P" (ABOVE).  THROUGH USE OF  *
* MULTIPLICATION, WE CAN ARRIVE AT A NUMBER WITHIN OUR RANGE BY       *
* ASSUMING THAT LEHMER'S NUMBER IS A FRACTION BETWEEN 0 AND 1.        *
*                                                                     *
*    IT IS IMPORTANT TO REMEMBER THAT LEHMER'S ALGORITHM SIMPLY STEPS *
* THROUGH A SERIES OF PSEUDO-RANDOM NUMBERS BETWEEN 0 AND "P".  THIS  *
* SERIES IS "RANDOM" ENOUGH FOR MOST APPLICATIONS, BUT WILL REPEAT    *
* AFTER (2E31)-1 INVOCATIONS.                                         *
*                                                                     *
*    THIS SUBROUTINE WAS WRITTEN BY DAVID R. BIVENS, JULY, 1987, WITH *
* HELP FROM THE JUNE, 1966 CACM AND THE ORIGINAL APL/SV SOURCE CODE   *
* (MODULE DQCVADSO).                                                  *
*                                                                     *
*    MODIFIED 08/87 BY DRBIVENS TO EXTRACT A NEW KEY VALUE FROM THE   *
* TOD CLOCK IN THE EVENT A CALLER PASSES A "SEED" THAT HAS A ZERO     *
* VALUE.  THESE REVISIONS ARE MARKED BY A "STCK" IN COLUMNS 68-71.    *
*                                                                     *
***********************************************************************
         EJECT
         PRINT NOGEN
GTRANDOM INIT  ID=*,REGS=Y,RENT=Y,LENGTH=SP0L
         SPACE 1
         USING SP0,R13             PROVIDE WORK AREA ADDRESSIBILITY.
         SPACE 1
         ST    R1,PARMADDR         SAVE ADDRESS OF CALLER'S PARM LIST.
         SPACE 1
         MVI   RETCODE,16          ASSUME AN INVALID PARAMETER LIST.
         SPACE 1
         TM    0(R1),X'80'         TEST FOR END OF PLIST.
         BO    EXIT                END OF LIST INVALID HERE.
         TM    4(R1),X'80'         TEST FOR END OF PLIST.
         BO    EXIT                END OF LIST INVALID HERE.
         TM    8(R1),X'80'         TEST FOR END OF PLIST.
         BO    EXIT                END OF LIST INVALID HERE.
         TM    12(R1),X'80'        TEST FOR END OF PLIST.
         BZ    EXIT                ERROR IF END OF LIST NOT HERE.
         SPACE 1
         L     R2,0(R1)            ADDRESS OF THE FIRST PARAMETER.
         MVC   PLSEED,0(R2)        PICK UP THE RANDOM SEED VALUE.
         L     R2,4(R1)            ADDRESS OF THE SECOND PARAMETER.
         MVC   PLORIGIN,0(R2)      PICK UP THE CANDIDATE SERIES ORIGIN.
         L     R2,8(R1)            ADDRESS OF THE THIRD PARAMETER.
         MVC   PLLIMIT,0(R2)       PICK UP THE CANDIDATE SERIES LIMIT.
         SPACE 1
         MVI   RETCODE,12          ASSUME OUR NEXT PROBLEM IS AN
*                                       INVALID VALUE IN THE PLIST.
         SPACE 1
         L     R2,PLORIGIN         GET THE ORIGIN.
         L     R3,PLLIMIT          GET THE LIMIT.
         SR    R3,R2               SUBTRACT TO GET THE SPREAD.
         BNP   EXIT                ERROR IF RESULT NOT POSITIVE.
         ST    R3,SPREAD           SAVE THE SPREAD VALUE.
         SPACE 1
         MVI   RETCODE,0           ASSUME WE ARE NOT GOING TO SUPPLY AN
*                                       INITIAL SEED VALUE.
         SPACE 1
         L     R2,PLSEED           GET THE SEED VALUE.
         LTR   R2,R2               IS IT ZERO?
         BNZ   SEEDOK              NO, SEED IS OK.
         STCK  TODCLOCK            STORE THE CURRENT CLOCK VALUE.  STCK
         BC    3,TODINVLD          STCK RETURNS CC=0 IF CLOCK IS   STCK
*                                       SET AND RUNNING, CC=1 IF   STCK
*                                       THE CLOCK IS NOT SET, YET  STCK
*                                       RUNNING, CC=2 IF THE CLOCK STCK
*                                       HARDWARE IS IN AN ERROR    STCK
*                                       STATE, AND CC=3 IF THE     STCK
*                                       TOD CLOCK IS STOPPED OR    STCK
*                                       NOT OPERATIONAL.           STCK
*        MVCIN PLSEED,TODCLOCK+6   MOVE THE VALUE IN BACKWARDS.    STCK
         MVC   PLSEED,TODCLOCK+3   MOVE THE VALUE IN FORWARDS      STCK
         NI    PLSEED,B'01111111'  ENSURE WE START "POSITIVELY".   STCK
         MVI   RETCODE,4           TELL THE GUY WHAT WE DID.
SEEDOK   DS    0H
         EJECT
         L     R3,PLSEED           PICK UP THE SEED VALUE.
         M     R2,=F'16807'        7E5.
         D     R2,=X'7FFFFFFF'     (2E31)-1.
         ST    R2,PLSEED           STORE NEW SEED VALUE.
         LTR   R3,R2               TEST FOR NONZERO RESULT, PASS TO R3.
         BZ    MPOSSIBL            "IMPOSSIBLE" ERROR IF ZERO.
         SPACE 1
         L     R4,SPREAD           LOAD UP NUMERIC RANGE.
         A     R4,=F'1'            ADD ONE FOR INCLUSIVITY.
         MR    R2,R4               MULTIPLY BY OUR "FRACTION".
         SLDL  R2,1                ONE DECIMAL PLACE IN ODD REGISTER.
         A     R2,PLORIGIN         ADD IN THE ORIGIN.
         ST    R2,PLRESULT         SAVE IN THE RESULT AREA.
         SPACE 1
         L     R1,PARMADDR         LOAD ADDRESS OF CALLER'S PARM LIST.
         L     R2,0(R1)            ADDRESS OF THE FIRST PARAMETER.
         MVC   0(4,R2),PLSEED      STORE THE RANDOM SEED VALUE.
         L     R2,4(R1)            ADDRESS OF THE SECOND PARAMETER.
         MVC   0(4,R2),PLORIGIN    STORE THE CANDIDATE SERIES ORIGIN.
         L     R2,8(R1)            ADDRESS OF THE THIRD PARAMETER.
         MVC   0(4,R2),PLLIMIT     STORE THE CANDIDATE SERIES LIMIT.
         L     R2,12(R1)           ADDRESS OF THE FOURTH PARAMETER.
         MVC   0(4,R2),PLRESULT    STORE THE RANDOM NUMBER RESULT.
         SPACE 1
EXIT     SR    R1,R1               CLEAR RETURN CODE HOLDER.
         IC    R1,RETCODE          INSERT THE RETURN CODE.
         EXIT  RC=(R1),RENT=Y,LENGTH=SP0L
         EJECT
MPOSSIBL DS    0H
         WTO   'GTRANDOM: "IMPOSSIBLE" ERROR CONDITION ENCOUNTERED',   *
               ROUTCDE=11,DESC=7
         ABEND 219,DUMP
         SPACE 1                                                   STCK
TODINVLD DS    0H                                                  STCK
         WTO   'GTRANDOM: SYSTEM TOD CLOCK ERROR, CC 2 OR 3 RETURNED BY*
                THE "STCK" INSTRUCTION',                           STCK*
               ROUTCDE=(1,11),DESC=1                               STCK
         ABEND 666,DUMP                                            STCK
         EJECT
***********************************************************************
*                                                                     *
*        CONSTANTS AND VARIABLE WORK AREAS USED BY "GTRANDOM"         *
*                                                                     *
***********************************************************************
         SPACE 1
         LTORG ,                   DEFINE LITERAL CONSTANTS.
         SPACE 1
SP0      DSECT ,                   MAP OF SUBPOOL 0 SAVE/WORK AREA.
GENSAVE  DS    18F                 GENERAL REGISTER SAVE AREA.
         SPACE 1
TODCLOCK DS    D                   RESULT OF AN STCK INSTRUCTION.  STCK
         SPACE 1                                                   STCK
PARMADDR DS    F                   ADDRESS OF CALLER'S PARM AREA.
         SPACE 1
PLSEED   DS    F                   CALLER-SUPPLIED SEED VALUE.
PLORIGIN DS    F                   CALLER-SUPPLIED ORIGIN.
PLLIMIT  DS    F                   CALLER-SUPPLIED LIMIT.
PLRESULT DS    F                   SUBROUTINE-SUPPLIED RESULT.
         SPACE 1
SPREAD   DS    F                   NUMERIC SPREAD (LIMIT-ORIGIN).
         SPACE 1
RETCODE  DS    C                   RETURN CODE (TO CALLER).
         SPACE 1
SP0L     EQU   *-SP0               LENGTH FOR GETMAIN.
         SPACE 1
         END   GTRANDOM
