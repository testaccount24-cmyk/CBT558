**********************************************************************
* THIS SOURCE PROGRAM WAS BUILT FROM A DISASSEMBLY OF IEFSD095 AS IT *
* EXISTED IN SYS1.SYSA.HNET.LINKLIB ON NOV 27, 2001 BY DICK THORNTON *
* IN ORDER TO HAVE A SOURCE PROGRAM FOR STORAGE IN ENDEVOR.          *
* SOURCE CODE WAS MODIFIED FROM THE ORIGINAL AS FOLLOWS:             *
* 1) AMODE=31 WAS ADDED                                              *
* 2) RMODE=ANY WAS ADDED                                             *
* 3) GETMAIN MACRO EXPANDS SLIGHTLY DIFFERENTLY NOW                  *
* 4) FREEMAIN MACRO EXPANDS SLIGHTLY DIFFERENTLY NOW                 *
* 5) ADDED INSTRUCTION TO SET R15 TO ZERO (RETCODE=0) ON RETURN      *
*                                                                    *
*                        *** TESTING ***                             *
* SEE ENDEVOR ELEMENT CALL095 FOR A TEST DRIVER THAT CAN BE USED FOR *
* TESTING CHANGES TO IEFSD095.                                       *
**********************************************************************
* IEFSD095 ACCEPTS AS INPUT A CHARACTER STRING THAT IS TO BE USED TO *
* CREATE THE SAME CHARACTER STRING AS LARGE BLOCK LETTERS SUITABLE   *
* FOR PRINTING. THE BLOCK LETTERS REQUIRE 12 LINES, AND ONLY ONE LINE*
* IS PRODUCED FOR EACH CALL, SO THE CALLER MUST CALL THIS SUBROUTINE *
* 12 TIMES, EACH TIME PASSING THE LINE NUMBER AS A PARAMETER. THE    *
* CALLER ALSO PASSES PARAMETERS SPECIFYING THE LENGTH OF THE INPUT   *
* CHARACTER STRING AND THE ADDRESS OF THE OUTPUT AREA WHICH WILL     *
* CONTAIN THE REQUESTED LINE ON RETURN. SINCE EACH CHARACTER REQUIRES*
* 14 BYTES, THE OUTPUT AREA LENGTH MUST BE AT LEAST 14 TIMES THE     *
* LENGTH OF THE INPUT STRING.                                        *
*                                                                    *
* ON ENTRY, IEFSD095 EXPECTS A 4-ADDRESS PARAMETER LIST IN STANDARD  *
* FORM. THE PARAMETERS PASSED ARE:                                   *
*  1. ADDRESS OF THE STRING TO BE TRANSLATED TO BLOCK LETTERS.       *
*  2. ADDRESS OF A FULLWORD CONTAINING THE LINE NUMBER.              *
*  3. ADDRESS OF THE AREA WHICH WILL RECEIVE THE TRANSLATED OUTPUT   *
*  4. ADDRESS OF A FULLWORD CONTAINING THE LENGTH OF THE INPUT STRING*
*                                                                    *
*  SAMPLE CALL FROM A COBOL PROGRAM:                                 *
*  01  IEFSD095-PARAMETERS.                                          *
*      05  IEFSD095-STRING           PIC X(8).                       *
*      05  IEFSD095-LINE-NUMBER      PIC S9(8) COMP.                 *
*      05  IEFSD095-RETURN           PIC X(133) VALUE SPACES.        *
*      05  IEFSD095-STRING-LENGTH    PIC S9(8) COMP.                 *
*                                                                    *
*      MOVE 'BC0THORX' TO IEFSD095-STRING.                           *
*      MOVE +8 TO IEFSD095-STRING-LENGTH.                            *
*      PERFORM 0500-CALL-IEFSD095                                    *
*         VARYING IEFSD095-LINE-NUMBER FROM 1 BY 1 UNTIL             *
*         IEFSD095-LINE-NUMBER > 12.                                 *
*                                                                    *
*  0500-CALL-IEFSD095.                                               *
*      CALL 'IEFSD095' USING IEFSD095-STRING,                        *
*                            IEFSD095-LINE-NUMBER,                   *
*                            IEFSD095-RETURN,                        *
*                            IEFSD095-STRING-LENGTH.                 *
*      WRITE PRINT-LINE FROM IEFSD095-RETURN.                        *
*      MOVE SPACES TO IEFSD095-RETURN.                               *
**********************************************************************
IEFSD095 CSECT
IEFSD095 AMODE 31
IEFSD095 RMODE ANY
         USING *,R15
         STM   R14,R12,12(R13)          SAVE REGS 0000 90ECD00C
         BALR  R9,R0                    SET UP BASE REG FOR CODE
         DROP  R15
         USING *,R9
         L     R3,4(R1)                 R3 = @ LINE#
         L     R3,0(R3)                 R3 = LINE#
         L     R4,8(R1)                 R4 = @ OUTPUT AREA
         L     R11,12(R1)               R11 = @ INPUT STRLEN
         L     R11,0(R11)               R11 = INPUT STRING LEN
         L     R1,0(R1)                 R1 = @ INPUT STRING
         LR    R10,R1                   R10 = @ INPUT STRING
         GETMAIN R,LV=32                GET WORKING STORAGE
         LR    R12,R1                   R12 = @ GOTTEN STORAGE
         LR    R1,R10                   R1 = @ INPUT STRING
         ST    R13,4(,R12)              STORE SAVE AREA POINTER
         XC    0(4,R12),0(R12)          ZERO 1ST WORD OF SAVE AREA
**********************************************************************
* THE NEXTBYTE ROUTINE MOVES THE NEXT BYTE OF THE INPUT STRING TO THE*
* LOW ORDER BYTE OF R2, THEN TESTS TO SEE IF IT IS A-I, J-R, S-Z, 0-9*
* $, #, @, OR NONE OF THESE. ONCE THE CHARACTER RANGE IS DETERMINED, *
* THE ADDRESS OF THE TRANSLATION TABLE FOR THAT CHARACTER (-1) IS    *
* PUT IN R6, AND PROCESSING CONTINUES TO THE GOTPNTR ROUTINE.        *
**********************************************************************
NEXTBYTE MVC   3(1,R12),0(R1)           MOVE IN-STR BYTE TO GOTTEN
         L     R2,0(,R12)               R2 = 000000CC (CC=IN-STR BYTE)
         LR    R10,R2                   R10 = 000000CC
         C     R2,TSTBLNK               IS THE CHARACTER A BLANK?
         BE    GOTBLNK                  YES
         C     R2,TSTDOLR               IS THE CHARACTER A $?
         BE    GOTDOLR                  YES
         C     R2,TSTPNDS               IS IT A POUNDS SIGN?
         BE    GOTPNDSN                 YES
         C     R2,TSTATSIN              IS IT AN AT SIGN?
         BE    GOTATSN                  YES
         C     R2,TSTLTRA               CHARACTER LESS THAN A?
         BL    NOTALNUM                 YES, NOT ALPHABETIC
         C     R2,TSTGTRI               CHARACTER GREATER THAN I?
         BL    GOTATOI                  NO, IT IS ALPHABETIC
         C     R2,TSTLTRJ               CHARACTER LESS THAN J?
         BL    NOTALNUM                 YES, NOT ALPHABETIC
         C     R2,TSTGTRR               CHARACTER IS GREATER THAN R?
         BL    GOTJTOR                  NO, IT IS ALPHABETIC
         C     R2,TSTLTRS               CHARACTER LESS THAN LETTER S?
         BL    NOTALNUM                 YES, NOT ALPHABETIC
         C     R2,TSTGTRZ               CHARACTER > Z?
         BL    GOTSTOZ                  YES IT IS ALPHABETIC
         C     R2,TSTZERO               IT CHARACTER < 0?
         BL    NOTALNUM                 YES, NOT NUMERIC
         C     R2,TSTGTR9               CHARACTER GREATER THAN 9?
         BL    GOTNUMR                  YES, IT IS NUMERIC
NOTALNUM B     GOTBLNK                  NOT ALPHANUMERIC, BRANCH
GOTBLNK  LA    R6,TABLE-1               R6 POINTS TO START OF TABLE
         B     GOTPNTR                  CONTINUE
GOTATOI  S     R2,LESSTHA               DEDUCT 1 LESS THAN A
         MH    R2,ENTRYLEN              MULTIPLY BY ENTRY LENGTH
         LA    R6,TABLE-1               R6 POINTS TO TABLE
         AR    R6,R2                    R6 POINTS CHARACTER ENTRY
         B     GOTPNTR                  CONTINUE
GOTJTOR  S     R2,LESSTHJ               SUBTRACT 1 LESS THAN J
         MH    R2,ENTRYLEN              MULTIPLY BY ENTRY LENGTH
         A     R2,STARTJ                ADD OFFSET TO ENTRY FOR J
         LA    R6,TABLE-1               R6 POINTS TO TABLE
         AR    R6,R2                    R6 POINTS TO TABLE ENTRY
         B     GOTPNTR                  CONTINUE
GOTSTOZ  S     R2,LESSTHS               SUBTRACT 1 LESS THAN S
         MH    R2,ENTRYLEN              MULTIPLY BY ENTRY LENGTH
         A     R2,STARTS                ADD OFFSET TO ENTRY FOR S
         LA    R6,TABLE-1               R6 POINTS TO TABLE
         AR    R6,R2                    R6 POINTS TO CHARACTER ENTRY
         B     GOTPNTR                  CONTINUE
GOTNUMR  S     R2,LESSTH0               SUBTRACT 1 LESS THAN ZERO
         MH    R2,ENTRYLEN              MULTIPLY BY ENTRY LENGTH
         A     R2,START0                ADD OFFSET TO ENTRY FOR '0'
         LA    R6,TABLE-1               R6 POINTS TO TABLE
         AR    R6,R2                    R6 POINTS TO CHARACTER ENTRY
         B     GOTPNTR                  CONTINUE
GOTDOLR  LA    R6,TABLE$-1              POINT TO DOLLAR SIGN TABLE
         B     GOTPNTR                  CONTINUE
GOTPNDSN LA    R6,TABLE#-1              R6 POINTS TO POUNDS SIGN TABLE
         B     GOTPNTR                  CONTINUE
GOTATSN  LA    R6,TABLE@-1              R6 POINTS TO AT SIGN TABLE
**********************************************************************
* GOTPNTR IS ENTERED WITH R9 POINTING TO A TRANSLATION TABLE BYTE    *
* THAT IS USED TO ADDRESS THE EXPANSION TABLE ENTRY FOR THE REQUESTED*
* LINE OF THE SELECTED CHARACTER. THE EXPANSION TABLE ENTRY CONTAINS *
* A BIT PATTERN THAT THIS ROUTINE USES TO BUILD THE BLOCK LETTER     *
* OUTPUT FOR THIS LINE OF THE CHARACTER AT THE CURRENT POSITION IN   *
* THE CALLER'S OUTPUT AREA.                                          *
*                                                                    *
* GOTPNTR IS ENTERED WITH REGISTER CONTENTS AS FOLLOWS:              *
*   R1:  ADDRESS OF CURRENT BYTE IN INPUT STRING                     *
*   R3:  CURRENT LINE NUMBER                                         *
*   R4:  CURRENT OUTPUT AREA ADDRESS                                 *
*   R6:  ADDRESS OF THE CHARACTER TRANSLATION TABLE -1               *
*   R9:  BASE REGISTER FOR INSTRUCTIONS                              *
*   R10: 000000CC, WHERE CC IS THE CURRENT BYTE FROM THE INPUT STRING*
*   R11: INPUT STRING LENGTH                                         *
*   R12: ADDRESS OF A 32-BYTE GOTTEN STORAGE WORK AREA               *
* DURING PROCESSING:                                                 *
*   R2:  WORK REG                                                    *
*   R7:  WORK REG                                                    *
*   R8:  WORK REG                                                    *
* ON RETURN:                                                         *
*   R1 IS INCREMENTED BY 1 (TO NEXT INPUT STRING BYTE)               *
*   R4 IS INCREMENTED BY 14 (WIDTH OF ONE TRANSLATED CHARACTER)      *
*   R11 IS DECREMENTED BY 1 (REMAINING LENGTH OF INPUT STRING)       *
*   OUTPUT AREA CONTAINS TRANSLATIONS FOR THE CHARACTERS             *
**********************************************************************
GOTPNTR  XR    R7,R7                    CLEAR R7 TO ZEROS
         AR    R6,R3                    R6 = ADDRESS OF THE TRANSLATION
*                                            TABLE ENTRY FOR THIS LINE#
         IC    R7,0(R6)                 R7 = TRANSLATION TABLE BYTE
         LA    R8,EXPANDER              R8 = ADDRESS OF EXPANDER TABLE
         AR    R7,R8                    R7 = ADDRESS OF THE EXPANDER
*                                            TABLE ENTRY FOR THIS LINE
*                                            OF THE SELECTED CHARACTER
         LH    R5,0(R7)                 R5 = EXPANDER TABLE BIT MASK
         SLL   R5,19                    SHIFT BIT MASK IN R5
         O     R5,ONE                   TURN ON LOW ORDER BIT IN R5
         BXH   R5,R5,DOBIT2             BRANCH IF BIT 1 IS ZERO
         STC   R10,0(R4)                BIT 1 IS 1, MOVE IN CHARACTER
DOBIT2   BXH   R5,R5,DOBIT3             BRANCH IF BIT2 IS ZERO
         STC   R10,1(R4)                BIT 2 IS 1, MOVE IN CHARACTER
DOBIT3   BXH   R5,R5,DOBIT4             BRANCH IF BIT 3 IS ZERO
         STC   R10,2(R4)                BIT 3 IS 1, MOVE IN CHARACTER
DOBIT4   BXH   R5,R5,DOBIT5             BRANCH IF BIT 4 IS ZERO
         STC   R10,3(R4)                BIT 4 IS 1, MOVE IN CHARACTER
DOBIT5   BXH   R5,R5,DOBIT6             BRANCH IF BIT 5 IS ZERO
         STC   R10,4(R4)                BIT 5 IS 1, MOVE IN CHARACTER
DOBIT6   BXH   R5,R5,DOBIT7             BRANCH IF BIT 6 IS ZERO
         STC   R10,5(R4)                BIT 6 IS 1, MOVE IN CHARACTER
DOBIT7   BXH   R5,R5,DOBIT8             BRANCH IF BIT 7 IS ZERO
         STC   R10,6(R4)                BIT 7 IS 1, MOVE IN CHARACTER
DOBIT8   BXH   R5,R5,DOBIT9             BRANCH IF BIT 8 IS ZERO
         STC   R10,7(R4)                BIT 8 IS 1, MOVE IN CHARACTER
DOBIT9   BXH   R5,R5,DOBIT10            BRANCH IF BIT 9 IS ZERO
         STC   R10,8(R4)                BIT 9 IS 1, MOVE IN CHARACTER
DOBIT10  BXH   R5,R5,DOBIT11            BRANCH IF BIT 10 IS ZERO
         STC   R10,9(R4)                BIT 10 IS 1, MOVE IN CHARACTER
DOBIT11  BXH   R5,R5,DOBIT12            BRANCH IF BIT 11 IS ZERO
         STC   R10,10(R4)               BIT 11 IS 1, MOVE IN CHARACTER
DOBIT12  BXH   R5,R5,ENDCHAR            BRANCH IFBIT 12 IS ZERO
         STC   R10,11(R4)               BIT 12 IS 1, MOVE IN CHARACTER
**********************************************************************
* ENDCHAR SETS UP FOR THE NEXT CHARACTER BY ADVANCING TO THE NEXT    *
* CHARACTER POSITION IN THE OUTPUT AREA, TO THE NEXT CHARACTER IN    *
* THE INPUT STRING, AND REDUCES THE REMAINING CHARACTER COUNT BY 1.  *
* WHEN REMAINING CHARACTER COUNT IS GREATER THAN ZERO, PROCESSING    *
* CONTINUES TO NEXTBYTE TO HANDLE THE NEXT INPUT STRING CHARACTER.   *
* WHEN REMAINING LENGTH IS ZERO, ENDCHAR FALLS INTO THE RETURN       *
* ROUTINE.                                                           *
**********************************************************************
ENDCHAR  A     R4,CHRWIDTH              ADVANCE TO NEXT OUTPUT LOCATION
         A     R1,ONE                   TO NEXT INPUT STRING CHARACTER
         S     R11,ONE                  REMAINING STRING LENGTH - 1
         XR    R8,R8                    R8 = 0
         CR    R11,R8                   ANY INPUT STRING CHARS LEFT?
         BH    NEXTBYTE                 YES, CONTINUE
**********************************************************************
* RETURN FREES THE GOTTEN STORAGE AREA, RESTORES THE CALLER'S        *
* REGISTERS, AND RETURNS CONTROL TO THE CALLER.                      *
**********************************************************************
RETURN   L     R13,4(,R12)              RESTORE CALLER'S R13 SAVE PTR
         FREEMAIN R,A=(R12),LV=32        FREE WORKING STORAGE
         LM    R14,R12,12(R13)          RESTORE CALLER'S REGISTERS
         SR    R15,R15                  SET RETURN CODE = 0
         BR    R14                      RETURN TO CALLER
**********************************************************************
* MISCELLANEOUS CONSTANTS                                            *
**********************************************************************
         DS    0F
TSTBLNK  DC    AL4(C' ')                TEST FOR BLANK
TSTLTRA  DC    AL4(C'A')                TEST FOR LETTER A
TSTGTRI  DC    AL4(C'I'+1)              TEST FOR > I
TSTLTRJ  DC    AL4(C'J')                TEST FOR J
TSTGTRR  DC    AL4(C'R'+1)              TEST FOR > R
TSTLTRS  DC    AL4(C'S')                TEST FOR LTR S
TSTGTRZ  DC    AL4(C'Z'+1)              TEST FOR > Z
TSTZERO  DC    AL4(C'0')                TEST FOR ZERO
TSTGTR9  DC    AL4(C'9'+1)              TEST FOR > 9
LESSTHA  DC    AL4(C'A'-1)              1 LESS THAN LETTER A
LESSTHJ  DC    AL4(C'J'-1)              1 LESS THAN LETTER J
LESSTHS  DC    AL4(C'S'-1)              1 LESS THAN LETTER S
LESSTH0  DC    AL4(C'0'-1)              1 LESS THAN CHARACTER 0
TSTDOLR  DC    AL4(C'$')                TEST FOR DOLLAR SIGN
TSTPNDS  DC    AL4(C'#')                TEST FOR POUNDS SIGN
TSTATSIN DC    AL4(C'@')                TEST FOR AT SIGN
         DC    H'0'
ENTRYLEN DC    AL2(L'TABLE)             TABLE ENTRY LENGTH
STARTJ   DC    AL4(TABLEJ-TABLEA)       OFFSET TO ENTRY FOR J
STARTS   DC    AL4(TABLES-TABLEA)       OFFSET TO ENTRY FOR S
START0   DC    AL4(TABLE0-TABLEA)       OFFSET TO ENTRY FOR 0
CHRWIDTH DC    F'14'                    WIDTH OF ONE BLOCK CHARACTER
ONE      DC    F'1'                     CONSTANT 1
**********************************************************************
* THE TABLE ENTRIES BELOW CORRESPOND TO THE CHARACTERS THAT CAN BE   *
* TRANSLATED BY THIS SUBROUTINE. EACH ENTRY EXCEPT THE FIRST HAS     *
* THE NAME OF THE CHARACTER TO BE TRANSLATED AS ITS FINAL BYTE. FOR  *
* EXAMPLE, THE ENTRY FOR TRANSLATING THE LETTER D IS NAMED TABLED.   *
* THE FIRST ENTRY IS THE EXCEPTION, AS IT WILL BE USED WHEN THE      *
* CHARACTER TO BE TRANSLATED IS NOT TRANSLATABLE BY THIS SUBROUTINE. *
*                                                                    *
* EACH TABLE ENTRY CONTAINS 12 BYTES, ONE FOR EACH LINE OF THE CHAR- *
* ACTER: IT TAKES 12 LINES TO PRINT A CHARACTER. THE BYTE VALUE AT A *
* GIVEN LINE LOCATION FOR A CHARACTER IS THE OFFSET TO THE EXPANDER  *
* TABLE FOR THAT LINE OF THAT CHARACTER. THUS, FOR LINE 3 OF THE     *
* CHARACTER C WE GO TO THE TABLEC ENTRY'S THIRD BYTE AND GET X'08'.  *
* THIS WILL BE ADDED TO THE ADDRESS OF THE EXPANDER TABLE TO LOCATE  *
* THE BIT MAP FOR PRINTING THIS LINE OF THE CHARACTER.               *
**********************************************************************
TABLE    DC    X'4C4C4C4C4C4C4C4C4C4C4C4C' DEFAULT
TABLEA   DC    X'020008080800000808080808' A TABLE
TABLEB   DC    X'2C000808322A2A320808002C' B TABLE
TABLEC   DC    X'020008262626262626080002' C TABLE
TABLED   DC    X'282A32080808080808322A28' D TABLE
TABLEE   DC    X'000026262668682626260000' E TABLE
TABLEF   DC    X'000026262668682626262626' F TABLE
TABLEG   DC    X'020008262626343408080002' G TABLE
TABLEH   DC    X'080808080800000808080808' H TABLE
TABLEI   DC    X'020214141414141414140202' I TABLE
TABLEJ   DC    X'66660A0A0A0A0A0A3A3A686A' J TABLE
TABLEK   DC    X'08322E3C3A36363A3C2E3208' K TABLE
TABLEL   DC    X'262626262626262626260000' L TABLE
TABLEM   DC    X'083E40424446080808080808' M TABLE
TABLEN   DC    X'086C6E484A464E5052540876' N TABLE
TABLEO   DC    X'000008080808080808080000' O TABLE
TABLEP   DC    X'2C00080808002C2626262626' P TABLE
TABLEQ   DC    X'020008080808084E50522C56' Q TABLE
TABLER   DC    X'2C00080808002C3A3C2E3208' R TABLE
TABLES   DC    X'02000826585A5C5E64080002' S TABLE
TABLET   DC    X'000014141414141414141414' T TABLE
TABLEU   DC    X'080808080808080808080002' U TABLE
TABLEV   DC    X'080808080808083062206014' V TABLE
TABLEW   DC    X'080808080808464442403E08' W TABLE
TABLEX   DC    X'080830622060602062300808' X TABLE
TABLEY   DC    X'080830622060141414141414' Y TABLE
TABLEZ   DC    X'00001070120A147216742400' Z TABLE
TABLE0   DC    X'040208080808080808080204' 0 TABLE
TABLE1   DC    X'140C0E141414141414140202' 1 TABLE
TABLE2   DC    X'020008646410121416180000' 2 TABLE
TABLE3   DC    X'02000864641A1A6464080002' 3 TABLE
TABLE4   DC    X'061C1E202224001212121212' 4 TABLE
TABLE5   DC    X'0000262626282A106464002C' 5 TABLE
TABLE6   DC    X'02000826262C000808080002' 6 TABLE
TABLE7   DC    X'002C2E120A14141414141414' 7 TABLE
TABLE8   DC    X'020008083004043008080002' 8 TABLE
TABLE9   DC    X'020008080800006464080002' 9 TABLE
TABLE$   DC    X'140200467E84808246000214' $ TABLE
TABLE#   DC    X'626200006262626200006262' # TABLE
TABLE@   DC    X'0402086464787A7C4E4E0204' @ TABLE
**********************************************************************
* THE EXPANDER TABLE CONTAINS BIT MAPS THAT ARE USED TO BUILD ONE OF *
* THE 12 LINES FOR A CHARACTER. THE EXPANDER TABLE ENTRIES ARE EACH  *
* TWO BYTES LONG AND CONTAIN IN THEIR LOW ORDER 12 BITS A MAP OF     *
* WHERE TO PUT THE CHARACTER (AT 1-BIT LOCATIONS) AND WHERE TO PUT   *
* BLANKS (AT 0-BIT LOCATIONS). EACH CHARACTER IS 14 BYTES WIDE, BUT  *
* THE 1ST AND 14TH POSITIONS ARE ALWAYS BLANK TO PROVIDE SEPARATION  *
* BETWEEN CHARACTERS.                                                *
**********************************************************************
EXPANDER DC    X'0FFF'                  +X'00' : ' @@@@@@@@@@@@ '
         DC    X'07FE'                  +X'02' : '  @@@@@@@@@@  '
         DC    X'03FC'                  +X'04' : '   @@@@@@@@   '
         DC    X'0038'                  +X'06' : '       @@@    '
         DC    X'0C03'                  +X'08' : ' @@        @@ '
         DC    X'0030'                  +X'0A' : '       @@     '
         DC    X'00E0'                  +X'0C' : '     @@@      '
         DC    X'01E0'                  +X'0E' : '    @@@@      '
         DC    X'0006'                  +X'10' : '          @@  '
         DC    X'0018'                  +X'12' : '        @@    '
         DC    X'0060'                  +X'14' : '      @@      '
         DC    X'0180'                  +X'16' : '    @@        '
         DC    X'0600'                  +X'18' : '  @@          '
         DC    X'001E'                  +X'1A' : '        @@@@  '
         DC    X'0078'                  +X'1C' : '      @@@@    '
         DC    X'00D8'                  +X'1E' : '     @@ @@    '
         DC    X'0198'                  +X'20' : '    @@  @@    '
         DC    X'0318'                  +X'22' : '   @@   @@    '
         DC    X'07FF'                  +X'24' : '  @@@@@@@@@@@ '
         DC    X'0C00'                  +X'26' : ' @@           '
         DC    X'0FF8'                  +X'28' : ' @@@@@@@@@    '
         DC    X'0FFC'                  +X'2A' : ' @@@@@@@@@@   '
         DC    X'0FFE'                  +X'2C' : ' @@@@@@@@@@@  '
         DC    X'0C0C'                  +X'2E' : ' @@      @@   '
         DC    X'0606'                  +X'30' : '  @@      @@  '
         DC    X'0C06'                  +X'32' : ' @@       @@  '
         DC    X'0C1F'                  +X'34' : ' @@     @@@@@ '
         DC    X'0FE0'                  +X'36' : ' @@@@@@@      '
         DC    X'0C60'                  +X'38' : ' @@   @@      '
         DC    X'0C30'                  +X'3A' : ' @@    @@     '
         DC    X'0C18'                  +X'3C' : ' @@     @@    '
         DC    X'0E07'                  +X'3E' : ' @@@      @@@ '
         DC    X'0F0F'                  +X'40' : ' @@@@    @@@@ '
         DC    X'0D9B'                  +X'42' : ' @@ @@  @@ @@ '
         DC    X'0CF3'                  +X'44' : ' @@  @@@@  @@ '
         DC    X'0C63'                  +X'46' : ' @@   @@   @@ '
         DC    X'0D83'                  +X'48' : ' @@ @@     @@ '
         DC    X'0CC3'                  +X'4A' : ' @@  @@    @@ '
         DC    X'0000'                  +X'4C' : '              '
         DC    X'0C33'                  +X'4E' : ' @@    @@  @@ '
         DC    X'0C1B'                  +X'50' : ' @@     @@ @@ '
         DC    X'0C0F'                  +X'52' : ' @@      @@@@ '
         DC    X'0C07'                  +X'54' : ' @@       @@@ '
         DC    X'07FB'                  +X'56' : '  @@@@@@@@ @@ '
         DC    X'0E00'                  +X'58' : ' @@@ @@@@@ @@ '
         DC    X'07FC'                  +X'5A' : '  @@@@@@@@@   '
         DC    X'03FE'                  +X'5C' : '   @@@@@@@@@  '
         DC    X'0007'                  +X'5E' : '          @@@ '
         DC    X'00F0'                  +X'60' : '     @@@@     '
         DC    X'030C'                  +X'62' : '   @@    @@   '
         DC    X'0003'                  +X'64' : '           @@ '
         DC    X'03FF'                  +X'66' : '   @@@@@@@@@@ '
         DC    X'0FF0'                  +X'68' : ' @@@@@@@@     '
         DC    X'07E0'                  +X'6A' : '  @@@@@@      '
         DC    X'0E03'                  +X'6C' : ' @@@       @@ '
         DC    X'0F03'                  +X'6E' : ' @@@@      @@ '
         DC    X'000C'                  +X'70' : '         @@   '
         DC    X'00C0'                  +X'72' : '     @@       '
         DC    X'0300'                  +X'74' : '   @@         '
         DC    X'0C01'                  +X'76' : ' @@         @ '
         DC    X'01E3'                  +X'78' : '    @@@@   @@ '
         DC    X'03F3'                  +X'7A' : '   @@@@@@  @@ '
         DC    X'0633'                  +X'7C' : '  @@   @@  @@ '
         DC    X'0E60'                  +X'7E' : ' @@@  @@      '
         DC    X'03FE'                  +X'80' : '   @@@@@@@@@  '
         DC    X'0067'                  +X'82' : '      @@  @@@ '
         DC    X'07FC'                  +X'84' : '  @@@@@@@@@   '
**********************************************************************
* REGISTER EQUATES                                                   *
**********************************************************************
         DC    C'59796'
         DC    X'00'
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
