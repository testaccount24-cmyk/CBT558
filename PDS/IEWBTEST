***********************************************************************
*                                                                     *
*                       SAMPLE BINDER PROGRAM                         *
*                                                                     *
*  EXAMPLE APPLICATION WHICH INCLUDES A MODULE AND PRINTS ITS ESD     *
*  RECORDS USING THE BINDER CALL INTERFACE FUNCTIONS INCLUDE, GETN    *
*  AND GETE.                                                          *
*                                                                     *
*  NOTE: MANY MACRO PARAMETERS REQUIRE VARIABLE LENGTH CHARACTER      *
*        STRINGS. TO THE BINDER, A VARIABLE LENGTH STRING CONSISTS OF *
*        A HALFWORD LENGTH FOLLOWED BY A BYTE STRING OF THE DESIGNATED*
*        LENGTH. THE HALFWORD LENGTH DOES NOT INCLUDE THE TWO BYTES   *
*        FOR THE LENGTH FIELD ITSELF.                                 *
***********************************************************************
***********************************************************************
*                       PROGRAM INITIALIZATION                        *
***********************************************************************
***********************************************************************
* 1. ENTRY POINT LINKAGE. THIS IS STANDARD MVS ENTRY POINT LINKAGE.   *
*    REGISTER 12 IS SAVED IN THE MESSAGE EXIT SPECIFICATION SO THAT   *
*    THE EXIT ROUTINE CAN OBTAIN ADDRESSABILITY TO ITS OWN CODE AND   *
*    DATA.                                                            *
***********************************************************************
IEWBTEST CSECT
IEWBTEST AMODE 31
IEWBTEST RMODE 24
         USING IEWBTEST,R3,R4
         STM   R14,R12,12(R13)         SAVE CALLER'S REGS
         LR    R3,R15                  SET UP BASE FIRST BASE REG
         LA    R4,4095(R3)             SET UP SECOND
         LA    R4,1(R4)                    BASE REGISTER
         ST    R3,BASE1                SAVE FIRST BASE REG
         ST    R4,BASE2                SAVE SECOND BASE REG
         LA    R15,SAVE                POINT TO MY REGISTER SAVE AREA
         ST    R15,8(R13)              SET LSA IN CALLER'S SAVE
         ST    R13,4(R15)              SET HSA IN MY SAVE AREA
         LR    R13,R15                 SET UP SAVE AREA POINTER
         B     OPENS                   BRANCH AROUND CONSTANTS
         DC    CL8'IEWBTEST'           PROGRAM NAME IDENTIFIER
         DC    CL8'&SYSDATE'           ASSEMBLY DATE
         DC    CL8'&SYSTIME'           ASSEMBLY TIME
         PRINT GEN
***********************************************************************
* 2. OPEN OUTPUT DATA SET WHICH WILL CONTAIN THE ESD RECORDS.         *
***********************************************************************
OPENS    OPEN  (OUTPUT1,OUTPUT)   OPEN OUTPUT DATA SET
         LTR   R15,R15            SUCCESSFUL?
         BNZ   ERREXIT            EXIT IF NOT
***********************************************************************
* 3. OBTAIN AND INITIALIZE BINDER BUFFERS. THESE SPECIFICATIONS FOR   *
*    THE IEWBUFF MACRO OBTAIN STORAGE FOR THE ESD AND NAMES BUFFERS,  *
*    THEN INITIALIZE THEM. MAPPING DSECTS FOR THE BUFFERS ARE PROVIDED*
*    AT THE END OF THE PROGRAM.                                       *
***********************************************************************
BUFFERS  IEWBUFF FUNC=GETBUF,TYPE=ESD
         IEWBUFF FUNC=INITBUF,TYPE=ESD
         ST      IEWBESD_BASE,ESDBUFAD      SAVE ESD BUFFER ADDRESS
         DROP    IEWBESD_BASE,ESD_BASE
         IEWBUFF FUNC=GETBUF,TYPE=NAME
         IEWBUFF FUNC=INITBUF,TYPE=NAME
         ST      IEWBBNL_BASE,BNLBUFAD      SAVE NAME BUFFER ADDRESS
         DROP    IEWBBNL_BASE,BNL_BASE
         IEWBUFF FUNC=GETBUF,TYPE=RLD
         IEWBUFF FUNC=INITBUF,TYPE=RLD
         ST      IEWBRLD_BASE,RLDBUFAD      SAVE RLD BUFFER ADDRESS
         DROP    IEWBRLD_BASE,RLD_BASE
         IEWBUFF FUNC=GETBUF,TYPE=IDRL
         IEWBUFF FUNC=INITBUF,TYPE=IDRL
         ST      IEWBIDL_BASE,IDLBUFAD      SAVE IDRL BUFFER ADDRESS
         DROP    IEWBIDL_BASE,IDL_BASE
         IEWBUFF FUNC=GETBUF,TYPE=TEXT
         IEWBUFF FUNC=INITBUF,TYPE=TEXT
         ST      IEWBTXT_BASE,TXTBUFAD      SAVE TEXT BUFFER ADDRESS
         DROP    IEWBTXT_BASE,TXT_BASE
***********************************************************************
* 4. START DIALOG, SPECIFYING LISTS. THE STARTD CALL ESTABLISHES A    *
*    DIALOG WITH THE BINDER. IT IS ALWAYS REQUIRED AND SETS THE DIALOG*
*    TOKEN FOR USE IN SUBSEQUENT BINDER CALLS. THE DIALOG TOKEN SHOULD*
*    BE INITIALIZED TO A DOUBLEWORD OF ZERO BEFORE ITS FIRST USAGE.   *
*    THE EXITS KEYWORD PERMITS SPECIFICATION OF AN EXIT ROUTINE WHICH *
*    RECEIVES CONTROL WHEN MESSAGE SEVERITY IS GREATER THAN ZERO.     *
***********************************************************************
STARTD   MVC   DTOKEN,DZERO       CLEAR DIALOG TOKEN
         IEWBIND FUNC=STARTD,                                          C    C
               RETCODE=RETCODE,                                        C    C
               RSNCODE=RSNCODE,                                        C    C
               DIALOG=DTOKEN,                                          C    C
               EXITS=EXITLIST,                                         C    C
               VERSION=3
         CLC   RETCODE,FOUR       CHECK THE RETURN CODE
         BH    ERREXIT            EXIT IF > 4
***********************************************************************
* 5. CREATE A WORKMOD WITH INTENT=ACCESS. DTOKEN, THE DIALOG TOKEN IS *
*    A REQUIRED INPUT PARAMETER. THE WORKMOD TOKEN SHOULD BE INITIAL- *
*    IZED TO ZERO BEFORE THE CREATEW CALL.                            *
***********************************************************************
CREATEW  MVC   WKTOKEN,DZERO      CLEAR WORKMOD TOKEN
         IEWBIND FUNC=CREATEW,                                         C    C
               RETCODE=RETCODE,                                        C    C
               RSNCODE=RSNCODE,                                        C    C
               WORKMOD=WKTOKEN,                                        C    C
               DIALOG=DTOKEN,                                          C    C
               INTENT=ACCESS,                                          C    C
               VERSION=3
         CLC   RETCODE,FOUR       CHECK THE RETURN CODE
         BH    ERREXIT            EXIT IF > 4
***********************************************************************
*                       MAIN PROGRAM                                  *
***********************************************************************
***********************************************************************
* 6. INCLUDE A MODULE TO BE PROCESSED. THIS IS EQUIVALENT TO USING    *
*    AN INCLUDE DDNAME(MEMBER) CONTROL STATEMENT.                     *
***********************************************************************
INCLUDE  MVC   INCLLIB,=H'5'         SUPPLY THE DDNAME LENGTH
         MVC   INCLLIB+2(5),=CL5'INLIB' SUPPLY THE DDNAME
         MVC   MODNAME,=H'6'         SUPPLY THE MEMBER NAME LENGTH
         MVC   MODNAME+2(6),=CL6'CEN300'  SUPPLY THE MEMBER NAME
         IEWBIND FUNC=INCLUDE,                                         C    C
               RETCODE=RETCODE,                                        C    C
               RSNCODE=RSNCODE,                                        C    C
               WORKMOD=WKTOKEN,                                        C    C
               INTYPE=NAME,                                            C    C
               DDNAME=INCLLIB,                                         C    C
               MEMBER=MODNAME,                                         C    C
               VERSION=3
         CLC   RETCODE,FOUR       CHECK THE RETURN CODE
         BH    ERREXIT            EXIT IF > 4
***********************************************************************
* 7. GET ALL SECTION NAMES FROM WORKMOD. THE GETN CALL RETRIEVES FROM *
*    THE WORKMOD THE NAMES OF ALL SECTIONS IN THE INCLUDED MODULE.    *
*    THE NAMES ARE RETURNED IN THE NAMES BUFFER, IEWBBNL, AND COUNTN  *
*    IS SET TO THE NUMBER OF NAMES RETURNED. TCOUNT IS SET TO THE     *
*    TOTAL NUMBER OF NAMES IN THE MODULE, REGARDLESS OF THE SIZE OF   *
*    THE BUFFER. A RETURN CODE OF 4 INDICATES THAT ALL NAMES HAVE BEEN*
*    RETURNED IN THE BUFFER, AND NO FURTHER GETN CALLS ARE NECESSARY. *
***********************************************************************
         MVC   CURSORN,ZERO             CLEAR CURSOR B4 1ST CALL
GETNCALL L     R11,BNLBUFAD             POINT TO NAME BUFFER
         USING IEWBBNL,R11
         LA    R12,BNLH_END             POINT TO FIRST NAME ENTRY
         USING BNL_ENTRY,R12
         IEWBIND FUNC=GETN,                                            C    C
               RETCODE=RETCODE,                                        C    C
               RSNCODE=RSNCODE,                                        C    C
               WORKMOD=WKTOKEN,                                        C    C
               AREA=IEWBBNL,                                           C    C
               CURSOR=CURSORN,                                         C    C
               COUNT=COUNTN,                                           C    C
               TCOUNT=TCOUNT,                                          C    C
               NTYPE=S,                                                C    C
               VERSION=3
         DROP  R11,R12
         CLC   RETCODE,FOUR       DO WE HAVE ALL THE NAMES
         BE    DELETEW            YES, ALL THROUGH
         L     R5,COUNTN            NUMBER OF SECTIONS
         L     R11,BNLBUFAD             POINT TO NAME BUFFER
         USING IEWBBNL,R11
         LA    R12,BNLH_END             POINT TO FIRST NAME ENTRY
         USING BNL_ENTRY,R12
LOOP1    L     R8,BNL_NAME_PTR      EXTRACT SECTION NAME
         LH    R2,BNL_NAME_CHARS
         MVC   SECTION+2(8),BLANKS  CLEAR BEFORE EXECUTED MOVE
         STH   R2,SECTION           SAVE CSECT NAME LENGTH
         LA    R9,SECTION           SAVE
         BCTR  R2,0                    CSECT
         EX    R2,MOVESEC                  NAME
         MVC   MSG,BLANKS           CLEAR MESSAGE AREA
         MVC   MSG(28),=CL28'====> DATA FOR SECTION NAME '
         MVC   MSG+28(8),SECTION+2  SECTION NAME TO MESSAGE
         MVC   MSG+36(15),=CL15' FOLLOWS: ====>'
         PUT   OUTPUT1,MSG          WRITE SECTON NAME MESSAGE
         BAS   R14,IDLDATA          GO PROCESS IDRL DATA
         BAS   R14,ESDDATA          GO PROCESS ESD DATA
         BAS   R14,RLDDATA          GO PROCESS RLD DATA
NEXTSECT A     R12,BNLH_ENTRY_LENG  STEP TO NEXT SECTION NAME
         BCT   R5,LOOP1             LOOP THRU ALL NAMES
         B     GETNCALL             ALL PROCESSED, GO ISSUE GETN
MOVESEC  MVC   2(0,R9),0(R8)        EXECUTED MOVE
         DROP  R11,R12
***********************************************************************
* GET LANGUAGE PROCESSOR DATA FOR THE SECTION NAME AND PRINT IT       *
***********************************************************************
IDLDATA  STM   R0,R15,IDLREGS       SAVE REGS
         MVC   CURSORD,ZERO         RESET CURSOR
         L     R11,IDLBUFAD         POINT TO IDL BUFFER HEADER
         USING IEWBIDL,R11
         LA    R12,IDLH_END         POINT TO FIRST IDL ENTRY
         USING IDL_ENTRY,R12
         IEWBIND FUNC=GETD,                                            C    C
               RETCODE=RETCODE,                                        C    C
               RSNCODE=RSNCODE,                                        C    C
               WORKMOD=WKTOKEN,                                        C    C
               CLASS=B_IDRL,                                           C    C
               SECTION=SECTION,                                        C    C
               AREA=IEWBIDL,                                           C    C
               CURSOR=CURSORD,                                         C    C
               COUNT=COUNTD,                                           C    C
               VERSION=3
         CLC   RETCODE,EIGHT        OK, END DATA, OR NO DATA AVAIL?
         BH    ERREXIT              NO, BAD ERROR
         L     R5,COUNTD            NUMBER OF IDL ENTRIES IN BUFFER
         LTR   R5,R5                EMPTY SECTION?
         BZ    IDLXIT               YES, EXIT
IDLUP2   MVC   MSG,BLANKS           CLEAR PRINT LINE
         MVC   MSG+2(20),=CL20'LANGUAGE PROCESSOR: '
         MVC   MSG+22(10),IDL_PID_ID PID ORDER NUMBER
         MVC   MSG+33(2),IDL_VERSION PROCESSOR VERSION
         MVC   MSG+36(2),IDL_MOD_LEVEL PROCESSOR MOD LEVEL
         MVC   MSG+39(7),IDL_DATE_PROCESSED DATE COMPILED/ASSEMBLED
         LH    R1,IDL_RESIDENT_CHARS RESIDENT SECTION NAME LENGTH
         SH    R1,H1                COMPUTE LENGTH CODE
         BM    WRITIDL              NEGATIVE, INVALID
         CH    R1,H7                TOO LONG?
         BNH   IDLOK                NO
         LA    R1,H7                YES, FORCE TO 7
IDLOK    L     R2,IDL_RESIDENT_PTR  POINT TO RESIDENT NAME
         EX    R1,MVIDLRES          MOVE RESIDENT NAME
WRITIDL  PUT   OUTPUT1,MSG          WRITE IDL TO OUTPUT DATA SET
         A     R12,IDLH_ENTRY_LENG  MOVE TO NEXT IDL IN THIS SECTION
         BCT   R5,IDLUP2            LOOP THRU ALL IDL ITEMS
IDLXIT   LM    R0,R15,IDLREGS       RESTORE REGS
         BR    R14                  EXIT
MVIDLRES MVC   MSG+49(1),0(R2)      EXECUTED MOVE
         DROP  R11,R12
***********************************************************************
* 8. GET ESD DATA FOR EACH NAME RETURNED BY GETN. FOR EACH NAME RET-  *
*    URNED IN THE NAMES BUFFER, THE PROGRAM ISSUES ONE GETD CALL TO   *
*    OBTAIN THE ESD DATA.                                             *
*    ASSUMING THAT ANY ESD ENTRIES WERE RETURNED FOR THE DESIGNATED   *
*    SECTION, THE PROGRAM SCANS THROUGH THE BUFFER AND WRITES EACH ESD*
*    RECORD TO THE OUTPUT FILE DESIGNATED BY DDNAME OUTPUT1. IT IS    *
*    POSSIBLE, HOWEVER, THAT THE ITEM DOES NOT EXIST AND THAT THE     *
*    NAMED SECTION MUST BE BYPASSED.                                  *
***********************************************************************
ESDDATA  STM   R0,R15,ESDREGS       SAVE REGS
         MVC   MSG,BLANKS           CLEAR MESSAGE AREA
         MVC   MSG(19),=CL19'  ESD DATA FOLLOWS:'
         PUT   OUTPUT1,MSG          WRITE ESD HEADER
         MVC   CURSORD,ZERO         RESET CURSOR
         L     R11,ESDBUFAD         POINT TO ESD BUFFER HEADER
         USING IEWBESD,R11
         LA    R12,ESDH_END         POINT TO FIRST ESD ENTRY
         USING ESD_ENTRY,R12
         IEWBIND FUNC=GETD,                                            C    C
               RETCODE=RETCODE,                                        C    C
               RSNCODE=RSNCODE,                                        C    C
               WORKMOD=WKTOKEN,                                        C    C
               CLASS=B_ESD,                                            C    C
               SECTION=SECTION,                                        C    C
               AREA=IEWBESD,                                           C    C
               CURSOR=CURSORD,                                         C    C
               COUNT=COUNTD,                                           C    C
               VERSION=3
         CLC   RETCODE,EIGHT        OK, END DATA, OR NO DATA AVAIL?
         BH    ERREXIT              NO, BAD ERROR
GETDOKAY L     R5,COUNTD            NUMBER OF ESD ENTRIES IN BUFFER
         LTR   R5,R5                EMPTY SECTION?
         BZ    ESDXIT               YES, GO TO NEXT NAME
LOOP2    MVC   MSG,BLANKS           CLEAR PRINT LINE
         LH    R1,ESD_NAME_CHARS    GET NAME LENGTH
         SH    R1,H1                COMPUTE LENGTH CODE
         BM    TRYERN               NEGATIVE, INVALID
         CH    R1,H7                TOO LONG?
         BNH   ENOK                 NO
         LA    R1,H7                YES, FORCE TO 7
ENOK     L     R2,ESD_NAME_PTR      POINT TO NAME
         EX    R1,MOVEESD           MOVE SYMBOL NAME TO MSG
TRYERN   LH    R1,ESD_RESIDENT_CHARS RESIDENT NAME LENGTH
         SH    R1,H1                COMPUTE LENGTH CODE
         BM    TRYRCC               NEGATIVE, INVALID
         CH    R1,H7                TOO LONG?
         BNH   EROK                 NO
         LA    R1,H7                YES, FORCE TO 7
EROK     L     R2,ESD_RESIDENT_PTR  POINT TO RESIDENT NAME
         EX    R1,MOVERES           MOVE RESIDENT NAME
TRYRCC   LH    R1,ESD_RES_CLASS_CHARS RESIDENT CLASS NAME LENGTH
         SH    R1,H1                COMPUTE LENGTH CODE
         BM    MVET                 NEGATIVE, INVALID
         CH    R1,H7                TOO LONG?
         BNH   CCOK                 NO
         LA    R1,H7                YES, FORCE TO 7
CCOK     L     R2,ESD_RES_CLASS_PTR POINT TO RESIDENT CLASS NAME
         EX    R1,MVRESCLS          MOVE RESIDENT CLASS NAME
MVET     MVC   MSG+31(4),ESD_TYPE   TYPE AND TYPE QUALIFIER
         UNPK  MSG+36(9),ESD_ELEM_OFFSET(5) OFFSET WITHIN CLASS ELEMENT
         MVI   MSG+44,C' '          CLEAR TRASH BYTE
         TR    MSG+36(8),TRCHAR-C'0' MAKE PRINTABLE
         UNPK  MSG+45(9),ESD_CLASS_OFFSET(5) OFFSET WITHIN CLASS SEGMNT
         MVI   MSG+53,C' '          CLEAR TRASH BYTE
         TR    MSG+45(8),TRCHAR-C'0' MAKE PRINTABLE
         UNPK  MSG+54(9),ESD_LENG(5) LENGTH OF DEFINED ELEMENT
         MVI   MSG+62,C' '          CLEAR TRASH BYTE
         TR    MSG+54(8),TRCHAR-C'0' MAKE PRINTABLE
         UNPK  MSG+63(3),ESD_AMODE  AMODE INDICATOR
         MVI   MSG+65,C' '          CLEAR TRASH
         TR    MSG+63(2),TRCHAR-C'0' MAKE PRINTABLE
         UNPK  MSG+66(3),ESD_RMODE  RMODE INDICATOR
         MVI   MSG+68,C' '          CLEAR TRASH
         TR    MSG+66(2),TRCHAR-C'0' MAKE PRINTABLE
         UNPK  MSG+69(3),ESD_STATUS ESD SYMBOL STATUS
         MVI   MSG+71,C' '          CLEAR TRASH
         TR    MSG+69(2),TRCHAR-C'0' MAKE PRINTABLE
WRITESD  PUT   OUTPUT1,MSG          WRITE ESD TO OUTPUT DATA SET
         A     R12,ESDH_ENTRY_LENG  MOVE TO NEXT ESD IN THIS SECTION
         BCT   R5,LOOP2             LOOP THRU ALL ESD ITEMS
ESDXIT   LM    R0,R15,ESDREGS       RESTORE REGS
         BR    R14                  EXIT
MOVEESD  MVC   MSG+4(1),0(R2)         EXECUTED MOVE
MOVERES  MVC   MSG+13(1),0(R2)       EXECUTED MOVE
MVRESCLS MVC   MSG+22(1),0(R2)      EXECUTED MOVE
         DROP  R11,R12
***********************************************************************
*    GET RLD DATA FOR EACH NAME RETURNED BY GETN. FOR EACH NAME RET-  *
*    URNED IN THE NAMES BUFFER, THE PROGRAM ISSUES ONE GETD CALL TO   *
*    OBTAIN THE RLD DATA.                                             *
*    ASSUMING THAT ANY RLD ENTRIES WERE RETURNED FOR THE DESIGNATED   *
*    SECTION, THE PROGRAM SCANS THROUGH THE BUFFER AND WRITES EACH RLD*
*    RECORD TO THE OUTPUT FILE DESIGNATED BY DDNAME OUTPUT1. IT IS    *
*    POSSIBLE, HOWEVER, THAT THE ITEM DOES NOT EXIST AND THAT THE     *
*    NAMED SECTION MUST BE BYPASSED.                                  *
***********************************************************************
RLDDATA  STM   R0,R15,RLDREGS       SAVE REGS
         MVC   MSG,BLANKS           CLEAR MESSAGE AREA
         MVC   MSG(19),=CL19'  RLD DATA FOLLOWS:'
         PUT   OUTPUT1,MSG          WRITE RLD HEADER
         MVC   CURSORD,ZERO         RESET CURSOR
         L     R11,RLDBUFAD         POINT TO RLD BUFFER HEADER
         USING IEWBRLD,R11
         LA    R12,RLDH_END         POINT TO FIRST RLD ENTRY
         USING RLD_ENTRY,R12
         IEWBIND FUNC=GETD,                                            C    C
               RETCODE=RETCODE,                                        C    C
               RSNCODE=RSNCODE,                                        C    C
               WORKMOD=WKTOKEN,                                        C    C
               CLASS=B_RLD,                                            C    C
               SECTION=SECTION,                                        C    C
               AREA=IEWBRLD,                                           C    C
               CURSOR=CURSORD,                                         C    C
               COUNT=COUNTD,                                           C    C
               VERSION=3
         CLC   RETCODE,EIGHT        OK, END DATA, OR NO DATA AVAIL?
         BH    ERREXIT              NO, BAD ERROR
         L     R5,COUNTD            NUMBER OF RLD ENTRIES IN BUFFER
         LTR   R5,R5                EMPTY SECTION?
         BZ    RLDXIT               YES, GO TO NEXT NAME
RLDLUP2  MVC   MSG,BLANKS           CLEAR PRINT LINE
         LH    R1,RLD_RESIDENT_CHARS RESIDENT NAME LENGTH
         SH    R1,H1                COMPUTE LENGTH CODE
         BM    TRYRLD2              NEGATIVE, INVALID
         CH    R1,H7                TOO LONG?
         BNH   RLD1OK               NO
         LA    R1,H7                YES, FORCE TO 7
RLD1OK   L     R2,RLD_RESIDENT_PTR  POINT TO RESIDENT NAME
         EX    R1,MVRLD1            MOVE RESIDENT NAME
TRYRLD2  LH    R1,RLD_RES_CLASS_CHARS RESIDENT CLASS NAME LENGTH
         SH    R1,H1                COMPUTE LENGTH CODE
         BM    TRYRLD3              NEGATIVE, INVALID
         CH    R1,H7                TOO LONG?
         BNH   RLD2OK               NO
         LA    R1,H7                YES, FORCE TO 7
RLD2OK   L     R2,RLD_RES_CLASS_PTR POINT TO RESIDENT CLASS NAME
         EX    R1,MVRLD2            MOVE RESIDENT CLASS NAME
TRYRLD3  LH    R1,RLD_TARGET_CHARS  TARGET NAME LENGTH
         SH    R1,H1                COMPUTE LENGTH CODE
         BM    TRYRLD4              NEGATIVE, INVALID
         CH    R1,H7                TOO LONG?
         BNH   RLD3OK               NO
         LA    R1,H7                YES, FORCE TO 7
RLD3OK   L     R2,RLD_TARGET_PTR    POINT TO TARGET NAME
         EX    R1,MVRLD3            MOVE RESIDENT CLASS NAME
TRYRLD4  LH    R1,RLD_RES_PART_LL   RESIDENT PART LENGTH
         SH    R1,H1                COMPUTE LENGTH CODE
         BM    DORLD5               NEGATIVE, INVALID
         CH    R1,H7                TOO LONG?
         BNH   RLD4OK               NO
         LA    R1,H7                YES, FORCE TO 7
RLD4OK   L     R2,RLD_RES_PART_PTR  POINT TO RESIDENT PART NAME
         EX    R1,MVRLD4            MOVE RESIDENT CLASS NAME
DORLD5   UNPK  MSG+40(3),RLD_TYPE(2) ADCON TYPE
         MVI   MSG+42,C' '          CLEAR TRASH BYTE
         TR    MSG+40(2),TRCHAR-C'0' MAKE PRINTABLE
         UNPK  MSG+43(9),RLD_CLASS_OFFSET(5) OFFSET WITHIN CLASS SEGMNT
         MVI   MSG+51,C' '          CLEAR TRASH BYTE
         TR    MSG+43(8),TRCHAR-C'0' MAKE PRINTABLE
         MVI   MSG+52,C'+'           ASSUME POSITIVE RELOCATION
         TM    RLD_DIRECTION,X'80'  IS IT POSITIVE?
         BZ    WRITRLD              YES
         MVI   MSG+52,C'-'          NO, INDICATE NEGATIVE
WRITRLD  PUT   OUTPUT1,MSG          WRITE RLD TO OUTPUT DATA SET
         A     R12,RLDH_ENTRY_LENG  MOVE TO NEXT RLD IN THIS SECTION
         BCT   R5,RLDLUP2           LOOP THRU ALL RLD ITEMS
RLDXIT   LM    R0,R15,RLDREGS       RESTORE REGS
         BR    R14                  EXIT
MVRLD1   MVC   MSG+4(1),0(R2)       EXECUTED MOVE
MVRLD2   MVC   MSG+13(1),0(R2)      EXECUTED MOVE
MVRLD3   MVC   MSG+22(1),0(R2)      EXECUTED MOVE
MVRLD4   MVC   MSG+31(1),0(R2)      EXECUTED MOVE
         DROP  R11,R12
***********************************************************************
*  9. DONE PROCESSING - DELETE WORKMOD. DELETEW REMOVES THE WORKMOD   *
*     FROM BINDER STORAGE.                                            *
***********************************************************************
DELETEW  IEWBIND FUNC=DELETEW,                                         C    C
               RETCODE=RETCODE,                                        C    C
               RSNCODE=RSNCODE,                                        C    C
               WORKMOD=WKTOKEN,                                        C    C
               VERSION=3
         CLC   RETCODE,FOUR       CHECK THE RETURN CODE
         BH    ERREXIT            EXIT IF > 4
***********************************************************************
* 10. END DIALOG. ENDD ENDS THE DIALOG BETWEEN THE PROGRAM AND THE    *
*     BINDER, RELEASING ANY REMAINING RESOURCES, CLOSING ALL FILES,   *
*     AND RESETTING THE DIALOG TOKEN TO THE NULL VALUE.               *
***********************************************************************
ENDD     IEWBIND FUNC=ENDD,                                            C    C
               RETCODE=RETCODE,                                        C    C
               RSNCODE=RSNCODE,                                        C    C
               DIALOG=DTOKEN,                                          C    C
               VERSION=3
         CLC   RETCODE,FOUR       CHECK THE RETURN CODE
         BH    ERREXIT            EXIT IF > 4
***********************************************************************
* 11. FREEBUF (RELEASE) OUR BUFFER STORAGE. A CALL TO IEWBUFF WITH    *
*     FUNC=FREEBUF FREES THE NAME AND ESD BUFFERS PREVIOUSLY OBTAINED *
*     BY IEWBUFF.                                                     *
***********************************************************************
FREEBUFS L     IEWBESD_BASE,ESDBUFAD     POINT TO ESD BUFFER
         USING IEWBESD,IEWBESD_BASE
         LA    ESD_BASE,ESDH_END         POINT TO FIRST ESD_ENTRY
         IEWBUFF FUNC=FREEBUF,TYPE=ESD   FREE THE ESD BUFFER
         DROP  IEWBESD_BASE,ESD_BASE
         L     IEWBBNL_BASE,BNLBUFAD     POINT TO NAME BUFFER
         USING IEWBBNL,IEWBBNL_BASE
         LA    BNL_BASE,BNLH_END         POINT TO FIRST NAME_ENTRY
         IEWBUFF FUNC=FREEBUF,TYPE=NAME  FREE THE NAME BUFFER
         DROP  IEWBBNL_BASE,BNL_BASE
***********************************************************************
* 12. CLOSE OUTPUT DATASET AND FREE THE BUFFER POOL.                  *
***********************************************************************
CLOSEDCB CLOSE (OUTPUT1)
         FREEPOOL OUTPUT1
***********************************************************************
* 13. NORMAL EXIT AT END OF PROCESSING.                               *
***********************************************************************
NORMEXIT LA    R15,0              SET A REASON CODE OF ZERO
         B     EXIT
***********************************************************************
* 14. ERROR EXIT.                                        *
***********************************************************************
ERREXIT  IEWBUFF FUNC=FREEBUF,TYPE=ESD
         IEWBUFF FUNC=FREEBUF,TYPE=NAME
***********************************************************************
*        ENDING THE DIALOG ALSO DELETES THE WORKMOD                   *
***********************************************************************
ENDDLG   IEWBIND FUNC=ENDD,                                            C    C
               RETCODE=RETCODE,                                        C    C
               RSNCODE=RSNCODE,                                        C    C
               DIALOG=DTOKEN,                                          C    C
               VERSION=3
         CLOSE (OUTPUT1)
         FREEPOOL OUTPUT1
SETRSN   L     R15,RSNCODE
EXIT     L     R13,SAVE+4
         RETURN (14,12),RC=(15)
***********************************************************************
* MESSAGE EXIT ROUTINE. THIS ROUTINE WRITES THE BINDER ERROR MESSAGE  *
* TO THE OUTPUT DATASET. THE ROUTINE IS ENTERED WHEN THE BINDER RETURN*
* CODE IS GREATER THAN 4.                                             *
* THE EXIT ROUTINE IS COPYING THE MESSAGE FROM THE BINDER'S MESSAGE   *
* BUFFER TO THE OUTPUT FILE. IT COULD HAVE PREVENTED THE BINDER FROM  *
* ISSUING THE MESSAGE BY RETURNING A 4 IN REGISTER 15.                *
***********************************************************************
MSGEXIT  SAVE  (14,12)
         L     R3,0(,R1)          GET ADDRESS OF USER DATA
         L     R3,0(,R3)          GET USER DATA(PGM BASE REGISTER)
         L     R4,BASE2           GET SECOND BASE REG
         L     R9,28(,R1)         GET ADDRESS OF EXIT RETURN CODE
         XC    0(4,R9),0(R9)      SET EXIT RETURN CODE TO ZERO
         L     R8,4(,R1)          GET ADDRESS OF ADDRESS OF MSG BUFFER
         L     R8,0(,R8)          GET ADDRESS OF MESSAGE BUFFER
         MVC   MSG(80),0(R8)      MOVE THE MESSAGE TO THE BUFFER
         LA    R8,MSG
         ST    R13,SAVE13         SAVE INPUT SAVE AREA ADDRESS
         LA    R13,SAVE2          SAVE AREA FOR PUT
         PUT   OUTPUT1,(R8)       WRITE MESSAGE TO DATA SET
         L     R13,SAVE13         RESTORE SAVE AREA REGISTER
         RETURN (14,12)           RETURN TO BINDER
***********************************************************************
*                       PROGRAM CONSTANTS                             *
***********************************************************************
DZERO    DC    2F'0'
BASE2    DC    A(0)               2ND PROGRAM BASE REG
ZERO     DC    F'0'
FOUR     DC    F'4'
EIGHT    DC    F'8'
RLDREGS  DC    16F'0'             SAVE AREA FOR RLDDATA ROUTINE
ESDREGS  DC    16F'0'             SAVE AREA FOR ESDDATA ROUTINE
IDLREGS  DC    16F'0'             SAVE AREA FOR IDLDATA ROUTINE
ESDBUFAD DC    A(0)               ADDRESS OF ESD BUFFER
BNLBUFAD DC    A(0)               ADDRESS OF NAME BUFFER
RLDBUFAD DC    A(0)               ADDRESS OF RLD BUFFER
IDLBUFAD DC    A(0)               ADDRESS OF IDRL BUFFER
TXTBUFAD DC    A(0)               ADDRESS OF TEXT BUFFER
TRCHAR   DC    CL16'0123456789ABCDEF' MAKE UNPK DATA PRINTABLE
***********************************************************************
* VARIABLE LENGTH STRING CONSTANTS USED AS PARAMETERS TO THE BINDER   *
* MACROS CONSIST OF A HALFWORD LENGTH FOLLOWED BY A TEXT STRING OF THE*
* SPECIFIED LENGTH.                                                   *
***********************************************************************
B_RLD    DC    H'5',C'B_RLD'      CLASS NAME
B_ESD    DC    H'5',C'B_ESD'      CLASS NAME
B_IDRL   DC    H'6',C'B_IDRL'     CLASS NAME
INCLLIB  DC    H'8',CL8' '        INCLUDE LIBRARY DDNAME
MODNAME  DC    H'8',CL8' '        MEMBER NAME
*
EXITLIST DS    0F                 USER EXIT SPECIFICATIONS
         DC    F'1'               NUMBER OF LIST ENTRIES
         DC    CL8'MESSAGE',F'12',A(MESSAGE) SPECIFY MESSAGE EXIT
MESSAGE  DC    A(MSGEXIT)         EXIT ROUTINE ENTRY POINT
BASE1    DC    AL4(0)             BASE ADDRESS FOR EXIT ROUTINE
         DC    A(FOUR)            TAKE EXIT FOR SEVERITY >= 4
***********************************************************************
*                       WORKING STORAGE                               *
***********************************************************************
SAVE     DS    9D                 REGISTER SAVE AREA
SAVE2    DS    9D                 ANOTHER FOR THE EXIT ROUTINE
DTOKEN   DS    CL8                DIALOG TOKEN
WKTOKEN  DS    CL8                WORKMOD TOKEN
SAVE13   DS    F                  REGISTER 13 SAVE
COUNTD   DS    F                  NUMBER OF ESD RECORDS RETURNED
COUNTN   DS    F                  NUMBER OF SECTION NAMES
CURSORD  DS    F                  CURSOR VALUE FOR GETD CALL
CURSORN  DS    F                  CURSOR VALUE FOR GETN CALL
RETCODE  DS    F                  GENERAL RETURN CODE
RSNCODE  DS    F                  GENERAL REASON CODE
TCOUNT   DS    F                  TOTAL NUMBER OF SECTIONS
H1       DC    H'1'               CONSTANT 1
H7       DC    H'7'               CONSTANT 7
SECTION  DS    H,CL8              SECTION NAME FOR GETD
MSG      DC    CL80' '            PUT MESSAGE BUFFER
BLANKS   DC    CL80' '            CONSTANT BLANKS
*
OUTPUT1  DCB   DSORG=PS,MACRF=PM,RECFM=FB,LRECL=80,DDNAME=OUTPUT1
***********************************************************************
* BUFFER MAPPINGS. NOTE THAT THE BUFFER VERSION MUST MATCH THE VERSION*
* OF THE GETN AND THE GETD BINDER API'S. THE MAPBUF FUNCTION OF THE   *
* IEWBUFF MACRO PROVIDES DSECT MAPS FOR THE BUFFERS USED.             *
* NOTE THAT YOU MUST CODE THE IEWBUFF MACRO WITHIN A CSECT.           *
* REGISTERS 11 AND 12 ARE SPECIFIED FOR ALL BUFFERS. THEY ARE NOT     *
* MAINTAINED AS POINTERS TO THE BUFFERS, HOWEVER, AS IT IS NOT        *
* WHEN SEVERAL BUFFERS ARE IN USE. FOR THIS REASON, REGISTERS ARE     *
* LOADED AND USING STATEMENTS OCCUR WHEN A BUFFER IS TO BE USED.      *
***********************************************************************
ESDBUFF  IEWBUFF FUNC=MAPBUF,TYPE=ESD,SIZE=50,                         C    C
               HEADREG=11,ENTRYREG=12,VERSION=3
NAMEBUFF IEWBUFF FUNC=MAPBUF,TYPE=NAME,SIZE=50,                        C    C
               HEADREG=11,ENTRYREG=12,VERSION=3
RLDBUFF  IEWBUFF FUNC=MAPBUF,TYPE=RLD,SIZE=50,                         C    C
               HEADREG=11,ENTRYREG=12,VERSION=3
IDRLBUFF IEWBUFF FUNC=MAPBUF,TYPE=IDRL,SIZE=50,                        C    C
               HEADREG=11,ENTRYREG=12,VERSION=3
TEXTBUFF IEWBUFF FUNC=MAPBUF,TYPE=TEXT,SIZE=50,                        C    C
               HEADREG=11,ENTRYREG=12,VERSION=3
         LTORG
***********************************************************************
* REGISTER EQUATES                                                    *
***********************************************************************
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
