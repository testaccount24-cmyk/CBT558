         TITLE '***** LOAD MODULE CROSS-REFERENCE *****'
LKEDCNTL SVLNK R3,R4
         PRINT NOGEN
*
***********************************************************************
*              LOAD MODULE CROSS-REFERENCE PROGRAM                    *
*                                                                     *
*THIS PROGRAM READS THE LOAD MODULES NAMED IN THE SYSIN FILE CONTROL  *
*CARDS AND WRITES A DATASET TO THE SYSOUT FILE WHICH CONTAINS LINKAGE *
*EDITOR CONTROL STATEMENTS THAT CAN BE USED TO REBUILD THE NAMED LOAD *
*MODULE(S) NAMED IN THE SYSIN FILE.                                   *
*                                                                     *
*TO RELINK, USE THE JCL IN PDS.JCL(LINKCNTL) WITH THESE STATEMENTS.   *
*                                                                     *
*LINKAGE EDITOR CONTROL STATEMENTS FOR EACH MODULE NAMED IN THE SYSIN *
*FILE CONTROL CARD(S) INCLUDE:                                        *
*  ORDER STATEMENTS TO INSURE THE MODULE IS REBUILT IN THE SAME ORDER *
*                   IT WAS ORIGINALLY                                 *
*  INCLUDE STATEMENTS FROM DDNAME COBSUBS FOR THE MODULES NAMED IN THE*
*                   SYSUT1 FILE. THIS PERMITS THE RELINKED MODULE TO  *
*                   CONTAIN DIFFERENT VERSIONS OF THESE "REPLACED"    *
*                   MODULES.                                          *
*  INCLUDE STATEMENT FROM DDNAME PGMLOAD FOR THE MODULE NAMED IN THE  *
*                   SYSIN FILE THAT IS CURRENTLY BEING PROCESSED. THIS*
*                   CAUSES THE RELINKED LOAD MODULE TO CONTAIN MODULES*
*                   FROM THE ORIGINAL LOAD MODULE EXCEPT THOSE IN THE *
*                   "REPLACE" INCLUDE STATEMENTS ABOVE.               *
*  ENTRY STATEMENT WHICH NAMES TO ENTRY POINT TO THE MODULE. THIS     *
*                   INSURES THE OUTPUT LOAD MODULE WILL BE ENTERED AT *
*                   THE APPROPRIATE POINT (DEFAULT ENTRY POINT IS AT  *
*                   THE BEGINNING OF THE LOAD MODULE).                *
*  NAME STATEMENT USING THE MODULE NAME CURRENTLY BEING PROCESSED. THE*
*                   REPLACE OPTION IS USED TO INSURE AN OUTPUT MODULE *
*                   IS CREATED EVEN IF IT ALREADY EXISTS IN THE       *
*                   SYSLMOD FILE.                                     *
*                                                                     *
*A LIST OF CSECTS TO BE REPLACED IS ENTERED VIA SYSUT1. LINKEDIT      *
*REPLACE STATEMENTS WILL BE GENERATED FOR ANY CSECT IN THIS LIST THAT *
*IS FOUND IN THE MODULE.                                              *
*                                                                     *
*  DD CARDS USED:  SYSLIB   - NAMES THE LOAD LIBRARY CONTAINING THE   *
*                             LOAD MODULES TO BE PROCESSED. DSORG=PO  *
*                             AND RECFM=U ARE HARD-CODED.             *
*                  SYSIN    - THIS FILE CONTAINS RECORDS WHICH NAME   *
*                             THE LOAD MODULES IN THE SYSLIB FILE THAT*
*                             ARE TO BE PROCESSED. DSORG=PS, RECFM=FB,*
*                             AND LRECL=80 ARE HARD-CODED. ANY NUMBER *
*                             OF CONTROL CARDS CAN BE ENTERED, EACH   *
*                             CONTAINING THE MEMBER NAME OF A LOAD    *
*                             MODULE IN THE SYSLIB FILE. THE NAME MUST*
*                             BEGIN IN COLUMN 1 AND IS FOLLOWED BY A  *
*                             BLANK.                                  *
*                  SYSOUT   - THIS NAMES THE OUTPUT FILE WHICH WILL   *
*                             CONTAIN THE LINKAGE EDITOR STATEMENTS.  *
*                             DSORG=PS, RECFM=FB, AND LRECL=80 ARE    *
*                             HARD-CODED.                             *
*                  SYSUT1   - NAMES A FILE OF CSECT NAMES WHICH ARE   *
*                             TO BE REPLACED IN THE LOAD MODULE WHEN  *
*                             IT IS RE-LINKED. FOR EACH OF THESE      *
*                             CSECTS FOUND IN AN INPUT LOAD MODULE,   *
*                             AN INCLUDE CARD FOR DDNAME COBSUBS WILL *
*                             BE WRITTEN TO THE SYSOUT FILE. UP TO    *
*                             999 CSECT NAMES MAY BE ENTERED, AND THEY*
*                             MUST BE IN ASCENDING ORDER. CSECT NAMES *
*                             MUST BEGIN IN COLUMN 1, AND ONLY ONE    *
*                             NAME IS IN A CARD. DSORG=PS, RECFM=FB,  *
*                             AND LRECL=80 ARE HARD-CODED.            *
*                                                                     *
* AUTHOR R THORNTON - JUL 1999                                        *
*                                                                     *
***********************************************************************
*
***********************************************************************
* GET STORAGE FOR THE SYMBOL TABLE, RLD TABLE, AND OPEN FILES         *
***********************************************************************
OPENS    OPEN  (SYSOUT,OUTPUT,SYSLIB,,SYSIN) OPEN FILES
         TM    SYSIN+48,X'10'          DID SYSIN OPEN O.K.
         BZ    NOCTL                   NO
         GETMAIN R,LV=20000            GET BUFFER STORAGE
         ST    R1,BUFAD                SAVE BUFFER ADDRESS
         GETMAIN R,LV=38000            GET SYMBOL TABLE STORAGE
         ST    R1,SYMTBAD              SAVE SYMBOL TABLE ADDRESS
         A     R1,=F'38000'            COMPUTE END ADDR
         ST    R1,ENDSYM               STORE TBL END ADDR
         GETMAIN R,LV=96000            GET RLD TABLE STORAGE
         ST    R1,RLDTBL               SAVE RLD TABLE ADDRESS
         A     R1,=F'96000'            COMPUTE END ADDR
         ST    R1,ENDRLD               STORE TBL END ADDR
***********************************************************************
*           LOAD THE CSECT-TO-BE-REPLACED TABLE FROM SYSUT1           *
***********************************************************************
         OPEN  SYSUT1                  OPEN TABLE FILE
         L     R12,CS2RPLA             POINT TO TABLE AREA
READCS2R GET   SYSUT1                  READ TABLE FILE RECORD
         MVC   0(8,R12),0(R1)          MOVE CSECT NAME TO TABLE
         LA    R12,8(R12)              ADVANCE TO NEXT TABLE ENTRY
         C     R12,CS2RPNDA            STILL WITHIN TABLE?
         BL    READCS2R                LOOP TO LOAD TABLE
ENDLOAD  MVC   0(8,R12),=XL8'FFFFFFFFFFFFFFFF' SET TABLE STOPPER
         CLOSE SYSUT1                  CLOSE THE TABLE FILE
***********************************************************************
*           READ NEXT CONTROL RECORD FROM SYSIN AND PROCESS MEMBER    *
***********************************************************************
NEXCARD  BAL   R9,GETCTL               EXTRACT DESIRED MEMBER NAME
         L     R1,REPLADDR             GET REPLACE TABLE ADDRESS
         ST    R1,CURREPLA             SET CURRENT TABLE ADDRESS
         MVI   0(R1),X'FF'             SET TABLE END
         L     R1,SYMTBAD              GET SYMBOL TABLE ADDRESS
         ST    R1,CURRSYM              SET CURRENT TABLE ADDRESS
         MVI   0(R1),X'FF'             SET TABLE END
         L     R1,RLDTBL               GET CURRENT RLD TABLE ADDRESS
         ST    R1,CURRLD               SET CURRENT ADDRESS
         MVI   0(R1),X'FF'             SET TABLE END
         MVI   IGZEBST,0               RESET INDICATOR
         BAL   R9,BLDL                 ISSUE BLDL
         MVI   CCAT,0                  INSURE TTR0
         POINT SYSLIB,TTRMOD           POINT TO 1ST BLOCK OF MODULE
***********************************************************************
* MAINLINE PROCESSING FOR THE LOAD MODULE. THE DIRECTORY ENTRY        *
* AND TEXT ARE PROCESSED.                                             *
***********************************************************************
MAINLINE L     R6,BUFAD                GET BUFFER ADDRESS
         READ  DECB,SF,SYSLIB,(6),'S'  READ BLOCK FROM MEMBER
         CHECK DECB                    AWAIT COMPLETION
         CLI   0(R6),X'20'             CESD RECORD
         BNE   TESTOTHR                NO
         BAL   R9,CESDREC              PROCESS CESD RECORDS
         B     MAINLINE                GO READ AGAIN
TESTOTHR LA    R9,CNTLRECS             ASSUME CONTROL RECORD
         CLI   0(R6),1                 IT IS CONTROL
         BE    PERFORM                 YES
         CLI   0(R6),5                 IS IT CONTROL
         BE    PERFORM                 YES
         CLI   0(R6),13                IS IT CONTROL
         BE    PERFORM                 YES
         LA    R9,RLDRECS              ASSUME RLD RECORD
         CLI   0(R6),2                 IS IT RLD
         BE    PERFORM                 YES
         CLI   0(R6),6                 IS IT RLD
         BE    PERFORM                 YES
         CLI   0(R6),14                IS IT RLD
         BE    PERFORM                 YES
         LA    R9,CTRLRECS             ASSUME CONTROL AND RLD
         CLI   0(R6),3                 IS IT CTL AND RLD
         BE    PERFORM                 YES
         CLI   0(R6),7                 IS IT CTL AND RLD
         BE    PERFORM                 YES
         CLI   0(R6),15                IS IT CTL AND RLD
         BE    PERFORM                 YES
         B     MAINLINE                NONE OF THESE, SKIP
PERFORM  BALR  R9,R9                   PERFORM APPROPRIATE ROUTINE
         TM    PROCESS,X'40'           MODULE PROCESSING DONE
         BZ    MAINLINE                NO, GO READ AGAIN
         BAL   R9,PRNTFMT              FORMAT AND PRINT DATA
         B     NEXCARD                 GO COMPLETE PROCESSING
***********************************************************************
* PROCESS LOAD MODULE CONTROL RECORDS. THESE RECORDS PRECEDE          *
* TEXT RECORDS, WHICH ARE READ AND BYPASSED.                          *
***********************************************************************
CNTLRECS ST    R9,CT9                  SAVE RETURN ADDR
         TM    0(R6),X'08'             RECORD PRECEDES LAST RECORD OF M
         BZ    CTRDPAST                NO
         OI    PROCESS,X'40'           YES, SHOW PROCESSING COMPLETE
         B     CTXIT                   AND EXIT
CTRDPAST READ  DECB,SF,,(6),MF=E       READ FOLLOWING TEXT RECORD
         CHECK DECB                    AWAIT COMPLETION
CTXIT    L     R9,CT9                  GET RETURN ADDR
         BR    R9                      EXIT
***********************************************************************
* PROCESS RLD RECORDS. A TABLE OF RLD DATA IS BUILT.                  *
***********************************************************************
RLDRECS  TM    0(R6),X'08'             LAST RECORD OF MODULE
         BZ    RLSV9                   NO
         OI    PROCESS,X'40'           SHOW PROCESSING COMPLETE
RLSV9    ST    R9,RL9                  SAVE RETURN ADDR
         LH    R8,6(R6)                NBR BYTES OF RLD DATA
         LA    R6,16(R6)               @ 1ST BYTE OF RLD DATA
         AR    R8,R6                   END OF RLD DATA ADDR
         L     R7,CURRLD               @ NEXT RLD TBL ENTRY
         USING RLDTBLD,R7
         LH    R10,0(R6)               RELOCATION POINTER
         LH    R11,2(R6)               POSITION POINTER
         LA    R6,4(R6)                PASS POINTERS
RLDNXT   C     R7,ENDRLD               END OF RLD TBL
         BE    RLDFULL                 YES, ERROR
         STH   R10,RLDRP               SAVE RELOC PTR
         STH   R11,RLDPP               POS PTR
         PACK  RLDTYPE,0(1,R6)         INVERT FLAG BYTE
         NI    RLDTYPE,X'0F'           CLEAR HI-ORDER
         CLI   RLDTYPE,9               UNRESOLVED
         BNE   RLADMV                  NO
         MVI   RLDTYPE,8               YES, USE PREFERRED VALUE
RLADMV   SR    R1,R1                   CLEAR WORK REG
         ICM   R1,7,1(R6)              PICK UP ADDRESS
         STCM  R1,7,RLDADDR            AND SAVE IT
         XC    RLDTONAM(9),RLDTONAM    CLEAR
         LH    R15,RLDRP               GET RELOCATION POINTER
         BCTR  R15,R0                  DEDUCT 1
         LTR   R15,R15                 TEST DIFFERENCE
         BM    RLNXT                   NEG, ERROR
         MH    R15,SYMLEN              TIMES SYM TBL ENTRY LENG
         A     R15,SYMTBAD             @ ESD SYMBOL TBL ENTRY
         C     R15,CURRSYM             PAST END OF TABLE
         BH    RLNXT                   YES, ERROR
         USING SYMTBL,R15
         MVC   RLDTONAM,EXTSYM         ESD SYMBOL TO RLD TBL ENTRY
         CLC   RLDPP,RLDRP             A-TYPE ADCON?
         BE    RLCKUNR                 YES, NOT EXTERNALLY REF'D
         OI    SYMIND,X'80'            SHOW SYMBOL REFERENCED
RLCKUNR  CLI   RLDTYPE,8               IS IT UNRESOLVED?
         BNE   RLGFM                   NO, RESOLVED
         OI    SYMIND,X'01'            YES, SHOW UNRESOLVED
RLGFM    XC    RLDFMNAM,RLDFMNAM       CLEAR REFERENCED FROM NAME
         LH    R15,RLDPP               GET POSITION POINTER
         BCTR  R15,0                   RELATIVIZE POINTER
         LTR   R15,R15                 VALID POINTER?
         BM    RLNXT                   NO, SKIP IT
         MH    R15,SYMLEN              TIMES SYMTBL ENTRY SIZE
         A     R15,SYMTBAD             PLUS TABLE START ADDRESS
         C     R15,CURRSYM             PAST END OF SYMTBL?
         BNL   RLNXT                   YES, SKIP IT
         MVC   RLDFMNAM,EXTSYM         SET REFERENCED FROM NAME
         DROP  R15
RLNXT    LA    R7,L'RLDENT(R7)         TO NEXT TBL ENTRY
         TM    0(R6),1                 NEXT ITEM HAS REL AND POS PTRS
         BO    RLSAME                  NO
         LH    R10,4(R6)               PICK UP NEW REL PTR
         LH    R11,6(R6)               PICK UP NEW POS PTR
         LA    R6,4(R6)                STEP OVER 4 BYTES
RLSAME   LA    R6,4(R6)                TO NEXT RLD ITEM
         CR    R6,R8                   END OF RLD DATA
         BL    RLDNXT                  NO
         ST    R7,CURRLD               SET NEW CURRENT ADDRESS
         L     R9,RL9                  GET RETURN ADDR
         BR    R9                      EXIT
         DROP  R7
***********************************************************************
* PROCESS CONTROL AND RLD RECORDS. THESE RECORDS CONTAIN BOTH         *
* RLD AND CONTROL INFORMATION, AND ARE PROCESSED BY BOTH              *
* THE RLDRECS AND CNTLRECS ROUTINES.                                  *
***********************************************************************
CTRLRECS ST    R9,CR9                  SAVE RETURN ADDR
         BAL   R9,RLDRECS              PROCESS RLD DATA
         L     R6,BUFAD                RESET BUFFER ADDRESS
         BAL   R9,CNTLRECS             PROCESS CONTROL DATA
         L     R9,CR9                  GET RETURN ADDR
         BR    R9                      EXIT
***********************************************************************
* PROCESS COMPOSITE ESD RECORDS. DATA FROM THESE RECORDS IS           *
* PLACED IN THE SYMBOL TABLE.                                         *
***********************************************************************
CESDREC  ST    R9,CES9                 SAVE RETURN
         L     R7,CURRSYM              GET SYMBOL TBL ADDR
         USING SYMTBL,R7
         LH    R10,4(R6)               GET ESD ID OF 1ST ITEM
         LH    R8,6(R6)                NBR BYTES OF ESD DATA
         SRL   R8,4                    COMPUTE NBR ENTRIES
         LA    R6,8(R6)                STEP TO 1ST RECORD ESD ITEM
CESDNXT  C     R7,ENDSYM               END OF TABLE
         BNL   SYMFULL                 YES, ERROR
         MVC   EXTSYM,0(R6)            SYMBOL NAME
         MVC   TYPSYM,8(R6)            TYPE
         NI    TYPSYM,X'0F'            CLEAR BITS 0-3
         MVI   SYMIND,0                CLEAR INDICATOR
         CLI   8(R6),X'00'             SD ENTRY (NAMED CSECT)?
         BE    CEMVAD                  YES
         CLI   8(R6),X'04'             PC ENTRY (UNNAMED CSECT)?
         BNE   CEADD1                  NO, IGNORE IT
CEMVAD   MVC   SYMADDR,9(R6)           ADDRESS OF SYMBOL
         MVC   SYMLENG,13(R6)          LENGTH OR LR ESD ID
         STCM  R10,3,SYMESDID          ESD ID
         LA    R7,L'SYMENT(R7)         STEP TO NEXT ENTRY
         ST    R7,CURRSYM              SAVE NEXT TABLE ADDR
CEADD1   LA    R10,1(R10)              ADD 1 TO ESD COUNTER
         LA    R6,16(R6)               TO NEXT ESD ITEM IN INPUT
CESNXT   BCT   R8,CESDNXT              LOOP THRU INPUT RECORD
         L     R9,CES9                 GET RETURN ADDR
         BR    R9                      EXIT
***********************************************************************
*  SORT THE SYMTBL AND RLDTBL IN ASCENDING ORDER BY ADDRESS           *
***********************************************************************
PRNTFMT  ST    R9,PF9                  SAVE RETURN ADDRESS
         L     R7,SYMTBAD              @ SYMBOL TABLE
         USING SYMTBL,R7
         LA    R15,L'SYMENT(R7)        POINT TO 2ND ENTRY
PSCKLO   TM    SYMIND-SYMENT(R15),1    UNRESOLVED?
         BZ    PSCKL00                 NO, RESOLVED
         MVC   SYMADDR-SYMENT(L'SYMADDR,R15),=X'FFFFFF' UNRESOLVED
         MVI   TYPSYM-SYMENT(R15),0    SHOW IT AS CSECT
PSCKL00  TM    SYMIND,1                UNRESOLVED?
         BZ    PSCKLO0                 NO, RESOLVED
         MVC   SYMADDR,=X'FFFFFF'      UNRESOLVED
         MVI   TYPSYM,0                SHOW IT AS CSECT
PSCKLO0  CLC   SYMADDR,SYMADDR-SYMENT(R15) 1ST IS HIGH?
         BL    PSSTP2                  1ST LOW, NO SWITCH
         BH    PSSWCH                  1ST HIGH, SWITCH
         CLI   TYPSYM-SYMENT(R15),0    2ND IS SD?
         BE    PSSWCH                  YES, SWITCH
         CLI   TYPSYM-SYMENT,4         2ND IS PC?
         BNE   PSSTP2                  NO
PSSWCH   MVC   HOLDSYM,SYMENT          YES, SAVE FIRST
         MVC   SYMENT,0(R15)           MOVE 2ND TO 1ST LOCATION
         MVC   0(L'SYMENT,R15),HOLDSYM MOVE 1ST TO 2ND LOCATION
PSSTP2   LA    R15,L'SYMENT(R15)       2ND POINTER UP 1 ENTRY
         C     R15,CURRSYM             END OF TABLE?
         BL    PSCKLO                  NO, CONTINUE
         LA    R7,L'SYMENT(R7)         YES, STEP 1ST ENTRY
         LA    R15,L'SYMENT(R7)        2ND FOLLOWS 1ST
         C     R15,CURRSYM             2ND POINTER NOW AT END?
         BL    PSCKLO                  NO
         L     R7,SYMTBAD              POINT TO 1ST SYM ENTRY
         L     R8,RLDTBL               @ RLD TABLE
         USING RLDTBLD,R8
         LA    R15,L'RLDENT(R8)        POINT TO 2ND ENTRY
PSCKLOA  CLC   RLDADDR,RLDADDR-RLDENT(R15) 1ST IS HIGH?
         BNH   PSSTP2A                 NO
         MVC   HOLDRLD,RLDENT          YES, SAVE FIRST
         MVC   RLDENT,0(R15)           MOVE 2ND TO 1ST LOCATION
         MVC   0(L'RLDENT,R15),HOLDRLD MOVE 1ST TO 2ND LOCATION
PSSTP2A  LA    R15,L'RLDENT(R15)       2ND POINTER UP 1 ENTRY
         C     R15,CURRLD              END OF TABLE?
         BL    PSCKLOA                 NO, CONTINUE
         LA    R8,L'RLDENT(R8)         YES, STEP 1ST ENTRY
         LA    R15,L'RLDENT(R8)        2ND FOLLOWS 1ST
         C     R15,CURRLD              2ND POINTER NOW AT END?
         BL    PSCKLOA                 NO
***********************************************************************
*  SIFT OUT NULLS FROM SYMTBL. CHANGE PC TO SD TYPE.                  *
***********************************************************************
         L     R7,SYMTBAD              @ SYMTBL
         LR    R15,R7                  COPY SYMTBL ADDRESS
CKGDSYM  CLI   TYPSYM,7                IS IT A NULL?
         BE    DROPSYM                 YES
         CR    R7,R15                  ANY NEED TO MOVE?
         BE    CSNOMOV                 NO
         CLI   TYPSYM,4                IS IT PC?
         BNE   CSMOVE                  NO
         MVI   TYPSYM,0                YES, CHANGE TO SD
CSMOVE   MVC   0(L'SYMENT,R15),0(R7)   MOVE SECOND TO FIRST LOC
CSNOMOV  LA    R15,L'SYMENT(R15)       MOVE FIRST POINTER
DROPSYM  LA    R7,L'SYMENT(R7)         MOVE SECOND POINTER
         C     R7,CURRSYM              END OF TABLE?
         BL    CKGDSYM                 NO
         ST    R15,CURRSYM             YES, SET NEW TABLE END
***********************************************************************
* SIFT OUT A-TYPE ADDRESS CONSTANTS. ELIMINATE ANY ENTRIES WHICH HAVE *
* NO CORRESPONDING SYMTBL ENTRIES.                                    *
***********************************************************************
         L     R8,RLDTBL               @ RLD TABLE
         LR    R15,R8                  COPY TABLE ADDRESS
CKGDRLD  CLC   RLDPP,RLDRP             A-TYPE ADCON?
         BE    DROPRLD                 YES
         L     R7,SYMTBAD              @ SYMTBL
CKVALESD C     R7,CURRSYM              END OF TABLE
         BE    DROPRLD                 YES
         CLC   RLDPP,SYMESDID          MATCHING SYMTBL ENTRY?
         BE    RLTAKE                  YES
         LA    R7,L'SYMENT(R7)         NO, STEP TO NEXT ENTRY
         B     CKVALESD                LOOP
RLTAKE   CR    R7,R15                  ANY NEED TO MOVE?
         BE    RLNOMOVE                NO
         MVC   0(L'RLDENT,R15),0(R8)   YES, MOVE 2ND TO 1ST
RLNOMOVE LA    R15,L'RLDENT(R15)       STEP 1ST POINTER
DROPRLD  LA    R8,L'RLDENT(R8)         STEP 2ND POINTER
         C     R8,CURRLD               END OF TABLE?
         BL    CKGDRLD                 NO
         ST    R15,CURRLD              YES, SET NEW TABLE END
         L     R7,SYMTBAD              @ SYMTBL
         L     R8,RLDTBL               @ RLDTBL
         MVC   EPNAME,QUESMARK         DEFAULT NAME
         L     R1,REPLADDR             POINT TO REPLACES TABLE
         ST    R1,CURREPLA             SAVE CURRENT POINTER
         MVI   0(R1),X'FF'             SET TABLE STOPPER
***********************************************************************
* THE ORDER STATEMENTS ARE FORMATTED AND WRITTEN TO THE SYSOUT FILE   *
* NAMES OF CSECTS TO BE REPLACED ARE MOVED TO THE REPLACES TABLE      *
***********************************************************************
PRTSYM   CLI   TYPSYM,0                IS IT SD
         BNE   CESTEP                  NO
         MVC   CSNAME,EXTSYM           SYMBOL NAME
CECSADR  LA    R12,SYMADDR             @ SYMBOL ADDR
         BAL   R9,HEXPRT3              CONVERT
         MVC   CSLOC,PRTABL            SYMBOL ADDR
         CLC   CSLOC,LKEDEPA           THIS THE ENTRY POINT?
         BNE   WRTORDER                NO
         MVC   EPNAME,CSNAME           YES, SAVE ENTRY POINT NAME
WRTORDER MVC   ORDNAME,CSNAME          CSECT NAME TO ORDER STATEMENT
         PUT   SYSOUT,ORDER            WRITE ORDER STATEMENT
         L     R1,CS2RPLA              POINT TO CSECTS-TO-REPLACE TBL
CHKRPLND CLI   0(R1),X'FF'             END OF TABLE?
         BE    CESTEP                  YES
         CLC   CSNAME,0(R1)            THIS A CSECT TO BE REPLACED?
         BE    REPLSETU                YES
         BL    CESTEP                  NO, PAST IT IN TABLE
         LA    R1,8(R1)                STEP TO NEXT ENTRY
         B     CHKRPLND                CONTINUE SEARCH
REPLSETU L     R1,CURREPLA             POINT TO CURRENT ENTRY
         C     R1,REPLENDA             PAST END OF TABLE?
         BNL   CESTEP                  YES, IGNORE ENTRY, TABLE IS FULL
         CLC   CSNAME,=CL8'IGZEBST'    IS IT IGZEBST?
         BNE   DOREPL                  NO
         MVI   IGZEBST,1               YES, INDICATE SO
         B     CESTEP                  CONTINUE
DOREPL   MVC   0(8,R1),CSNAME          CSECT NAME TO REPLACE TABLE
         LA    R1,8(R1)                ADVANCE TO NEXT ENTRY
         ST    R1,CURREPLA             UPDATE TABLE ADDRESS
         MVI   0(R1),X'FF'             SET TABLE STOPPER
CESTEP   LA    R7,L'SYMENT(R7)         TO NEXT TBL ENTRY LOCATION
         C     R7,CURRSYM              END OF TABLE ENTRIES?
         BL    PRTSYM                  NO
         CLI   IGZEBST,1               DID WE FIND IGZEBST?
         BNE   LDRPADDR                NO
         MVI   IGZEBST,0               RESET SWITCH
         MVC   REPNAME(REPEND-REPNAME),BLANX  CLEAR
         MVC   REPNAME,=CL8'IGZEBST)' PUT IN MODULE NAME
         PUT   SYSOUT,REPLACE          WRITE REPLACE STATEMENT
LDRPADDR L     R12,REPLADDR            POINT TO REPLACES TABLE
CHRPND   CLI   0(R12),X'FF'            END OF REPLACE TABLE?
         BE    DOINCL                  YES
         MVC   REPNAME(REPEND-REPNAME),BLANX  CLEAR
         MVC   REPNAME,0(R12)          NO, MOVE REPLACE CSECT NAME
         LA    R1,REPNAME+7            POINT TO LAST POSSIBLE BYTE
FINDRITE CLI   0(R1),C' '              AT A BLANK?
         BNE   MOVRTPRN                NO
         BCT   R1,FINDRITE             YES, BACK UP AND LOOP
MOVRTPRN MVI   1(R1),C')'              MOVE ENDING PAREN
         PUT   SYSOUT,REPLACE          WRITE REPLACE STATEMENT
         LA    R12,8(R12)              STEP TO NEXT TABLE ENTRY
         B     CHRPND                  LOOP THRU REPLACES TABLE
DOINCL   MVC   INCLNAME(9),BLANX       PRE-CLEAR NAME FIELD
         MVC   INCLNAME,MEMBER         MEMBER NAME BEING INCLUDED
         LA    R1,INCLNAME             POINT TO START OF NAME
         LA    R15,8                   MAX NAME SIZE
INCLCKND CLI   0(R1),C' '              AT END OF NAME?
         BE    INCLRPN                 YES
         LA    R1,1(R1)                NO, STEP OVER 1
         BCT   R15,INCLCKND            LOOP TO FIND RIGHT END
INCLRPN  MVI   0(R1),C')'              MOVE ENDING RIGHT PAREN
         PUT   SYSOUT,INCLUDE          WRITE THE INCLUDE STATEMENT
         CLC   EPNAME,QUESMARK         ENTRY POINT NAME FOUND?
         BNE   WRTNTRY                 NO
         TM    ATTR1B,X'40'            ENTRY POINT IS ZERO?
         BO    FMTNAME                 YES, DON'T NEED ENTRY STATEMENT
WRTNTRY  MVC   ENTRYNM,EPNAME          MOVE ENTRY POINT NAME
         PUT   SYSOUT,ENTRY            WRITE LINKEDIT ENTRY STATEMENT
FMTNAME  MVC   NAMENAME(NAMEEND-NAMENAME),BLANX CLEAR FOR MOVE
         MVC   NAMENAME,MEMBER         MOVE OUTPUT MEMBER NAME
         LA    R1,NAMENAME+7           POINT TO LAST POSSIBLE NAME CHAR
NAMFRHE  CLI   0(R1),C' '              BLANK?
         BNE   NAMEADDR                NO
         BCT   R1,NAMFRHE              YES, BACK UP AND LOOP
NAMEADDR MVC   1(3,R1),=CL3'(R)'       ADD REPLACE PARAMETER
         PUT   SYSOUT,NAME             WRITE LINKEDIT NAME STATEMENT
PFMTXIT  L     R9,PF9                  GET RETURN ADDR
         BR    R9                      AND EXIT
         DROP  R7
         DROP  R8
***********************************************************************
* ISSUE BLDL FOR THE MAIN MODULE                                      *
***********************************************************************
BLDL     ST    R9,BL9                  SAVE RETURN ADDR
ISSBLDL  BLDL  SYSLIB,BLDLIST          ISSUE BLDL
         LTR   R15,R15                 ANY ERRORS
         BNZ   MISSMEM                 YES
         LA    R12,LKEPA               @ E.P. ADDR
         BAL   R9,HEXPRT3              CONVERT
         MVC   LKEDEPA,PRTABL          E.P. ADDR
BLXIT    L     R9,BL9                  GET RETURN ADDR
         BR    R9                      EXIT
***********************************************************************
* PROCESS THE CONTROL CARD CONTAINING MODULE NAME AND CSECT.          *
* THIS MUST BE THE FIRST CARD IN THE SYSIN DECK.                      *
***********************************************************************
GETCTL   GET   SYSIN                   READ THE CONTROL CARD
         LA    R12,72                  LENGTH OF CONTROL CARD
         LA    R11,8                   MAX LENGTH OF MEMBER NAME
         MVC   MEMBER,BLANX            CLEAR MEMBER NAME FIELD
         LA    R10,MEMBER              @ MEMBER NAME FIELD
CKBLK1   CLI   0(R1),C' '              CONTROL BYTE IS BLANK
         BNE   GCMEMOV                 NO, GO MOVE MEMBER NAME
         LA    R1,1(R1)                TO NEXT CONTROL BYTE
         BCT   R12,CKBLK1              SUBTRACT 1 FROM REMAINING LENGTH
         B     GCEND                   ALL BLANKS, EXIT
GCMEMOV  MVC   0(1,R10),0(R1)          CONTROL BYTE TO MEMBER NAME
         LA    R1,1(R1)                TO NEXT CONTROL BYTE
         BCTR  R12,R0                  SUBTRACT 1 FROM LENGTH
         LA    R10,1(R10)              TO NEXT NAME BYTE
         BCTR  R11,R0                  SUBTRACT 1 FROM LENGTH
         CLI   0(R1),C' '              GOT A BLANK
         BE    GCEND                   YES
         CLI   0(R1),C','              GOT A COMMA
         BE    GCEND                   YES
         LTR   R12,R12                 END OF CONTROL DATA
         BE    GCEND                   YES
         LTR   R11,R11                 NAME FULL
         BNZ   GCMEMOV                 NO, CONTINUE
         B     NAMEOV8                 YES, NAME TOO LONG
GCEND    CLC   MEMBER,BLANX            ANY MEMBER NAME FOUND
         BE    NOMBR                   NO
         BR    R9                      EXIT
***********************************************************************
* MISCELLANEOUS ERROR MESSAGES.                                       *
***********************************************************************
NOCTL    WTO   'MEMBER MUST BE ENTERED VIA SYSIN',ROUTCDE=11
         ABEND 111,DUMP                TERMINATE IN ERROR
NAMEOV8  WTO   'MEMBER OR CSECT NAME OVER 8 CHARACTERS',ROUTCDE=11
         ABEND 222,DUMP                TERMINATE IN ERROR
NOMBR    WTO  'NO MEMBER NAME FOUND IN CONTROL CARD OR PARM',ROUTCDE=11
         ABEND 333,DUMP                TERMINATE IN ERROR
MISSMEM  WTO   'SPECIFIED MEMBER NOT FOUND IN SYSLIB PDS',ROUTCDE=11
         ABEND 444,DUMP                TERMINATE IN ERROR
SYMFULL  WTO   'SYMBOL TABLE FULL: OVER 2000 ENTRIES',ROUTCDE=11
         ABEND 555,DUMP                TERMINATE IN ERROR
RLDFULL  WTO   'RLD TABLE FULL: OVER 3000 ENTRIES',ROUTCDE=11
         ABEND 666,DUMP                TERMINATE IN ERROR
***********************************************************************
* CREATE PRINTABLE HEX FROM HEX. ON ENTRY, REG 12 CONTAINS THE        *
* ADDRESS OF THE DATA TO BE REFORMATTED. ENTRY POINT USED             *
* DETERMINES THE SIZE OF THE FIELD. OUTPUT DATA IS PLACED IN          *
* THE PRTABL FIELD, 2 CHARACTERS PER BYTE.                            *
***********************************************************************
HEXPRT1  UNPK  PRTABL(3),0(2,R12)      UNPACK HEX
         B     HEXCLTR                 CONTINUE
HEXPRT2  UNPK  PRTABL(5),0(3,R12)      UNPACK HEX
         B     HEXCLTR                 CONTINUE
HEXPRT3  UNPK  PRTABL(7),0(4,R12)      UNPACK HEX
         B     HEXCLTR                 CONTINUE
HEXPRT4  UNPK  PRTABL(9),0(5,R12)      UNPACK HEX
HEXCLTR  MVZ   PRTABL(8),XZROS         CLEAR FOR TRANSLATE
         TR    PRTABL(8),TRTBL         MAKE PRINTABLE
         BR    R9                      EXIT
***********************************************************************
* END OF JOB.                                                         *
***********************************************************************
EOJ      CLOSE (SYSLIB,,SYSOUT,,SYSIN) CLOSE FILES
         L     R13,4(R13)              GET POINTER TO CALLER'S SAVE ARE
         LM    R14,R12,12(R13)         RESTORE CALLER'S REGS
         SR    R15,R15                 CLEAR RETURN CODE
         BR    R14                     RETURN TO CALLER
***********************************************************************
*                 *** DATA AND WORK AREAS ***                         *
***********************************************************************
         DS    0F
BLDLIST  DS    0CL62                   BLDL LIST
         DC    H'1'                    ONE ENTRY
         DC    H'58'                   LENGTH OF ENTRY
MEMBER   DC    CL8' '                  MEMBER NAME
TTRMOD   DC    XL3'000000'             TTR OF MODULE
CCAT     DC    XL1'00'                 CONCATENATION NUMBER
         DC    XL1'00'
ALIASIND DC    XL1'00'                 ALIAS AND MISC INDICATOR
*                           80=ALIAS
TTR1TXT  DC    XL3'000000'             TTR OF 1ST TXT RECORD
         DC    XL1'00'
TTRNS    DC    XL3'000000'             TTR OF NOTE OR SCATTER LIST
NNOTE    DC    XL1'00'                 NBR ENTRIES IN NOTE LIST
ATTR1A   DC    XL1'00'                 MODULE ATTRIBUTES 1, BYTE 1
*                           80=RENT
*                           40=REUS
*                           20=OVERLAY
*                           10=UNDER TEST
*                           08=ONLY LOADABLE
*                           04=SCATTER FORMAT
*                           02=EXECUTABLE
*                           01=ONE TXT, NO RLD RECORDS
ATTR1B   DC    XL1'00'                 ATTRIBUTES 1, BYTE 2
*                           80=CANNOT BE REPROCESSED BY LKED E
*                           40=ORIGIN OF 1ST TXT RECORD IS ZERO
*                           20=ASSIGNED ENTRY POINT ADDR IS ZERO
*                           10=CONTAINS NO RLD RECORD
*                           08=CANNOT BE REPROCESSED BY LKED
*                           04=CONTAINS TESTRAN SYMBOLS
*                           02=CREATED BY LKED
*                           01=REFR
TOTVIRT  DC    XL3'000000'             TOTAL VIRTUAL STRG REQRD FOR MOD
LENG1    DC    XL2'0000'               LENGTH OF 1ST TEXT RECORD
LKEPA    DC    XL3'000000'             ASSIGNED ENTRY POINT ADDR
ATTR2    DC    XL1'00'                 ATTRIBUTES 2
*                           80=PROCESSED BY OS/VS LKED
*                           20=PAGE ALIGNMENT REQUIRED FOR MODULE
*                           10=SSI PRESENT
         DC    XL2'0000'
SCTRLEN  DC    XL2'0000'               SCATTER LIST LENGTH
TTLEN    DC    XL2'0000'               TRANSLATION TABLE LENGTH
SCESDID  DC    XL2'0000'               CESD NBR FOR 1ST TXT RECD
SCEPESD  DC    XL2'0000'               CESD NBR FOR ENTRY POINT
ALEPA    DC    XL3'000000'             ENTRY POINT OF THE MEMBER NAME
ALMEM    DC    CL8' '                  REAL MEMBER NAME FOR ALIAS
SSI      DS    XL4'00000000'           SSI BYTES
AUTHLEN  DC    XL1'00'                 AUTH CODE LENGTH
AUTHCOD  DC    XL1'00'                 AUTH CODE
*
RLDTBLD  DSECT ,                       RELOCATION DICTIONARY TABLE
RLDENT   DS    0CL24                   11 BYTE ENTRIES
RLDRP    DS    XL2                     RELOCATION POINTER
RLDPP    DS    XL2                     POS PTR (SYMBOL CESD NBR)
RLDTYPE  DS    XL1                     TYPE: 08=UNRESOLVED
RLDADDR  DS    XL3                     LKED ASSGND ADDR OF CONSTANT
RLDTONAM DS    CL8                     REFERENCE-TO NAME
RLDFMNAM DS    CL8                     REFERENCED-FROM NAME
*
SYMTBL   DSECT ,                       EXTERNAL SYMBOL TABLE ENTRY
SYMENT   DS    0CL18                   19 BYTE ENTRIES
EXTSYM   DS    CL8                     EXTERNAL SYMBOL NAME
TYPSYM   DS    XL1                     SYMBOL TYPE
*                                      00=SD (NAMED CSECT)
*                                      02=ER (EXTRN)
*                                      03=LR (ENTRY)
*                                      04=PC (UNNAMED CSECT)
*                                      05=CM (COM)
*                                      06=PR (PSEUDO REGISTER)
*                                      07=NULL
*                                      0A=WX (WXTRN)
*                                      0F=ENTAB OR SEGTAB
SYMIND   DS    XL1                     INDICATOR:
*                                      X'80'=REFERENCED
*                                      X'01'=UNRESOLVED
SYMADDR  DS    XL3                     SYMBOL ADDRESS (0 FOR ER, WX, NU
SYMLENG  DS    XL3                     LENGTH FOR SD, PC, CM, PR
SYMESDID DS    XL2                     ESD ID OF THIS ITEM
LKEDCNTL CSECT
*
ORDER    DS    0CL80                   LINKEDIT ORDER STATEMENT
         DC    CL7' ORDER '
ORDNAME  DC    CL8' '
         DC    CL65' '
*
REPLACE  DS    0CL80                   LINKEDIT INCLUDE STATEMENT
         DC    CL17' INCLUDE COBSUBS('    TO EFFECT A REPLACEMENT
REPNAME  DC    CL8' '
         DC    CL55' '
REPEND   EQU   *
*
INCLUDE  DS    0CL80                   LINKEDIT INCLUDE STATEMENT
         DC    CL17' INCLUDE PGMLOAD('
INCLNAME DC    CL8' '                  MEMBER NAME TO INCLUDE
         DC    CL55' '
*
ENTRY    DS    0CL80                   LINKEDIT ENTRY STATEMENT
         DC    CL7' ENTRY '
ENTRYNM  DC    CL8' '                     ENTRY POINT NAME
         DC    CL65' '
*
NAME     DS    0CL80                   LINKEDIT NAME STATEMENT
         DC    CL6' NAME '
NAMENAME DC    CL8' '                    OUTPUT MEMBER NAME
         DC    CL66' '
NAMEEND  EQU   *
*
XZROS    DC    8X'00'                  CONSTANT ZEROS
TRTBL    DC    C'0123456789ABCDEF'     TRANSLATE TBL
LKEDEPA  DS    CL6                     LINKEDIT ASSIGNED ENTRY PT ADDR
PRTABL   DS    CL9                     HEX-PRINTABLE CONVERSION AREA
CSNAME   DS    CL8                     CSECT NAME
CSLOC    DS    CL6                     CSECT START LOCATION
HOLDSYM  DS    CL(L'SYMENT)            HOLD AREA FOR SYM ENTRY
HOLDRLD  DS    CL(L'RLDENT)            HOLD AREA FOR RLD ENTRY
PF9      DS    F                       PRNTFMT RETURN ADDR
BUFAD    DS    F                       SYSLIB BUFFER ADDR
SYMTBAD  DS    F                       SYMBOL TABLE ADDRESS
CURRSYM  DS    F                       CURRENT SYM TBL ADDR
ENDSYM   DS    F                       SYM TBL END ADDR
RLDTBL   DS    F                       ADDR OF RLD TABLE
CURRLD   DS    F                       CURR RLD TBL ADDR
ENDRLD   DS    F                       RLD TBL END ADDR
PROCESS  DC    XL1'00'                 PROCESS INDIC 80=SYM TBL BUILT
CES9     DS    F                       CESDREC RETURN ADDR
BL9      DS    F                       BLDL RTN RETURN ADDR
CR9      DS    F                       CTRLRECS RETURN ADDR
CT9      DS    F                       CNTLRECS RETURN ADDR
RL9      DS    F                       RLDRECS RETURN ADDR
SYMLEN   DC    AL2(L'SYMENT)           LENGTH OF SYMTBL ENTRY
P0       DC    P'0'                    CONSTANT 0
P1       DC    P'1'                    CONSTANT 1
*
CS2RPLA  DC    A(CS2REPL)              ADDRESS OF CSECTS TO REPLACE TBL
CS2RPNDA DC    A(CS2REPND-9)           ADDR OF END OF CSECT TO REPL TBL
CURREPLA DC    A(REPLACES)             CURRENT ADDRESS IN REPLACES TBL
REPLADDR DC    A(REPLACES)             ADDRESS OF REPLACES TABLE
REPLENDA DC    A(REPLEND-9)            ADDRESS OF END OF REPLACES TABLE
QUESMARK DC    CL8'????????'           QUESTION MARKS
EPNAME   DS    CL8                     ENTRY POINT NAME
BLANX    DC    CL121' '                CONSTANT BLANKS
IGZEBST  DC    X'00'                   IGZEBST INDICATOR
*
SYSIN    DCB   DSORG=PS,MACRF=GL,DDNAME=SYSIN,                         X
               RECFM=FB,LRECL=80,EODAD=EOJ
SYSUT1   DCB   DSORG=PS,MACRF=GL,DDNAME=SYSUT1,                        X
               RECFM=FB,LRECL=80,EODAD=ENDLOAD
SYSLIB   DCB   DSORG=PO,MACRF=R,DDNAME=SYSLIB,                         X
               RECFM=U,NCP=1
SYSOUT   DCB   DSORG=PS,MACRF=PM,DDNAME=SYSOUT,                        X
               RECFM=FB,LRECL=80
         LTORG
***********************************************************************
*        TABLES AREA                                                  *
***********************************************************************
REPLACES DS    0CL8                    REPLACE CSECT NAMES
         DC    XL8'FFFFFFFFFFFFFFFF'      END OF TABLE VALUE
         DS    99CL8                      ROOM FOR 99 MORE ENTRIES
REPLEND  EQU   *                       END OF REPLACES TABLE
*
CS2REPL  DS    0CL8                    CSECTS TO REPLACE TBL
         DC    XL8'FFFFFFFFFFFFFFFF'      END OF TABLE VALUE
         DS    999CL8                     ROOM FOR 999 MORE ENTRIES
CS2REPND EQU   *                       END OF CSECT TO REPL TBL
         END
