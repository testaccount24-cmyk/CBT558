DUMP     TITLE 'GENERAL FILE DUMP UTILITY'
DUMPFIL  START 0
         USING *,R3,R4,R5
*
* GENERAL FILE DUMP UTILITY TO PROVIDE ONE OF THREE OUTPUT
* DUMP FORMATS. LOGICAL RECORDS ARE DUMPED INDIVIDUALLY USING THE
* USER SPECIFIED BLKSIZE, LRECL, AND RECFM DD PARAMETERS. CONTROL
* CARDS ARE USED TO SPECIFY THE TYPE OF OUTPUT DESIRED,
* NUMBER OF RECORDS TO PRINT, AND RECORD SELECTION, REJECTION, AND
* IDENTIFICATION CRITERIA.
*
***********************************************************************
***********************************************************************
* * * *  USE  OF  DUMPFIL  * * *                                      *
* 1.  DUMPFIL IS A GENERAL PURPOSE FILE DUMP UTILITY WHICH WILL PRINT *
*        SEQUENTIAL AND ISAM DATASETS IN CHARACTER, HEXADECIMAL, OR A *
*        COMBINATION OF BOTH. ITS OPERATION IS CONTROLLED BY USE OF   *
*        TWO CONTROL CARDS, BOTH OF WHICH ARE OPTIONAL. AN OPTIONAL   *
*        OUTPUT FILE OF THE RECORDS SELECTED  MAY BE CREATED.         *
* 2.  EXECUTION - A PROC NAMED DUMPFIL IS EXECUTED, WHICH REQUIRES A  *
*        DD CARD FOR THE FILE TO BE DUMPED. THE DDNAME FOR THIS CARD  *
*        MUST BE DUMPIN. DCB PARAMETERS MAY BE SPECIFIED IN THE DD    *
*        CARD, OTHERWISE THE FILE LABEL RECFM, LRECL, AND BLKSIZE WILL*
*        BE USED. IF NON-STANDARD OR UNLABELLED TAPE IS TO BE DUMPED, *
*        DCB PARAMETERS MUST BE SPECIFIED. IF FILE CHARACTERISTICS ARE*
*        UNKNOWN, ANY FILE MAY BE DUMPED BY SPECIFYING RECFM=U AND    *
*        BLKSIZE=32760 FOR TAPE, OR THE MAXIMUM TRACK SIZE FOR DISK.  *
*        WHEN RECFM=U IS SPECIFIED, THE DUMP OUTPUT WILL BE PHYSICAL  *
*        BLOCKS, RATHER THAN LOGICAL RECORDS. TO CREATE AN OUTPUT FILE*
*        OF THE RECORDS SELECTED, SUPPLY A DUMPOUT DD CARD, WHICH MUST*
*        SPECIFY ALL NECESSARY DCB PARAMETERS, SUCH AS RECFM, LRECL,  *
*        BLKSIZE, RKP, CYLOFL, KEYLEN, DSORG, ETC.                    *
* 3.  IF CONTROL CARDS ARE TO BE USED, THEY ARE ENTERED FOLLOWING A   *
*        //SYSIN DD *                                                 *
*        THE SYSIN DD CARD MAY BE OMITTED IF NO CONTROL CARDS ARE USED*
* 4.  THE PRINT OPTION CARD IS FIXED FORMAT. ONLY ONE IS PERMITTED PER*
*        RUN. IF NO CONTROL CARDS ARE ENTERED, THE DEFAULT VALUES     *
*        ASSUMED ARE: TWO-LINE MIXED CHARACTER/HEX LISTING WITH A LOC-*
*        ATOR BAR BELOW EACH LINE TO IDENTIFY THE POSITION OF CHARAC- *
*        TERS IN THE RECORD. 50 RECORDS WILL BE PRINTED, AND A PHYSIC-*
*        ALLY SEQUENTIAL FILE IS ASSUMED INPUT. THE PRINT OPTION CARD *
*        FORMAT IS:                                                   *
*        COL 1:     *                                                 *
*        COL 2:     H=HEX ONLY, C=CHARACTER ONLY, 3=THREE-LINE        *
*                   COMBINED CHARACTER-HEX PRINTOUT.                  *
*        COL 4:     N=NO PRINT LOCATOR BAR AFTER EACH LINE            *
*        COL 6-10:  NUMBER OF RECORDS TO BE PRINTED, BLANK INDICATING *
*                   DEFAULT. THE NUMBER MUST BE RIGHT JUSTIFIED, WITH *
*                   LEADING ZEROS. IF OVER 1,000 RECORDS ARE REQUESTED*
*                   OPERATOR PERMISSION IS REQUESTED.                 *
*        COL 12-13: FILE TYPE, BLANK=PHYSICALLY SEQUENTIAL, IS=ISAM,  *
*                   VS=VARIABLE SPANNED.                              *
*        COL 15-16: OUTPUT FILE TYPE, IS = ISAM, ELSE LEAVE BLANK.    *
*                   OTHER PARAMETERS WILL BE PICKED UP FROM THE DD    *
*                   CARD.                                             *
*        COL 18-22: STARTING RECORD NUMBER IN FILE. IF BLANK, DUMP    *
*                   WILL BEGIN WITH THE FIRST RECORD IN THE FILE.     *
*        COL 24-79: STARTING GROUP KEY FOR ISAM. ANY VALUE WITH NO    *
*                   IMBEDDED BLANKS. DEFAULT IS BEGINNING OF FILE.    *
* 5.  RECORD SELECTION CARD. THIS CARD IS OPTIONAL, SPECIFIES THE     *
*        CONDITIONS UNDER WHICH RECORDS ARE TO BE PRINTED. IF OMITTED,*
*        ALL RECORDS ARE PRINTED. THE FORMAT IS FIXED, AND UP TO 25   *
*        CARDS MAY BE ENTERED PER RUN. NOTE THAT WHEN MULTIPLE CARDS  *
*        ARE JOINED TO FORM ONE SELECTION GROUP BY THE USE OF THE     *
*        WORD 'AND' IN COLUMNS 75-77, THE IDENTIFIER AND NUMBER TO BE *
*        SELECTED ARE TAKEN FROM THE LAST CARD IN THE GROUP.          *
*        COL 1:     S                                                 *
*        COL 2-9:   IDENTIFIER TO BE PRINTED WHEN THIS RECORD TYPE IS *
*                   FOUND. MAY BE BLANK.                              *
*        COL 11-15: STARTING POSITION IN RECORD OF FIELD TO BE CHECKED*
*                   MUST BE NUMERIC WITH LEADING ZERO, AND GREATER    *
*                   THAN 00. THE FIRST BYTE OF THE RECORD IS SPECIFIED*
*                   AS 00001. DO NOT ADD 4 FOR VARIABLE RECORDS.      *
*        COL 17-18: LENGTH OF FIELD TO BE CHECKED. MUST BE NUMERIC    *
*                   01-16.                                            *
*        COL 20-22: COMPARISON, LEFT JUSTIFIED: EQ, NE, LT, GT, NGT,  *
*                   OR NLT. FOR A TEST UNDER MASK COMPARE, THE VALUES *
*                   O, NO, Z, NZ, OR M MAY BE USED. IN THIS CASE, THE *
*                   LENGTH MUST BE 01, AND THE COMPARISON VALUE MUST  *
*                   BE GIVEN IN HEX: ONE BYTE, WHICH IS TWO HEX DIGITS*
*                   EACH 0-9 OR A-F IN VALUE.                         *
*        COL 23:    BLANK FOR CHARACTER VALUE, X FOR HEXADECIMAL VALUE*
*                   WHEN X IS USED, THE VALUE GIVEN MUST BE IN HEX    *
*                   DIGITS WHOSE VALUES MAY BE 0-9 OR A-F. TWO DIGITS *
*                   REPRESENT ONE BYTE, AND AN EVEN NUMBER OF DIGITS  *
*                   MUST BE ENTERED.                                  *
*        COL 24-39: COMPARISON VALUE - ANY VALUE FOR THE LENGTH IN    *
*                   COLUMNS 17-18. BE SURE TO USE THE SAME DATA TYPE  *
*                   FOUNT IN THE RECORD . PACKED DECIMAL FIELDS MAY BE*
*                   ENTERED BY USE OF THE HEX FEATURE, OR BY MULTI-   *
*                   PUNCHING THE VALUE. SIGNS ARE NOT CHECKED.        *
*                   REMEMBER THAT HEXADECIMAL REQUIRES TWO DIGITS PER *
*                   BYTE, THEREFORE ONLY 8 BYTES OF HEX DATA MAY BE   *
*                   ENTERED.                                          *
*        COL 41-43: RELATIONSHIP, 1ST TO 2ND COMPARISON: 'AND' OR 'OR'*
*                   BLANK IF ONLY ONE FIELD IN CARD.                  *
*        COL 45-49: SAME AS COL 11-15, FOR 2ND FIELD                  *
*        COL 51-52: SAME AS COL 17-18, FOR 2ND FIELD.                 *
*        COL 54-56: SAME AS COL 20-22, FOR 2ND FIELD.                 *
*        COL 57:    SAME AS COL 23, FOR 2ND FIELD.                    *
*        COL 58-73: SAME AS COL 24-39, FOR 2ND FIELD.                 *
*        COL 75-77: IF NEXT CARD CONTINUES THE SELECTION DEFINITION   *
*                   FOR A SET OF RECORDS, CODE 'AND', ELSE LEAVE THIS *
*                   FIELD BLANK.                                      *
*        COL 78-80: NUMBER OF THESE RECORDS TO BE SELECTED.           *
* 6.  IF ANY CONTROL CARD ERRORS ARE FOUND, 'ERROR IN CONTROL CARD'   *
*        WILL BE PRINTED AT THE TOP OF THE FIRST PAGE, AND DEFAULTS   *
*        PER 4., ABOVE, ARE ASSUMED.                                  *
* 7.  THE PROC TO EXECUTE DUMPFIL IS:                                 *
*        //DUMPFIL EXEC PGM=DUMPFIL                                   *
*        //SYSUDUMP DD SYSOUT=A                                       *
*        //SYSPRINT DD SYSOUT=A                                       *
* 8.  EXAMPLES.                                                       *
*     A. DUMP A TAPE IN CHARACTER FORMAT, PRINT FIRST 100 RECORDS WITH*
*        NO LOCATOR BAR:                                              *
*        //DMS0650 EXEC DUMPFIL                                       *
*        //DUMPIN DD DSN=MEDICAID.DSM0650.CLAIMS,DISP=OLD,UNIT=TAPE,  *
*        // VOL=SER=002076                                            *
*        //SYSIN DD *                                                 *
*        *C N 00100                                                   *
*     B. DUMP AN ISAM FILE, PRINTING ONLY RECORDS HAVING 73 IN POS-   *
*        ITIONS 15-16, WHICH ARE IDENTIFIED AS '1973RECD', AND RECORDS*
*        WITH 72 IN POSITIONS 15-16, WHICH ARE IDENTIFIED BY          *
*        '1972RECD'. PROCESSING WILL BEGIN WITH THE FIRST RECORD ON   *
*        THE FILE. SELECTED RECORDS WILL BE PRINTED IN 3-LINE COMBINED*
*        CHARACTER AND HEX. NOTE THE * CONTROL CARD SPECIFIES AN ISAM *
*        FILE IS INPUT.                                               *
*        //DST0410 EXEC DUMPFIL                                       *
*        //DUMPIN DD DSN=GRPMAST,DISP=SHR,DCB=DSORG=IS                *
*        //SYSIN DD *                                                 *
*        *3         IS                                                *
*        S1972RECD 00015    EQ  72                                    *
*        S1973RECD 00015    EQ  73                                    *
*     C. DUMP A CATALOGUED TAPE FILE USING DEFAULT PRINT OPTIONS, AND *
*        PRINTING ONLY RECORDS HAVING A 2 IN POSITION 30, AND A VALUE *
*        LESS THAN 09 IN POSITIONS 3-4:                               *
*        //RSX0500 EXEC DUMPFIL                                       *
*        //DUMPIN DD DSN=SUBSCRIB.MASTAPE,DISP=OLD                    *
*        //SYSIN DD *                                                 *
*        S         00030 01 EQ  2                AND 00003 02 LT  09  *
*     D. DUMP AN ISAM INPUT FILE NAMED SUBSCRIB.CLAIM, SELECTING ALL  *
*        RECORDS HAVING AN 'A' IN POSITION 3, AND A 'B' IN POS 6.     *
*        CREATE A SEQUENTIAL OUTPUT FILE OF THE SELECTED RECORDS WHICH*
*        WILL BE CALLED TESTFILE.                                     *
*        //MLR0040 EXEC DUMPFIL                                       *
*        //DUMPIN DD DSN=SUBSCRIB.CLAIM,DISP=SHR                      *
*        //DUMPOUT DD DSN=TESTFILE,DISP=(NEW,CATLG,DELETE),UNIT=3330, *
*        // DCB=(RECFM=FB,LRECL=140,BLKSIZE=6440),SPACE=(CYL,(2,1))   *
*        //SYSIN DD *                                                 *
*        S         00003 01 EQ  A                AND 00006 01 EQ  C   *
*        SRECDNAME 00009 01 EQ  C                                     *
*     E. DUMP A SEQUENTIAL INPUT FILE CALLED SEQNTL.INPUT, SELECTING  *
*        UP TO 7 RECORDS HAVING 'ABC' IN POSITIONS 10-12, UP TO 99    *
*        RECORDS HAVING THE '80' BIT ON IN POSITION 96, AND ALL       *
*        RECORDS HAVING AN 'R' IN POSITION 18. AN ISAM OUTPUT FILE OF *
*        THE RECORDS SELECTED IS CREATED, CALLED TESTISAM. NOTE THAT  *
*        AN OVERALL MAXIMUM OF 1700 RECORDS WILL BE OUTPUT, AND AN ISAM
*        OUTPUT FILE IS SPECIFIED BY THE * CONTROL CARD.              *
*        //PLS0073 EXEC DUMPFIL                                       *
*        //DUMPIN DD DSN=SEQNTL.INPUT,DISP=SHR                        *
*        //DUMPOUT DD DSN=TESTISAM,DISP=(NEW,KEEP,KEEP),UNIT=SYSTS,   *
*        // DCB=(RECFM=FB,LRECL=80,BLKSIZE=6400,RKP=1,KEYLEN=6,       *
*        // CYLOFL=1,DSORG=IS),SPACE=(CYL,(30,,2),,CONTIG)            *
*        //SYSIN DD *                                                 *
*        *3 N 01700    IS                                             *
*        SPOS7ABC  00010 03 EQ  ABC                                   *
*                                         (POS 78-80):007             *
*        SBIT8ON   00096 01 O  X80                                    *
*                                         (POS 78-80):099             *
*        SR18      00018 01 EQ  R                                     *
* 9.  NOTES ON USE, AND COMMON ERRORS.                                *
*     A. INCORRECT OUTPUT: CHECK CONTROL CARD(S) FOR ERRORS. CHECK    *
*        FOR ERROR MESSAGE AT TOP OF FIRST PAGE OF OUTPUT. BE SURE    *
*        VS IS SPECIFIED FOR VARIABLE BLOCKED FILES, AND IS FOR ISAM  *
*        FILES ON THE * OPTION CARD.                                  *
*     B. THE RECORD COUNTER HAS ONLY 5 POSITIONS, SO RECORDS IN A     *
*        FILE CONTAINING OVER 99,999 RECORDS MAY NOT BE CORRECTLY     *
*        IDENTIFIED BY RECORD NUMBER. THAT IS, RECORD 1,023 MIGHT     *
*        REALLY BE 101,023, 201,023, 303,023, ETC.                    *
*     C. 0C1 ABENDS MAY OCCUR IF THE DUMPIN DD CARD IS MISSING OR IF  *
*        THE DDNAME IS MISSPELLED, OR IF AN ISAM DATASET IS INPUT,    *
*        BUT IS IS NOT SPECIFIED ON THE * OPTION CARD.                *
***********************************************************************
***********************************************************************
*
* AUTHOR R. THORNTON SEPT 1, 1971
*
*
*
*                        *** INITIALIZATION ***
         STM   R14,R12,12(R13)         SAVE CONTROL PGM REGISTERS
         LR    R3,R15                  INITIALIZE BASE
         LA    R4,4095(R3)             LOAD SECOND BASE
         LA    R4,1(R4)                ADD 1
         LA    R5,4095(R4)             LOAD SECOND BASE
         LA    R5,1(R5)                ADD 1
         ST    R13,SAVE+4              SAVE RETURN POINTER
         LA    R13,SAVE                INITIALIZE SAVE AREA POINTER
         OPEN  (SYSPRINT,OUTPUT)       OPEN PRINTER
         MVI   P,C' '                  BLANK TO CLEAR PRINT
         MVC   P+1(131),P              CLEAR PRINT LINE
*
*
*
*                        *** CONTROL CARD PROCESSING ***
         L     R1,16                   @ CVT
         L     R1,0(R1)                CVTTCBP
         L     R1,4(R1)                TCB NEW
         L     R1,12(R1)               @ TIOT
         LA    R1,24(R1)               TO 1ST TIOT DD ENTRY
TIOTCK   CLC   4(8,R1),=CL8'SYSIN'     SYSIN DD CARD FOUND
         BE    FSYSIN                  YES
         CLC   4(8,R1),=CL8'DUMPOUT'   FOUND DUMPOUT DD CARD
         BE    FDUMPOUT                YES
TIOTSTEP SR    R2,R2                   CLEAR WORK REG
         IC    R2,0(R1)                GET DD ENTRY LENGTH
         AR    R1,R2                   @ NEXT TIOT ENTRY
         LTR   R2,R2                   ANY MORE ENTRIES
         BNE   TIOTCK                  YES
NOSYSIN  B     CTLEND                  NOP IF SYSIN DD FOUND
         B     OPENIN                  IF SYSIN DD FOUND
FSYSIN   MVI   NOSYSIN+1,0             NOP SYSIN OPEN SW
         MVI   INDD+1,0                PERMIT SYSIN CLOSE
         B     TIOTSTEP                CONTINUE TIOT SCAN
FDUMPOUT MVI   OUTDD+1,0               PERMIT DUMPOUT CLOSE
         MVI   OPNOUT+1,0              PERMIT DUMPOUT OPEN
         MVI   OUTWRIT+1,0             PERMIT DUMPOUT WRITE
         B     TIOTSTEP                CONTINUE TIOT SCAN
OPENIN   OPEN  SYSIN                   OPEN CONTROL CARD FILE
NEXCD    GET   SYSIN                   READ CONTROL CARD
         LR    R6,R1                   GET CTL CARD ADDR
         MVC   P(80),0(R6)             CARD TO PRINT
         CLI   0(R6),C'S'              RECORD SELECTION CARD
         BE    SELECTS                 YES
         CLI   0(R6),C'*'              OPTION CHANGE CONTROL CARD
         BE    CC1                     YES
         MVC   P+82(17),=C'UNKNOWN TYPE COL1'
         B     PCTLCD                  GO PRINT OUT CARD
CC1      EQU   *                       *** OPTION CHANGE CONTROL CARD *
         USING CNTLCD,R6
         CLI   CTYP,C'M'               PRINT OPTION-2 LINE MIXED
         BE    CC2                     YES
         CLI   CTYP,C' '               TYPE FORMAT BLANK
         BE    CC2                     YES, DEFAULT
         CLI   CTYP,C'H'               PRINT OPTION- HEX ONLY
         BE    CCM1                    YES
         CLI   CTYP,C'3'               3-LINE CHAR/HEX OPTION
         BE    CCM1                    YES
         CLI   CTYP,C'C'               CHARACTER ONLY OPTION
         BE    CCM1                    YES
         MVC   P+82(7),=C'INV TYP'     MOVE ERROR LITERAL
         MVI   ERR,1                   SET ERROR FLAG
         B     CC2                     BRANCH AROUND MOVE
CCM1     MVC   PRTYP,CTYP              MOVE USER OPTION
CC2      CLI   CBAR,C' '               ANY LOCATOR BAR OPTION
         BE    CC02                    NO
         CLI   CBAR,C'Y'               LOCATOR BAR = YES
         BE    CC02                    YES
         CLI   CBAR,C'N'               LOCATOR BAR = NO
         BE    CCMV2                   YES
         MVC   P+90(7),=C'INV LOC'     MOVE ERROR LITERAL
         MVI   ERR,1                   SET ERROR FLAG
         B     CC02                    CONTINUE
CCMV2    MVI   NOBAR+1,C'0'            FORCE BRANCH AROUND LOC PRT
CC02     CLC   CFILTYP,BLANX           ANY FILE TYPE GIVEN
         BE    CC2A                    NO
         CLC   CFILTYP,=C'PS'          FILE TYPE IS PS
         BE    CC2A                    YES
         CLC   CFILTYP,=C'VS'          FILE TYPE IS VS
         BE    VBLSP                   YES
         CLC   CFILTYP,=C'IS'          FILE TYPE IS IS
         BNE   ERFT                    NO, INVALID
         MVC   ORG,=C'IS'              INDICATE INDEX-SEQ FILE
         B     CC2A                    CONTINUE
ERFT     MVC   P+98(8),=C'INV FILE'    MOVE ERROR LITERAL
         MVI   ERR,1                   SET ERROR FLAG
         B     CC2B                    CONTINUE
VBLSP    MVC   ORG,=C'VS'              INDICATE VARIABLE SPANNED
CC2A     CLC   COUTFIL,BLANX           OUTPUT FILE TYPE BLANK
         BE    CC2B                    YES
         CLC   COUTFIL,=C'IS'          IS IT ISAM
         BNE   ERFT                    NO, ERROR
         MVC   ORGOUT,COUTFIL          YES, SET OUTPUT FILE TYPE
CC2B     CLC   CMAX,BLANX              MAX RECDS BLANK
         BE    CC3                     YES
         MVZ   NTST,CMAX               ZONES FOR NUMERIC TEST
         CLC   NTST(5),ZEROS           MAX RECDS NUMERIC
         BE    CCM2                    YES
         MVC   P+107(7),=C'INV MAX'    MOVE ERROR LITERAL
         MVI   ERR,1                   SET ERROR FLAG
         B     CC3                     BRANCH AROUND MOVE
CCM2     PACK  TOTRCDS,CMAX            MOVE MAX RECORDS
CC3      CLC   CSTRT,BLANX             STARTING RECD BLANK
         BE    CC4                     YES
         MVZ   NTST,CSTRT              NO,MOVE ZONES
         CLC   NTST,ZEROS              STARTING RECD NUMERIC
         BE    CCM3                    YES
         CLI   NTST,C' '               NO, 1ST BYTE IS BLANK?
         BNE   MIVSM                   NO, ERROR
         CLC   NTST+1(5),ZEROS         LAST 5 ARE NUMERIC?
         BE    CCM3                    YES, ACCEPT START NBR
MIVSM    MVC   P+115(8),=C'INV STRT'   MOVE ERROR LITERAL
         MVI   ERR,1                   SET ERROR FLAG
         B     CC4                     BRANCH AROUND MOVE
CCM3     PACK  SKIP,CSTRT              MOVE STARTING RECORD NO
         SP    SKIP,=P'1'              LESS 1 = NBR TO SKIP
CC4      CLC   CSKY,BLANX              STARTING KEY BLANK
         BE    PCTLCD                  GO PRINT CARD
         LA    R12,STARTKY             GET KEY FIELD LHE ADDR
         LA    R11,CSKY                GET USER KEY LHE ADDR
         MVI   ENDCD,C' '              SET STOP CHARACTER
CCM4     MVC   0(1,R12),0(R11)         MOVE 1 CHARACTER
         LA    R12,1(R12)              ADD 1 TO KEY ADDR
         LA    R11,1(R11)              ADD 1 TO USER ADDR
         CLI   0(R11),C' '             NEXT POSITION BLANK
         BNE   CCM4                    NO, LOOP
         B     PCTLCD                  GO PRINT THE CARD
         DROP  R6
SELECTS  EQU   *                       PROCESS SELECTION CARDS
         USING LOGICD,R6
         MVI   SELSWCH+1,0             PERMIT SELECT COUNT
         LH    R12,NS                  GET NUMBER OF SELECTS
         CH    R12,=H'25'              TOO MANY
         BL    BEGLOG                  NO
         MVC   P+82(25),=C'TOO MANY, DROPPED'
         MVI   ERR,1                   SET ERROR FLAG
         B     PCTLCD                  GO PRINT
BEGLOG   MH    R12,CONLEN              NBR SELECTS X CONSTANT LEN
         LA    R12,ID1(R12)            @ ID CONSTANT
         MVC   0(8,R12),IDNT           MOVE RECORD ID
         CLC   SNBR,BLANX              SELECT NUMBER BLANK
         BE    CHEKST1                 YES
         MVZ   NTST(3),SNBR            ZONES FOR TEST
         CLC   NTST(3),ZEROS           IS IT NUMERIC
         BE    SETSNB                  YES
         MVC   P+82(17),=C'INVALID NBR RECDS'
         MVI   ERR,1                   SET ERROR FLAG
         B     CHEKST1                 CONTINUE
SETSNB   PACK  CT1-ID1(5,R12),SNBR     PACK NBR TO PRINT
CHEKST1  MVZ   NTST,ST1                ZONES FOR TEST
         CLC   NTST(5),ZEROS           START POS 1 NUMERIC
         BE    TLN1                    YES
INVST    MVC   P+82(13),=C'START POS ERR' MOVE LITERAL
         MVI   ERR,1                   SET ERROR FLAG
         B     PCTLCD                  GO PRINT
TLN1     PACK  CVT,ST1                 PACK START POS 1
         CVB   R12,CVT                 CONVERT TO BINARY
         BCTR  R12,R0                  SUBTRACT 1
         STH   R12,DISP1               STORE 1ST COMPARE DISPLACEMENT
         MVZ   NTST(2),LEN1            ZONES FOR TEST
         CLC   NTST(2),ZEROS           LST LENGTH NUMERIC
         BE    TCP1                    YES
INVLN    MVC   P+82(7),=C'LEN ERR'     MOVE LITERAL
         MVI   ERR,1                   SET ERROR FLAG
         B     PCTLCD                  GO PRINT
TCP1     CLC   LEN1,=C'16'             OVER 16
         BH    INVLN                   YES, ERROR
         PACK  CVT,LEN1                PACK 1ST LENGTH
         CVB   R12,CVT                 CONVERT TO BINARY
         BCTR  R12,R0                  SUBTRACT 1
         STC   R12,CLN1                STORE 1ST LENGTH CODE
         LH    R12,NS                  GET NUMBER SELECTS
         MH    R12,CONLEN              TIMES ENTRY LENGTH
         LA    R12,A1(R12)             @ LITERALS
         SR    R1,R1                   CLEAR WORK REG
         IC    R1,CLN1                 GET LENGTH CODE
         LA    R1,1(R1)                GET LENGTH
         LA    R2,VAL1                 @ COMPARISON LITERAL
         BAL   R9,AXCONV               GO CONVERT LISTRAL
         LTR   R1,R1                   ANY ERROR
         BZ    SAVLIT1                 NO
INVVAL   MVC   P+82(11),=C'BAD VALUE 1'
         MVI   ERR,1                   SET ERROR FLAG
         B     PCTLCD                  GO PRINT
SAVLIT1  MVC   0(16,R12),VAL1          SAVE LITERAL FOR COMPARE
         LA    R1,CPR1                 @ BRANCH CODE
         BAL   R9,BRTBLSCH             GO GET BRANCH INSTR MASK
         LTR   R1,R1                   ANY ERROR
         BZ    SAVMASK1                NO
INVCPR   MVC   P+82(16),=C'BAD COMPARE CODE'
         MVI   ERR,1                   SET ERROR FLAG
         B     PCTLCD                  GO PRINT
SAVMASK1 MVC   COD1,BRMASK             SAVE BRANCH MASK
         CLC   REL,BLANX               SECOND COMPARISON GIVEN
         BNE   CKSCSL                  YES
         LH    R12,NS                  NO, GET NUMBER SELECTS
         MH    R12,LOGICLEN            MULTIPLY BY LOGIC SIZE
         LA    R12,TYPE1(R12)          GET ADDRESS OF SELECT LOGIC
         USING LGICDSCT,R12
BCD1     MVC   LOGBR2+1(1),COD1        MOVE 1ST BRANCH CODE
         CLI   TMOP,X'91'              TM INSTRUCTION
         BNE   SETC1                   NO
         MVI   LOGCPR1,X'91'           SET OP CODE
         MVC   LOGCPR1+4(2),=X'0700'   NOP FOLLOWS TM
         MVC   LOGCPR1+1(1),VAL1       VALUE TO TM INSTR
         B     TSTR2SW                 CONTINUE
SETC1    MVC   LOGCPR1+1(1),CLN1       MOVE 1ST COMPARE LENGTH
TSTR2SW  OC    LOGCPR1+2(2),DISP1      SET 1ST COMP A FLD DISPL
         CLI   REL2SW,0                LAST SELECT HAD AND, COL 75
         BE    NOPLEAD                 NO
         MVI   REL2SW,0                RESET 2ND AND SWITCH
         MVC   LOGBR1+2(2),LOGBR3+2    LEAD BRANCH TO NEXT GROUP
         SH    R12,LOGICLEN            BACK UP TO PRECEDING GROUP
         XI    LOGBR4+1,C'0'           RE-INVERT 2ND BRCH CODE
         LH    R1,LOGBR3+2             NEXT GRP BRCH ADDR
         LA    R1,4(R1)                ADD 4 TO PASS LEAD BRCH
         STH   R1,LOGBR4+2             STORE AS 2ND BRCH ADDR
         LA    R12,L'LOGIC(R12)        BACK TO CURRENT LOGIC
         B     CK2NDREL                CONTINUE
NOPLEAD  MVI   LOGBR1+1,0              NOP 1ST BRANCH
CK2NDREL CLC   REL2,BLANX              SECOND REL BLANK
         BE    GNS                     YES
         CLC   REL,BLANX               FIRST REL BLANK
         BE    BADREL                  YES, ERROR
         CLC   REL2,=C'AND'            2ND REL IS AND
         BNE   BADREL                  NO, ERROR
         CLC   NS,=H'23'               ANOTHER CONDITION AREA AVAIL
         BH    BADREL                  NO, ERROR
         MVC   LOGACC(14),=7X'0700'    NOPS TO ID MOVE AND BRANCH
         DROP  R12
         MVI   REL2SW,1                SET 2ND AND SWITCH
GNS      LH    R12,NS                  GET NUMBER SELECTS
         LA    R12,1(R12)              ADD 1
         STH   R12,NS                  STORE INCREMENTED COUNT
         B     PCTLCD                  GO PRINT
CKSCSL   CLC   REL,=C'AND'             RELATION TO SECOND IS AND
         BE    CKST2                   YES
         CLC   REL,=C'OR '             RELATIONSHIP IS OR
         BE    CKST2                   YES
BADREL   MVC   P+82(11),=C'INVALID REL'
         MVI   ERR,1                   SET ERROR FLAG
         B     PCTLCD                  GO PRINT
CKST2    MVZ   NTST(5),ST2             ZONES FOR TEST
         CLC   NTST(5),ZEROS           2ND START POSITION NUMERIC
         BNE   INVST                   NO, ERROR
         PACK  CVT,ST2                 PACK SECOND START POSITION
         CVB   R12,CVT                 CONVERT TO BINARY
         BCTR  R12,R0                  SUBTRACT 1
         STH   R12,DISP2               STORE 2ND COMPARE DISPL
         MVZ   NTST(2),LEN2            ZONES FOR TEST
         CLC   NTST(2),ZEROS           2ND LEN NUMERIC
         BNE   INVLN                   NO, ERROR
         CLC   LEN2,=C'16'             OVER 16
         BH    INVLN                   YES, ERROR
         PACK  CVT,LEN2                PACK 2ND LENGTH
         CVB   R12,CVT                 CONVERT TO BINARY
         BCTR  R12,R0                  SUBTRACT 1
         STC   R12,CLN2                STORE SECOND LEN CODE
         LH    R12,NS                  GET NBR SELECTS
         MH    R12,CONLEN              TIMES ENTRY LENGTH
         LA    R12,A2(R12)             @ LITERAL
         SR    R1,R1                   CLEAR WORK REG
         IC    R1,CLN2                 GET LENGTH CODE
         LA    R1,1(R1)                GET LENGTH
         LA    R2,VAL2                 @ LITERAL
         BAL   R9,AXCONV               GO CONVERT LITERAL
         LTR   R1,R1                   ANY ERROR
         BNZ   INVVAL                  YES
         MVC   0(16,R12),VAL2          MOVE COMPARISON VALUE
         LA    R1,CPR2                 @ COMPARE CODE
         BAL   R9,BRTBLSCH             GO FIND BRANCH MASK
         LTR   R1,R1                   ANY ERROR
         BNZ   INVCPR                  YES
         MVC   COD2,BRMASK             SAVE BRANCH MASK
         XI    COD2,C'0'               INVERT THE CODE
         LH    R12,NS                  GET NUMBER SELECTS
         MH    R12,LOGICLEN            MULTIPLY BY 38
         LA    R12,TYPE1(R12)          GET LOGIC ADDRESS
         USING LGICDSCT,R12
         MVC   LOGBR4+1(1),COD2        MOVE SECOND BRANCH CODE
         CLI   TMOP,X'91'              TM INSTRUCTION
         BNE   SETC2                   NO
         MVI   LOGCPR2,X'91'           SET TM OP CODE
         MVC   LOGCPR2+4(2),=X'0700'   NOP FOLLOWS TM
         MVC   LOGCPR2+1(1),VAL2       TEST VALUE TO TM INSTR
         B     TSTRLND                 CONTINUE
SETC2    MVC   LOGCPR2+1(1),CLN2       MOVE 2ND COMPARE LENGTH
TSTRLND  OC    LOGCPR2+2(2),DISP2      SET 1ST COMP A FLD DISPL
         CLC   REL,=C'AND'             RELATIONSHIP IS AND
         BE    SLAND                   YES
         MVI   LOGBR3+1,0              NO, MID BRANCH IS NOP
         B     BCD1                    GO FINISH LOGIC
SLAND    XI    COD1,C'0'               INVERT 1ST BRANCH CODE
         MVC   LOGBR3+1(1),COD1        MOVE 1ST BRANCH CODE
         MVI   LOGBR2+1,0              MID BRANCH TO NOP
         DROP  R12
         B     SETC1                   GO FINISH CODE
PCTLCD   BAL   R9,PRINT                PRINT CONTROL CARD AND MSGS
         B     NEXCD                   GO GET NEXT CARD
         DROP  R6
CTLEND   MVI   CC,C'0'                 DOUBLE SPACE PRINT
         CLI   ERR,0                   ANY CONTROL RECORD ERRORS
         BE    CKMAXXC                 NO
         MVC   P(41),=C'***** ERRORS FOUND ON CONTROL CARDS *****'
         BAL   R9,PRINT                PRINT ERROR MESSAGE
CKMAXXC  CP    TOTRCDS,FREERECS        TOO MANY RECORDS REQUESTED
         BNH   CKTYPFIL                NO
         L     R1,16                   @ CVT
         L     R1,0(R1)                CVTTCBP
         L     R1,4(R1)                TCB NEW
         L     R1,12(R1)               @ TIOT
         MVC   MSGJOB,0(R1)            JOB NAME TO MESSAGE
         UNPK  MSGRECS,TOTRCDS         NBR REQUESTED TO MESSAGE
         OI    MSGRECS+4,C'0'          CLEAR SIGN
         LA    R1,MSGCB                @ WTOR AREA
         SVC   35                      ISSUE WTOR SVC
         WAIT  ECB=WTORECB             AWAIT OPERATOR REPLY
         CLC   REPLY,=C'GO'            O.K. TO PRINT
         BE    CKTYPFIL                YES
         ZAP   TOTRCDS,FREERECS        NO, DEFAULT
         MVC   P(35),=C'*** OPERATOR PERMISSION REFUSED ***'
         BAL   R9,PRINT                PRINT MESSAGE
CKTYPFIL CLC   ORG,=C'IS'              INDEX-SEQ FILE
         BE    OPENIS                  YES
         CLC   ORG,=C'VS'              VRBL SPANNED RECDS
         BE    OPENVS                  YES
         OPEN  DUMPIN                  OPEN FILE TO BE DUMPED
         B     OPNOUT                  GO OPEN OUTPUT FILE
OPENIS   OPEN  (DUMPIS)                OPEN INDEX-SEQ FILE
         SETL  DUMPIS,KH,STARTKY       SET FILE TO BEGINNING KEY
         B     OPNOUT                  GO OPEN OUTPUT FILE
OPENVS   OPEN  DUMPVS                  OPEN VRBL SPANNED FILE
OPNOUT   B     RDJFCB                  NOP IF DUMPOUT DD CARD FOUND
         CLC   ORGOUT,=C'IS'           IS IT ISAM
         BE    OPNISOUT                YES
         OPEN  (OUTPS,OUTPUT)          OPEN SEQUENTIAL FILE
         B     RDJFCB                  CONTINUE
OPNISOUT OPEN  (OUTIS,OUTPUT)          OPEN ISAM OUTPUT
*
*
*
RDJFCB   EQU   *                       *** JOB FILE CONTROL BLOCK PROCE
         RDJFCB DUMPIN                 READ JFCB FOR INPUT FILE
HDFMT    MVC   HDSN,DSNAME             DSNAME TO HEADING
         MVC   HGEN,GENNO              GENERATION DATA TO HEADING
         MVC   CVT(2),BLOCKSIZ         MOVE TO ALIGN
         LH    R1,CVT                  GET IN REG
         CVD   R1,CVT                  CONVERT TO PACKED
         UNPK  HBKSZ,CVT               EDIT BLOCKSIZE TO HEADING
         OI    HBKSZ+4,C'0'            CLEAR SIGN
         MVC   CVT(2),LOGREC           MOVE TO ALIGN
         LH    R1,CVT                  GET IN REG
         CVD   R1,CVT                  CONVERT TO PACKED
         UNPK  HLRECL,CVT              EDIT LOGICAL RECD LEN TO HEADING
         OI    HLRECL+4,C'0'           CLEAR SIGN
         TM    DSORGN,X'40'            IS IT PS ORGANIZATION
         BO    SETRF                   YES
         MVC   HORG,=C'IS'             INDICATE INDEXED-SEQ
         TM    DSORGN,X'80'            IS IT INDEX-SEQ
         BO    SETRF                   YES
         MVC   HORG,=C'DA'             INDICATE DIRECT
         TM    DSORGN,X'20'            IS IT DIRECT
         BO    SETRF                   YES
         MVC   HORG,=C'PO'             INDICATE PARTITIONED
         TM    DSORGN,X'02'            IS IT PARTITIONED
         BO    SETRF                   YES
         MVC   HORG,=C'**'             UNKNOWN DSORG
SETRF    TM    RECDFM,X'C0'            IS IT UNDEFINED RECORDS
         BO    SETBK                   YES
         MVI   HRCFM,C'V'              INDICATE VARIABLE RECDS
         TM    RECDFM,X'40'            IS IT VARIABLE
         BO    SETBK                   YES
         MVI   HRCFM,C'F'              INDICATE FIXED RECORDS
SETBK    TM    RECDFM,X'10'            BLOCKED RECORDS
         BO    CKSPN                   YES
         MVI   HRCFM+1,C' '            NO, INDICATE UNBLOCKED
CKSPN    TM    RECDFM,X'48'            SPANNED RECORDS
         BO    GKY                     YES
         MVI   HRCFM+2,C' '            NOT SPANNED
GKY      MVC   KEYLEN+1(1),KEYLENG     MOVE KEY LENGTH BYTE
         MVI   KEYLEN,0                HI-ORDER BYTE TO ZERO
         LH    R1,KEYLEN               GET IN REG
         CVD   R1,CVT                  CONVERT TO PACKED
         UNPK  HKYLN,CVT               KEYLEN TO HEADING
         OI    HKYLN+2,C'0'            CLEAR SIGN
         MVC   VOLSRL,VOLSERS          VOL SER NOS TO HEADING
         BAL   R9,HEADING              PRINT HEADING
         MVI   HEAD,C'1'               SKIP TO CH1 FOR HEADINGS
         MVI   CC,C'0'                 NEXT LINE DOUBLE SPACE
*
*
MAINLINE EQU   *                       MAINLINE ROUTINE ***
         CLC   ORG,=C'IS'              INDEX-SEQ FILE
         BE    ISREAD                  YES
         CLC   ORG,=C'VS'              VRBL SPANNED FILE
         BE    VSREAD                  YES
         GET   DUMPIN                  READ A RECORD
         MVC   RECLEN,DUMPIN+82        MOVE RECORD LENGTH
SAVRAD   ST    R1,RECADDR              SAVE RECORD ADDRESS
         ST    R1,OUTADDR              SAVE RECD ADDR
         CLI   HRCFM,C'V'              VARIABLE RECORDS
         BNE   MAXTST                  NO
BYPRDW   LH    R2,0(R1)                PICK UP RECORD LENGTH
         SH    R2,=H'4'                DEDUCT RDW LENGTH
         STH   R2,RECLEN               SAVE DECREMENTED LENGTH
         LA    R1,4(R1)                ADD 4 TO SKIP RDW
         ST    R1,RECADDR              STORE UPDATED REC ADDR
         B     MAXTST                  GO CHECK NUMBER READ
ISREAD   GET   DUMPIS                  READ INDEX-SEQ RECORD, RECORD AD
*                                      IN REG1, KEY ADDR IN REG0
         MVC   RECLEN,DUMPIS+82        MOVE RECORD LENGTH
         B     SAVRAD                  GO CHECK FOR VARIABLE
VSREAD   GET   DUMPVS                  READ VRBL SPANNED RECD
         B     BYPRDW                  GO BYPASS RDW
MAXTST   L     R6,RECADDR              GET RECORD ADDR FOR SELECT LOGIC
         AP    NRECDS,=P'1'            ADD 1 TO RECORDS READ
         ZAP   SKIP,SKIP               ANY RECORDS TO BE SKIPPED
         BZ    TYPE1                   NO
         SP    SKIP,=P'1'              1 LESS TO SKIP
         B     MAINLINE                GO READ AGAIN
TYPE1    B     ACCEPT                  NOP IF ANY SELECT
         CLC   0(1,R6),A1              LENG & A DISPL MODIFIED
         B     ACC1                    NOP FOR AND, ELSE CODE
         B     TYPE2                   INV CODE FOR AND, NOP FOR
*                                      OR, O.K. FOR SINGLE
         CLC   0(1,R6),A2              LENG & A DISPL MODIFIED
         B     TYPE2                   INVERTED CODE
ACC1     MVC   PID,ID1                 MOVE RECORD ID
         LA    R12,CT1                 @ COUNTER
         B     ACCEPT                  GO PRINT OUT
TYPE2    B     MAINLINE                NOP IF 2 SELECTS
         CLC   0(1,R6),B1              LENG & A DISPL MODIFIED
         B     ACC2                    NOP FOR AND, ELSE CODE
         B     TYPE3                   INV CODE FOR AND, NOP FOR
*                                      OR, O.K. FOR SINGLE
         CLC   0(1,R6),B2              LENG & A DISPL MODIFIED
         B     TYPE3                   INVERTED CODE
ACC2     MVC   PID,ID2                 MOVE RECORD ID
         LA    R12,CT2                 @ COUNTER
         B     ACCEPT                  GO PRINT OUT
TYPE3    B     MAINLINE                NOP IF 3 SELECTS
         CLC   0(1,R6),C1              LENG & A DISPL MODIFIED
         B     ACC3                    NOP FOR AND, ELSE CODE
         B     TYPE4                   INV CODE FOR AND, NOP FOR
*                                      OR, O.K. FOR SINGLE
         CLC   0(1,R6),C2              LENG & A DISPL MODIFIED
         B     TYPE4                   INVERTED CODE
ACC3     MVC   PID,ID3                 MOVE RECORD ID
         LA    R12,CT3                 @ COUNTER
         B     ACCEPT                  GO PRINT OUT
TYPE4    B     MAINLINE                NOP IF 4 SELECTS
         CLC   0(1,R6),D1              LENG & A DISPL MODIFIED
         B     ACC4                    NOP FOR AND, ELSE CODE
         B     TYPE5                   INV CODE FOR AND, ELSE CODE
*                                      OR, O.K. FOR SINGLE
         CLC   0(1,R6),D2              LENG & A DISPL MODIFIED
         B     TYPE5                   INVERTED CODE
ACC4     MVC   PID,ID4                 MOVE RECORD ID
         LA    R12,CT4                 @ COUNTER
         B     ACCEPT                  GO PRINT OUT
TYPE5    B     MAINLINE                NOP IF 5 SELECTS
         CLC   0(1,R6),E1              LENG & A DISPL MODIFIED
         B     ACC5                    NOP FOR AND, ELSE CODE
         B     TYPE6                   INV CODE FOR AND, NOP FOR
*                                      OR, O.K. FOR SINGLE
         CLC   0(1,R6),E2              LENG & A DISPL MODIFIED
         B     TYPE6                   INVERTED CODE
ACC5     MVC   PID,ID5                 MOVE RECORD ID
         LA    R12,CT5                 @ COUNTER
         B     ACCEPT                  GO PRINT OUT
TYPE6    B     MAINLINE                NOP IF SIX SELECTS
         CLC   0(1,R6),F1              LENG & A DISPL MODIFIED
         B     ACC6                    NOP FOR AND, ELSE CODE
         B     TYPE7                   INV CODE FOR AND, NOP FOR
*                                      OR, O.K. FOR SINGLE
         CLC   0(1,R6),F2              LENG & A DISPL MODIFIED
         B     TYPE7                   INVERTED CODE
ACC6     MVC   PID,ID6                 MOVE RECORD ID
         LA    R12,CT6                 @ COUNTER
         B     ACCEPT                  GO PRINT OUT
TYPE7    B     MAINLINE                NOP IF 2 SELECTS
         CLC   0(1,R6),G1              LENG & A DISPL MODIFIED
         B     ACC7                    NOP FOR AND, ELSE CODE
         B     TYPE8                   INV CODE FOR AND, NOP FOR
*                                      OR, O.K. FOR SINGLE
         CLC   0(1,R6),G2              LENG & A DISPL MODIFIED
         B     TYPE8                   INVERTED CODE
ACC7     MVC   PID,ID7                 MOVE RECORD ID
         LA    R12,CT7                 @ COUNTER
         B     ACCEPT                  GO PRINT OUT
TYPE8    B     MAINLINE                NOP IF 3 SELECTS
         CLC   0(1,R6),H1              LENG & A DISPL MODIFIED
         B     ACC8                    NOP FOR AND, ELSE CODE
         B     TYPE9                   INV CODE FOR AND, NOP FOR
*                                      OR, O.K. FOR SINGLE
         CLC   0(1,R6),H2              LENG & A DISPL MODIFIED
         B     TYPE9                   INVERTED CODE
ACC8     MVC   PID,ID8                 MOVE RECORD ID
         LA    R12,CT8                 @ COUNTER
         B     ACCEPT                  GO PRINT OUT
TYPE9    B     MAINLINE                NOP IF 4 SELECTS
         CLC   0(1,R6),I1              LENG & A DISPL MODIFIED
         B     ACC9                    NOP FOR AND, ELSE CODE
         B     TYPE10                  INV CODE FOR AND, ELSE CODE
*                                      OR, O.K. FOR SINGLE
         CLC   0(1,R6),I2              LENG & A DISPL MODIFIED
         B     TYPE10                  INVERTED CODE
ACC9     MVC   PID,ID9                 MOVE RECORD ID
         LA    R12,CT9                 @ COUNTER
         B     ACCEPT                  GO PRINT OUT
TYPE10   B     MAINLINE                NOP IF 5 SELECTS
         CLC   0(1,R6),J1              LENG & A DISPL MODIFIED
         B     ACC10                   NOP FOR AND, ELSE CODE
         B     TYPE11                  INV CODE FOR AND, NOP FOR
*                                      OR, O.K. FOR SINGLE
         CLC   0(1,R6),J2              LENG & A DISPL MODIFIED
         B     TYPE11                  INVERTED CODE
ACC10    MVC   PID,ID10                MOVE RECORD ID
         LA    R12,CT10                @ COUNTER
         B     ACCEPT                  GO PRINT OUT
TYPE11   B     MAINLINE                NOP IF ANY SELECT
         CLC   0(1,R6),K1              LENG & A DISPL MODIFIED
         B     ACC11                   NOP FOR AND, ELSE CODE
         B     TYPE12                  INV CODE FOR AND, NOP FOR
*                                      OR, O.K. FOR SINGLE
         CLC   0(1,R6),K2              LENG & A DISPL MODIFIED
         B     TYPE12                  INVERTED CODE
ACC11    MVC   PID,ID11                MOVE RECORD ID
         LA    R12,CT11                @ COUNTER
         B     ACCEPT                  GO PRINT OUT
TYPE12   B     MAINLINE                NOP IF 2 SELECTS
         CLC   0(1,R6),L1              LENG & A DISPL MODIFIED
         B     ACC12                   NOP FOR AND, ELSE CODE
         B     TYPE13                  INV CODE FOR AND, NOP FOR
*                                      OR, O.K. FOR SINGLE
         CLC   0(1,R6),L2              LENG & A DISPL MODIFIED
         B     TYPE13                  INVERTED CODE
ACC12    MVC   PID,ID12                MOVE RECORD ID
         LA    R12,CT12                @ COUNTER
         B     ACCEPT                  GO PRINT OUT
TYPE13   B     MAINLINE                NOP IF 3 SELECTS
         CLC   0(1,R6),M1              LENG & A DISPL MODIFIED
         B     ACC13                   NOP FOR AND, ELSE CODE
         B     TYPE14                  INV CODE FOR AND, NOP FOR
*                                      OR, O.K. FOR SINGLE
         CLC   0(1,R6),M2              LENG & A DISPL MODIFIED
         B     TYPE14                  INVERTED CODE
ACC13    MVC   PID,ID13                MOVE RECORD ID
         LA    R12,CT13                @ COUNTER
         B     ACCEPT                  GO PRINT OUT
TYPE14   B     MAINLINE                NOP IF 4 SELECTS
         CLC   0(1,R6),N1              LENG & A DISPL MODIFIED
         B     ACC14                   NOP FOR AND, ELSE CODE
         B     TYPE15                  INV CODE FOR AND, ELSE CODE
*                                      OR, O.K. FOR SINGLE
         CLC   0(1,R6),N2              LENG & A DISPL MODIFIED
         B     TYPE15                  INVERTED CODE
ACC14    MVC   PID,ID14                MOVE RECORD ID
         LA    R12,CT14                @ COUNTER
         B     ACCEPT                  GO PRINT OUT
TYPE15   B     MAINLINE                NOP IF 5 SELECTS
         CLC   0(1,R6),O1              LENG & A DISPL MODIFIED
         B     ACC15                   NOP FOR AND, ELSE CODE
         B     TYPE16                  INV CODE FOR AND, NOP FOR
*                                      OR, O.K. FOR SINGLE
         CLC   0(1,R6),O2              LENG & A DISPL MODIFIED
         B     TYPE16                  INVERTED CODE
ACC15    MVC   PID,ID15                MOVE RECORD ID
         LA    R12,CT15                @ COUNTER
         B     ACCEPT                  GO PRINT OUT
TYPE16   B     MAINLINE                NOP IF SIX SELECTS
         CLC   0(1,R6),PV1             LENG & A DISPL MODIFIED
         B     ACC16                   NOP FOR AND, ELSE CODE
         B     TYPE17                  INV CODE FOR AND, NOP FOR
*                                      OR, O.K. FOR SINGLE
         CLC   0(1,R6),PV2             LENG & A DISPL MODIFIED
         B     TYPE17                  INVERTED CODE
ACC16    MVC   PID,ID16                MOVE RECORD ID
         LA    R12,CT16                @ COUNTER
         B     ACCEPT                  GO PRINT OUT
TYPE17   B     MAINLINE                NOP IF 2 SELECTS
         CLC   0(1,R6),Q1              LENG & A DISPL MODIFIED
         B     ACC17                   NOP FOR AND, ELSE CODE
         B     TYPE18                  INV CODE FOR AND, NOP FOR
*                                      OR, O.K. FOR SINGLE
         CLC   0(1,R6),Q2              LENG & A DISPL MODIFIED
         B     TYPE18                  INVERTED CODE
ACC17    MVC   PID,ID17                MOVE RECORD ID
         LA    R12,CT17                @ COUNTER
         B     ACCEPT                  GO PRINT OUT
TYPE18   B     MAINLINE                NOP IF 3 SELECTS
         CLC   0(1,R6),RV1             LENG & A DISPL MODIFIED
         B     ACC18                   NOP FOR AND, ELSE CODE
         B     TYPE19                  INV CODE FOR AND, NOP FOR
*                                      OR, O.K. FOR SINGLE
         CLC   0(1,R6),RV2             LENG & A DISPL MODIFIED
         B     TYPE19                  INVERTED CODE
ACC18    MVC   PID,ID18                MOVE RECORD ID
         LA    R12,CT18                @ COUNTER
         B     ACCEPT                  GO PRINT OUT
TYPE19   B     MAINLINE                NOP IF 4 SELECTS
         CLC   0(1,R6),S1              LENG & A DISPL MODIFIED
         B     ACC19                   NOP FOR AND, ELSE CODE
         B     TYPE20                  INV CODE FOR AND, ELSE CODE
*                                      OR, O.K. FOR SINGLE
         CLC   0(1,R6),S2              LENG & A DISPL MODIFIED
         B     TYPE20                  INVERTED CODE
ACC19    MVC   PID,ID19                MOVE RECORD ID
         LA    R12,CT19                @ COUNTER
         B     ACCEPT                  GO PRINT OUT
TYPE20   B     MAINLINE                NOP IF 5 SELECTS
         CLC   0(1,R6),T1              LENG & A DISPL MODIFIED
         B     ACC20                   NOP FOR AND, ELSE CODE
         B     TYPE21                  INV CODE FOR AND, NOP FOR
*                                      OR, O.K. FOR SINGLE
         CLC   0(1,R6),T2              LENG & A DISPL MODIFIED
         B     TYPE21                  INVERTED CODE
ACC20    MVC   PID,ID20                MOVE RECORD ID
         LA    R12,CT20                @ COUNTER
         B     ACCEPT                  GO PRINT OUT
TYPE21   B     MAINLINE                NOP IF ANY SELECT
         CLC   0(1,R6),U1              LENG & A DISPL MODIFIED
         B     ACC21                   NOP FOR AND, ELSE CODE
         B     TYPE22                  INV CODE FOR AND, NOP FOR
*                                      OR, O.K. FOR SINGLE
         CLC   0(1,R6),U2              LENG & A DISPL MODIFIED
         B     TYPE22                  INVERTED CODE
ACC21    MVC   PID,ID21                MOVE RECORD ID
         LA    R12,CT21                @ COUNTER
         B     ACCEPT                  GO PRINT OUT
TYPE22   B     MAINLINE                NOP IF 2 SELECTS
         CLC   0(1,R6),V1              LENG & A DISPL MODIFIED
         B     ACC22                   NOP FOR AND, ELSE CODE
         B     TYPE23                  INV CODE FOR AND, NOP FOR
*                                      OR, O.K. FOR SINGLE
         CLC   0(1,R6),V2              LENG & A DISPL MODIFIED
         B     TYPE23                  INVERTED CODE
ACC22    MVC   PID,ID22                MOVE RECORD ID
         LA    R12,CT22                @ COUNTER
         B     ACCEPT                  GO PRINT OUT
TYPE23   B     MAINLINE                NOP IF 3 SELECTS
         CLC   0(1,R6),W1              LENG & A DISPL MODIFIED
         B     ACC23                   NOP FOR AND, ELSE CODE
         B     TYPE24                  INV CODE FOR AND, NOP FOR
*                                      OR, O.K. FOR SINGLE
         CLC   0(1,R6),W2              LENG & A DISPL MODIFIED
         B     TYPE24                  INVERTED CODE
ACC23    MVC   PID,ID23                MOVE RECORD ID
         LA    R12,CT23                @ COUNTER
         B     ACCEPT                  GO PRINT OUT
TYPE24   B     MAINLINE                NOP IF 4 SELECTS
         CLC   0(1,R6),X1              LENG & A DISPL MODIFIED
         B     ACC24                   NOP FOR AND, ELSE CODE
         B     TYPE25                  INV CODE FOR AND, ELSE CODE
*                                      OR, O.K. FOR SINGLE
         CLC   0(1,R6),X2              LENG & A DISPL MODIFIED
         B     TYPE25                  INVERTED CODE
ACC24    MVC   PID,ID24                MOVE RECORD ID
         LA    R12,CT24                @ COUNTER
         B     ACCEPT                  GO PRINT OUT
TYPE25   B     MAINLINE                NOP IF 5 SELECTS
         CLC   0(1,R6),Y1              LENG & A DISPL MODIFIED
         B     ACC25                   NOP FOR AND, ELSE CODE
         B     MAINLINE                INV CODE FOR AND, NOP FOR
*                                      OR, O.K. FOR SINGLE
         CLC   0(1,R6),Y2              LENG & A DISPL MODIFIED
         B     MAINLINE                INVERTED CODE
ACC25    MVC   PID,ID25                MOVE RECORD ID
         LA    R12,CT25                @ COUNTER
ACCEPT   ZAP   STARTPOS,=P'1'          SET PRINT START POS TO 1
SELSWCH  B     DECPRT                  NOP IF ANY SELECT CARDS
         SP    0(5,R12),=P'1'          SELECT COUNT - 1
         BM    MAINLINE                NONE LEFT, DON'T PRINT
DECPRT   SP    TOTRCDS,=P'1'           SUBTR 1 FROM RECDS PRINTED
         BM    EOJHI                   EXCEEDED REQUESTED NBR RECDS
         UNPK  PRECNO,NRECDS           RECORD NBR TO PRINT
         OI    PRECNO+5,C'0'           CLEAR SIGN
         LA    R15,PRECNO              POINT TO RECD NBR
         LA    R14,5                   MAX NBR BYTES
CKLDZRO  CLI   0(R15),C'0'             LEADING ZERO?
         BNE   SBTP                    NO
         MVI   0(R15),C' '             YES, BLANK IT
         LA    R15,1(R15)              STEP TO NEXT BYTE
         BCT   R15,CKLDZRO             LOOP
SBTP     MVC   PRTLEN,RECLEN           SET NUMBER BYTES TO PRINT
         MVC   REMLEN,RECLEN           SET NUMBER REMAINING BYTES
         LH    R1,RECLEN               GET RECORD LENGTH
         CVD   R1,CVT                  CONVERT TO PACKED
         UNPK  PLEN,CVT+5(3)           UNPACK INTO PRINT LINE
         OI    PLEN+4,C'0'             CLEAR SIGN POSITION
RECLUP   LH    R9,REMLEN               GET REMAINING LENGTH
         LTR   R9,R9                   ANY REMAINS TO PRINT
         BZ    OUTWRIT                 NO, EXIT
         UNPK  PSTRT,STARTPOS          MOVE STARTING POS TO PRINT
         OI    PSTRT+3,C'0'            CLEAR SIGN
         CH    R9,HUNDRED              OVER 100 BYTES REMAIN
         BL    CVTLST                  NO
         SH    R9,HUNDRED              YES, SUBTRACT 100
         STH   R9,REMLEN               STORE NUMBER REMAINING
         LH    R9,NINETY9              SET LENGTH CODE TO 99
         B     STLEN                   GO STORE LEN CODE
CVTLST   MVC   REMLEN,XZROS            LESS THAN 100, CLEAR REM BYTES
         BCTR  R9,R0                   SUBTRACT 1 = LENGTH CODE
STLEN    STH   R9,PRTLEN               STORE PRINT LEN CODE
PRTND    CVD   R9,CVT                  CONVERT LENGTH CODE
         AP    STARTPOS,CVT            ADD TO START POS
         UNPK  PEND,STARTPOS           END POSITION TO PRINT
         OI    PEND+3,C'0'             CLEAR SIGN
         MVI   HYPH,C'-'               HYPHEN TO PRINT
         AP    STARTPOS,=P'1'          ADD 1 = NEXT START POS
         MVC   PMOV+1(1),PRTLEN+1      LENGTH TO MOVE INSTR
         L     R9,RECADDR              GET RECORD ADDR
PMOV     MVC   PDATA,0(R9)             MOVE RECORD TO PRINT LINE
         AH    R9,PRTLEN               ADD PRINT LEN TO REC ADDR
         LA    R9,1(R9)                INCR RECORD ADDR BY 1
         ST    R9,RECADDR              STORE UPDATED RECD ADDR
         MVI   GRPND,0                 INDICATE PRINT GROUP IN PROGRESS
         MVI   CC,C'0'                 DOUBLE SPACE CARR CTL
         CLI   PRTYP,C'M'              MIXED CHAR-HEX PRINTOUT
         BNE   CKTYPH                  NO
         BAL   R9,FMTMIXD              YES, GO FORMAT
         B     RECLUP                  GO FINISH RECORD
CKTYPH   CLI   PRTYP,C'H'              HEX PRINTOUT
         BNE   CKTYP3                  NO
         BAL   R9,FMTHEX               YES, GO FORMAT
         B     RECLUP                  GO FINISH RECORD
CKTYP3   CLI   PRTYP,C'3'              3-LINE CHAR/HEX PRINTOUT
         BNE   PRTCHR                  NO
         BAL   R9,FMTCHEX              YES, GO FORMAT
         B     RECLUP                  GO FINISH RECORD
PRTCHR   MVC   TRC+1(1),PRTLEN+1       LENGTH TO TRANSLATE
TRC      TR    PDATA,CHRTBL            TRANSLATE CHARACTERS
         MVI   GRPND,1                 INDIC END PRINT GROUP
         BAL   R9,PRINT                PRINT THE LINE
         B     RECLUP                  GO FINISH THE RECORD
OUTWRIT  B     MAINLINE                NOP IF DUMPOUT DD CARD FOUND
         L     R12,OUTADDR             @ RECORD
         CLC   ORGOUT,=C'IS'           IS IT ISAM
         BE    WRITIS                  YES
         PUT   OUTPS,0(12)             WRITE SEQ FILE
         B     MAINLINE                TO NEXT RECORD
WRITIS   PUT   OUTIS,0(12)             WRITE ISAM OUTPUT
         B     MAINLINE                GO TO NEXT RECORD
*
*
*
FMTMIXD  EQU   *                       *** FORMAT MIXED CHAR/HEX PRINTO
         ST    R9,FMX9                 STORE RETURN ADDR
         LH    R9,PRTLEN               GET LENGTH CODE
         MVI   ZONLIN,0                MOVE ZERO TO CLEAR
         MVC   ZONLIN+1(199),ZONLIN    CLEAR ZONE AND NUMERIC LINES
         STC   R9,ZONMV+1              LENGTH CODE TO ZONE MOVE
         STC   R9,NUMMV+1              LENGTH CODE TO NUMERIC MOVE
         STC   R9,TRM1+1               LENGTH CODE TO TR CHARACTERS
         STC   R9,TRM2+1               LENGTH CODE TO ZONE TRANSLATE
         STC   R9,TRM3+1               LENGTH CODE TO NUMERIC TRANSLATE
         STC   R9,PRTM2+1              LENGTH TO BLANK COMPARE
         STC   R9,PRTM1+1              LENGTH TO BLANK COMPARE
ZONMV    MVZ   ZONLIN,PDATA            MOVE ZONES
NUMMV    MVN   NUMLIN,PDATA            MOVE NUMERICS
TRM1     TR    PDATA,PRTCGTBL          TRANSLATE CHARACTERS
TRM2     TR    ZONLIN,TRZON            TRANSLATE ZONES
TRM3     TR    NUMLIN,TRNUM            TRANSLATE NUMERICS
         LA    R12,PDATA(R9)           GET RHE CHARACTER DATA
         LA    R11,ZONLIN              GET LHE ZONE LINE
         LA    R10,NUMLIN              GET LHE NUMERIC LINE
         LA    R9,PDATA                GET LHE CHAR DATA
MFLUP    CR    R9,R12                  AT END OF SCAN
         BH    PRTM2                   YES
         CLI   0(R9),0                 HEX 0 IN CHARACTER POSITION
         BE    MVZONM                  YES, MOVE ZONE TO CHARACTER LINE
         MVI   0(R10),C' '             NO, BLANK TO NUMERIC LINE
         B     INCRM3                  GO INCREMENT ADDRS
MVZONM   MVC   0(1,R9),0(R11)          MOVE ZONE CHAR TO CHAR LINE
INCRM3   LA    R9,1(R9)                INCREMENT CHAR LINE ADDR
         LA    R10,1(R10)              INCREMENT NUMERIC LINE ADDR
         LA    R11,1(R11)              INCREMENT ZONE LINE ADDR
         B     MFLUP                   CONTINUE LOOP
PRTM2    CLC   NUMLIN,BLANX            NUMERIC PORTION ALL BLANK
         BNE   PRT2M                   NO
         MVI   GRPND,1                 INDICATE END OF PRINT GROUP
PRT2M    BAL   R9,PRINT                PRINT 1ST LINE
PRTM1    CLC   NUMLIN,BLANX            NUMERIC LINE BLANK
         BE    EXMX                    YES, EXIT
PRT1M    MVI   GRPND,1                 INDIC END PRINT GROUP
         MVC   PDATA,NUMLIN            NUMERICS TO PRINT LINE
         BAL   R9,PRINT                PRINT THE NUMERICS
EXMX     L     R9,FMX9                 GET RETURN ADDR
         BR    R9                      RETURN
*
*
*
FMTHEX   EQU   *                       *** FORMAT VERTICAL HEX LINES **
         ST    R9,HX9                  SAVE RETURN ADDR
         LH    R9,PRTLEN               GET PRINT LENGTH
         STC   R9,FXM+1                STORE LEN CODE IN TRANSLATE
         STC   R9,FXMTN+1              STORE LEN CODE IN NUMERIC TR
         STC   R9,FXMN+1               STORE LEN CODE IN NUMERIC MOVE
         MVN   NUMLIN,PDATA            NUMERICS TO NUMERIC LINE
         NI    PDATA,X'F0'             CLEAR 1ST POS NUMERIC
         MVN   PDATA+1(99),PDATA       CLEAR REMAINING NUMERICS
FXM      TR    PDATA,TRZON             TRANSLATE ZONES
         BAL   R9,PRINT                PRINT ZONE LINE
FXMN     MVN   PDATA,NUMLIN            MOVE NUMERICS TO PRINT LINE
FXMTN    TR    PDATA,TRNUM             TRANSLATE NUMERIX
         MVI   GRPND,1                 INDICATE END OF PRINT GROUP
         BAL   R9,PRINT                PRINT NUMERIC LINE
EXHEX    L     R9,HX9                  GET RETURN ADDR
         BR    R9                      RETURN
*
*
*
FMTCHEX  EQU   *                       *** FORMAT 3-LINE CHAR/HEX PRINT
         ST    R9,FCX9                 SAVE RETURN ADDR
         MVC   ZONLIN,PDATA            SAVE PRINT DATA
         MVC   CXTR+1(1),PRTLEN+1      MOVE LENGTH TO TR
CXTR     TR    PDATA,CHRTBL            TRANSLATE CHARACTERS
         BAL   R9,PRINT                PRINT CHARACTER LINE
         MVC   PDATA,ZONLIN            RESTORE ORIGINAL DATA TO PRINT L
         BAL   R9,FMTHEX               GO FORMAT VERT HEX
         L     R9,FCX9                 GET RETURN ADDR
         BR    R9                      RETURN
*
*
*
PRINT    EQU   *                       *** PRINT A LINE ROUTINE ***
         PUT   SYSPRINT,P1             WRITE THE LINE
         AP    LINECT,=P'1'            ADD 1 TO LINE COUNT
         CLI   CC,C'0'                 WAS IT DOUBLE SPACE
         MVI   CC,C' '                 SET SINGLE SPACE
         BNE   CKLCT                   NOT DOUBLE SPACE
         AP    LINECT,=P'1'            ADD 1 MORE FOR DOUBLE SPACE
CKLCT    CLI   GRPND,1                 END OF PRINT GROUP
         BNE   PXIT1                   NO
NOBAR    NOP   CPHL                    BRANCH IF NO BAR SELECTED
         MVC   P(50),BLANX             CLEAR PRINT LINE
         MVC   BARMV+1(1),PRTLEN+1     LENGTH TO BAR MOVE
BARMV    MVC   PDATA,LOCBAR            MOVE LOCATOR BAR TO PRINT
         PUT   SYSPRINT,P1             WRITE LOCATOR BAR LINE
         AP    LINECT,=P'1'            ADD 1 TO LINECOUNT
CPHL     CP    LINECT,=P'56'           OVER 56 LINES PRINTED
         BL    PXIT                    NO
HEADING  AP    LINECT,=P'6'            RESET LINE COUNT
         MVI   *-6,C'8'                CHANGE TO ZAP AFTER 1ST TIME
         MVC   HPAG,=X'40202021'       MOVE EDIT WORD
         ED    HPAG,PAGENO             EDIT PAGE NO
         PUT   SYSPRINT,HEAD           PRINT HEADING
         AP    PAGENO,=P'1'            ADD 1 TO PAGE NO
         PUT   SYSPRINT,HD2            WRITE SECOND HEADING LINE
         PUT   SYSPRINT,HD3            WRITE THIRD HEAD LINE
PXIT     MVI   CC,C'0'                 SET DOUBLE SPACE PRINT
PXIT1    MVI   P,0                     START CLEARING
         MVC   P+1(131),P              FINISH CLEARING PRINT LINE
         MVI   GRPND,0                 RESET GROUP END INDIC
         BR    R9                      RETURN TO CALLER
*
*
*****ON ENTRY, FIELD ADDR IN REG 2, FIELD LENGTH IN REG 1,
*****RETURN ADDRESS IN REG 9.
*****PROCESSING: IF FIELD IS PRECEDED BY CHARACTER X, IT IS
*****CONVERTED TO INTERNAL HEXADECIMAL, OTHERWISE NO PROCESSING
*****IS DONE BY THIS ROUTINE.
*****ON EXIT: CONTENT OF FIELD IS REPLACED BY THE INTERNAL
*****HEX EQUIVALENT OF THE ORIGINAL CONTENT, LEFT JUSTIFIED,
*****REG 1 = ZERO IF NO ERROR FOUND, ELSE 4.
AXCONV   STM   R1,R9,AXCVSAV           SAVE REGS USED
         BCTR  R2,R0                   TO POS PRECEDING FIELD
         CLI   0(R2),C'X'              PRECEDED BY X
         BNE   AXXIT                   NO, EXIT
         LA    R2,1(R2)                BACK TO FIELD LHE
         SLL   R1,1                    MULTIPLY LENGTH BY 2
         LA    R9,16                   GET MAX LENGTH X 2
         CR    R1,R9                   MORE THAN 8 HEX BYTES
         BH    AXERR                   YES, ERROR
AXCHK    CLI   0(R2),C'0'              CHARACTER < ZERO
         BL    AXALPH                  YES, CHECK A-F
         CLI   0(R2),C'9'              CHARACTER > 9
         BH    AXERR                   YES, ERROR
AXSTEP1  LA    R2,1(R2)                TO NEXT CHARACTER
         BCT   R1,AXCHK                GO CHECK THIS POSITION
         B     AXPACK                  GO CONVERT FIELD
AXALPH   CLI   0(R2),C'A'              CHARACTER < A
         BL    AXERR                   YES, ERROR
         CLI   0(R2),C'F'              CHARACTER > F
         BH    AXERR                   YES, ERROR
         IC    R9,0(R2)                PICK UP CHARACTER
         LA    R9,9(R9)                MAKE NUMERIC CORRECT HEX
         STC   R9,0(R2)                STORE CONVERTED ALPHA
         B     AXSTEP1                 LOOP
AXPACK   LM    R1,R2,AXCVSAV           ORIGINAL REGS 1-2
         LR    R9,R2                   SAVE @ LHE OF FIELD
AXPCK1   PACK  0(1,R9),0(1,R2)         INVERT 1ST BYTE
         MVN   0(1,R9),1(R2)           NUMERICS FROM SECOND
         LA    R9,1(R9)                TO NEXT FIELD LOCATION
         LA    R2,2(R2)                TO NEXT EXTERNAL HEX BYTE
         BCT   R1,AXPCK1               GO CONVERT HEX BYTE
AXXIT    LM    R1,R9,AXCVSAV           RESTORE REGS
         SR    R1,R1                   INDICATE NO ERROR
         BR    R9                      EXIT
AXERR    LM    R1,R9,AXCVSAV           RESTORE REGS
         LA    R1,4                    INDICATE ERROR
         BR    R9                      EXIT
*
*
*
*****ON ENTRY, REG 1 = COMPARE MASK FIELD ADDRESS. ON EXIT,
*****TABLE BRANCH MASK IS IN BRMASK. TMOP WILL CONTAIN A HEX
*****'91' IF A TM INSTRUCTION IS INDICATED. R1 IS ZERO ON EXIT
*****IF NO ERRORS, OTHERWISE 4.
*
BRTBLSCH STM   R1,R9,BRTSAV            SAVE REGS USED
         MVI   TMOP,0                  CLEAR TMOP
         LA    R9,BRCODS               @ BRANCH CODE TABLE
TLUP1    CLC   0(3,R9),0(R1)           BRANCH CODE LITERAL FOUND
         BE    FND1                    YES
         CLI   0(R9),X'FF'             END OF TABLE
         BE    CKTMTBL                 YES
         LA    R9,4(R9)                TO NEXT ENTRY
         B     TLUP1                   LOOP THRU TABLE
FND1     MVC   BRMASK,3(R9)            SET BRANCH MASK
         LM    R1,R9,BRTSAV            RESTORE REGS
         SR    R1,R1                   GOOD RETURN CODE
         BR    R9                      EXIT
CKTMTBL  LA    R9,TMBRCOD              @ TM BRANCH TABLE
TLUP2    CLC   0(3,R9),0(R1)           FOUND BRANCH CODE LITERAL
         BE    FNDTM                   YES
         LA    R9,4(R9)                TO NEXT TABLE ENTRY
         CLI   0(R9),X'FF'             END OF TABLE
         BE    BRCHERR                 YES, ERROR
         B     TLUP2
FNDTM    MVI   TMOP,X'91'              INDICATE TM INSTRUCTION
         B     FND1                    GO SET MASK
BRCHERR  LM    R1,R9,BRTSAV            RESTORE REGS
         LA    R1,4                    INDICATE ERROR
         BR    R9                      EXIT
*
*
*
ENDJOB   EQU   *                       *** END OF JOB ROUTINE ***
         MVC   PDATA(18),=C'*** EOF RECORD  ***'
         UNPK  PRECNO,NRECDS           SHOW NBR RECDS IN FILE
         OI    PRECNO+5,C'0'           CLEAR SIGN TO F
         BAL   R9,PRINT                PRINT EOJ MSG
         B     CLPRT                   GO CLOSE FILES
EOJHI    MVC   P(24),=C'*** MAX RECDS  PASSED ***'
         BAL   R9,PRINT                PRINT EOJ MSG
CLPRT    CLOSE SYSPRINT                CLOSE PRINT FILE
OUTDD    B     INDD                    NOP IF DUMPOUT DD CARD FOUND
         CLC   ORGOUT,=C'IS'           IS IT ISAM
         BE    CLOSIS                  YES
         CLOSE OUTPS                   CLOSE SEQNTL FILE
         B     INDD                    CONTINUE
CLOSIS   CLOSE OUTIS                   CLOSE ISAM OUTPUT
INDD     B     DMPCL                   NOP IF SYSIN DD USED
         CLOSE SYSIN                   CLOSE SYSIN FILE
DMPCL    CLC   ORG,=C'IS'              WAS IT INDEX-SEQ FILE
         BE    CLIS                    YES
         CLC   ORG,=C'VS'              WAS IT VRBL SPANNED
         BE    CLVS                    YES
         CLOSE DUMPIN                  CLOSE SEQUENTIAL INPUT FILE
         B     EOJ1                    GO EXIT
CLIS     CLOSE DUMPIS                  CLOSE INDEX-SEQ INPUT FILE
         B     EOJ1                    GO EXIT
CLVS     CLOSE DUMPVS                  CLOSE VRBL SPANNED FILE
EOJ1     L     R13,SAVE+4              GET RETURN POINTER
         LM    R14,R12,12(R13)         GET CTL PGM REGISTERS
         SR    R15,R15                 SET RETURN CODE = 0
         BR    R14                     RETURN TO CONTROL PROGRAM
*
*
**************************DATA WORK AND FILE AREAS ******************
*
CVT      DS    D
AXCVSAV  DS    9F                      AXCONV RTN SAVE AREA
BRTSAV   DS    9F                      BRTBLSCH RTN SAVE
SAVE     DS    2F
         DC    A(SAVE)
         DS    15F
OUTADDR  DS    F                       @ RECORD TO WRITE
FCX9     DS    F
HX9      DS    F
FMX9     DS    F
RECADDR  DS    F
SL9      DS    F
VADR     DS    F                       ADDRESS OF VRBL SPANNED RECD
JFCBADR  DC    X'87'                   DCB EXIT LIST FOR READING JFCB
         DC    AL3(JFCB)               ADDRESS OF JFCB READ-IN AREA
DISP1    DS    H
DISP2    DS    H
HUNDRED  DC    H'100'
NINETY9  DC    H'99'
REMLEN   DS    H                       REMAINING LENGTH IN REC
PRTLEN   DS    H                       REMAINING LENGTH TO PRINT
RECLEN   DS    H                       LOGICAL RECORD LENGTH
KEYLEN   DS    H
REL2SW   DC    X'00'                   LAST SELECT HAD 2ND AND
CLN1     DS    CL1
CLN2     DS    CL1
NTST     DC    CL6' '
ZEROS    DC    CL6'000000'
PRTYP    DC    C'M'                    H=HEX ONLY, C=CHAR ONLY 3=3-LINE
SKIP     DC    PL5'0'                  NBR RECORDS TO SKIP
ERR      DC    X'00'                   CONTROL CARD ERROR WHEN 1
STARTKY  DC    XL60'00'                BEGINNING KEY FOR INDEX-SEQ
STARTPOS DC    PL3'0'                  PRINT STARTING POS IN RECORD
TOTRCDS  DC    PL5'50'                 NUMBER RECORDS TO PRINT
FREERECS DC    PL5'1000'               'FREE' RECORDS WITHOUT
*                                      OPERATOR PERMISSION
REPLY    DC    CL2'  '                 WTOR REPLY AREA
WTORECB  DC    F'0'                    WTORECB
MSGCB    DS    0H                      WTOR CONTROL AREA
         DC    AL1(2)                  * REPLY LENGTH
         DC    AL3(REPLY)              * @ REPLY AREA
         DC    A(WTORECB)              * @ ECB POSTED BY WTOR
         DC    AL2(L'MESSAGE+4)        * LENGTH OF MESSAGE + 4
         DC    XL2'00'                 * WTOR FLAGS
MESSAGE  DS    0CL61                   * WTOR MESSAGE AREA
         DC    CL4'JOB'                *
MSGJOB   DS    CL8                     * WTOR MSG JOB NAME
         DC    CL20' REQUESTING DUMP OF' *
MSGRECS  DS    CL5                     * WTOR NBR RECDS MESSAGE
         DC    CL24' RECORDS. REPLY GO OR NO' *
NRECDS   DC    PL5'0'                  NUMBER RECORDS READ
ORG      DC    C'PS'                   USER SPECIFIED FILE TYPE
ORGOUT   DC    CL2'PS'                 OUTPUT FILE TYPE
LINECT   DC    PL2'0'
PAGENO   DC    PL2'1'
XZROS    DC    XL16'00'
GRPND    DC    X'00'
         DS    0H
CONLEN   DC    AL2(B1-A1)              LENGTH OF CONSTANTS
LOGICLEN DC    AL2(L'LOGIC)            LENGTH OF LOGIC INSTR SET
A1       DS    CL16
A2       DS    CL16
ID1      DS    CL8
CT1      DC    PL5'999999999'
B1       DS    CL16
B2       DS    CL16
ID2      DS    CL8
CT2      DC    PL5'999999999'
C1       DS    CL16
C2       DS    CL16
ID3      DS    CL8
CT3      DC    PL5'999999999'
D1       DS    CL16
D2       DS    CL16
ID4      DS    CL8
CT4      DC    PL5'999999999'
E1       DS    CL16
E2       DS    CL16
ID5      DS    CL8
CT5      DC    PL5'999999999'
F1       DS    CL16
F2       DS    CL16
ID6      DS    CL8
CT6      DC    PL5'999999999'
G1       DS    CL16
G2       DS    CL16
ID7      DS    CL8
CT7      DC    PL5'999999999'
H1       DS    CL16
H2       DS    CL16
ID8      DS    CL8
CT8      DC    PL5'999999999'
I1       DS    CL16
I2       DS    CL16
ID9      DS    CL8
CT9      DC    PL5'999999999'
J1       DS    CL16
J2       DS    CL16
ID10     DS    CL8
CT10     DC    PL5'999999999'
K1       DS    CL16
K2       DS    CL16
ID11     DS    CL8
CT11     DC    PL5'999999999'
L1       DS    CL16
L2       DS    CL16
ID12     DS    CL8
CT12     DC    PL5'999999999'
M1       DS    CL16
M2       DS    CL16
ID13     DS    CL8
CT13     DC    PL5'999999999'
N1       DS    CL16
N2       DS    CL16
ID14     DS    CL8
CT14     DC    PL5'999999999'
O1       DS    CL16
O2       DS    CL16
ID15     DS    CL8
CT15     DC    PL5'999999999'
PV1      DS    CL16
PV2      DS    CL16
ID16     DS    CL8
CT16     DC    PL5'999999999'
Q1       DS    CL16
Q2       DS    CL16
ID17     DS    CL8
CT17     DC    PL5'999999999'
RV1      DS    CL16
RV2      DS    CL16
ID18     DS    CL8
CT18     DC    PL5'999999999'
S1       DS    CL16
S2       DS    CL16
ID19     DS    CL8
CT19     DC    PL5'999999999'
T1       DS    CL16
T2       DS    CL16
ID20     DS    CL8
CT20     DC    PL5'999999999'
U1       DS    CL16
U2       DS    CL16
ID21     DS    CL8
CT21     DC    PL5'999999999'
V1       DS    CL16
V2       DS    CL16
ID22     DS    CL8
CT22     DC    PL5'999999999'
W1       DS    CL16
W2       DS    CL16
ID23     DS    CL8
CT23     DC    PL5'999999999'
X1       DS    CL16
X2       DS    CL16
ID24     DS    CL8
CT24     DC    PL5'999999999'
Y1       DS    CL16
Y2       DS    CL16
ID25     DS    CL8
CT25     DC    PL5'999999999'
NS       DC    H'0'
COD1     DS    CL1
COD2     DS    CL1
BRCODS   DC    CL3'EQ'
         DC    XL1'80'
         DC    CL3'NE'
         DC    XL1'70'
         DC    CL3'LT'
         DC    XL1'40'
         DC    CL3'GT'
         DC    XL1'20'
         DC    CL3'NGT'
         DC    XL1'D0'
         DC    CL3'NLT'
         DC    XL1'B0'
         DC    X'FF'
TMOP     DS    XL1                     TM INSTRUCTION INDICATOR
BRMASK   DS    XL1                     BRANCH MASK FROM TABLE
TMBRCOD  DC    CL3'O',XL1'10'
         DC    CL3'M',XL1'40'
         DC    CL3'Z',XL1'80'
         DC    CL3'NO',XL1'E0'
         DC    CL3'NZ',XL1'70'
         DC    X'FF'
ZONLIN   DS    CL100
NUMLIN   DS    CL100
*
*
P1       DS    0CL133                  *** PRINT LINE ***
CC       DC    C'1'                    CARRIAGE CONTROL BYTE
P        DS    0CL132                  PRINT DATA LINE
PID      DS    CL8
PRECNO   DS    CL6
         DS    CL1
PLEN     DS    CL5
         DS    CL1
PSTRT    DS    CL4
HYPH     DS    CL1
PEND     DS    CL4
         DS    CL2
PDATA    DS    CL100
*
*
*
*
HEAD     DS    0CL133                  *** FIRST HEADING LINE ***
         DC    CL11'0DUMPFIL'
         DC    CL7'DSNAME='
HDSN     DS    CL44
         DC    CL9' VOLSERS='
VOLSRL   DS    CL30
         DC    CL7' GENNO='
HGEN     DS    CL8
         DC    CL9' '
         DC    CL4'PAGE'
HPAG     DS    CL4
*
*
HD2      DS    0CL133                  *** SECOND HEADING LINE ***
         DC    CL7'0DSORG='
HORG     DC    CL2'PS'
         DC    CL7' RECFM='
HRCFM    DC    CL3'UBS'
         DC    CL8' KEYLEN='
HKYLN    DS    CL3
         DC    CL9' BLKSIZE='
HBKSZ    DS    CL5
         DC    CL7' LRECL='
HLRECL   DS    CL5
         DC    CL77' '
*
*
HD3      DS    0CL133                  *** THIRD HEADING LINE ***
         DC    CL38'0REC ID   RECNO  LENG  RECD-POS'
         DC    CL14'RECORD CONTENT'
BLANX    DC    100C' '
*
*
JFCB     DS    0CL176                  *** JOB FILE CONTROL BLOCK ***
DSNAME   DC    XL44'00'
GENNO    DS    CL8
         DS    CL18
VOLSEQ   DS    CL2
JFCBMASK DS    CL8
         DS    CL13
KEYLENG  DS    CL1
         DS    CL4
DSORGN   DS    BL2
RECDFM   DS    BL1
         DS    CL1
BLOCKSIZ DS    XL2
LOGREC   DS    XL2
         DS    CL12
VOLSERS  DS    CL30
         DS    CL28
*
*
PRTCGTBL DC    64X'00'
         DC    C'.'
         DC    9X'00'
         DC    X'4A'
         DC    3X'00'
         DC    X'4E'
         DC    12X'00'
         DC    X'5B'
         DC    15X'00'
         DC    X'6B'
         DC    2X'00'
         DC    X'6E'
         DC    11X'00'
         DC    X'7A7B'
         DC    2X'00'
         DC    X'7E'
         DC    66X'00'
         DC    C'ABCDEFGHI'
         DC    7X'00'
         DC    C'JKLMNOPQR'
         DC    8X'00'
         DC    C'STUVWXYZ'
         DC    6X'00'
         DC    C'0123456789'
         DC    6X'00'
TRNUM    DC    C'0123456789ABCDEF'
TRZON    DC    C'0'
         DC    XL16'F1'
         DC    XL16'F2'
         DC    XL16'F3'
         DC    XL16'F4'
         DC    XL16'F5'
         DC    XL16'F6'
         DC    XL16'F7'
         DC    XL16'F8'
         DC    XL16'F9'
         DC    XL16'C1'
         DC    XL16'C2'
         DC    XL16'C3'
         DC    XL16'C4'
         DC    XL16'C5'
         DC    XL16'C6'
CHRTBL   DC    64C'.'
         DC    C' '
         DC    9C'.'
         DC    X'4A4B4C4D4E4B50'
         DC    10C'.'
         DC    X'5B5C5D4B4B6061'
         DC    9C'.'
         DC    X'6B6C4B6E6F'
         DC    10C'.'
         DC    X'7A7B7C7D7E7F'
         DC    65C'.'
         DC    C'ABCDEFGHI'
         DC    7C'.'
         DC    C'JKLMNOPQR'
         DC    8C'.'
         DC    C'STUVWXYZ'
         DC    6C'.'
         DC    C'0123456789'
         DC    6C'.'
LOCBAR   DC    CL25'1...5...10....5...20....5'
         DC    CL25'...30....5...40....5...50'
         DC    CL25'....5...60....5...70....5'
         DC    CL25'...80....5...90....5....0'
LOGICD   DSECT ,                       *** CONTROL CARD FOR RECORD SELE
         DS    CL1                     COL 1 = S
IDNT     DS    CL8                     CC 2-9 USER RECORD ID
         DS    CL1
ST1      DS    CL5                     CC 11-15 STARTING POS IN RECORD
         DS    CL1
LEN1     DS    CL2                     CC 17-18 LENGTH OF FIELD
         DS    CL1
CPR1     DS    CL3                     CC 20-22 COMPARISON DESIRED, EQ,
*                                      GT, NGT, OR NLT
HEXIND1  DS    CL1                     CC 23 X=HEX VALUE
VAL1     DS    CL16                    CC 24-39 VALUE FOR COMPARISON
         DS    CL1
REL      DS    CL3                     CC 41-43 RELATION, AND OR OR
         DS    CL1
ST2      DS    CL5                     CC 45-49 STARTING POS IN RECORD
         DS    CL1
LEN2     DS    CL2                     CC 51-52 LENGTH OF FIELD
         DS    CL1
CPR2     DS    CL3                     CC 54-56 COMPARISON DESIRED
HEXIND2  DS    CL1                     CC 23 X = HEX VALUE
VAL2     DS    CL16                    CC 58-73 VALUE FOR COMPARISON
         DS    CL1
REL2     DS    CL3                     CC 75-77 AND RELATION TO NEXT CA
SNBR     DS    CL3
*
*
CNTLCD   DSECT ,                       *** CONTROL CARD FOR OPTIONS ***
         DS    CL1                     COL 1 = *
CTYP     DS    CL1                     CC 2 PRINT TYPE OPTION, M, H, C,
         DS    CL1
CBAR     DS    CL1                     CC 4 LOCATOR BAR, N OR Y
         DS    CL1
CMAX     DS    CL5                     CC 6-10 MAXIMUM RECORDS TO PRINT
         DS    CL1
CFILTYP  DS    CL2                     CC 12-13 FILE TYPE, IS, PS, OR V
         DS    CL1
COUTFIL  DS    CL2                     CC 15-16 OUTPUT FILE TYPE, IS OR
CSTRT    DS    CL6                     CC 18-22 STARTING RECORD NBR
         DS    CL1
CSKY     DS    CL56                    CC 24-79 STARTING KEY FOR IS
ENDCD    DS    CL1
*
*
*
LGICDSCT DSECT ,                       SELECTION LOGIC DSECT
LOGIC    DS    0CL42
LOGBR1   B     MAINLINE
LOGCPR1  CLC   0(1,R6),A1
LOGBR2   B     ACC1
LOGBR3   B     TYPE2
LOGCPR2  CLC   0(1,R6),A2
LOGBR4   B     TYPE2
LOGACC   MVC   PID,ID1
LOGLA1   LA    R12,CT1
LOGBR5   B     ACCEPT
*
*
DUMPFIL  CSECT
*
DUMPIN   DCB   DDNAME=DUMPIN,DEVD=DA,DSORG=PS,MACRF=GL,EXLST=JFCBADR,  X
               EODAD=ENDJOB
*
*
DUMPVS   DCB   DDNAME=DUMPIN,DEVD=DA,DSORG=PS,MACRF=GL,EXLST=JFCBADR,  X
               EODAD=ENDJOB,BFTEK=A
*
*
DUMPIS   DCB   DDNAME=DUMPIN,EXLST=JFCBADR,EODAD=ENDJOB,               X
               DSORG=IS,MACRF=(GL,SK)
*
*
SYSIN    DCB   DDNAME=SYSIN,MACRF=GL,BLKSIZE=80,LRECL=80,RECFM=F,      X
               DEVD=DA,DSORG=PS,EODAD=CTLEND,EXLST=JFCBADR
OUTPS    DCB   DSORG=PS,MACRF=PM,DDNAME=DUMPOUT
OUTIS    DCB   DSORG=IS,MACRF=PM,DDNAME=DUMPOUT
*
*
SYSPRINT DCB   DDNAME=SYSPRINT,MACRF=PM,BLKSIZE=133,LRECL=133,         X
               RECFM=FBA,DSORG=PS
***** REGISTER EQUATES
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
