COPYMULT SVLNK R3
*READS ALL FILES ON AN INPUT TAPE AND COPIES THEM TO AN OUTPUT
*TAPE. THE INPUT AND OUTPUT DD CARDS MUST CONTAIN A LABEL=(1,NL)
*PARAMETER. THE JFCB IS READ AND USED FOR OPENING THE FILES,
*WITH THE FILE SEQUENCE NUMBER INCREMENTED BY ONE FOR EACH FILE.
*THE LEAVE PARAMETER IS USED ON THE CLOSE STATEMENT TO PREVENT
*THE TAPES REWINDING AFTER EACH FILE IS CLOSED. THE NUMBER OF
*RECORDS ON EACH FILE IS PRINTED, AS WELL AS THE SIZE OF THE
*FIRST BLOCK. RECFM IS PRIONTED AS F IF ALL BLOCKS EXCEPT THE
*LAST ARE THE SAME SIZE, OTHERWISE U OR V. FOR RECFM U, THE MAXIMUM
*BLOCKSIZE IS PRINTED RATHER THAN THE FIRST BLOCK SIZE.
*
*AUTHOR R THORNTON - OCT 76
*
*
*
         L     R1,0(R1)                GET PARM FIELD ADDR
         LH    R2,0(R1)                GET PARM LENGTH
         LTR   R2,R2                   ANY PARM DATA
         BZ    OPNPRT                  NO, DEFAULT TO ALL FILES
         CH    R2,=H'4'                PARM FIELD OVER 4 CHARACTERS
         BH    BADPARM                 YES, ERROR
         BE    PARM4                   NO, EXACTLY 4 CHARACTERS
         CH    R2,=H'2'                PARM IS 2 CHARACTERS
         BH    PARM3                   NO, GREATER, MUST BE 3
         BL    PARM1                   NO, SMALLER, MUST BE 1
         MVC   FILES+2(2),2(R1)        MOVE THE 2-BYTE PARM FIELD
         B     CKNUMER                 GO CHECK IT
PARM4    MVC   FILES,2(R1)             MOVE THE 4-BYTE PARM FIELD
         B     CKNUMER                 GO CHECT IT
PARM3    MVC   FILES+1(3),2(R1)        MOVE THE 3-BYTE PARM FIELD
         B     CKNUMER                 GO CHECK IT
PARM1    MVC   FILES+3(1),2(R1)        MOVE THE 1-BYTE PARM FIELD
CKNUMER  MVZ   NUMCK,FILES             MOVE ZONES TO CHECK
         CLC   NUMCK,ZEROS             PARM FIELD IS NUMERIC
         BNE   BADPARM                 NO, ERROR
         PACK  DBLWD,FILES             PACK THE PARM FIELD
         CVB   R1,DBLWD                AND CONVERT TO BINARY
         ST    R1,NBRFILS              SAVE NBR FILES TO COPY
         B     OPNPRT                  GO OPEN PRINT FILE
BADPARM  WTO   '***INVALID PARM FIELD, COPYING ALL FILES',ROUTCDE=11
OPNPRT   OPEN  (PRINT,OUTPUT)          OPEN PRINT FILE
OPEN     RDJFCB TAPE                   READ JFCB FOR INPUT TAPE
         RDJFCB OUT                    READ JFCB FOR OUTPUT TAPE
FSTBRCH  B     OPEN1                   NO JFCB MOD FIRST TIME
         LH    R1,JFCB+68              GET INPUT FILE SEQ FROM JFCB
         LA    R1,1(R1)                ADD 1 TO FILE SEQ
         STH   R1,JFCB+68              UPDATE INPUT JFCB
         STH   R1,JFCB2+68             SAME FILE NBR FOR OUTPUT JFCB
OPEN1    MVI   FSTBRCH+1,0             NOP 1ST TIME BRANCH
         OPEN  TAPE,TYPE=J             OPEN INPUT USING MODIFIED JFCB
         OPEN  (OUT,OUTPUT),TYPE=J     OPEN OUTPUT USING MODIFIED JFCB
         MVI   TYPE,C'F'               ASSUME RECFM=F FOR NOW
         MVI   POSV,C'V'               SHOW POSSIBLE RECFM=V
         XC    FSTREC(6),FSTREC        ZERO BLOCKSIZE FIELDS
         ZAP   FILERECS,=P'0'          CLEAR FILE BLOCK COUNT
         L     R1,TAPE+44              GET DEB ADDR FROM DCB
         L     R1,32(R1)               GET VOLSER FROM DEB
         MVC   PRTVOL,28(R1)           MOVE VOLSER TO PRINT
         L     R1,OUT+44               GET OUTPUT DEB ADDR
         L     R1,32(R1)               ADDR OF DEB VOLSER
         MVC   PRTOVOL,28(R1)          OUTPUT VOLSER TO PRINT
GET      GET   TAPE                    READ NEXT INPUT BLOCK
         CLI   VOLSW,1                 VOLUME ALREADY SET?
         BE    ADDINCTR                YES
         CLC   JFCB2+68(2),=H'1'       IN 1ST FILE?
         BNE   SETVOLSW                NO
         CLC   TAPE+82(2),=H'80'       YES, IS IT AN 80-BYTE BLOCK?
         BNE   SETVOLSW                NO
         CLC   0(4,R1),=C'VOL1'        IS THIS A VOLUME RECORD?
         BNE   ADDINCTR                NO
         MVC   4(6,R1),PRTOVOL         YES, USE OUTPUT1'S VOLSER
SETVOLSW MVI   VOLSW,1                 SHOW VOLUME PROCESSING FINISHED
ADDINCTR AP    FILERECS,=P'1'          ADD 1 TO RECORD COUNTER
         MVC   OUT+82(2),TAPE+82       BLOCK LENGTH TO OUTPUT DCB
         LR    R5,R1                   COPY RECORD ADDR
         PUT   OUT,0(R5)               WRITE BLOCK TO OUTPUT
         CLI   POSV,C'V'               POSSIBLE RECFM=V
         BNE   CKFST                   NO, CONTINUE
         CLC   0(2,R5),TAPE+82         1ST 2 BYTES OF RECD = BLOCKSIZE
         BE    SETVMAX                 YES
         MVI   POSV,C' '               NO, RESET POSSIBLE RECFM=V
         B     CKFST                   CONTINUE
SETVMAX  CLC   VMAX,TAPE+82            THIS RECORD LONGER
         BNL   CKFST                   NO
         MVC   VMAX,TAPE+82            YES, SET NEW MAX
CKFST    CLC   FSTREC,=H'0'            THIS FIRST RECORD
         BNE   CPRSAM                  NO
         MVC   FSTREC,TAPE+82          SAVE 1ST BLOCK LENTGTH
         B     GET                     GO READ NEXT BLOCK
CPRSAM   CLC   FSTREC,TAPE+82          THIS BLOCK SAME SIZE AS 1ST
         BE    GET                     YES, GO READ AGAIN
         CLC   SECREC,=H'0'            THIS 1ST DIFFERENT SIZE FOUND
         BNE   SETMAX                  NO, ASSUME RECFM=U
         MVC   SECREC,TAPE+82          MAYBE LAST BLOCK OF F
         B     GET                     GO READ AGAIN
SETMAX   MVI   TYPE,C'U'               SET RECFM=U
         CLC   FSTREC,SECREC           1ST BLOCK SIZE > OTHER
         BH    CKMAX                   YES
         MVC   FSTREC,SECREC           KEEP FSTREC=MAX BLOCK SIZE
CKMAX    CLC   FSTREC,TAPE+82          THIS BLOCK LONGER
         BNL   GET                     NO, GO READ AGAIN
         MVC   FSTREC,TAPE+82          YES, STORE MAX BLOCK SIZE
         B     GET                     AND GO READ AGAIN
*
*
*
*THIS ROUTINE PRINTS DATA FOR THE FILE JUST COPIED
*
ENDFILE  EQU   *
         CLI   POSV,C'V'               RECFM IS V
         BNE   FORMAT                  NO
         MVI   TYPE,C'V'               YES, SHOW RECFM=V
         MVC   FSTREC,VMAX             SET MAX BLOCKSIZE
FORMAT   MVC   PRTFILSQ,=X'40202020'   EDIT WORD
         LH    R1,JFCB+68              GET FILE SEQ FROM JFCB
         CVD   R1,DBLWD                CONVERT TO PACKED
         ED    PRTFILSQ,DBLWD+6        EDIT FILE SEQ TO PRINT
         MVC   PRTYPE,TYPE             RECFM TO PRINT
         LH    R1,FSTREC               GET 1ST OR MAX BLOCK SIZE
         CVD   R1,DBLWD                CONVERT TO PACKED
         MVC   PRTFST,=X'4020206B202020' EDIT WORD
         ED    PRTFST,DBLWD+5          EDIT BLOCK SIZE
         MVC   PRTNBR,=X'402020206B2020206B202021' EDIT WORD
         ED    PRTNBR,FILERECS         EDIT NBR BLOCKS READ
         PUT   PRINT,PRTREC            PRINT THE LINE
         L     R1,NBRFILS              GET NBR FILES TO COPY
         BCTR  R1,R0                   DEDUCT 1
         ST    R1,NBRFILS              SAVE NBR REMAINING
         LTR   R1,R1                   ANY FILES LEFT TO COPY
         BZ    EOJ                     NO, END OF JOB
         CLOSE (TAPE,LEAVE) CLOSE      INPUT, BUT DON'T REWIND
         CLOSE (OUT,LEAVE)             CLOSE OUTPUT BUT DON'T REWIND
         B     OPEN                    GO OPEN FOR NEXT FILE COPY
EOJ      EQU   *                       *** END OF JOB ***
         CLOSE (TAPE,,OUT,,PRINT)      CLOSE FILES
         L     R13,4(R13)              GET CALLER'S SAVE POINTER
         LM    R14,R12,12(R13)         RESTORE HIS REGS
         SR    R15,R15                 CLEAR RETURN CODE
         BR    R14                     RETURN TO CALLER
*
*
*
DBLWD    DS    D
NBRFILS  DC    F'32000'                DEFAULT NBR FILES TO COPY
FILES    DC    CL4'0000'               NBR FILES FROM PARM FIELD
NUMCK    DC    CL4'0000'               NUMERIC CHECK AREA
ZEROS    DC    CL4'0000'               ZEROS FOR NUMERIC CHECK
VOLSW    DC    X'00'                   1=VOLUME PROCESSING FINISHED
TYPE     DS    CL1
POSV     DS    CL1                     POSSIBLE V-FORMAT
FSTREC   DS    H
SECREC   DS    H
VMAX     DS    H
FILERECS DC    PL5'0'
PRTREC   DS    0CL60
PCC      DC    C' '
         DC    CL6'INVOL='
PRTVOL   DS    CL6
         DC    CL9', OUTVOL='
PRTOVOL  DS    CL6
         DC    CL7', FILE='
PRTFILSQ DS    CL4
         DC    CL12', NBR RECDS='
PRTNBR   DS    CL12
         DC    CL8'RECFM='
PRTYPE   DS    CL1
         DC    CL10', BLKSIZE='
PRTFST   DS    CL7
         DC    CL60' '
EXLST    DS    0F                      DCB EXIT LIST FOR INPUT
         DC    X'87'                   RDJFCB EXIT, LAST ENTRY
         DC    AL3(JFCB)               WHERE TO READ THE JFCB
JFCB     DS    CL176                   AREA TO HOPLD JFCB
EXLST2   DS    0F                      DCB EXIT LIST FOR OUTPUT
         DC    X'87'                   RDJFCBEXIT, LAST ENTRY
         DC    AL3(JFCB2)              WHERE TO READ THE JFCB
JFCB2    DS    CL176                   AREA TO HOLD JFCB
PRINT    DCB   DSORG=PS,MACRF=PM,RECFM=FB,LRECL=133,DDNAME=PRINT1
TAPE     DCB   DSORG=PS,MACRF=GL,DDNAME=INPUT1,EODAD=ENDFILE,RECFM=U,  X
               BLKSIZE=32760,EXLST=EXLST
OUT      DCB   DSORG=PS,MACRF=PM,DDNAME=OUTPUT1,RECFM=U,               X
               BLKSIZE=32760,EXLST=EXLST2
         END
