***********************************************************************
* NOTE: THE MODNAME FIELD CONTAINS THE NAME OF THE MODULE TO BE       *
*       ACCESSED FROM THE LIBRARY POINTED TO BY THE //LPALIB DD       *
***********************************************************************
*                       SAMPLE BINDER PROGRAM                         *
*                                                                     *
*  EXAMPLE APPLICATION WHICH INCLUDES A MODULE AND PRINTS ITS ESD     *
*  RECORDS USING THE BINDER CALL INTERFACE FUNCTIONS INCLUDE, GETN    *
*  AND GETE.                                                          *
*                                                                     *
*  NOTE: MANY MACRO PARAMETERS REQUIRE VARIABLE LENGTH CHARACTER      *
*        STRINGS. TO THE BINDER, A VARIABLE LENGTH STRING CONSISTS OF *
*        A HALFWORD LENGTH FOLLOWED BY A BYTE STRING OF THE DESIGNATED*
*        LENGTH. THE HALFWORD LENGTH DOES NOT INCLUDE THE TWO BYTES   *
*        FOR THE LENGTH FIELD ITSELF.                                 *
***********************************************************************
***********************************************************************
*                       PROGRAM INITIALIZATION                        *
***********************************************************************
***********************************************************************
* 1. ENTRY POINT LINKAGE. THIS IS STANDARD MVS ENTRY POINT LINKAGE.   *
*    REGISTER 12 IS SAVED IN THE MESSAGE EXIT SPECIFICATION SO THAT   *
*    THE EXIT ROUTINE CAN OBTAIN ADDRESSABILITY TO ITS OWN CODE AND   *
*    DATA.                                                            *
***********************************************************************
BAGETE   CSECT
BAGETE   AMODE 31
BAGETE   RMODE 24
         PRINT GEN
         SAVE  (14,12)
         BASR  R12,0              GET 31-BIT BASE EVEN IN 24-BIT MODE
         USING *,R12
         ST    R12,MESSAGE+4      SAVE PROGRAM BASE FOR MESSAGE EXIT
         LA    R15,SAVE           POINT TO MY SAVE AREA
         ST    R13,SAVE+4         SET LOWER SAVE AREA POINTER
         ST    R15,8(,13)         SET HIGHER SAVE AREA POINTER
         LR    R13,R15            NOW R13 POINTS TO MY SAVE AREA
         MVC   FREEBFR,ZERO       NO BUFFERS TO FREEBUF YET
         MVC   CLSDCB,ZERO        NO DCB TO CLOSE YET
         MVC   ENDDLG,ZERO        NO DIALOG TO END YET
***********************************************************************
* 2. OPEN OUTPUT DATA SET WHICH WILL CONTAIN THE ESD RECORDS.         *
***********************************************************************
         OPEN  (MYDCB,OUTPUT)     OPEN OUTPUT DATA SET
         LTR   R15,R15            SUCCESSFUL?
         BNZ   ERREXIT            EXIT IF NOT
         MVC   CLSDCB,FOUR        WE MUST CLOSE OUR DCB ON EXIT
***********************************************************************
* 3. OBTAIN AND INITIALIZE BINDER BUFFERS. THESE SPECIFICATIONS FOR   *
*    THE IEWBUFF MACRO OBTAIN STORAGE FOR THE ESD AND NAMES BUFFERS,  *
*    THEN INITIALIZE THEM. MAPPING DSECTS FOR THE BUFFERS ARE PROVIDED*
*    AT THE END OF THE PROGRAM.                                       *
***********************************************************************
         IEWBUFF FUNC=GETBUF,TYPE=ESD
         IEWBUFF FUNC=GETBUF,TYPE=NAME
         IEWBUFF FUNC=INITBUF,TYPE=ESD
         IEWBUFF FUNC=INITBUF,TYPE=NAME
         MVC   FREEBFR,FOUR       WE MUST FREEBUF OUR BUFFERS ON EXIT
***********************************************************************
* 4. START DIALOG, SPECIFYING LISTS. THE STARTD CALL ESTABLISHES A    *
*    DIALOG WITH THE BINDER. IT IS ALWAYS REQUIRED AND SETS THE DIALOG*
*    TOKEN FOR USE IN SUBSEQUENT BINDER CALLS. THE DIALOG TOKEN SHOULD*
*    BE INITIALIZED TO A DOUBLEWORD OF ZERO BEFORE ITS FIRST USAGE.   *
*    IN THIS EXAMPLE, ALL THREE LIST PARAMETERS ARE USED:             *
*    A. FILES PERMITS US TO ASSIGN A DDNAME TO THE BINDER'S PRINT FILE*
*       NOTE THAT WHEN USING THE BINDER API, ANY REQUIRED BINDER FILES*
*       (THOSE WHOSE DDNAMES DO NOT APPEAR ON BINDER CONTROL STATE-   *
*       MENTS OR AS MACRO PARAMETERS) MUST HAVE DDNAMES ASSIGNED IN   *
*       THIS WAY.                                                     *
*    B. EXITS PERMITS US TO SPECIFY A MESSAGE EXIT ROUTINE WHICH REC- *
*       EIVES CONTROL, IN THIS CASE, IF THE MESSAGE SEVERITY IS       *
*       GREATER THAN ZERO. THE EXIT ROUTINE APPEARS AT THE END OF THE *
*       PROGRAM.                                                      *
*    C. OPTIONS ALLOW US TO SPECIFY ONE OR MORE OPTIONS WHICH WILL    *
*       APPLY THROUGHOUT THE DIALOG. IN THIS EXAMPLE, OPTION TERM IS  *
*       SET TO Y.                                                     *
***********************************************************************
         MVC   DTOKEN,DZERO       CLEAR DIALOG TOKEN
         IEWBIND FUNC=STARTD,                                          C    C
               RETCODE=RETCODE,                                        C    C
               RSNCODE=RSNCODE,                                        C    C
               DIALOG=DTOKEN,                                          C    C
               FILES=FILELIST,                                         C    C
               EXITS=EXITLIST,                                         C    C
               OPTIONS=OPTLIST,                                        C    C
               VERSION=3
         CLC   RSNCODE,ZERO       CHECK THE REASON CODE
         BNE   ERREXIT            EXIT IF NOT ZERO
         MVC   ENDDLG,FOUR        WE MUST ENDDIALOG ON EXIT
***********************************************************************
* 5. CREATE A WORKMOD WITH INTENT ACCESS. THIS LOGIC CREATES A BINDER *
*    WORKMOD WITH INTENT=ACCESS. THE DIALOG TOKEN, DTOKEN, IS A REQ-  *
*    UIRED INPUT PARAMETER. THE WORKMOD TOKEN SHOULD BE INITIALIZED TO*
*    A DOUBLEWORD OF ZERO PRIOR TO THE CREATEW CALL.                  *
***********************************************************************
         MVC   WKTOKEN,DZERO      CLEAR WORKMOD TOKEN
         IEWBIND FUNC=CREATEW,                                         C    C
               RETCODE=RETCODE,                                        C    C
               RSNCODE=RSNCODE,                                        C    C
               WORKMOD=WKTOKEN,                                        C    C
               DIALOG=DTOKEN,                                          C    C
               INTENT=ACCESS,                                          C    C
               VERSION=3
         CLC   RSNCODE,ZERO       CHECK THE REASON CODE
         BNE   ERREXIT            EXIT IF NOT ZERO
***********************************************************************
* 6. SET THE LIST OPTION TO ALL. SETO IS USED TO SET THE LIST OPTION  *
*    TO ALL. SINCE THE WORKMOD TOKEN IS PROVIDED ON THE MACRO, LIST IS*
*    SET AT THE WORKMOD LEVEL AND IS VALID ONLY UNTIL THE WORKMOD IS  *
*    RESET.                                                           *
***********************************************************************
         IEWBIND FUNC=SETO,                                            C    C
               RETCODE=RETCODE,                                        C    C
               RSNCODE=RSNCODE,                                        C    C
               WORKMOD=WKTOKEN,                                        C    C
               OPTION=LIST,                                            C    C
               OPTVAL=ALL,                                             C    C
               VERSION=3
         CLC   RSNCODE,ZERO       CHECK THE REASON CODE
         BNE   ERREXIT            EXIT IF NOT ZERO
***********************************************************************
*                       MAIN PROGRAM                                  *
***********************************************************************
***********************************************************************
* 7. INCLUDE A MODULE (IFG0198N). THIS STEP INCLUDES MEMBER IFG0198N  *
*    FROM LIBRARY LPALIB, USING DDNAME AND MEMBER TO IDENTIFY THE     *
*    LIBRARY AND MEMBER TO BE INCLUDED.                               *
***********************************************************************
         IEWBIND FUNC=INCLUDE,                                         C    C
               RETCODE=RETCODE,                                        C    C
               RSNCODE=RSNCODE,                                        C    C
               WORKMOD=WKTOKEN,                                        C    C
               INTYPE=NAME,                                            C    C
               DDNAME=INCLLIB,                                         C    C
               MEMBER=MODNAME,                                         C    C
               VERSION=3
         CLC   RSNCODE,ZERO       CHECK THE REASON CODE
         BNE   ERREXIT            EXIT IF NOT ZERO
***********************************************************************
* 8. GET ALL SECTION NAMES FROM WORKMOD. THE GETN CALL RETRIEVES FROM *
*    THE WORKMOD THE NAMES OF ALL SECTIONS IN MODULE IFG0198N. NAMES  *
*    ARE RETURNED IN THE NAMES BUFFER, IEWBBNL, AND COUNTN IS SET TO  *
*    THE NUMBER OF NAMES RETURNED. TCOUNT IS SET TO THE TOTAL NUMBER  *
*    OF NAMES IN THE MODULE, REGARDLESS OF THE SIZE OF THE BUFFER. FOR*
*    THIS EXAMPLE, THE TWO COUNTS SHOULD BE THE SAME.                 *
*    A RETURN CODE OF 4 INDICATES THAT ALL NAMES HAVE BEEN RETURNED IN*
*    THE BUFFER AND THAT ADDITIONAL GETN CALLS ARE UNNECESSARY.       *
***********************************************************************
         MVC   CURSORN,ZERO
         IEWBIND FUNC=GETN,                                            C    C
               RETCODE=RETCODE,                                        C    C
               RSNCODE=RSNCODE,                                        C    C
               WORKMOD=WKTOKEN,                                        C    C
               AREA=IEWBBNL,                                           C    C
               CURSOR=CURSORN,                                         C    C
               COUNT=COUNTN,                                           C    C
               TCOUNT=TCOUNT,                                          C    C
               NTYPE=S,                                                C    C
               VERSION=3
         CLC   RSNCODE,ZERO
         BE    GETNOKAY
         CLC   RETCODE,FOUR       DO WE HAVE ALL THE NAMES
         BNE   ERREXIT
***********************************************************************
* 9. GET ESD DATA FOR EACH NAME RETURNED BY GETN. FOR EACH NAME RET-  *
*    URNED IN THE NAMES BUFFER, THE PROGRAM ISSUES ONE GETD CALL TO   *
*    OBTAIN THE ESD DATA. IF A LARGE MODULE HAD BEEN PROCESSED, BOTH  *
*    THE GETN AND GETD CALLS WOULD HAVE BEEN PROCESSED IN A LOOP TO   *
*    ACCOMMODATE THE POSSIBILITY THAT THERE ARE MORE NAMES OR ESD     *
*    RECORDS THAN COULD BE OBTAINED IN A SINGLE BUFFER. THIS EXAMPLE, *
*    HOWEVER, ASSUMES THAT ALL NAMES OR ESD ENTRIES CAN BE RETURNED IN*
*    A SINGLE GETD CALL.                                              *
*    ASSUMING THAT ANY ESD ENTRIES WERE RETURNED FOR THE DESIGNATED   *
*    SECTION, THE PROGRAM SCANS THROUGH THE BUFFER AND WRITES EACH ESD*
*    RECORD TO THE OUTPUT FILE DESIGNATED BY DDNAME MYDDN. IT IS POSS-*
*    IBLE, HOWEVER, THAT THE ITEM DOES NOT EXIST AND THAT THE NAMED   *
*    SECTION MUST BE BYPASSED.                                        *
***********************************************************************
GETNOKAY L     R5,COUNTN            NUMBER OF SECTIONS
LOOP1    L     R3,BNL_NAME_PTR      EXTRACT SECTION NAME
         LH    R2,BNL_NAME_CHARS
         STH   R2,SECTION
         LA    R4,SECTION
         BCTR  R2,0
         EX    R2,MOVESEC
         MVC   CURSORD,ZERO         RESET CURSOR
         IEWBIND FUNC=GETD,                                            C    C
               RETCODE=RETCODE,                                        C    C
               RSNCODE=RSNCODE,                                        C    C
               WORKMOD=WKTOKEN,                                        C    C
               CLASS=B_ESD,                                            C    C
               SECTION=SECTION,                                        C    C
               AREA=IEWBESD,                                           C    C
               CURSOR=CURSORD,                                         C    C
               COUNT=COUNTD,                                           C    C
               VERSION=3
         CLC   RSNCODE,ZERO
         BE    GETDOKAY
         CLC   RETCODE,FOUR         LAST BUFFER
         BE    GETDOKAY
         CLC   RETCODE,EIGHT        NO DATA FOR ITEM
         BNE   ERREXIT
GETDOKAY L     R4,COUNTD            NUMBER OF ESD ENTRIES IN BUFFER
         LTR   R4,R4                SKIP EMPTY SECTION
         BZ    NEXTSECT
         LA    R7,ESDH_END          FIRST RECORD IN ESD BUFFER
LOOP2    PUT   MYDCB,(R7)           WRITE ESD TO OUTPUT DATA SET
         A     R7,ESDH_ENTRY_LENG   MOVE TO NEXT ESD IN THIS SECTION
         BCT   R4,LOOP2
NEXTSECT A     R9,BNLH_ENTRY_LENG   MOVE TO NEXT SECTION NAME
         BCT   R5,LOOP1
***********************************************************************
*                       END OF DATA - FINISH UP                       *
***********************************************************************
***********************************************************************
* 10. DONE PROCESSING - DELETE WORKMOD. DELETEW REMOVES THE WORKMOD   *
*     FROM BINDER STORAGE. PROTECT=YES, THE DEFAULT, MERELY INDICATES *
*     THAT THE DELETE SHOULD FAIL IF THE WORKMOD HAS BEEN ALTERED BY  *
*     THE DIALOG. SINCE INTENT=ACCESS, NO ALTERATION WAS POSSIBLE, AND*
*     PROTECT=YES IS INEFFECTIVE.                                     *
***********************************************************************
         IEWBIND FUNC=DELETEW,                                         C    C
               RETCODE=RETCODE,                                        C    C
               RSNCODE=RSNCODE,                                        C    C
               WORKMOD=WKTOKEN,                                        C    C
               PROTECT=YES,                                            C    C
               VERSION=3
         CLC   RSNCODE,ZERO
         BNE   ERREXIT
***********************************************************************
* 11. END DIALOG. ENDD ENDS THE DIALOG BETWEEN THE PROGRAM AND THE    *
*     BINDER, RELEASING ANY REMAINING RESOURCES, CLOSING ALL FILES,   *
*     AND RESETTING THE DIALOG TOKEN TO THE NULL VALUE.               *
***********************************************************************
         IEWBIND FUNC=ENDD,                                            C    C
               RETCODE=RETCODE,                                        C    C
               RSNCODE=RSNCODE,                                        C    C
               DIALOG=DTOKEN,                                          C    C
               VERSION=3
         CLC   RSNCODE,ZERO
         BNE   ERREXIT
***********************************************************************
* 12. FREEBUF (RELEASE) OUR BUFFER STORAGE. A CALL TO IEWBUFF WITH    *
*     FUNC=FREEBUF FREES THE NAME AND ESD BUFFERS PREVIOUSLY OBTAINED *
*     BY IEWBUFF.                                                     *
***********************************************************************
FREEBUFS IEWBUFF FUNC=FREEBUF,TYPE=ESD
         IEWBUFF FUNC=FREEBUF,TYPE=NAME
***********************************************************************
* 13. CLOSE OUTPUT DATASET. ONCE THE INTENDED TASK IS COMPLETED, THE  *
*     PROGRAM CLOSES THE OUTPUT FILE AND RELEASES ITS DCB STORAGE.    *
*     THIS ACTION IS UNRELATED TO ANY BINDER ACTIVITY.                *
***********************************************************************
CLOSEDCB CLOSE (MYDCB)
         FREEPOOL MYDCB
***********************************************************************
* 14. RETURN TO OPERATING SYSTEM. THIS LOGIC REPRESENTS STANDARD MVS  *
*     RETURN LINKAGE TO THE OPERATING SYSTEM.                         *
*     NOTE THAT AN ERROR IN THE PROGRAM MAY CAUSE CONTROL TO BE PASSED*
*     TO THE ERREXIT LABEL, AT WHICH POINT CLEAN-UP PROCESSING TAKES  *
*     PLACE. THREE CLEAN-UP ITEMS ARE ACCOMPLISHED HERE:              *
*     A. IF THE NAME AND ESD BUFFERS WERE OBTAINED PREVIOUSLY THROUGH *
*        IEWBUFF, THEY ARE RELEASED HERE. THE IEWBUFF MACRO WITH THE  *
*        FINC=FREEBUF IS INVOKED TO ACCOMPLISH THIS.                  *
*     B. IF THE BINDER DIALOG IS OUTSTANDING (THAT IS, IF THE STARTD  *
*        API WAS INVOKED PREVIOUSLY), THEN IT IS ENDED HERE. NOTE THAT*
*        THE WORKMOD IS DELETED WHEN THE DIALOG IS ENDED.             *
*     C. IF THE OUTPUT DCB IS OPEN, IT IS CLOSED AND ITS STORAGE IS   *
*        RELEASED.                                                    *
***********************************************************************
NORMEXIT LA    R15,0              SET A REASON CODE OF ZERO
         B     EXIT
***********************************************************************
* 15. ERROR EXIT.                                        *
***********************************************************************
ERREXIT  CLC   FREEBFR,FOUR       DO WE NEED TO FREEBUF OUR BUFFERS?
         BNE   CHECKDLG
         IEWBUFF FUNC=FREEBUF,TYPE=ESD
         IEWBUFF FUNC=FREEBUF,TYPE=NAME
CHECKDLG CLC   ENDDLG,FOUR        DO WE NEED TO END THE DIALOG?
         BNE   CHECKDCB
***********************************************************************
*        ENDING THE DIALOG ALSO DELETES THE WORKMOD                   *
***********************************************************************
         IEWBIND FUNC=ENDD,                                            C    C
               RETCODE=RETCODE,                                        C    C
               RSNCODE=RSNCODE,                                        C    C
               DIALOG=DTOKEN,                                          C    C
               VERSION=3
CHECKDCB CLC   CLSDCB,FOUR        DO WE NEED TO CLOSE AND FREE OUR DCB?
         BNE   SETRSN
         CLOSE (MYDCB)
         FREEPOOL MYDCB
SETRSN   L     R15,RSNCODE
EXIT     L     R13,SAVE+4
         RETURN (14,12),RC=(15)
***********************************************************************
*                       PROGRAM CONSTANTS                             *
***********************************************************************
DZERO    DC    2F'0'
ZERO     DC    F'0'
FOUR     DC    F'4'
EIGHT    DC    F'8'
MOVESEC  MVC   2(0,R4),0(R3)
***********************************************************************
* VARIABLE LENGTH STRING CONSTANTS USED AS PARAMETERS TO THE BINDER   *
* MACROS CONSIST OF A HALFWORD LENGTH FOLLOWED BY A TEXT STRING OF THE*
* SPECIFIED LENGTH.                                                   *
***********************************************************************
B_ESD    DC    H'5',C'B_ESD'      CLASS NAME
ALL      DC    H'3',C'ALL'        LIST OPTION VALUE
INCLLIB  DC    H'6',C'LPALIB'     INCLUDE LIBRARY
LIST     DC    H'4',C'LIST'       LIST OPTION KEYWORD
MODNAME  DC    H'8',C'CEN300  '   MEMBER NAME
TERM     DC    H'4',C'TERM'       TERM OPTION KEYWORD
Y        DC    H'1',C'Y'          TERM OPTION VALUE
***********************************************************************
* STARTD LIST SPECIFICATIONS. THE STARTD FUNCTION CALL SPECIFIED ALL  *
* THREE TYPES OF LISTS: FILES, EXITS, AND OPTIONS. EACH OF THOSE LIST *
* PARAMETERS IS DEFINED BELOW. ALTHOUGH EACH LIST CONTAINS ONLY ONE   *
* ENTRY HERE, ADDITIONAL ENTRIES COULD HAVE BEEN SPECIFIED BY CHANGING*
* THE FULLWORD COUNT AND ADDING ANOTHER THREE-ITEM SPECIFICATION AT   *
* THE END OF THE LIST.                                                *
***********************************************************************
FILELIST DS    0F                 DDNAME SPECIFICATIONS
         DC    F'1'               NUMBER OF LIST ENTRIES
         DC    CL8'PRINT',F'8',A(PRINTX) ASSIGN PRINT FILE DDNAME
PRINTX   DC    CL8'SYSPRINT'      THE DDNAME
OPTLIST  DS    0F                 GLOBAL OPTIONS SPECIFICATIONS
         DC    F'1'               NUMBER OF LIST ENTRIES
         DC    CL8'TERM',F'1',A(YX) SET TERM OPTION
YX       DC    C'Y'               TERM OPTION VALUE
EXITLIST DS    0F                 USER EXIT SPECIFICATIONS
         DC    F'1'               NUMBER OF LIST ENTRIES
         DC    CL8'MESSAGE',F'12',A(MESSAGE) SPECIFY MESSAGE EXIT
MESSAGE  DC    A(MSGEXIT)         EXIT ROUTINE ENTRY POINT
         DC    AL4(0)             BASE ADDRESS FOR EXIT ROUTINE
         DC    A(FOUR)            TAKE EXIT FOR SEVERITY >= 4
***********************************************************************
*                       WORKING STORAGE                               *
***********************************************************************
SAVE     DS    18F                REGISTER SAVE AREA
SAVE2    DS    18F                ANOTHER FOR THE EXIT ROUTINE
SAVE13   DS    F                  REGISTER 13 SAVE
COUNTD   DS    F                  NUMBER OF ESD RECORDS RETURNED
COUNTN   DS    F                  NUMBER OF SECTION NAMES
CURSORD  DS    F                  CURSOR VALUE FOR GETD CALL
CURSORN  DS    F                  CURSOR VALUE FOR GETN CALL
DCB@     DS    F                  DCB FOR OUTPUT FILE
DTOKEN   DS    CL8                DIALOG TOKEN
RETCODE  DS    F                  GENERAL RETURN CODE
RSNCODE  DS    CL4                GENERAL REASON CODE
SECTION  DS    H,CL8              SECTION NAME FOR GETD
TCOUNT   DS    F                  TOTAL NUMBER OF SECTIONS
WKTOKEN  DS    CL8                WORKMOD TOKEN
MSG      DC    80C'0'             PUT MESSAGE BUFFER
FREEBFR  DS    F                  INDICATOR FOR FREEBUFFING OUR BUFER
*                                 ON EXIT, IF THEY WERE GETBUFFED.
CLSDCB   DS    F                     INDICATOR FOR CLOSING OUR DCB
ENDDLG   DS    F                  INDICATOR FOR ENDING THE DIALOG
***********************************************************************
* DCB FOR OUTPUT FILE. THIS DCB IS USED BY THIS PROGRAM ONLY. IT IS   *
* NOT SHARED OR USED BY THE BINDER IN ANY WAY.                        *
***********************************************************************
MYDCB    DCB   DSORG=PS,MACRF=PM,RECFM=F,LRECL=80,DDNAME=MYDDN
***********************************************************************
* NAMES AND ESD BUFFER MAPPINGS. NOTE THAT THE BUFFER VERSION MUST    *
* MATCH THE VERSION OF THE GETN AND THE GETD BINDER API'S. THE MAPBUF *
* FUNCTION OF THE IEWBUFF MACRO PROVIDES DSECT MAPS FOR BOTH THE ESD  *
* AND THE NAMES BUFFERS. REGISTERS 6 AND 7 ARE DEDICATED AS BASE REG- *
* ISTERS FOR THE ESD BUFFER HEADER AND ENTRIES, RESPECTIVELY. SIMIL-  *
* ARLY, REGISTERS 8 AND 9 ARE DEDICATED TO THE NAMES BUFFER.          *
* NOTE THAT YOU MUST CODE THE IEWBUFF MACRO WITHIN A CSECT. ALSO NOTE *
* THAT THE VERSION PARAMETER IN IEWBUFF MUST MATCH THE VALUE OF THE   *
* VERSION PARAMETER IN THE GETN AND GETD BINDER API'S.                *
***********************************************************************
         IEWBUFF FUNC=MAPBUF,TYPE=ESD,SIZE=50,                         C    C
               HEADREG=6,ENTRYREG=7,VERSION=3
         IEWBUFF FUNC=MAPBUF,TYPE=NAME,SIZE=50,                        C    C
               HEADREG=8,ENTRYREG=9,VERSION=3
         LTORG
***********************************************************************
* MESSAGE EXIT ROUTINE. THIS ROUTINE MERELY PRINTS OUT A MESSAGE AS AN*
* EXAMPLE OF HOW THE PRINT EXIT COULD BE USED, NOT HOW IT SHOULD BE   *
* USED.  THE MESSAGE EXIT ROUTINE RECEIVES CONTROL, IN THIS EXAMPLE,  *
* ANY TIME A MESSAGE IS ISSUED BY THE BINDER WITH A SEVERITY OF FOUR  *
* OR GREATER. THIS ROUTINE RECEIVES CONTROL IN THE BINDER'S AMODE(31).*
* IT MUST PROVIDE CAPPING CODE TO SWITCH TO AMODE(24) IF NECESSARY,   *
* THEN BACK TO THE BINDER'S AMODE(31) BEFORE RETURNING. REFER TO      *
* OS/390 MVS ASSEMBLER SERVICES GUIDE FOR A DISCUSSION OF CAPPING.    *
* THE EXIT ROUTINE IS COPYING THE MESSAGE FROM THE BINDER'S MESSAGE   *
* BUFFER TO THE OUTPUT FILE. IT COULD HAVE PREVENTED THE BINDER FROM  *
* ISSUING THE MESSAGE BY RETURNING A 4 IN REGISTER 15.                *
***********************************************************************
MSGEXIT  SAVE  (14,12)
         L     R12,0(,R1)         GET ADDRESS OF USER DATA
         L     R12,0(,R12)        GET USER DATA(PGM BASE REGISTER)
         L     R4,28(,R1)         GET ADDRESS OF EXIT RETURN CODE
         XC    0(4,R4),0(R4)      SET EXIT RETURN CODE TO ZERO
         L     R3,4(,R1)          GET ADDRESS OF ADDRESS OF MSG BUFFER
         L     R3,0(,R3)          GET ADDRESS OF MESSAGE BUFFER
         MVC   MSG(80),0(R3)      MOVE THE MESSAGE TO THE BUFFER
         LA    R3,MSG
         ST    R13,SAVE13         SAVE INPUT SAVE AREA ADDRESS
         LA    R13,SAVE2          SAVE AREA FOR PUT
         PUT   MYDCB,(R3)         WRITE MESSAGE TO DATA SET
         L     R13,SAVE13         RESTORE SAVE AREA REGISTER
         RETURN (14,12)           RETURN TO BINDER
***********************************************************************
* REGISTER EQUATES                                                    *
***********************************************************************
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
