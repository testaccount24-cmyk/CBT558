
Hi Sam,

Here is a bit of information about a few of the more interesting
(I think) things I sent:

1) EXCHANGE is a program we use to help install maintenance when
the libraries we are installing are used by so many things that
it is difficult to get them free enough to permit renaming them.
The EXCHANGE program requires that both datasets are on the same
physical DASD volume.  It reads the Format 1 DSCB's for each
dataset into memory, switches the extent fields, and writes them
back.  On termination, the first dataset points to the second
one's location and vice-versa.  There are members in the ASM, JCL,
INSTRUCT, and MEMORY libraries for this program.

2) ALIAS is a program I use to help when that user calls you for
help, but when you try to access his data set you get a security
violation.  You could use CHRDUMP to look at the file, but that is
a bit clunky when you want to read it.  ALIAS locates the target
dataset via the catalog, dynamically allocates a dataset on the
same volume, then reads in the Format 1 DSCB's for both files.  It
copies the extents from the target file into the extents for the
newly allocated dataset and rewrites it.  Result is that you can
now access the new file and so can the original owner, since the
VTOC now sees both datasets as occupying the same position.  With
SMS, this process can fail, since SMS will not guarantee where a
newly allocated dataset will reside.  Also, it is necessary to
reset the ALIAS dataset to its original extents and then delete
for things to work properly afterward (you are given instructions
for this).  If you should delete it before resetting, the extents
may be given back to the freespace chain.  If you leave it as-is,
space management tools get unhappy when they see two datasets on
the same extents, as they consider it an error.  There are members
in the ASM and JCL libraries for this program.  It is really
intended to be used as a TSO command, though.

3) RENSCR: This utility was written years ago to provide a means
of renaming and scratching members of a PDS that cannot easily be
freed of allocations in the system.  There are members in the ASM,
JCL, and INSTRUCT libraries for this program.

4) ALLOCDYN:  This subroutine allows the caller to allocate files
dynamically.  A wide range of JCL parameters are supported.  The
caller fills in a parameter area and calls the subroutine to
cause file allocation.  The subroutine is callable from COBOL and
assembler.  The source program is in the ASM library.  In INSTRUCT,
the members are ALOCDYN1 and ALOCDYN2, and the COBOL test
programs are CALLDYNA and CALLDYN2.

5) CHRDUMP: This program is designed to be run as a TSO command,
but can also run in batch.  It permits the user to specify a DASD
volume and data set name, and/or cylinder-head-record address and
subsequently read the data on the screen in count-key-data hex
and character format.  Options are available to write the data to
an external file, modify and update disk records, locate datasets
via the catalog, scan the allocated area for strings, and other
things.  I use this fairly often to see exactly what is on disk,
or when I need to circumvent security.  See members in the ASM,
JCL, INSTRUCT, and CLIST libraries for more information.

6) EXCPIO: a subroutine that uses EXCP to access DASD via control
parameters specified by the calling program.  This can be used
as-is, or can be useful to cannibalize for other programs.  The
ASM and INSTRUCT libraries contain more information.

7) PRTPCH: This is an unsophisticated program that allows the
user to print PDS members by specifying their names in a control
card file.  Several options are available.  I find it handy. See
members in the ASM, JCL, and INSTRUCT libraries.

8) READDIR and READMEM: these are subroutines callable from COBOL
or assembler that permit the caller to read the directory and
members of a PDS by sending the member name and a command code.
Nice when you want a program to scan a PDS for some reason.  See
the ASM, and INSTRUCT libraries.

9) READLMOD: this subroutine, callable from assembler, reads a
load module library (PDS or PDSE) using the IBM macros IEWBIND
and IEWBUFF.  This makes it easy to read the text, ESD's, RLD's,
and other elements of a load module with little effort.  Source
code is in the ASM library.  The CALLRDLM and RESOURCE programs in
the ASM library use this subroutine, and can act as samples.

10) When I used to dial in from home, I wanted to use the
JCLCHECK product, and the command !JCK was used to execute it in
TSO.  Unfortunately, the ! was interpreted in some weird way by my
PC at home, so it wouldn't work.  When I told my boss, he wrote me
an EDIT macro so that I only had to type JC.  I was so thrilled
about it that I learned to use edit macros.  JC is in the CLIST
library.

11) ASMN (assemble-and-link NCAL), ASMC (assemble and link CALL)
are in the CLIST library.  They save the PDS member being edited
and submit JCL to do the assembly and linkedit.  They saved me a
lot of time.

12) COBV, COB2, and COB3 CLISTs provided save-submit actions for
COBOL programs (VS, II, COB/390)

13) CCMP CLIST saves the current member, executes a program to
convert the square brackets in the source code to the values
needed by the compiler, writes the result to a temporary file and
submits a C compile and link using the modified source.

14) MYMEMBRS in the DATA library contains one-line descriptions
and other information about the members in the source code files.
I will try to add to this file as time permits.

Hope this will help and not cause you too much additional work.

Thanks for all your work in preparing things for submission and
maintaining the tape.

Dick
