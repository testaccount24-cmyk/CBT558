         TITLE '***** GETVSAM: VSAM ACCESS SUBROUTINE *****'
         PRINT NOGEN
GETVSAM  SVLNK R3
*
**********************************************************************
*  GENERALIZED VSAM SEQUENTIAL READ SUBROUTINE. CALLER INITIALLY     *
*  CALLS WITH A REQUEST CODE OF 'O' TO OPEN THE FILE, AND THE NAME   *
*  OF THE DATA COMPONENT OF A KSDS TO BE READ. ON SUBSEQUENT CALLS,  *
*  THE REQUEST CODE IS 'R' AND THE SECOND PARAMETER IS THE AREA TO   *
*  CONTAIN THE LOGICAL RECORD READ. THE THIRD PARAMETER IN BOTH CASES*
*  IS A ONE-BYTE ERROR RETURN CODE THAT WILL BE BLANK IF SUCCESSFUL, *
*  E IF END OF FILE, OR AN ERROR INDICATOR IF UNSUCCESSFUL.          *
*                                                                    *
*  THE CALLER'S I/O AREA IS ASSUMED TO BE LARGE ENOUGH TO CONTAIN THE*
*  LARGEST RECORD PASSED BACK.                                       *
*                                                                    *
*  AUTHOR R. THORNTON SEP 1990                                       *
**********************************************************************
*
***********************************************************************
* GET INPUT PARAMETERS FOR PROCESSING. SET RETURN CODE TO BLANK,      *
* ASSUMING CALL WILL BE SUCCESSFUL.                                   *
***********************************************************************
*
         MVC   PARMS,0(R1)             SAVE PARMS
         L     R1,PARM3                POINT TO ERROR INDICATOR
         MVI   0(R1),C' '              ASSUME NO ERROR
         L     R1,PARM1                POINT TO REQUEST CODE
         CLI   0(R1),C'O'              OPEN REQUEST?
         BE    OPEN                    YES
         CLI   0(R1),C'R'              READ REQUEST?
         BE    READ                    YES
         L     R1,PARM3                POINT TO ERROR INDICATOR
         MVI   0(R1),C'P'              INDICATE PARAMETER ERROR
***********************************************************************
*        RETURN TO CALLER                                             *
***********************************************************************
RETURN   L     R13,4(R13)              GET CALLER'S SAVE AREA ADDR
         LM    R14,R12,12(R13)         RESTORE CALLER'S REGS
         SR    R15,R15                 CLEAR RETURN CODE
         BR    R14                     RETURN TO CALLER
***********************************************************************
*        OPEN THE VSAM DATA COMPONENT FOR EXCP PROCESSING:            *
*        1) DYNAMICALLY ALLOCATE A TEMPORARY DISK WORK FILE           *
*           AND OPEN IT FOR EXCP INPUT.                               *
*        2) FIND THE VOLUME CONTAINING THE DATA COMPONENT DATASET     *
*           VIA THE CATALOG USING THE LOCATE MACRO                    *
*        3) FIND THE FIRST VOLUME CONTAINING THE DATA COMPONENT WITH  *
*           THE UCBLOOKUP ROUTINE (CVTUCBSC) POINTED TO BY THE CVT    *
*        4) POINT THE WORK FILE DEB TO THE VOLUME CONTAINING THE      *
*           DATA COMPONENT OF THE VSAM FILE                           *
*        5) LOCATE THE VTOC AND READ THE FORMAT1 AND FORMAT 3 DSCBS   *
*           FOR THE DATA COMPONENT.                                   *
*        6) SAVE THE EXTENTS AND MODIFY THE WORK FILE DEB TO POINT TO *
*           THE FIRST EXTENT.                                         *
*        ERROR RETURN CODES INCLUDE:                                  *
*         D: ERROR ATTEMPTING TO DYNAMICALLY ALLOCATE THE WORK FILE   *
*         O: ERROR OPENING THE EXCP FILE FOR THE WORK FILE            *
*         C: ERROR SEARCHING CATALOG FOR THE DATA COMPONENT DSNAME    *
*         V: UNABLE TO FIND VOLUME CONTAINING THE DATA COMPONENT      *
*         4: ERROR READING THE FORMAT 4 DSCB ON THE D.C. VOLUME       *
*         1: ERROR READING THE FORMAT 1 DSCB FOR THE DATA COMPONENT   *
*         3: ERROR READING THE FORMAT 3 DSCB FOR THE DATA COMPONENT   *
*         0: NO EXTENTS FOUND FOR THE DATA COMPONENT                  *
***********************************************************************
OPEN     CALL  DYNALLOC,(DAPARM1,DAPARM2) ALLOCATE A TEMPORARY DATASET
         CLC   RETRNCD,=C'00'          ANY ERROR?
         BE    OPENEXCP                NO
         CLC   ERRRET,=C'0410'         DSNAME IN USE?
         BNE   PRTBADA                 NO
         CLI   DDN+5,C'9'              ALREADY TRIED 9 TIMES?
         BE    PRTBADA                 YES
         IC    R9,DDN+5                NO, GET LAST BYTE OF DDNAME
         LA    R9,1(R9)                ADD 1
         STC   R9,DDN+5                UPDATE DDNAME
         B     RETDYN                  GO TRY AGAIN
PRTBADA  L     R1,PARM3                POINT TO ERROR BYTE
         MVI   0(R1),C'D'              INDICATE DYNAMIC ALLOC ERROR
         B     RETURN                  RETURN WITH ERROR
OPENEXCP OPEN  (DADCB,OUTPUT)          OPEN FILE FOR EXCP
         TM    DADCB+48,X'10'          WAS OPEN SUCCESSFUL?
         BO    READCTLG                YES
         L     R1,PARM3                POINT TO ERROR BYTE
         MVI   0(R1),C'O'              INDICATE EXCP OPEN ERROR
         B     RETURN                  RETURN WITH ERROR
READCTLG L     R1,PARM2                POINT TO DSNAME
         MVC   DATADSN,0(R1)           MOVE DSNAME OF DATA COMPONENT
         LOCATE BYDSN                  READ CATALOG FOR SPEC DSNAME
         LTR   R15,R15                 SUCCESSFUL CATALOG READ?
         BZ    GOTCAT                  YES
         L     R1,PARM3                POINT TO ERROR BYTE
         MVI   0(R1),C'C'              INDICATE CATALOG SEARCH ERROR
         B     RETURN                  RETURN WITH ERROR
GOTCAT   MVC   DATAVOL,LOCAREA+6       MOVE 1ST VOLUME SERIAL NBR
         XC    WORK100,WORK100         CLEAR FOR EACH NEW INVOCATION
VLSLOOP  L     R1,=A(PRMLST)           POINT TO PARMLIST
         L     R15,CVTPTR              POINT TO CVT
         USING CVTMAP,R15
         L     R15,CVTUCBSC            GET UCB SEARCH ROUTINE ADDR
         DROP  R15
         BALR  R14,R15                 GO SEARCH FOR UCB
         LTR   R15,R15                 FOUND UCB?
         BNZ   NOVOL                   NO
         L     R2,ADDRUCB              YES, GET THE UCB ADDRESS
         USING UCBOB,R2
         TM    UCBSTAT,UCBONLI         IS IT ONLINE?
         BZ    VLSLOOP                 NO
         CLC   UCBVOLI,DATAVOL         FOUND UCB FOR THIS VOLSER?
         BNE   VLSLOOP                 NO, CONTINUE SEARCH
         B     GOTUCB                  GO PROCESS UCB
NOVOL    L     R1,PARM3                POINT TO ERROR BYTE
         MVI   0(R1),C'V'              INDICATE VOLUME SEARCH ERROR
         B     RETURN                  RETURN WITH ERROR
GOTUCB   L     R12,DADCB+44            @ DEB FOR EXCP FILE
         SMODE KEY=0,STATE=P
         STCM  R2,7,33(R12)            CHANGE DEB UCB ADDRESS
         SMODE KEY=NZERO,STATE=P
         SR    R10,R10                 CLEAR FOR DIVIDE
         SR    R11,R11                 CLEAR FOR INSERT
         ICM   R11,3,UCBVTOC           PICK UP VTOC START TRACK
         STH   R11,VTOCCYL             SAVE VTOC CYLINDER NBR
         STH   R10,VTOCHD              SAVE VTOC HEAD NUMBER
         MVC   VTOCREC,UCBVTOC+2       VTOC BEGIN RECORD NBR
         ICM   R15,15,UCBVTOC          GET VTOC TTR0 TO R15
         DROP  R2
         MVC   BGNXTNT,VTOCADR         SET EXTENT BEGIN TO VTOC START
         MVC   ENDXTNT,VTOCADR         SET EXTENT END TO VTOC START
         MVI   XTNTS,1                 INDICATE SINGLE EXTENT
         BAL   R9,SETXTNT              GO SET DEB EXTENT
         MVI   DSCBNAME,X'04'          BUILD DSNAME FOR
         MVC   DSCBNAME+1(43),DCSBNAME   FORMAT 4 DSCB
         LA    R1,CMDCHNK              @ CCWS TO READ DSCB BY KEY
         BAL   R9,EXCP                 CALL EXCP ROUTINE
         CLI   EXCPIND,C' '            GOOD I/O?
         BNE   VOLCKID                 NO
BADVREC  L     R1,PARM3                POINT TO ERROR BYTE
         MVI   0(R1),C'4'              INDICATE FORMAT 4 READ ERROR
         B     RETURN                  RETURN WITH ERROR
VOLCKID  MVC   DSCBFMT4+44(96),DSCB    YES, SAVE FORMAT 4 DSCB
         MVC   EXTENTS,DS4VTOCE        SET EXTENTS TO VTOC EXTENTS
         MVI   XTNTS,1                 INDICATE SINGLE EXTENT
         BAL   R9,SETXTNT              SET DEB EXTENTS FOR VTOC
DSALSET  MVC   EXTENTS,DS4VTOCE        SET EXTENTS FOR VTOC
         MVI   XTNTS,1                 INDICATE SINGLE EXTENT
         BAL   R9,SETXTNT              SET UP DEB EXTENTS FOR VTOC
         MVC   SCHKYLN,=H'44'          SET SEARCH KEY = LENGTH
         LA    R1,CMDCHNK              @ CCWS TO READ RECORD 0
         BAL   R9,EXCP                 CALL EXCP ROUTINE
         CLI   EXCPIND,C' '            ANY EXCEPTIONAL CONDITION?
         BE    GOTLABEL                NO
         L     R1,PARM3                POINT TO ERROR BYTE
         MVI   0(R1),C'1'              INDICATE FORMAT 1 READ ERROR
         B     RETURN                  RETURN WITH ERROR
GOTLABEL MVC   DS1FMTID(96),RKEYDATA   MOVE DATA PORTION
         MVC   DS1DSNAM,COMMAND+4      MOVE DATASET NAME
         MVC   DS1FMTID(96),RKEYDATA   SAVE FORMAT 1 DSCB DATA
         CLC   DS1PTRDS,=XL5'00'       IS THERE A FORMAT 3?
         BE    SET1EXT                 NO
         MVC   RCOUNT(5),DS1PTRDS      YES, SET UP TO READ FORMAT 3
         IC    R15,RCOUNT+4            GET RECORD NUMBER
         BCTR  R15,0                   BACK UP 1
         STC   R15,RCOUNT+4            SET SEARCH TO PRECEDING REC
         LA    R1,CMDCHN3              @ CCWS TO READ FORMAT 3 DSCB
         BAL   R9,EXCP                 CALL EXCP ROUTINE
         CLI   EXCPIND,C' '            ANY ERROR?
         BNE   ERRFMT3                 YES
         CLC   RKEYDATA(4),=X'03030303' IS IT A FORMAT 3?
         BE    MOVE3                   YES
ERRFMT3  L     R1,PARM3                POINT TO ERROR BYTE
         MVI   0(R1),C'3'              INDICATE FORMAT 3 READ ERROR
         B     RETURN                  RETURN WITH ERROR
MOVE3    MVC   DSCBFMT3,DSCBNAME       SAVE FORMAT 3 LABEL
         MVC   EXTADNL+20(40),DS3EXT1  MOVE LAST 13 EXTENTS
         MVC   EXTADNL+60(90),DS3EXT5  MOVE LAST 13 EXTENTS
SET1EXT  MVC   EXTENTS(30),DS1EXT1     MOVE 1ST 3 EXTENTS
         MVC   XTNTS,DS1NOEPV          SET NUMBER EXTENTS
         BAL   R9,SETXTNT              SET UP EXTENTS FOR DATASET
         SR    R10,R10                 CLEAR FOR INSERT
         IC    R10,DS1NOEPV            GET NBR EXTENTS
         LA    R11,EXTENTS             POINT TO EXTENT SAVE AREA
         CLI   DS1NOEPV,0              ANY EXTENTS?
         BNE   RETURN                  YES
         L     R1,PARM3                POINT TO ERROR BYTE
         MVI   0(R1),C'0'              INDICATE NO EXTENTS ERROR
         B     RETURN                  RETURN WITH ERROR
***********************************************************************
*        LOCATE NEXT LOGICAL RECORD. IF THE CURRENT BLOCK IS EMPTY,   *
*        READ NEXT BLOCK. GET NEXT RECORD IN BLOCK AND PASS IT TO THE *
*        CALLER IN THE I/O AREA PASSED. UPDATE BLOCK POINTERS.        *
*        ERRORS POSSIBLE ARE:                                         *
*        F: CI/RDF ERROR                                              *
*        R: I/O ERROR ON READ                                         *
*        I: INVALID RDF                                               *
*        U: CI/RDF ERROR                                              *
*        N: CI/RDF ERROR                                              *
*        P: CI/RDF ERROR                                              *
*        Q: CI/RDF ERROR                                              *
***********************************************************************
READ     L     R14,CURRECD             POINT TO CURRENT RECORD
         AH    R14,VSAMCURL            POINT TO NEXT RECORD
         ST    R14,CURRECD             SAVE @ NEXT RECORD
         C     R14,VSAMDEND            ANY MORE DATA IN BLOCK?
         BL    PNTCURR                 NO, GO READ NEXT BLOCK
REREAD   LA    R1,CMDCHNR              @ CCWS TO READ NEXT BLOCK
         BAL   R9,EXCP                 CALL EXCP ROUTINE
         CLI   EXCPIND,C' '            GOOD I/O?
         BNE   EXCPRXIT                NO
         L     R1,PARM3                POINT TO ERROR BYTE
         MVI   0(R1),C'R'              INDICATE I/O ERROR ON READ
         B     RETURN                  RETURN WITH ERROR
PNTCURR  L     R14,VSAMCRDF            POINT TO CURRENT RDF
         CLI   0(R14),0                SINGLE UNSPANNED RECORD?
         BE    BACK1RDF                YES
         TM    0(R14),X'BF'            MULTIPLE UNSPANNED RECORDS?
         BZ    PNTBKSTT                YES
         L     R1,PARM3                POINT TO ERROR BYTE
         MVI   0(R1),C'I'              INDICATE INVALID RDF
         B     RETURN                  RETURN WITH ERROR
PNTBKST  MVC   CURRECD,VSAMDATA        POINT TO BLOCK START
         B     EXCPEXIT                AND EXIT
BACK1RDF SH    R14,H3                  BACK UP 1 RDF
         C     R14,VSAMLRDF            PAST LEFTMOST RDF?
         BL    REREAD                  YES, GO READ NEXT BLOCK
         ST    R14,VSAMCRDF            UPDATE CURRENT RDF ADDRESS
         CLI   0(R14),0                SINGLE UNSPANNED RECORD?
         LH    R15,1(R14)              PICK UP LENGTH
         STH   R15,VSAMCURL            SAVE RECORD LENGTH
         STH   R15,LRECL               SAVE RECORD LENGTH
         CLI   0(R14),0                SINGLE UNSPANNED RECORD?
         BE    BKUPPAIR                NO
         TM    R15,X'BF'               MULTIPLE UNSPANNED RECORDS?
         BZ    SUB1MULT                NO, TURN OFF MATCH
         L     R1,PARM3                POINT TO ERROR BYTE
         MVI   0(R1),C'U'              INDICATE INVALID RDF
         B     RETURN                  RETURN WITH ERROR
BKUPPAIR SH    R14,H3                  YES, BACK UP TO PAIRED RDF
         LH    R15,1(R14)              GET NBR SAME SIZE RECDS
         LTR   R15,R15                 VALID NUMBER?
         BNP   RETURN                  YES
         L     R1,PARM3                POINT TO ERROR BYTE
         MVI   0(R1),C'N'              INDICATE NUMBER DUP RECDS
         B     RETURN                  RETURN WITH ERROR
SUB1MULT SH    R14,H3                  BACK UP TO PAIRED RDF
CHKPRD   C     R14,VSAMLRDF            PAST LEFTMOST RDF?
         BNL   CHK8                    NO
         L     R1,PARM3                POINT TO ERROR BYTE
         MVI   0(R1),C'P'              INDICATE INVALID CI
         B     RETURN                  RETURN WITH ERROR
CHK8     CLI   0(R14),X'08'            IS IT NBR-OF-RECORDS RDF?
         BNE   GETNLFT                 YES
         L     R1,PARM3                POINT TO ERROR BYTE
         MVI   0(R1),C'Q'              INDICATE INVALID CI
         B     RETURN                  RETURN WITH ERROR
GETNLFT  LH    R15,1(R14)              GET NBR RECORDS LEFT
         LTR   R15,R15                 ANY MORE THIS SIZE?
         BZ    BACK1RDF                NO, BACK UP ONE RDF
         BCTR  R15,0                   YES, DEDUCT ONE
         STH   R15,1(R14)              UPDATE COUNT
         L     R10,PARM2               POINT TO I/O AREA
         L     R11,VSAMCURL            GET RECORD LENGTH
         L     R8,CURRECD              LENGTH CODE
         LR    R9,R11                  COPY LENGTH
         MVCL  R10,R8                  MOVE RECORD TO CALLER
         B     RETURN                  RETURN TO CALLER
***********************************************************************
*        ISSUE EXCP TO PERFORM THE OPERATION SET UP BY THE CALLER,    *
*        WHO MUST PUT THE ADDRESS OF THE CCW COMMAND CHAIN TO BE USED *
*        IN R1 BEFORE ENTRY.                                          *
*        IF END OF FILE OR END OF ALL ENTENTS IS ENCOUNTERED, THE     *
*        ERROR BYTE IS SET TO E AND RETURN IS DIRECTLY TO THE CALLER. *
*        IF I/O ERROR OCCURS, EXCPIND IS SET AND THE ROUTINE EXITS    *
*        NORMALLY.                                                    *
***********************************************************************
EXCP     ST    R9,EXCP9                SAVE RETURN ADDRESS
         ST    R1,DACCWAD              STORE COMMAND ADDRESS
REISSUE  MVI   EXCPIND,C' '            CLEAR ERROR INDICATOR
         MVC   DASRCH,RCOUNT           SEARCH ON LAST RECD READ
         EXCP  DAIOB                   READ COUNT, KEY, AND DATA
         WAIT  ECB=DAECB               AWAIT COMPLETION
         CLI   DAECB,X'7F'             GOOD READ
         BE    EXCPCHEK                YES
         MVI   LASTREAD,0              INDICATE LAST EXCP INCOMPLETE
         MVI   EXCPIND,C'E'            INDICATE END OF EXTENT RANGE
         CLI   DAECB,X'42'             IS IT EOE?
         BNE   SETXHE                  YES
         SR    R15,R15                 CLEAR FOR INSERT
         IC    R15,XTNTS               GET NBR REMAINING EXTENTS
         BCT   R15,NEWXTNT             DECREMENT NUMBER EXTENTS
         B     ENDF                    BRANCH IF NO MORE EXTENTS
NEWXTNT  MVC   EXTENTS,EXTADNL         SHIFT IN NEXT EXTENT
         STC   R15,XTNTS               UPDATE EXTENT COUNT
         BAL   R9,SETXTNT              GO SET NEW EXTENT IN DEB
         L     R1,DACCWAD              GET CCW ADDRESS
         B     REISSUE                 AND GO REISSUE COMMAND
SETXHE   MVI   EXCPIND,C'X'            INDICATE HARD I/O ERROR
         CLI   DAECB,X'41'             I/O ERROR INDICATED
         BNE   EXCPEXIT                NO
         TM    DAUNST,1                IS IT EOF RECORD
         BO    ENDF                    YES
         B     EXCPEXIT                NO
EXCPCHEK LA    R1,RDATA                POINT TO I/O AREA
         ST    R1,CURRECD              SAVE DATA RECORD ADDRESS
         ST    R1,AREAEND              SAVE AREA END ADDRESS
         MVC   VSAMDATA,CURRECD        @ DATA BLOCK START
         L     R15,AREAEND             @ END OF BLOCK +1
         ST    R15,VSAMBEND            SAVE @ END OF BLOCK +1
         SH    R15,H4                  BACK UP TO CIDF FIELD
         MVC   VSAMCIDF,0(R15)         SAVE CIDF
         LH    R14,VSAMDATL            GET DATA SIZE
         AH    R14,VSAMFREL            ADD FREE SPACE SIZE
         AH    R14,H4                  ADD FOR CIDF
         BNP   EXCPEXIT                INVALID CIDF, LEAVE NO MATCH
         CH    R14,CISIZE              TOTAL > BLOCK SIZE?
         BH    EXCPEXIT                INVALID CIDF, LEAVE NO MATCH
         LH    R15,CISIZE              GET BLOCK LENGTH
         SH    R15,VSAMFREL            DEDUCT FREE SPACE SIZE
         SH    R15,VSAMDATL            DEDUCT DATA RECORD BYTES
         SH    R15,H4                  DEDUCT CIDF SIZE
         SR    R14,R14                 CLEAR FOR DIVIDE
         LH    R1,H3                   LENGTH OF AN RDF
         DR    R14,R1                  COMPUTE NUMBER RDF'S IN BLOCK
         LTR   R14,R14                 ANY REMAINDER?
         BZ    VSMDL                   INVALID CIDF, LEAVE NO MATCH
         L     R1,PARM3                POINT TO ERROR BYTE
         MVI   0(R1),C'F'              INDICATE INVALID CIDF
         B     RETURN                  RETURN WITH ERROR
VSMDL    LH    R14,VSAMDATL            GET DATA SIZE
         LTR   R14,R14                 ANY DATA IN BLOCK?
         BZ    REISSUE                 NO, GO READ AGAIN
         A     R14,VSAMDATA            ADD @ DATA START
         ST    R14,VSAMDEND            SAVE @ DATA END +1
         AH    R14,VSAMFREL            POINT TO LEFTMOST RDF
         ST    R14,VSAMLRDF            SAVE @ LEFTMOST RDF
         L     R14,VSAMBEND            GET @ BLOCK END +1
         SH    R14,H7                  POINT TO RIGHTMOST RDF
         ST    R14,VSAMCRDF            SAVE @ CURRENT RDF
         LH    R15,1(R14)              GET RDF RECORD LENGTH
         STH   R15,VSAMCURL            SAVE CURRENT RECORD LENGTH
         STH   R15,LRECL               SAVE CURRENT RECORD LENGTH
         CLI   0(R14),0                SINGLE UNSPANNED RECORD?
         BE    SETMTCH                 YES
         TM    0(R14),X'BF'            MULTIPLE UNSPANNED RECORDS?
         BNZ   EXCPEXIT                NO, LEAVE NO MATCH
         SH    R14,H3                  BACK UP TO PAIRED RDF
         CLI   0(R14),X'08'            THIS A NUMBER-OF-RECORDS RDF?
         BNE   EXCPEXIT                NO, LEAVE NO MATCH
         LH    R15,1(R14)              PICK UP NBR RECORDS
         LTR   R15,R15                 POSITIVE NUMBER?
         BNP   EXCPEXIT                NO, LEAVE NO MATCH
         BCTR  R15,0                   DEDUCT 1
         STH   R15,1(R14)              UPDATE NBR RECORDS
         B     EXCPEXIT                AND EXIT
ENDF     L     R1,PARM3                POINT TO ERROR BYTE
         MVI   0(R1),C'E'              INDICATE END OF FILE
         B     RETURN                  RETURN WITH ERROR
EXCPEXIT L     R9,EXCP9                GET RETURN ADDRESS
         BR    R9                      EXIT
***********************************************************************
*   SET DEB EXTENTS FOR THE RANGE TO BE ACCESSED                      *
***********************************************************************
SETXTNT  L     R12,DADCB+44            @ DEB FOR INPUT1 FILE
         SMODE KEY=0,STATE=P
         MVC   38(5,R12),BGNXTNT       SET DEB START EXTENT
         MVC   42(5,R12),ENDXTNT       SET DEB END EXTENT
         SMODE KEY=NZERO,STATE=P
         MVC   RCOUNT(4),BGNXTNT       SET BEGIN SEARCH ADDRESS
         MVI   RCOUNT+4,1              BEGIN AT RECORD 1
         BR    R9                      EXIT
***********************************************************************
*        DATA AREAS                                                   *
***********************************************************************
PARMS    DS    0F                    PARAMETER ADDRESSES FROM CALLER
PARM1    DS    F                       REQUEST CODE ADDRESS
PARM2    DS    F                       FILE NAME OR I/O AREA ADDRESS
PARM3    DS    F                       ERROR BYTE ADDRESS
*
*
*
DAPARM1  DS    0F                    * 1ST PARAMETER FOR DYNALLOC *
DDN      DC    CL8'INPUT1'             DDNAME
DSNAME   DC    CL44'&&DADCB'           DATASET NAME
MEMBER   DC    XL8'00'                 MEMBER NAME
         DC    XL3'00'                 DISPOSITION:
*                                    BYTE1: 0=OLD,M=MOD,N=NEW,S=SHR
*                                    BYTE2: U=UNCATLG,C=CATLG,D=DELETE
*                                    K=KEEP; BYTE3: SAME AS BYTE2
         DC    CL8'DISK'               UNIT NAME
         DC    XL2'00'                 UNIT COUNT
         DC    XL6'00'                 VOLUME SERIAL NUMBER
         DC    XL1'00'                 LABEL TYPE:
*                                      N=NL, S=SL, B=BLP
         DC    XL2'00'                 DATASET SEQUENCE NBR (TAPE)
         DC    XL1'00'                 F: FREE=CLOSE
         DC    XL2'00'                 RETENTION PERIOD IN DAYS
         DC    XL3'00'                 RECORDING FORMAT:
*                                      BYTE1: F=FIXED, V=VARIABLE,
*                                      U=UNDEFINED; BYTE2: B=BLOCKED,
*                                      BYTE3: A=ASA CONTROL CHARACTERS
         DC    XL2'00'                 LOGICAL RECORD LENGTH
         DC    XL2'00'                 BLOCK SIZE
         DC    XL1'00'                 TAPE DENSITY: 1=1600,6=6250
         DC    XL2'00'                 BUFNO
         DC    XL2'00'                 KEY LENGTH
         DC    XL1'00'                 DATASET ORGANIZATION:
*                                      V=VSAM, P=PDS, D=DIRECT, S=SEQ
         DC    CL1'C'                  SPACE TYPE:
*                                      C=CYL, T=TRK
         DC    XL2'01'                 PRIMARY SPACE AMOUNT
         DC    XL2'00'                 SECONDARY SPACE AMOUNT
         DC    CL1'00'                 R=RLSE
         DC    XL2'00'                 NBR DIRECTORY BLOCKS
         DC    XL5'00'                 EXPIRATION DATE YYDDD
*
*
*
DAPARM2  DS    0F                      2ND PARAMETER FOR DYNALLOC
         DC    CL1'A'                  REQUEST CODE:
*                                      A=ALLOCATE A DATASET
*                                      V=VOLSER FEEDBACK
RETRNCD  DC    CL2' '                  DYNALLOC RETURN CODE
ERRRET   DC    CL4' '                  ERROR RETURN CODE
INFORET  DC    CL4' '                  INFO RETURN CODE
***********************************************************************
*        COMMON DATA AREAS                                            *
***********************************************************************
H3       DC    H'3'                    CONSTANT 3
H4       DC    H'4'                    CONSTANT 4
H7       DC    H'7'                    CONSTANT 7
VSAMCIDF DS    0A                      VSAM CIDF FOR CURRENT BLOCK
VSAMDATL DC    H'0'                    .DATA RECORD BYTES IN BLOCK
VSAMFREL DC    H'0'                    .FREE SPACE BYTES IN BLOCK
VSAMDATA DC    A(0)                    BEGINNING OF VSAM DATA BLOCK
VSAMBEND DC    A(0)                    @ END OF BLOCK +1
VSAMCURR DC    A(0)                    @ CURRENT VSAM RECORD
VSAMDEND DC    A(0)                    @ END OF DATA IN BLOCK +1
VSAMCRDF DC    A(0)                    @ CURRENT RDF
VSAMLRDF DC    A(0)                    @ OF LEFTMOST RDF
VSAMCURL DC    H'0'                    CURRENT VSAM RECORD LENGTH
*
PRMLST   DS    0F                      PARMLIST FOR CVTUCBSC
         DC    A(WORK100)                 WORK AREA ADDRESS
         DC    A(DEVCLASS)                DEVICE CLASS TYPE BYTE
         DC    XL1'80',AL3(ADDRUCB)       UCB ADDRESS RETURN FIELD
*
         DS    0D                      DOUBLEWORD ALIGN WORK100
WORK100  DC    XL100'00'               WORK AREA FOR CVTUCBSC
DEVCLASS DC    AL1(UCB3DACC)           SEARCH DEVICE TYPE
ADDRUCB  DC    A(0)                    UCB ADDR FROM IOSVSUCB
*
XRD9     DS    F                       R9 SAVE FOR EXCPREAD ROUTINE
XKY9     DS    F                       R9 SAVE FOR EXCPKEY  ROUTINE
EXCP9    DS    F                       R9 SAVE FOR EXCP ROUTINE
CURRECD  DS    A                       CURRENT DATA RECORD ADDRESS
AREAST   DC    A(RDATA)                I/O AREA ADDRESS
AREAEND  DC    A(RDATA+4096)           END OF I/O AREA ADDRESS
CLRHI    DC    X'0000FFFF'             TO CLEAR HI-ORDER BYTES OF REG
ZEROS    DC    CL8'00000000'           CONSTANT ZEROS
XZROS    DC    XL8'00'                 HEX ZEROS
POS      DC    PL3'0'                  RECORD POSITION COUNTER
RECNO    DC    PL2'0'                  RECORD NUMBER IN BLOCK
NEWRECD  DC    X'00'                   00=NEW RECORD READ
XTNTS    DC    X'00'                   NUMBER OF EXTENTS
EXTENTS  DS    0XL10                   CURRENT EXTENT
         DS    XL2
BGNXTNT  DS    XL4                     CCHHR EXTENT BEGIN
ENDXTNT  DS    XL4                     CCHHR EXTENT END
EXTADNL  DS    15XL10                  15 ADDITIONAL EXTENTS
EXCPIND  DS    XL1                     EXCP INDICATOR: BLANK=O.K.,
*                                      E=END EXTENT, X=HARD ERROR,
*                                      F=EOF RECORD
         DS    0H
VTOCADR  DS    0CL5                    VTOC CCHHR START ADDRESS
VTOCCYL  DS    H                       VTOC CYLINDER
VTOCHD   DS    H                       VTOC HEAD
VTOCREC  DS    XL1                     VTOC RECORD NUMBER
ALLCYL   DC    H'0'                    BEGIN CYLINDER
         DC    H'0'                    BEGIN HEAD
         DC    H'32767'                END CYLINDER
         DC    H'32767'                END HEAD
         DC    H'32767'                TRACKS IN EXTENT
DBLWD    DS    D                       DOUBLEWORD WORK AREA
P0       DC    P'0'                    CONSTANT 0
P1       DC    P'1'                    CONSTANT 1
P50      DC    P'50'                   CONSTANT 50
RECLEN   DS    H                       RECORD LENGTH
*
*
*
BYDSN    CAMLST NAME,DATADSN,,LOCAREA  READ CATALOG LIST
LOCAREA  DS    CL265                   CATALOG INFORMATION AREA
DATADSN  DC    CL44' '                 DSNAME FOR DATA COMPONENT
DATAVOL  DC    CL6' '                  VOLUME FOR DATA COMPONENT
BLANX    DC    CL80' '                 CONSTANT BLANKS
*
***********************************************************************
*                                                                     *
*       COMMAND CHAINS FOR EXCP                                       *
*                                                                     *
***********************************************************************
*
*
*
CMDCHNR  CCW   X'31',DASRCH,X'40',5    SEARCH FOR DESIRED RECORD
         CCW   8,*-8,0,0               TIC
         CCW   X'06',RDATA,X'20',4096  READ CKD MULTI TRK
         CCW   X'92',RCOUNT,0,8        READ NEXT COUNT RECORD M-T
*
*
*
CMDCHN3  CCW   X'31',DASRCH,X'40',5    SEARCH FOR DESIRED RECORD
         CCW   8,*-8,0,0               TIC
         CCW   X'0E',DSCBNAME,0,140    READ KEY AND DATA
*
*
*
CMDCHNK  CCW   X'39',DASRCH,X'40',4     SEARCH HOME ADDRESS EQUAL
         CCW   X'08',CMDCHNK,0,0        TIC
KSCH     CCW   X'A9',DSCBNAME,X'40',44  SEARCH KEY EQUAL FOR DSCB
         CCW   8,KSCH,0,0               TIC
         CCW   X'06',DSCB,0,96          READ DATA
DSCBNAME DC    CL44' '                  DSCB NAME TO BE FOUND
DSCB     DC    CL96                     DSCB DATA RECORD
         LTORG
***********************************************************************
*        EXCP FILE, VTOC RECORDS, INPUT DATA AREA                     *
***********************************************************************
         PRINT GEN
DAIOB    EXCPIOB CCW=CMDCHNR,DDNAME=INPUT1
         DSCBDEF FMT2=NO,FMT5=NO,FMT6=NO,DSECT=NO
         DS    0D
RCOUNT   DS    XL8                     NEXT RECORD'S COUNT
RDATA    DS    CL4096                  THIS RECORD'S DATA
         PRINT NOGEN
         CVT   DSECT=YES               GENERATE CVT DSECT
         IEFUCBOB ,                    GENERATE UCB DSECT
GETVSAM  CSECT
         END
